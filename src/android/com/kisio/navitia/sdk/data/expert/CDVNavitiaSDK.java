package com.kisio.navitia.sdk.data.expert;

import org.apache.cordova.CordovaPlugin;
import org.apache.cordova.CallbackContext;

import org.json.JSONArray;
import org.json.JSONObject;
import org.json.JSONException;

import org.joda.time.DateTime;

import com.kisio.navitia.sdk.data.expert.NavitiaSDK;
import com.kisio.navitia.sdk.data.expert.NavitiaConfiguration;
import com.kisio.navitia.sdk.data.expert.apis.AddressesApi;
import com.kisio.navitia.sdk.data.expert.apis.CalendarsApi;
import com.kisio.navitia.sdk.data.expert.apis.CommercialModesApi;
import com.kisio.navitia.sdk.data.expert.apis.CompaniesApi;
import com.kisio.navitia.sdk.data.expert.apis.ContributorsApi;
import com.kisio.navitia.sdk.data.expert.apis.CoordApi;
import com.kisio.navitia.sdk.data.expert.apis.CoordsApi;
import com.kisio.navitia.sdk.data.expert.apis.CoverageApi;
import com.kisio.navitia.sdk.data.expert.apis.DatasetsApi;
import com.kisio.navitia.sdk.data.expert.apis.DisruptionsApi;
import com.kisio.navitia.sdk.data.expert.apis.EquipmentReportsApi;
import com.kisio.navitia.sdk.data.expert.apis.FreeFloatingsNearbyApi;
import com.kisio.navitia.sdk.data.expert.apis.GeoStatusApi;
import com.kisio.navitia.sdk.data.expert.apis.GraphicalIsochroneApi;
import com.kisio.navitia.sdk.data.expert.apis.HeatMapApi;
import com.kisio.navitia.sdk.data.expert.apis.JourneyPatternPointsApi;
import com.kisio.navitia.sdk.data.expert.apis.JourneyPatternsApi;
import com.kisio.navitia.sdk.data.expert.apis.JourneysApi;
import com.kisio.navitia.sdk.data.expert.apis.LineGroupsApi;
import com.kisio.navitia.sdk.data.expert.apis.LineReportsApi;
import com.kisio.navitia.sdk.data.expert.apis.LinesApi;
import com.kisio.navitia.sdk.data.expert.apis.NetworksApi;
import com.kisio.navitia.sdk.data.expert.apis.NextArrivalsApi;
import com.kisio.navitia.sdk.data.expert.apis.NextDeparturesApi;
import com.kisio.navitia.sdk.data.expert.apis.PhysicalModesApi;
import com.kisio.navitia.sdk.data.expert.apis.PlaceUriApi;
import com.kisio.navitia.sdk.data.expert.apis.PlacesApi;
import com.kisio.navitia.sdk.data.expert.apis.PlacesNearbyApi;
import com.kisio.navitia.sdk.data.expert.apis.PoiTypesApi;
import com.kisio.navitia.sdk.data.expert.apis.PoisApi;
import com.kisio.navitia.sdk.data.expert.apis.PtobjectsApi;
import com.kisio.navitia.sdk.data.expert.apis.RouteSchedulesApi;
import com.kisio.navitia.sdk.data.expert.apis.RoutesApi;
import com.kisio.navitia.sdk.data.expert.apis.StopAreasApi;
import com.kisio.navitia.sdk.data.expert.apis.StopPointsApi;
import com.kisio.navitia.sdk.data.expert.apis.StopSchedulesApi;
import com.kisio.navitia.sdk.data.expert.apis.TerminusSchedulesApi;
import com.kisio.navitia.sdk.data.expert.apis.TrafficReportApi;
import com.kisio.navitia.sdk.data.expert.apis.TripsApi;
import com.kisio.navitia.sdk.data.expert.apis.VehicleJourneysApi;
import com.kisio.navitia.sdk.data.expert.apis.VehiclePositionsApi;
import com.kisio.navitia.sdk.data.expert.invokers.ApiCallback;
import com.kisio.navitia.sdk.data.expert.invokers.ApiException;

import okhttp3.Call;

import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.math.BigDecimal;

public class CDVNavitiaSDK extends CordovaPlugin {

    private NavitiaSDK navitiaSdk;
    private Map<String, Action> actions = new HashMap<String, Action>();

    private interface IAction {
        void doAction(JSONObject params, CallbackContext callbackContext);
    }

    private abstract class Action implements IAction {
        @Override
        public abstract void doAction(JSONObject params, CallbackContext callbackContext);
    }

    private List<String> jsonArrayToStringList(JSONArray array) {
        List<String> result = new ArrayList<String>();
        try {
            for (int i = 0; i < array.length(); i++) {
                result.add(array.getString(i));
            }
        } catch (JSONException e) {
        }
        return result;
    }

    private List<Integer> jsonArrayToIntegerList(JSONArray array) {
        List<Integer> result = new ArrayList<Integer>();
        try {
            for (int i = 0; i < array.length(); i++) {
                result.add(array.getInt(i));
            }
        } catch (JSONException e) {
        }
        return result;
    }

    private Boolean booleanStraightPass(Boolean value) {
        return value;
    }

    private Integer integerStraightPass(Integer value) {
        return value;
    }

    private BigDecimal longToBigDecimal(long value) {
        return new BigDecimal(value);
    }

    private Float longToFloat(long value) {
        return longToBigDecimal(value).floatValue();
    }

    private String stringStraightPass(String value) {
        return value;
    }

    private DateTime stringToDateTime(String value) {
        return new DateTime(value);
    }

    public CDVNavitiaSDK() {
        actions.put("coverageLonLatAddresses", new Action() {
            @Override
            public void doAction(JSONObject params, CallbackContext callbackContext) {
                coverageLonLatAddresses(params, callbackContext);
            }
        });
        actions.put("coverageLonLatAddressesId", new Action() {
            @Override
            public void doAction(JSONObject params, CallbackContext callbackContext) {
                coverageLonLatAddressesId(params, callbackContext);
            }
        });
        actions.put("coverageLonLatUriAddresses", new Action() {
            @Override
            public void doAction(JSONObject params, CallbackContext callbackContext) {
                coverageLonLatUriAddresses(params, callbackContext);
            }
        });
        actions.put("coverageLonLatUriAddressesId", new Action() {
            @Override
            public void doAction(JSONObject params, CallbackContext callbackContext) {
                coverageLonLatUriAddressesId(params, callbackContext);
            }
        });
        actions.put("coverageRegionAddresses", new Action() {
            @Override
            public void doAction(JSONObject params, CallbackContext callbackContext) {
                coverageRegionAddresses(params, callbackContext);
            }
        });
        actions.put("coverageRegionAddressesId", new Action() {
            @Override
            public void doAction(JSONObject params, CallbackContext callbackContext) {
                coverageRegionAddressesId(params, callbackContext);
            }
        });
        actions.put("coverageRegionUriAddresses", new Action() {
            @Override
            public void doAction(JSONObject params, CallbackContext callbackContext) {
                coverageRegionUriAddresses(params, callbackContext);
            }
        });
        actions.put("coverageRegionUriAddressesId", new Action() {
            @Override
            public void doAction(JSONObject params, CallbackContext callbackContext) {
                coverageRegionUriAddressesId(params, callbackContext);
            }
        });
        actions.put("coverageLonLatCalendars", new Action() {
            @Override
            public void doAction(JSONObject params, CallbackContext callbackContext) {
                coverageLonLatCalendars(params, callbackContext);
            }
        });
        actions.put("coverageLonLatCalendarsId", new Action() {
            @Override
            public void doAction(JSONObject params, CallbackContext callbackContext) {
                coverageLonLatCalendarsId(params, callbackContext);
            }
        });
        actions.put("coverageLonLatUriCalendars", new Action() {
            @Override
            public void doAction(JSONObject params, CallbackContext callbackContext) {
                coverageLonLatUriCalendars(params, callbackContext);
            }
        });
        actions.put("coverageRegionCalendars", new Action() {
            @Override
            public void doAction(JSONObject params, CallbackContext callbackContext) {
                coverageRegionCalendars(params, callbackContext);
            }
        });
        actions.put("coverageRegionCalendarsId", new Action() {
            @Override
            public void doAction(JSONObject params, CallbackContext callbackContext) {
                coverageRegionCalendarsId(params, callbackContext);
            }
        });
        actions.put("coverageRegionUriCalendars", new Action() {
            @Override
            public void doAction(JSONObject params, CallbackContext callbackContext) {
                coverageRegionUriCalendars(params, callbackContext);
            }
        });
        actions.put("coverageLonLatCommercialModes", new Action() {
            @Override
            public void doAction(JSONObject params, CallbackContext callbackContext) {
                coverageLonLatCommercialModes(params, callbackContext);
            }
        });
        actions.put("coverageLonLatCommercialModesId", new Action() {
            @Override
            public void doAction(JSONObject params, CallbackContext callbackContext) {
                coverageLonLatCommercialModesId(params, callbackContext);
            }
        });
        actions.put("coverageLonLatUriCommercialModes", new Action() {
            @Override
            public void doAction(JSONObject params, CallbackContext callbackContext) {
                coverageLonLatUriCommercialModes(params, callbackContext);
            }
        });
        actions.put("coverageLonLatUriCommercialModesId", new Action() {
            @Override
            public void doAction(JSONObject params, CallbackContext callbackContext) {
                coverageLonLatUriCommercialModesId(params, callbackContext);
            }
        });
        actions.put("coverageRegionCommercialModes", new Action() {
            @Override
            public void doAction(JSONObject params, CallbackContext callbackContext) {
                coverageRegionCommercialModes(params, callbackContext);
            }
        });
        actions.put("coverageRegionCommercialModesId", new Action() {
            @Override
            public void doAction(JSONObject params, CallbackContext callbackContext) {
                coverageRegionCommercialModesId(params, callbackContext);
            }
        });
        actions.put("coverageRegionUriCommercialModes", new Action() {
            @Override
            public void doAction(JSONObject params, CallbackContext callbackContext) {
                coverageRegionUriCommercialModes(params, callbackContext);
            }
        });
        actions.put("coverageRegionUriCommercialModesId", new Action() {
            @Override
            public void doAction(JSONObject params, CallbackContext callbackContext) {
                coverageRegionUriCommercialModesId(params, callbackContext);
            }
        });
        actions.put("coverageLonLatCompanies", new Action() {
            @Override
            public void doAction(JSONObject params, CallbackContext callbackContext) {
                coverageLonLatCompanies(params, callbackContext);
            }
        });
        actions.put("coverageLonLatCompaniesId", new Action() {
            @Override
            public void doAction(JSONObject params, CallbackContext callbackContext) {
                coverageLonLatCompaniesId(params, callbackContext);
            }
        });
        actions.put("coverageLonLatUriCompanies", new Action() {
            @Override
            public void doAction(JSONObject params, CallbackContext callbackContext) {
                coverageLonLatUriCompanies(params, callbackContext);
            }
        });
        actions.put("coverageLonLatUriCompaniesId", new Action() {
            @Override
            public void doAction(JSONObject params, CallbackContext callbackContext) {
                coverageLonLatUriCompaniesId(params, callbackContext);
            }
        });
        actions.put("coverageRegionCompanies", new Action() {
            @Override
            public void doAction(JSONObject params, CallbackContext callbackContext) {
                coverageRegionCompanies(params, callbackContext);
            }
        });
        actions.put("coverageRegionCompaniesId", new Action() {
            @Override
            public void doAction(JSONObject params, CallbackContext callbackContext) {
                coverageRegionCompaniesId(params, callbackContext);
            }
        });
        actions.put("coverageRegionUriCompanies", new Action() {
            @Override
            public void doAction(JSONObject params, CallbackContext callbackContext) {
                coverageRegionUriCompanies(params, callbackContext);
            }
        });
        actions.put("coverageRegionUriCompaniesId", new Action() {
            @Override
            public void doAction(JSONObject params, CallbackContext callbackContext) {
                coverageRegionUriCompaniesId(params, callbackContext);
            }
        });
        actions.put("coverageLonLatContributors", new Action() {
            @Override
            public void doAction(JSONObject params, CallbackContext callbackContext) {
                coverageLonLatContributors(params, callbackContext);
            }
        });
        actions.put("coverageLonLatContributorsId", new Action() {
            @Override
            public void doAction(JSONObject params, CallbackContext callbackContext) {
                coverageLonLatContributorsId(params, callbackContext);
            }
        });
        actions.put("coverageLonLatUriContributors", new Action() {
            @Override
            public void doAction(JSONObject params, CallbackContext callbackContext) {
                coverageLonLatUriContributors(params, callbackContext);
            }
        });
        actions.put("coverageLonLatUriContributorsId", new Action() {
            @Override
            public void doAction(JSONObject params, CallbackContext callbackContext) {
                coverageLonLatUriContributorsId(params, callbackContext);
            }
        });
        actions.put("coverageRegionContributors", new Action() {
            @Override
            public void doAction(JSONObject params, CallbackContext callbackContext) {
                coverageRegionContributors(params, callbackContext);
            }
        });
        actions.put("coverageRegionContributorsId", new Action() {
            @Override
            public void doAction(JSONObject params, CallbackContext callbackContext) {
                coverageRegionContributorsId(params, callbackContext);
            }
        });
        actions.put("coverageRegionUriContributors", new Action() {
            @Override
            public void doAction(JSONObject params, CallbackContext callbackContext) {
                coverageRegionUriContributors(params, callbackContext);
            }
        });
        actions.put("coverageRegionUriContributorsId", new Action() {
            @Override
            public void doAction(JSONObject params, CallbackContext callbackContext) {
                coverageRegionUriContributorsId(params, callbackContext);
            }
        });
        actions.put("coordLonLat", new Action() {
            @Override
            public void doAction(JSONObject params, CallbackContext callbackContext) {
                coordLonLat(params, callbackContext);
            }
        });
        actions.put("coordsLonLat", new Action() {
            @Override
            public void doAction(JSONObject params, CallbackContext callbackContext) {
                coordsLonLat(params, callbackContext);
            }
        });
        actions.put("coverageRegionCoordLonLatAddresses", new Action() {
            @Override
            public void doAction(JSONObject params, CallbackContext callbackContext) {
                coverageRegionCoordLonLatAddresses(params, callbackContext);
            }
        });
        actions.put("coverageRegionCoordsLonLatAddresses", new Action() {
            @Override
            public void doAction(JSONObject params, CallbackContext callbackContext) {
                coverageRegionCoordsLonLatAddresses(params, callbackContext);
            }
        });
        actions.put("coverageLonLatCoord", new Action() {
            @Override
            public void doAction(JSONObject params, CallbackContext callbackContext) {
                coverageLonLatCoord(params, callbackContext);
            }
        });
        actions.put("coverageLonLatCoordId", new Action() {
            @Override
            public void doAction(JSONObject params, CallbackContext callbackContext) {
                coverageLonLatCoordId(params, callbackContext);
            }
        });
        actions.put("coverageLonLatCoords", new Action() {
            @Override
            public void doAction(JSONObject params, CallbackContext callbackContext) {
                coverageLonLatCoords(params, callbackContext);
            }
        });
        actions.put("coverageLonLatCoordsId", new Action() {
            @Override
            public void doAction(JSONObject params, CallbackContext callbackContext) {
                coverageLonLatCoordsId(params, callbackContext);
            }
        });
        actions.put("coverageLonLatUriCoord", new Action() {
            @Override
            public void doAction(JSONObject params, CallbackContext callbackContext) {
                coverageLonLatUriCoord(params, callbackContext);
            }
        });
        actions.put("coverageLonLatUriCoordId", new Action() {
            @Override
            public void doAction(JSONObject params, CallbackContext callbackContext) {
                coverageLonLatUriCoordId(params, callbackContext);
            }
        });
        actions.put("coverageLonLatUriCoords", new Action() {
            @Override
            public void doAction(JSONObject params, CallbackContext callbackContext) {
                coverageLonLatUriCoords(params, callbackContext);
            }
        });
        actions.put("coverageLonLatUriCoordsId", new Action() {
            @Override
            public void doAction(JSONObject params, CallbackContext callbackContext) {
                coverageLonLatUriCoordsId(params, callbackContext);
            }
        });
        actions.put("coverageRegionCoord", new Action() {
            @Override
            public void doAction(JSONObject params, CallbackContext callbackContext) {
                coverageRegionCoord(params, callbackContext);
            }
        });
        actions.put("coverageRegionCoordId", new Action() {
            @Override
            public void doAction(JSONObject params, CallbackContext callbackContext) {
                coverageRegionCoordId(params, callbackContext);
            }
        });
        actions.put("coverageRegionCoords", new Action() {
            @Override
            public void doAction(JSONObject params, CallbackContext callbackContext) {
                coverageRegionCoords(params, callbackContext);
            }
        });
        actions.put("coverageRegionCoordsId", new Action() {
            @Override
            public void doAction(JSONObject params, CallbackContext callbackContext) {
                coverageRegionCoordsId(params, callbackContext);
            }
        });
        actions.put("coverageRegionUriCoord", new Action() {
            @Override
            public void doAction(JSONObject params, CallbackContext callbackContext) {
                coverageRegionUriCoord(params, callbackContext);
            }
        });
        actions.put("coverageRegionUriCoordId", new Action() {
            @Override
            public void doAction(JSONObject params, CallbackContext callbackContext) {
                coverageRegionUriCoordId(params, callbackContext);
            }
        });
        actions.put("coverageRegionUriCoords", new Action() {
            @Override
            public void doAction(JSONObject params, CallbackContext callbackContext) {
                coverageRegionUriCoords(params, callbackContext);
            }
        });
        actions.put("coverageRegionUriCoordsId", new Action() {
            @Override
            public void doAction(JSONObject params, CallbackContext callbackContext) {
                coverageRegionUriCoordsId(params, callbackContext);
            }
        });
        actions.put("coverage", new Action() {
            @Override
            public void doAction(JSONObject params, CallbackContext callbackContext) {
                coverage(params, callbackContext);
            }
        });
        actions.put("coverageLonLat", new Action() {
            @Override
            public void doAction(JSONObject params, CallbackContext callbackContext) {
                coverageLonLat(params, callbackContext);
            }
        });
        actions.put("coverageRegion", new Action() {
            @Override
            public void doAction(JSONObject params, CallbackContext callbackContext) {
                coverageRegion(params, callbackContext);
            }
        });
        actions.put("coverageLonLatDatasets", new Action() {
            @Override
            public void doAction(JSONObject params, CallbackContext callbackContext) {
                coverageLonLatDatasets(params, callbackContext);
            }
        });
        actions.put("coverageLonLatDatasetsId", new Action() {
            @Override
            public void doAction(JSONObject params, CallbackContext callbackContext) {
                coverageLonLatDatasetsId(params, callbackContext);
            }
        });
        actions.put("coverageLonLatUriDatasets", new Action() {
            @Override
            public void doAction(JSONObject params, CallbackContext callbackContext) {
                coverageLonLatUriDatasets(params, callbackContext);
            }
        });
        actions.put("coverageLonLatUriDatasetsId", new Action() {
            @Override
            public void doAction(JSONObject params, CallbackContext callbackContext) {
                coverageLonLatUriDatasetsId(params, callbackContext);
            }
        });
        actions.put("coverageRegionDatasets", new Action() {
            @Override
            public void doAction(JSONObject params, CallbackContext callbackContext) {
                coverageRegionDatasets(params, callbackContext);
            }
        });
        actions.put("coverageRegionDatasetsId", new Action() {
            @Override
            public void doAction(JSONObject params, CallbackContext callbackContext) {
                coverageRegionDatasetsId(params, callbackContext);
            }
        });
        actions.put("coverageRegionUriDatasets", new Action() {
            @Override
            public void doAction(JSONObject params, CallbackContext callbackContext) {
                coverageRegionUriDatasets(params, callbackContext);
            }
        });
        actions.put("coverageRegionUriDatasetsId", new Action() {
            @Override
            public void doAction(JSONObject params, CallbackContext callbackContext) {
                coverageRegionUriDatasetsId(params, callbackContext);
            }
        });
        actions.put("coverageLonLatDisruptions", new Action() {
            @Override
            public void doAction(JSONObject params, CallbackContext callbackContext) {
                coverageLonLatDisruptions(params, callbackContext);
            }
        });
        actions.put("coverageLonLatDisruptionsId", new Action() {
            @Override
            public void doAction(JSONObject params, CallbackContext callbackContext) {
                coverageLonLatDisruptionsId(params, callbackContext);
            }
        });
        actions.put("coverageLonLatUriDisruptions", new Action() {
            @Override
            public void doAction(JSONObject params, CallbackContext callbackContext) {
                coverageLonLatUriDisruptions(params, callbackContext);
            }
        });
        actions.put("coverageLonLatUriDisruptionsId", new Action() {
            @Override
            public void doAction(JSONObject params, CallbackContext callbackContext) {
                coverageLonLatUriDisruptionsId(params, callbackContext);
            }
        });
        actions.put("coverageRegionDisruptions", new Action() {
            @Override
            public void doAction(JSONObject params, CallbackContext callbackContext) {
                coverageRegionDisruptions(params, callbackContext);
            }
        });
        actions.put("coverageRegionDisruptionsId", new Action() {
            @Override
            public void doAction(JSONObject params, CallbackContext callbackContext) {
                coverageRegionDisruptionsId(params, callbackContext);
            }
        });
        actions.put("coverageRegionUriDisruptions", new Action() {
            @Override
            public void doAction(JSONObject params, CallbackContext callbackContext) {
                coverageRegionUriDisruptions(params, callbackContext);
            }
        });
        actions.put("coverageRegionUriDisruptionsId", new Action() {
            @Override
            public void doAction(JSONObject params, CallbackContext callbackContext) {
                coverageRegionUriDisruptionsId(params, callbackContext);
            }
        });
        actions.put("coordLonLatEquipmentReports", new Action() {
            @Override
            public void doAction(JSONObject params, CallbackContext callbackContext) {
                coordLonLatEquipmentReports(params, callbackContext);
            }
        });
        actions.put("coordsLonLatEquipmentReports", new Action() {
            @Override
            public void doAction(JSONObject params, CallbackContext callbackContext) {
                coordsLonLatEquipmentReports(params, callbackContext);
            }
        });
        actions.put("coverageLonLatEquipmentReports", new Action() {
            @Override
            public void doAction(JSONObject params, CallbackContext callbackContext) {
                coverageLonLatEquipmentReports(params, callbackContext);
            }
        });
        actions.put("coverageLonLatUriEquipmentReports", new Action() {
            @Override
            public void doAction(JSONObject params, CallbackContext callbackContext) {
                coverageLonLatUriEquipmentReports(params, callbackContext);
            }
        });
        actions.put("coverageRegionEquipmentReports", new Action() {
            @Override
            public void doAction(JSONObject params, CallbackContext callbackContext) {
                coverageRegionEquipmentReports(params, callbackContext);
            }
        });
        actions.put("coverageRegionUriEquipmentReports", new Action() {
            @Override
            public void doAction(JSONObject params, CallbackContext callbackContext) {
                coverageRegionUriEquipmentReports(params, callbackContext);
            }
        });
        actions.put("coordLonLatFreefloatingsNearby", new Action() {
            @Override
            public void doAction(JSONObject params, CallbackContext callbackContext) {
                coordLonLatFreefloatingsNearby(params, callbackContext);
            }
        });
        actions.put("coordsLonLatFreefloatingsNearby", new Action() {
            @Override
            public void doAction(JSONObject params, CallbackContext callbackContext) {
                coordsLonLatFreefloatingsNearby(params, callbackContext);
            }
        });
        actions.put("coverageLonLatFreefloatingsNearby", new Action() {
            @Override
            public void doAction(JSONObject params, CallbackContext callbackContext) {
                coverageLonLatFreefloatingsNearby(params, callbackContext);
            }
        });
        actions.put("coverageLonLatUriFreefloatingsNearby", new Action() {
            @Override
            public void doAction(JSONObject params, CallbackContext callbackContext) {
                coverageLonLatUriFreefloatingsNearby(params, callbackContext);
            }
        });
        actions.put("coverageRegionFreefloatingsNearby", new Action() {
            @Override
            public void doAction(JSONObject params, CallbackContext callbackContext) {
                coverageRegionFreefloatingsNearby(params, callbackContext);
            }
        });
        actions.put("coverageRegionUriFreefloatingsNearby", new Action() {
            @Override
            public void doAction(JSONObject params, CallbackContext callbackContext) {
                coverageRegionUriFreefloatingsNearby(params, callbackContext);
            }
        });
        actions.put("coverageLonLatGeoStatus", new Action() {
            @Override
            public void doAction(JSONObject params, CallbackContext callbackContext) {
                coverageLonLatGeoStatus(params, callbackContext);
            }
        });
        actions.put("coverageRegionGeoStatus", new Action() {
            @Override
            public void doAction(JSONObject params, CallbackContext callbackContext) {
                coverageRegionGeoStatus(params, callbackContext);
            }
        });
        actions.put("coverageLonLatIsochrones", new Action() {
            @Override
            public void doAction(JSONObject params, CallbackContext callbackContext) {
                coverageLonLatIsochrones(params, callbackContext);
            }
        });
        actions.put("coverageRegionIsochrones", new Action() {
            @Override
            public void doAction(JSONObject params, CallbackContext callbackContext) {
                coverageRegionIsochrones(params, callbackContext);
            }
        });
        actions.put("coverageLonLatHeatMaps", new Action() {
            @Override
            public void doAction(JSONObject params, CallbackContext callbackContext) {
                coverageLonLatHeatMaps(params, callbackContext);
            }
        });
        actions.put("coverageRegionHeatMaps", new Action() {
            @Override
            public void doAction(JSONObject params, CallbackContext callbackContext) {
                coverageRegionHeatMaps(params, callbackContext);
            }
        });
        actions.put("coverageLonLatJourneyPatternPoints", new Action() {
            @Override
            public void doAction(JSONObject params, CallbackContext callbackContext) {
                coverageLonLatJourneyPatternPoints(params, callbackContext);
            }
        });
        actions.put("coverageLonLatJourneyPatternPointsId", new Action() {
            @Override
            public void doAction(JSONObject params, CallbackContext callbackContext) {
                coverageLonLatJourneyPatternPointsId(params, callbackContext);
            }
        });
        actions.put("coverageLonLatUriJourneyPatternPoints", new Action() {
            @Override
            public void doAction(JSONObject params, CallbackContext callbackContext) {
                coverageLonLatUriJourneyPatternPoints(params, callbackContext);
            }
        });
        actions.put("coverageLonLatUriJourneyPatternPointsId", new Action() {
            @Override
            public void doAction(JSONObject params, CallbackContext callbackContext) {
                coverageLonLatUriJourneyPatternPointsId(params, callbackContext);
            }
        });
        actions.put("coverageRegionJourneyPatternPoints", new Action() {
            @Override
            public void doAction(JSONObject params, CallbackContext callbackContext) {
                coverageRegionJourneyPatternPoints(params, callbackContext);
            }
        });
        actions.put("coverageRegionJourneyPatternPointsId", new Action() {
            @Override
            public void doAction(JSONObject params, CallbackContext callbackContext) {
                coverageRegionJourneyPatternPointsId(params, callbackContext);
            }
        });
        actions.put("coverageRegionUriJourneyPatternPoints", new Action() {
            @Override
            public void doAction(JSONObject params, CallbackContext callbackContext) {
                coverageRegionUriJourneyPatternPoints(params, callbackContext);
            }
        });
        actions.put("coverageRegionUriJourneyPatternPointsId", new Action() {
            @Override
            public void doAction(JSONObject params, CallbackContext callbackContext) {
                coverageRegionUriJourneyPatternPointsId(params, callbackContext);
            }
        });
        actions.put("coverageLonLatJourneyPatterns", new Action() {
            @Override
            public void doAction(JSONObject params, CallbackContext callbackContext) {
                coverageLonLatJourneyPatterns(params, callbackContext);
            }
        });
        actions.put("coverageLonLatJourneyPatternsId", new Action() {
            @Override
            public void doAction(JSONObject params, CallbackContext callbackContext) {
                coverageLonLatJourneyPatternsId(params, callbackContext);
            }
        });
        actions.put("coverageLonLatUriJourneyPatterns", new Action() {
            @Override
            public void doAction(JSONObject params, CallbackContext callbackContext) {
                coverageLonLatUriJourneyPatterns(params, callbackContext);
            }
        });
        actions.put("coverageLonLatUriJourneyPatternsId", new Action() {
            @Override
            public void doAction(JSONObject params, CallbackContext callbackContext) {
                coverageLonLatUriJourneyPatternsId(params, callbackContext);
            }
        });
        actions.put("coverageRegionJourneyPatterns", new Action() {
            @Override
            public void doAction(JSONObject params, CallbackContext callbackContext) {
                coverageRegionJourneyPatterns(params, callbackContext);
            }
        });
        actions.put("coverageRegionJourneyPatternsId", new Action() {
            @Override
            public void doAction(JSONObject params, CallbackContext callbackContext) {
                coverageRegionJourneyPatternsId(params, callbackContext);
            }
        });
        actions.put("coverageRegionUriJourneyPatterns", new Action() {
            @Override
            public void doAction(JSONObject params, CallbackContext callbackContext) {
                coverageRegionUriJourneyPatterns(params, callbackContext);
            }
        });
        actions.put("coverageRegionUriJourneyPatternsId", new Action() {
            @Override
            public void doAction(JSONObject params, CallbackContext callbackContext) {
                coverageRegionUriJourneyPatternsId(params, callbackContext);
            }
        });
        actions.put("coverageLonLatJourneys", new Action() {
            @Override
            public void doAction(JSONObject params, CallbackContext callbackContext) {
                coverageLonLatJourneys(params, callbackContext);
            }
        });
        actions.put("coverageRegionJourneys", new Action() {
            @Override
            public void doAction(JSONObject params, CallbackContext callbackContext) {
                coverageRegionJourneys(params, callbackContext);
            }
        });
        actions.put("journeys", new Action() {
            @Override
            public void doAction(JSONObject params, CallbackContext callbackContext) {
                journeys(params, callbackContext);
            }
        });
        actions.put("coverageLonLatLineGroups", new Action() {
            @Override
            public void doAction(JSONObject params, CallbackContext callbackContext) {
                coverageLonLatLineGroups(params, callbackContext);
            }
        });
        actions.put("coverageLonLatLineGroupsId", new Action() {
            @Override
            public void doAction(JSONObject params, CallbackContext callbackContext) {
                coverageLonLatLineGroupsId(params, callbackContext);
            }
        });
        actions.put("coverageLonLatUriLineGroups", new Action() {
            @Override
            public void doAction(JSONObject params, CallbackContext callbackContext) {
                coverageLonLatUriLineGroups(params, callbackContext);
            }
        });
        actions.put("coverageLonLatUriLineGroupsId", new Action() {
            @Override
            public void doAction(JSONObject params, CallbackContext callbackContext) {
                coverageLonLatUriLineGroupsId(params, callbackContext);
            }
        });
        actions.put("coverageRegionLineGroups", new Action() {
            @Override
            public void doAction(JSONObject params, CallbackContext callbackContext) {
                coverageRegionLineGroups(params, callbackContext);
            }
        });
        actions.put("coverageRegionLineGroupsId", new Action() {
            @Override
            public void doAction(JSONObject params, CallbackContext callbackContext) {
                coverageRegionLineGroupsId(params, callbackContext);
            }
        });
        actions.put("coverageRegionUriLineGroups", new Action() {
            @Override
            public void doAction(JSONObject params, CallbackContext callbackContext) {
                coverageRegionUriLineGroups(params, callbackContext);
            }
        });
        actions.put("coverageRegionUriLineGroupsId", new Action() {
            @Override
            public void doAction(JSONObject params, CallbackContext callbackContext) {
                coverageRegionUriLineGroupsId(params, callbackContext);
            }
        });
        actions.put("lineGroups", new Action() {
            @Override
            public void doAction(JSONObject params, CallbackContext callbackContext) {
                lineGroups(params, callbackContext);
            }
        });
        actions.put("coverageLonLatLineReports", new Action() {
            @Override
            public void doAction(JSONObject params, CallbackContext callbackContext) {
                coverageLonLatLineReports(params, callbackContext);
            }
        });
        actions.put("coverageLonLatUriLineReports", new Action() {
            @Override
            public void doAction(JSONObject params, CallbackContext callbackContext) {
                coverageLonLatUriLineReports(params, callbackContext);
            }
        });
        actions.put("coverageRegionLineReports", new Action() {
            @Override
            public void doAction(JSONObject params, CallbackContext callbackContext) {
                coverageRegionLineReports(params, callbackContext);
            }
        });
        actions.put("coverageRegionUriLineReports", new Action() {
            @Override
            public void doAction(JSONObject params, CallbackContext callbackContext) {
                coverageRegionUriLineReports(params, callbackContext);
            }
        });
        actions.put("coverageLonLatLines", new Action() {
            @Override
            public void doAction(JSONObject params, CallbackContext callbackContext) {
                coverageLonLatLines(params, callbackContext);
            }
        });
        actions.put("coverageLonLatLinesId", new Action() {
            @Override
            public void doAction(JSONObject params, CallbackContext callbackContext) {
                coverageLonLatLinesId(params, callbackContext);
            }
        });
        actions.put("coverageLonLatUriLines", new Action() {
            @Override
            public void doAction(JSONObject params, CallbackContext callbackContext) {
                coverageLonLatUriLines(params, callbackContext);
            }
        });
        actions.put("coverageLonLatUriLinesId", new Action() {
            @Override
            public void doAction(JSONObject params, CallbackContext callbackContext) {
                coverageLonLatUriLinesId(params, callbackContext);
            }
        });
        actions.put("coverageRegionLines", new Action() {
            @Override
            public void doAction(JSONObject params, CallbackContext callbackContext) {
                coverageRegionLines(params, callbackContext);
            }
        });
        actions.put("coverageRegionLinesId", new Action() {
            @Override
            public void doAction(JSONObject params, CallbackContext callbackContext) {
                coverageRegionLinesId(params, callbackContext);
            }
        });
        actions.put("coverageRegionUriLines", new Action() {
            @Override
            public void doAction(JSONObject params, CallbackContext callbackContext) {
                coverageRegionUriLines(params, callbackContext);
            }
        });
        actions.put("coverageRegionUriLinesId", new Action() {
            @Override
            public void doAction(JSONObject params, CallbackContext callbackContext) {
                coverageRegionUriLinesId(params, callbackContext);
            }
        });
        actions.put("lines", new Action() {
            @Override
            public void doAction(JSONObject params, CallbackContext callbackContext) {
                lines(params, callbackContext);
            }
        });
        actions.put("coverageLonLatNetworks", new Action() {
            @Override
            public void doAction(JSONObject params, CallbackContext callbackContext) {
                coverageLonLatNetworks(params, callbackContext);
            }
        });
        actions.put("coverageLonLatNetworksId", new Action() {
            @Override
            public void doAction(JSONObject params, CallbackContext callbackContext) {
                coverageLonLatNetworksId(params, callbackContext);
            }
        });
        actions.put("coverageLonLatUriNetworks", new Action() {
            @Override
            public void doAction(JSONObject params, CallbackContext callbackContext) {
                coverageLonLatUriNetworks(params, callbackContext);
            }
        });
        actions.put("coverageLonLatUriNetworksId", new Action() {
            @Override
            public void doAction(JSONObject params, CallbackContext callbackContext) {
                coverageLonLatUriNetworksId(params, callbackContext);
            }
        });
        actions.put("coverageRegionNetworks", new Action() {
            @Override
            public void doAction(JSONObject params, CallbackContext callbackContext) {
                coverageRegionNetworks(params, callbackContext);
            }
        });
        actions.put("coverageRegionNetworksId", new Action() {
            @Override
            public void doAction(JSONObject params, CallbackContext callbackContext) {
                coverageRegionNetworksId(params, callbackContext);
            }
        });
        actions.put("coverageRegionUriNetworks", new Action() {
            @Override
            public void doAction(JSONObject params, CallbackContext callbackContext) {
                coverageRegionUriNetworks(params, callbackContext);
            }
        });
        actions.put("coverageRegionUriNetworksId", new Action() {
            @Override
            public void doAction(JSONObject params, CallbackContext callbackContext) {
                coverageRegionUriNetworksId(params, callbackContext);
            }
        });
        actions.put("networks", new Action() {
            @Override
            public void doAction(JSONObject params, CallbackContext callbackContext) {
                networks(params, callbackContext);
            }
        });
        actions.put("coverageLonLatArrivals", new Action() {
            @Override
            public void doAction(JSONObject params, CallbackContext callbackContext) {
                coverageLonLatArrivals(params, callbackContext);
            }
        });
        actions.put("coverageLonLatUriArrivals", new Action() {
            @Override
            public void doAction(JSONObject params, CallbackContext callbackContext) {
                coverageLonLatUriArrivals(params, callbackContext);
            }
        });
        actions.put("coverageRegionArrivals", new Action() {
            @Override
            public void doAction(JSONObject params, CallbackContext callbackContext) {
                coverageRegionArrivals(params, callbackContext);
            }
        });
        actions.put("coverageRegionUriArrivals", new Action() {
            @Override
            public void doAction(JSONObject params, CallbackContext callbackContext) {
                coverageRegionUriArrivals(params, callbackContext);
            }
        });
        actions.put("coverageLonLatDepartures", new Action() {
            @Override
            public void doAction(JSONObject params, CallbackContext callbackContext) {
                coverageLonLatDepartures(params, callbackContext);
            }
        });
        actions.put("coverageLonLatUriDepartures", new Action() {
            @Override
            public void doAction(JSONObject params, CallbackContext callbackContext) {
                coverageLonLatUriDepartures(params, callbackContext);
            }
        });
        actions.put("coverageRegionDepartures", new Action() {
            @Override
            public void doAction(JSONObject params, CallbackContext callbackContext) {
                coverageRegionDepartures(params, callbackContext);
            }
        });
        actions.put("coverageRegionUriDepartures", new Action() {
            @Override
            public void doAction(JSONObject params, CallbackContext callbackContext) {
                coverageRegionUriDepartures(params, callbackContext);
            }
        });
        actions.put("coverageLonLatPhysicalModes", new Action() {
            @Override
            public void doAction(JSONObject params, CallbackContext callbackContext) {
                coverageLonLatPhysicalModes(params, callbackContext);
            }
        });
        actions.put("coverageLonLatPhysicalModesId", new Action() {
            @Override
            public void doAction(JSONObject params, CallbackContext callbackContext) {
                coverageLonLatPhysicalModesId(params, callbackContext);
            }
        });
        actions.put("coverageLonLatUriPhysicalModes", new Action() {
            @Override
            public void doAction(JSONObject params, CallbackContext callbackContext) {
                coverageLonLatUriPhysicalModes(params, callbackContext);
            }
        });
        actions.put("coverageLonLatUriPhysicalModesId", new Action() {
            @Override
            public void doAction(JSONObject params, CallbackContext callbackContext) {
                coverageLonLatUriPhysicalModesId(params, callbackContext);
            }
        });
        actions.put("coverageRegionPhysicalModes", new Action() {
            @Override
            public void doAction(JSONObject params, CallbackContext callbackContext) {
                coverageRegionPhysicalModes(params, callbackContext);
            }
        });
        actions.put("coverageRegionPhysicalModesId", new Action() {
            @Override
            public void doAction(JSONObject params, CallbackContext callbackContext) {
                coverageRegionPhysicalModesId(params, callbackContext);
            }
        });
        actions.put("coverageRegionUriPhysicalModes", new Action() {
            @Override
            public void doAction(JSONObject params, CallbackContext callbackContext) {
                coverageRegionUriPhysicalModes(params, callbackContext);
            }
        });
        actions.put("coverageRegionUriPhysicalModesId", new Action() {
            @Override
            public void doAction(JSONObject params, CallbackContext callbackContext) {
                coverageRegionUriPhysicalModesId(params, callbackContext);
            }
        });
        actions.put("coverageLonLatPlacesId", new Action() {
            @Override
            public void doAction(JSONObject params, CallbackContext callbackContext) {
                coverageLonLatPlacesId(params, callbackContext);
            }
        });
        actions.put("coverageRegionPlacesId", new Action() {
            @Override
            public void doAction(JSONObject params, CallbackContext callbackContext) {
                coverageRegionPlacesId(params, callbackContext);
            }
        });
        actions.put("placesId", new Action() {
            @Override
            public void doAction(JSONObject params, CallbackContext callbackContext) {
                placesId(params, callbackContext);
            }
        });
        actions.put("coverageLonLatPlaces", new Action() {
            @Override
            public void doAction(JSONObject params, CallbackContext callbackContext) {
                coverageLonLatPlaces(params, callbackContext);
            }
        });
        actions.put("coverageRegionPlaces", new Action() {
            @Override
            public void doAction(JSONObject params, CallbackContext callbackContext) {
                coverageRegionPlaces(params, callbackContext);
            }
        });
        actions.put("places", new Action() {
            @Override
            public void doAction(JSONObject params, CallbackContext callbackContext) {
                places(params, callbackContext);
            }
        });
        actions.put("coordLonLatPlacesNearby", new Action() {
            @Override
            public void doAction(JSONObject params, CallbackContext callbackContext) {
                coordLonLatPlacesNearby(params, callbackContext);
            }
        });
        actions.put("coordsLonLatPlacesNearby", new Action() {
            @Override
            public void doAction(JSONObject params, CallbackContext callbackContext) {
                coordsLonLatPlacesNearby(params, callbackContext);
            }
        });
        actions.put("coverageLonLatPlacesNearby", new Action() {
            @Override
            public void doAction(JSONObject params, CallbackContext callbackContext) {
                coverageLonLatPlacesNearby(params, callbackContext);
            }
        });
        actions.put("coverageLonLatUriPlacesNearby", new Action() {
            @Override
            public void doAction(JSONObject params, CallbackContext callbackContext) {
                coverageLonLatUriPlacesNearby(params, callbackContext);
            }
        });
        actions.put("coverageRegionPlacesNearby", new Action() {
            @Override
            public void doAction(JSONObject params, CallbackContext callbackContext) {
                coverageRegionPlacesNearby(params, callbackContext);
            }
        });
        actions.put("coverageRegionUriPlacesNearby", new Action() {
            @Override
            public void doAction(JSONObject params, CallbackContext callbackContext) {
                coverageRegionUriPlacesNearby(params, callbackContext);
            }
        });
        actions.put("coverageLonLatPoiTypes", new Action() {
            @Override
            public void doAction(JSONObject params, CallbackContext callbackContext) {
                coverageLonLatPoiTypes(params, callbackContext);
            }
        });
        actions.put("coverageLonLatPoiTypesId", new Action() {
            @Override
            public void doAction(JSONObject params, CallbackContext callbackContext) {
                coverageLonLatPoiTypesId(params, callbackContext);
            }
        });
        actions.put("coverageLonLatUriPoiTypes", new Action() {
            @Override
            public void doAction(JSONObject params, CallbackContext callbackContext) {
                coverageLonLatUriPoiTypes(params, callbackContext);
            }
        });
        actions.put("coverageLonLatUriPoiTypesId", new Action() {
            @Override
            public void doAction(JSONObject params, CallbackContext callbackContext) {
                coverageLonLatUriPoiTypesId(params, callbackContext);
            }
        });
        actions.put("coverageRegionPoiTypes", new Action() {
            @Override
            public void doAction(JSONObject params, CallbackContext callbackContext) {
                coverageRegionPoiTypes(params, callbackContext);
            }
        });
        actions.put("coverageRegionPoiTypesId", new Action() {
            @Override
            public void doAction(JSONObject params, CallbackContext callbackContext) {
                coverageRegionPoiTypesId(params, callbackContext);
            }
        });
        actions.put("coverageRegionUriPoiTypes", new Action() {
            @Override
            public void doAction(JSONObject params, CallbackContext callbackContext) {
                coverageRegionUriPoiTypes(params, callbackContext);
            }
        });
        actions.put("coverageRegionUriPoiTypesId", new Action() {
            @Override
            public void doAction(JSONObject params, CallbackContext callbackContext) {
                coverageRegionUriPoiTypesId(params, callbackContext);
            }
        });
        actions.put("coverageLonLatPois", new Action() {
            @Override
            public void doAction(JSONObject params, CallbackContext callbackContext) {
                coverageLonLatPois(params, callbackContext);
            }
        });
        actions.put("coverageLonLatPoisId", new Action() {
            @Override
            public void doAction(JSONObject params, CallbackContext callbackContext) {
                coverageLonLatPoisId(params, callbackContext);
            }
        });
        actions.put("coverageLonLatUriPois", new Action() {
            @Override
            public void doAction(JSONObject params, CallbackContext callbackContext) {
                coverageLonLatUriPois(params, callbackContext);
            }
        });
        actions.put("coverageLonLatUriPoisId", new Action() {
            @Override
            public void doAction(JSONObject params, CallbackContext callbackContext) {
                coverageLonLatUriPoisId(params, callbackContext);
            }
        });
        actions.put("coverageRegionPois", new Action() {
            @Override
            public void doAction(JSONObject params, CallbackContext callbackContext) {
                coverageRegionPois(params, callbackContext);
            }
        });
        actions.put("coverageRegionPoisId", new Action() {
            @Override
            public void doAction(JSONObject params, CallbackContext callbackContext) {
                coverageRegionPoisId(params, callbackContext);
            }
        });
        actions.put("coverageRegionUriPois", new Action() {
            @Override
            public void doAction(JSONObject params, CallbackContext callbackContext) {
                coverageRegionUriPois(params, callbackContext);
            }
        });
        actions.put("coverageRegionUriPoisId", new Action() {
            @Override
            public void doAction(JSONObject params, CallbackContext callbackContext) {
                coverageRegionUriPoisId(params, callbackContext);
            }
        });
        actions.put("coverageLonLatPtObjects", new Action() {
            @Override
            public void doAction(JSONObject params, CallbackContext callbackContext) {
                coverageLonLatPtObjects(params, callbackContext);
            }
        });
        actions.put("coverageRegionPtObjects", new Action() {
            @Override
            public void doAction(JSONObject params, CallbackContext callbackContext) {
                coverageRegionPtObjects(params, callbackContext);
            }
        });
        actions.put("coverageLonLatUriRouteSchedules", new Action() {
            @Override
            public void doAction(JSONObject params, CallbackContext callbackContext) {
                coverageLonLatUriRouteSchedules(params, callbackContext);
            }
        });
        actions.put("coverageRegionUriRouteSchedules", new Action() {
            @Override
            public void doAction(JSONObject params, CallbackContext callbackContext) {
                coverageRegionUriRouteSchedules(params, callbackContext);
            }
        });
        actions.put("routeSchedules", new Action() {
            @Override
            public void doAction(JSONObject params, CallbackContext callbackContext) {
                routeSchedules(params, callbackContext);
            }
        });
        actions.put("coverageLonLatRoutes", new Action() {
            @Override
            public void doAction(JSONObject params, CallbackContext callbackContext) {
                coverageLonLatRoutes(params, callbackContext);
            }
        });
        actions.put("coverageLonLatRoutesId", new Action() {
            @Override
            public void doAction(JSONObject params, CallbackContext callbackContext) {
                coverageLonLatRoutesId(params, callbackContext);
            }
        });
        actions.put("coverageLonLatUriRoutes", new Action() {
            @Override
            public void doAction(JSONObject params, CallbackContext callbackContext) {
                coverageLonLatUriRoutes(params, callbackContext);
            }
        });
        actions.put("coverageLonLatUriRoutesId", new Action() {
            @Override
            public void doAction(JSONObject params, CallbackContext callbackContext) {
                coverageLonLatUriRoutesId(params, callbackContext);
            }
        });
        actions.put("coverageRegionRoutes", new Action() {
            @Override
            public void doAction(JSONObject params, CallbackContext callbackContext) {
                coverageRegionRoutes(params, callbackContext);
            }
        });
        actions.put("coverageRegionRoutesId", new Action() {
            @Override
            public void doAction(JSONObject params, CallbackContext callbackContext) {
                coverageRegionRoutesId(params, callbackContext);
            }
        });
        actions.put("coverageRegionUriRoutes", new Action() {
            @Override
            public void doAction(JSONObject params, CallbackContext callbackContext) {
                coverageRegionUriRoutes(params, callbackContext);
            }
        });
        actions.put("coverageRegionUriRoutesId", new Action() {
            @Override
            public void doAction(JSONObject params, CallbackContext callbackContext) {
                coverageRegionUriRoutesId(params, callbackContext);
            }
        });
        actions.put("routes", new Action() {
            @Override
            public void doAction(JSONObject params, CallbackContext callbackContext) {
                routes(params, callbackContext);
            }
        });
        actions.put("coverageLonLatStopAreas", new Action() {
            @Override
            public void doAction(JSONObject params, CallbackContext callbackContext) {
                coverageLonLatStopAreas(params, callbackContext);
            }
        });
        actions.put("coverageLonLatStopAreasId", new Action() {
            @Override
            public void doAction(JSONObject params, CallbackContext callbackContext) {
                coverageLonLatStopAreasId(params, callbackContext);
            }
        });
        actions.put("coverageLonLatUriStopAreas", new Action() {
            @Override
            public void doAction(JSONObject params, CallbackContext callbackContext) {
                coverageLonLatUriStopAreas(params, callbackContext);
            }
        });
        actions.put("coverageLonLatUriStopAreasId", new Action() {
            @Override
            public void doAction(JSONObject params, CallbackContext callbackContext) {
                coverageLonLatUriStopAreasId(params, callbackContext);
            }
        });
        actions.put("coverageRegionStopAreas", new Action() {
            @Override
            public void doAction(JSONObject params, CallbackContext callbackContext) {
                coverageRegionStopAreas(params, callbackContext);
            }
        });
        actions.put("coverageRegionStopAreasId", new Action() {
            @Override
            public void doAction(JSONObject params, CallbackContext callbackContext) {
                coverageRegionStopAreasId(params, callbackContext);
            }
        });
        actions.put("coverageRegionUriStopAreas", new Action() {
            @Override
            public void doAction(JSONObject params, CallbackContext callbackContext) {
                coverageRegionUriStopAreas(params, callbackContext);
            }
        });
        actions.put("coverageRegionUriStopAreasId", new Action() {
            @Override
            public void doAction(JSONObject params, CallbackContext callbackContext) {
                coverageRegionUriStopAreasId(params, callbackContext);
            }
        });
        actions.put("stopAreas", new Action() {
            @Override
            public void doAction(JSONObject params, CallbackContext callbackContext) {
                stopAreas(params, callbackContext);
            }
        });
        actions.put("coverageLonLatStopPoints", new Action() {
            @Override
            public void doAction(JSONObject params, CallbackContext callbackContext) {
                coverageLonLatStopPoints(params, callbackContext);
            }
        });
        actions.put("coverageLonLatStopPointsId", new Action() {
            @Override
            public void doAction(JSONObject params, CallbackContext callbackContext) {
                coverageLonLatStopPointsId(params, callbackContext);
            }
        });
        actions.put("coverageLonLatUriStopPoints", new Action() {
            @Override
            public void doAction(JSONObject params, CallbackContext callbackContext) {
                coverageLonLatUriStopPoints(params, callbackContext);
            }
        });
        actions.put("coverageLonLatUriStopPointsId", new Action() {
            @Override
            public void doAction(JSONObject params, CallbackContext callbackContext) {
                coverageLonLatUriStopPointsId(params, callbackContext);
            }
        });
        actions.put("coverageRegionStopPoints", new Action() {
            @Override
            public void doAction(JSONObject params, CallbackContext callbackContext) {
                coverageRegionStopPoints(params, callbackContext);
            }
        });
        actions.put("coverageRegionStopPointsId", new Action() {
            @Override
            public void doAction(JSONObject params, CallbackContext callbackContext) {
                coverageRegionStopPointsId(params, callbackContext);
            }
        });
        actions.put("coverageRegionUriStopPoints", new Action() {
            @Override
            public void doAction(JSONObject params, CallbackContext callbackContext) {
                coverageRegionUriStopPoints(params, callbackContext);
            }
        });
        actions.put("coverageRegionUriStopPointsId", new Action() {
            @Override
            public void doAction(JSONObject params, CallbackContext callbackContext) {
                coverageRegionUriStopPointsId(params, callbackContext);
            }
        });
        actions.put("stopPoints", new Action() {
            @Override
            public void doAction(JSONObject params, CallbackContext callbackContext) {
                stopPoints(params, callbackContext);
            }
        });
        actions.put("coverageLonLatUriStopSchedules", new Action() {
            @Override
            public void doAction(JSONObject params, CallbackContext callbackContext) {
                coverageLonLatUriStopSchedules(params, callbackContext);
            }
        });
        actions.put("coverageRegionUriStopSchedules", new Action() {
            @Override
            public void doAction(JSONObject params, CallbackContext callbackContext) {
                coverageRegionUriStopSchedules(params, callbackContext);
            }
        });
        actions.put("stopSchedules", new Action() {
            @Override
            public void doAction(JSONObject params, CallbackContext callbackContext) {
                stopSchedules(params, callbackContext);
            }
        });
        actions.put("coverageLonLatUriTerminusSchedules", new Action() {
            @Override
            public void doAction(JSONObject params, CallbackContext callbackContext) {
                coverageLonLatUriTerminusSchedules(params, callbackContext);
            }
        });
        actions.put("coverageRegionUriTerminusSchedules", new Action() {
            @Override
            public void doAction(JSONObject params, CallbackContext callbackContext) {
                coverageRegionUriTerminusSchedules(params, callbackContext);
            }
        });
        actions.put("terminusSchedules", new Action() {
            @Override
            public void doAction(JSONObject params, CallbackContext callbackContext) {
                terminusSchedules(params, callbackContext);
            }
        });
        actions.put("coverageLonLatTrafficReports", new Action() {
            @Override
            public void doAction(JSONObject params, CallbackContext callbackContext) {
                coverageLonLatTrafficReports(params, callbackContext);
            }
        });
        actions.put("coverageLonLatUriTrafficReports", new Action() {
            @Override
            public void doAction(JSONObject params, CallbackContext callbackContext) {
                coverageLonLatUriTrafficReports(params, callbackContext);
            }
        });
        actions.put("coverageRegionTrafficReports", new Action() {
            @Override
            public void doAction(JSONObject params, CallbackContext callbackContext) {
                coverageRegionTrafficReports(params, callbackContext);
            }
        });
        actions.put("coverageRegionUriTrafficReports", new Action() {
            @Override
            public void doAction(JSONObject params, CallbackContext callbackContext) {
                coverageRegionUriTrafficReports(params, callbackContext);
            }
        });
        actions.put("coverageLonLatTrips", new Action() {
            @Override
            public void doAction(JSONObject params, CallbackContext callbackContext) {
                coverageLonLatTrips(params, callbackContext);
            }
        });
        actions.put("coverageLonLatTripsId", new Action() {
            @Override
            public void doAction(JSONObject params, CallbackContext callbackContext) {
                coverageLonLatTripsId(params, callbackContext);
            }
        });
        actions.put("coverageLonLatUriTrips", new Action() {
            @Override
            public void doAction(JSONObject params, CallbackContext callbackContext) {
                coverageLonLatUriTrips(params, callbackContext);
            }
        });
        actions.put("coverageLonLatUriTripsId", new Action() {
            @Override
            public void doAction(JSONObject params, CallbackContext callbackContext) {
                coverageLonLatUriTripsId(params, callbackContext);
            }
        });
        actions.put("coverageRegionTrips", new Action() {
            @Override
            public void doAction(JSONObject params, CallbackContext callbackContext) {
                coverageRegionTrips(params, callbackContext);
            }
        });
        actions.put("coverageRegionTripsId", new Action() {
            @Override
            public void doAction(JSONObject params, CallbackContext callbackContext) {
                coverageRegionTripsId(params, callbackContext);
            }
        });
        actions.put("coverageRegionUriTrips", new Action() {
            @Override
            public void doAction(JSONObject params, CallbackContext callbackContext) {
                coverageRegionUriTrips(params, callbackContext);
            }
        });
        actions.put("coverageRegionUriTripsId", new Action() {
            @Override
            public void doAction(JSONObject params, CallbackContext callbackContext) {
                coverageRegionUriTripsId(params, callbackContext);
            }
        });
        actions.put("coverageLonLatUriVehicleJourneys", new Action() {
            @Override
            public void doAction(JSONObject params, CallbackContext callbackContext) {
                coverageLonLatUriVehicleJourneys(params, callbackContext);
            }
        });
        actions.put("coverageLonLatUriVehicleJourneysId", new Action() {
            @Override
            public void doAction(JSONObject params, CallbackContext callbackContext) {
                coverageLonLatUriVehicleJourneysId(params, callbackContext);
            }
        });
        actions.put("coverageLonLatVehicleJourneys", new Action() {
            @Override
            public void doAction(JSONObject params, CallbackContext callbackContext) {
                coverageLonLatVehicleJourneys(params, callbackContext);
            }
        });
        actions.put("coverageLonLatVehicleJourneysId", new Action() {
            @Override
            public void doAction(JSONObject params, CallbackContext callbackContext) {
                coverageLonLatVehicleJourneysId(params, callbackContext);
            }
        });
        actions.put("coverageRegionUriVehicleJourneys", new Action() {
            @Override
            public void doAction(JSONObject params, CallbackContext callbackContext) {
                coverageRegionUriVehicleJourneys(params, callbackContext);
            }
        });
        actions.put("coverageRegionUriVehicleJourneysId", new Action() {
            @Override
            public void doAction(JSONObject params, CallbackContext callbackContext) {
                coverageRegionUriVehicleJourneysId(params, callbackContext);
            }
        });
        actions.put("coverageRegionVehicleJourneys", new Action() {
            @Override
            public void doAction(JSONObject params, CallbackContext callbackContext) {
                coverageRegionVehicleJourneys(params, callbackContext);
            }
        });
        actions.put("coverageRegionVehicleJourneysId", new Action() {
            @Override
            public void doAction(JSONObject params, CallbackContext callbackContext) {
                coverageRegionVehicleJourneysId(params, callbackContext);
            }
        });
        actions.put("vehicleJourneys", new Action() {
            @Override
            public void doAction(JSONObject params, CallbackContext callbackContext) {
                vehicleJourneys(params, callbackContext);
            }
        });
        actions.put("coordLonLatVehiclePositions", new Action() {
            @Override
            public void doAction(JSONObject params, CallbackContext callbackContext) {
                coordLonLatVehiclePositions(params, callbackContext);
            }
        });
        actions.put("coordsLonLatVehiclePositions", new Action() {
            @Override
            public void doAction(JSONObject params, CallbackContext callbackContext) {
                coordsLonLatVehiclePositions(params, callbackContext);
            }
        });
        actions.put("coverageLonLatUriVehiclePositions", new Action() {
            @Override
            public void doAction(JSONObject params, CallbackContext callbackContext) {
                coverageLonLatUriVehiclePositions(params, callbackContext);
            }
        });
        actions.put("coverageLonLatVehiclePositions", new Action() {
            @Override
            public void doAction(JSONObject params, CallbackContext callbackContext) {
                coverageLonLatVehiclePositions(params, callbackContext);
            }
        });
        actions.put("coverageRegionUriVehiclePositions", new Action() {
            @Override
            public void doAction(JSONObject params, CallbackContext callbackContext) {
                coverageRegionUriVehiclePositions(params, callbackContext);
            }
        });
        actions.put("coverageRegionVehiclePositions", new Action() {
            @Override
            public void doAction(JSONObject params, CallbackContext callbackContext) {
                coverageRegionVehiclePositions(params, callbackContext);
            }
        });
        actions.put("init", new Action() {
            @Override
            public void doAction(JSONObject params, CallbackContext callbackContext) {
                init(params, callbackContext);
            }
        });
    }

    @Override
    public boolean execute(String action, JSONArray args, CallbackContext callbackContext) throws JSONException {
        if (actions.containsKey(action)) {
            actions.get(action).doAction(args.getJSONObject(0), callbackContext);
        } else {
            callbackContext.error("Action " + action + " not found");
        }

        return true;
    }

    private void init(JSONObject config, CallbackContext callbackContext) {
        String token = config.optString("token");
        if (token.isEmpty()) {
            callbackContext.error("No token specified");
            return;
        }

        try {
            String basePath = config.optString("basePath", "");
            this.navitiaSdk = basePath.isEmpty() ? 
            new NavitiaSDK(new NavitiaConfiguration(token)) :
            new NavitiaSDK(new NavitiaConfiguration(token, basePath));

            callbackContext.success("SDK created with token " + token);
        } catch (Exception e) {
            callbackContext.error(e.getMessage());
        }
    }

    final private void coverageLonLatAddresses(final JSONObject params, final CallbackContext callbackContext) {
        if (this.navitiaSdk == null) {
            callbackContext.error("NavitiaSDK is not instanciated");
            return;
        }

        final AddressesApi.CoverageLonLatAddressesRequestBuilder addressesRequestBuilder = this.navitiaSdk.addressesApi.newCoverageLonLatAddressesRequestBuilder();
        cordova.getThreadPool().execute(new Runnable() {
            @Override
            public void run() {
                try {
                    if (params.has("lat") && (params.getString("lat") != null) && (!params.getString("lat").isEmpty()) ) {
                        // Param: lat, Type: BigDecimal
                        addressesRequestBuilder.withLat(longToBigDecimal(params.getLong("lat")));
                    }
                    if (params.has("lon") && (params.getString("lon") != null) && (!params.getString("lon").isEmpty()) ) {
                        // Param: lon, Type: BigDecimal
                        addressesRequestBuilder.withLon(longToBigDecimal(params.getLong("lon")));
                    }
                    
                    addressesRequestBuilder.rawGet(new ApiCallback<String>() {
                        @Override
                        public void onFailure(ApiException e, int statusCode, Map<String, List<String>> responseHeaders) {
                            callbackContext.error("Problem during request call | " + e.getMessage());
                        }

                        @Override
                        public void onSuccess(String result, int statusCode, Map<String, List<String>> responseHeaders) {
                            JSONObject jsonObject = null;
                            try {
                                jsonObject = new JSONObject(result);
                                callbackContext.success(jsonObject);
                            } catch (Exception e) {
                                String errorMessage = "Problem during response parsing | " + String.valueOf(e.hashCode()) + ": " + e.getMessage();
                                callbackContext.error(errorMessage);
                            }
                        }

                        @Override
                        public void onUploadProgress(long bytesWritten, long contentLength, boolean done) {
                        }

                        @Override
                        public void onDownloadProgress(long bytesRead, long contentLength, boolean done) {
                        }
                    });
                } catch (Exception e) {
                    String errorMessage = "Problem during request building | " + String.valueOf(e.hashCode()) + ": " + e.getMessage();
                    callbackContext.error(errorMessage);
                }
            }
        });
    }
    final private void coverageLonLatAddressesId(final JSONObject params, final CallbackContext callbackContext) {
        if (this.navitiaSdk == null) {
            callbackContext.error("NavitiaSDK is not instanciated");
            return;
        }

        final AddressesApi.CoverageLonLatAddressesIdRequestBuilder addressesRequestBuilder = this.navitiaSdk.addressesApi.newCoverageLonLatAddressesIdRequestBuilder();
        cordova.getThreadPool().execute(new Runnable() {
            @Override
            public void run() {
                try {
                    if (params.has("lat") && (params.getString("lat") != null) && (!params.getString("lat").isEmpty()) ) {
                        // Param: lat, Type: BigDecimal
                        addressesRequestBuilder.withLat(longToBigDecimal(params.getLong("lat")));
                    }
                    if (params.has("lon") && (params.getString("lon") != null) && (!params.getString("lon").isEmpty()) ) {
                        // Param: lon, Type: BigDecimal
                        addressesRequestBuilder.withLon(longToBigDecimal(params.getLong("lon")));
                    }
                    if (params.has("id") && (params.getString("id") != null) && (!params.getString("id").isEmpty()) ) {
                        // Param: id, Type: String
                        addressesRequestBuilder.withId(stringStraightPass(params.getString("id")));
                    }
                    
                    addressesRequestBuilder.rawGet(new ApiCallback<String>() {
                        @Override
                        public void onFailure(ApiException e, int statusCode, Map<String, List<String>> responseHeaders) {
                            callbackContext.error("Problem during request call | " + e.getMessage());
                        }

                        @Override
                        public void onSuccess(String result, int statusCode, Map<String, List<String>> responseHeaders) {
                            JSONObject jsonObject = null;
                            try {
                                jsonObject = new JSONObject(result);
                                callbackContext.success(jsonObject);
                            } catch (Exception e) {
                                String errorMessage = "Problem during response parsing | " + String.valueOf(e.hashCode()) + ": " + e.getMessage();
                                callbackContext.error(errorMessage);
                            }
                        }

                        @Override
                        public void onUploadProgress(long bytesWritten, long contentLength, boolean done) {
                        }

                        @Override
                        public void onDownloadProgress(long bytesRead, long contentLength, boolean done) {
                        }
                    });
                } catch (Exception e) {
                    String errorMessage = "Problem during request building | " + String.valueOf(e.hashCode()) + ": " + e.getMessage();
                    callbackContext.error(errorMessage);
                }
            }
        });
    }
    final private void coverageLonLatUriAddresses(final JSONObject params, final CallbackContext callbackContext) {
        if (this.navitiaSdk == null) {
            callbackContext.error("NavitiaSDK is not instanciated");
            return;
        }

        final AddressesApi.CoverageLonLatUriAddressesRequestBuilder addressesRequestBuilder = this.navitiaSdk.addressesApi.newCoverageLonLatUriAddressesRequestBuilder();
        cordova.getThreadPool().execute(new Runnable() {
            @Override
            public void run() {
                try {
                    if (params.has("lat") && (params.getString("lat") != null) && (!params.getString("lat").isEmpty()) ) {
                        // Param: lat, Type: BigDecimal
                        addressesRequestBuilder.withLat(longToBigDecimal(params.getLong("lat")));
                    }
                    if (params.has("lon") && (params.getString("lon") != null) && (!params.getString("lon").isEmpty()) ) {
                        // Param: lon, Type: BigDecimal
                        addressesRequestBuilder.withLon(longToBigDecimal(params.getLong("lon")));
                    }
                    if (params.has("uri") && (params.getString("uri") != null) && (!params.getString("uri").isEmpty()) ) {
                        // Param: uri, Type: String
                        addressesRequestBuilder.withUri(stringStraightPass(params.getString("uri")));
                    }
                    
                    addressesRequestBuilder.rawGet(new ApiCallback<String>() {
                        @Override
                        public void onFailure(ApiException e, int statusCode, Map<String, List<String>> responseHeaders) {
                            callbackContext.error("Problem during request call | " + e.getMessage());
                        }

                        @Override
                        public void onSuccess(String result, int statusCode, Map<String, List<String>> responseHeaders) {
                            JSONObject jsonObject = null;
                            try {
                                jsonObject = new JSONObject(result);
                                callbackContext.success(jsonObject);
                            } catch (Exception e) {
                                String errorMessage = "Problem during response parsing | " + String.valueOf(e.hashCode()) + ": " + e.getMessage();
                                callbackContext.error(errorMessage);
                            }
                        }

                        @Override
                        public void onUploadProgress(long bytesWritten, long contentLength, boolean done) {
                        }

                        @Override
                        public void onDownloadProgress(long bytesRead, long contentLength, boolean done) {
                        }
                    });
                } catch (Exception e) {
                    String errorMessage = "Problem during request building | " + String.valueOf(e.hashCode()) + ": " + e.getMessage();
                    callbackContext.error(errorMessage);
                }
            }
        });
    }
    final private void coverageLonLatUriAddressesId(final JSONObject params, final CallbackContext callbackContext) {
        if (this.navitiaSdk == null) {
            callbackContext.error("NavitiaSDK is not instanciated");
            return;
        }

        final AddressesApi.CoverageLonLatUriAddressesIdRequestBuilder addressesRequestBuilder = this.navitiaSdk.addressesApi.newCoverageLonLatUriAddressesIdRequestBuilder();
        cordova.getThreadPool().execute(new Runnable() {
            @Override
            public void run() {
                try {
                    if (params.has("lat") && (params.getString("lat") != null) && (!params.getString("lat").isEmpty()) ) {
                        // Param: lat, Type: BigDecimal
                        addressesRequestBuilder.withLat(longToBigDecimal(params.getLong("lat")));
                    }
                    if (params.has("lon") && (params.getString("lon") != null) && (!params.getString("lon").isEmpty()) ) {
                        // Param: lon, Type: BigDecimal
                        addressesRequestBuilder.withLon(longToBigDecimal(params.getLong("lon")));
                    }
                    if (params.has("uri") && (params.getString("uri") != null) && (!params.getString("uri").isEmpty()) ) {
                        // Param: uri, Type: String
                        addressesRequestBuilder.withUri(stringStraightPass(params.getString("uri")));
                    }
                    if (params.has("id") && (params.getString("id") != null) && (!params.getString("id").isEmpty()) ) {
                        // Param: id, Type: String
                        addressesRequestBuilder.withId(stringStraightPass(params.getString("id")));
                    }
                    
                    addressesRequestBuilder.rawGet(new ApiCallback<String>() {
                        @Override
                        public void onFailure(ApiException e, int statusCode, Map<String, List<String>> responseHeaders) {
                            callbackContext.error("Problem during request call | " + e.getMessage());
                        }

                        @Override
                        public void onSuccess(String result, int statusCode, Map<String, List<String>> responseHeaders) {
                            JSONObject jsonObject = null;
                            try {
                                jsonObject = new JSONObject(result);
                                callbackContext.success(jsonObject);
                            } catch (Exception e) {
                                String errorMessage = "Problem during response parsing | " + String.valueOf(e.hashCode()) + ": " + e.getMessage();
                                callbackContext.error(errorMessage);
                            }
                        }

                        @Override
                        public void onUploadProgress(long bytesWritten, long contentLength, boolean done) {
                        }

                        @Override
                        public void onDownloadProgress(long bytesRead, long contentLength, boolean done) {
                        }
                    });
                } catch (Exception e) {
                    String errorMessage = "Problem during request building | " + String.valueOf(e.hashCode()) + ": " + e.getMessage();
                    callbackContext.error(errorMessage);
                }
            }
        });
    }
    final private void coverageRegionAddresses(final JSONObject params, final CallbackContext callbackContext) {
        if (this.navitiaSdk == null) {
            callbackContext.error("NavitiaSDK is not instanciated");
            return;
        }

        final AddressesApi.CoverageRegionAddressesRequestBuilder addressesRequestBuilder = this.navitiaSdk.addressesApi.newCoverageRegionAddressesRequestBuilder();
        cordova.getThreadPool().execute(new Runnable() {
            @Override
            public void run() {
                try {
                    if (params.has("region") && (params.getString("region") != null) && (!params.getString("region").isEmpty()) ) {
                        // Param: region, Type: String
                        addressesRequestBuilder.withRegion(stringStraightPass(params.getString("region")));
                    }
                    
                    addressesRequestBuilder.rawGet(new ApiCallback<String>() {
                        @Override
                        public void onFailure(ApiException e, int statusCode, Map<String, List<String>> responseHeaders) {
                            callbackContext.error("Problem during request call | " + e.getMessage());
                        }

                        @Override
                        public void onSuccess(String result, int statusCode, Map<String, List<String>> responseHeaders) {
                            JSONObject jsonObject = null;
                            try {
                                jsonObject = new JSONObject(result);
                                callbackContext.success(jsonObject);
                            } catch (Exception e) {
                                String errorMessage = "Problem during response parsing | " + String.valueOf(e.hashCode()) + ": " + e.getMessage();
                                callbackContext.error(errorMessage);
                            }
                        }

                        @Override
                        public void onUploadProgress(long bytesWritten, long contentLength, boolean done) {
                        }

                        @Override
                        public void onDownloadProgress(long bytesRead, long contentLength, boolean done) {
                        }
                    });
                } catch (Exception e) {
                    String errorMessage = "Problem during request building | " + String.valueOf(e.hashCode()) + ": " + e.getMessage();
                    callbackContext.error(errorMessage);
                }
            }
        });
    }
    final private void coverageRegionAddressesId(final JSONObject params, final CallbackContext callbackContext) {
        if (this.navitiaSdk == null) {
            callbackContext.error("NavitiaSDK is not instanciated");
            return;
        }

        final AddressesApi.CoverageRegionAddressesIdRequestBuilder addressesRequestBuilder = this.navitiaSdk.addressesApi.newCoverageRegionAddressesIdRequestBuilder();
        cordova.getThreadPool().execute(new Runnable() {
            @Override
            public void run() {
                try {
                    if (params.has("region") && (params.getString("region") != null) && (!params.getString("region").isEmpty()) ) {
                        // Param: region, Type: String
                        addressesRequestBuilder.withRegion(stringStraightPass(params.getString("region")));
                    }
                    if (params.has("id") && (params.getString("id") != null) && (!params.getString("id").isEmpty()) ) {
                        // Param: id, Type: String
                        addressesRequestBuilder.withId(stringStraightPass(params.getString("id")));
                    }
                    
                    addressesRequestBuilder.rawGet(new ApiCallback<String>() {
                        @Override
                        public void onFailure(ApiException e, int statusCode, Map<String, List<String>> responseHeaders) {
                            callbackContext.error("Problem during request call | " + e.getMessage());
                        }

                        @Override
                        public void onSuccess(String result, int statusCode, Map<String, List<String>> responseHeaders) {
                            JSONObject jsonObject = null;
                            try {
                                jsonObject = new JSONObject(result);
                                callbackContext.success(jsonObject);
                            } catch (Exception e) {
                                String errorMessage = "Problem during response parsing | " + String.valueOf(e.hashCode()) + ": " + e.getMessage();
                                callbackContext.error(errorMessage);
                            }
                        }

                        @Override
                        public void onUploadProgress(long bytesWritten, long contentLength, boolean done) {
                        }

                        @Override
                        public void onDownloadProgress(long bytesRead, long contentLength, boolean done) {
                        }
                    });
                } catch (Exception e) {
                    String errorMessage = "Problem during request building | " + String.valueOf(e.hashCode()) + ": " + e.getMessage();
                    callbackContext.error(errorMessage);
                }
            }
        });
    }
    final private void coverageRegionUriAddresses(final JSONObject params, final CallbackContext callbackContext) {
        if (this.navitiaSdk == null) {
            callbackContext.error("NavitiaSDK is not instanciated");
            return;
        }

        final AddressesApi.CoverageRegionUriAddressesRequestBuilder addressesRequestBuilder = this.navitiaSdk.addressesApi.newCoverageRegionUriAddressesRequestBuilder();
        cordova.getThreadPool().execute(new Runnable() {
            @Override
            public void run() {
                try {
                    if (params.has("region") && (params.getString("region") != null) && (!params.getString("region").isEmpty()) ) {
                        // Param: region, Type: String
                        addressesRequestBuilder.withRegion(stringStraightPass(params.getString("region")));
                    }
                    if (params.has("uri") && (params.getString("uri") != null) && (!params.getString("uri").isEmpty()) ) {
                        // Param: uri, Type: String
                        addressesRequestBuilder.withUri(stringStraightPass(params.getString("uri")));
                    }
                    
                    addressesRequestBuilder.rawGet(new ApiCallback<String>() {
                        @Override
                        public void onFailure(ApiException e, int statusCode, Map<String, List<String>> responseHeaders) {
                            callbackContext.error("Problem during request call | " + e.getMessage());
                        }

                        @Override
                        public void onSuccess(String result, int statusCode, Map<String, List<String>> responseHeaders) {
                            JSONObject jsonObject = null;
                            try {
                                jsonObject = new JSONObject(result);
                                callbackContext.success(jsonObject);
                            } catch (Exception e) {
                                String errorMessage = "Problem during response parsing | " + String.valueOf(e.hashCode()) + ": " + e.getMessage();
                                callbackContext.error(errorMessage);
                            }
                        }

                        @Override
                        public void onUploadProgress(long bytesWritten, long contentLength, boolean done) {
                        }

                        @Override
                        public void onDownloadProgress(long bytesRead, long contentLength, boolean done) {
                        }
                    });
                } catch (Exception e) {
                    String errorMessage = "Problem during request building | " + String.valueOf(e.hashCode()) + ": " + e.getMessage();
                    callbackContext.error(errorMessage);
                }
            }
        });
    }
    final private void coverageRegionUriAddressesId(final JSONObject params, final CallbackContext callbackContext) {
        if (this.navitiaSdk == null) {
            callbackContext.error("NavitiaSDK is not instanciated");
            return;
        }

        final AddressesApi.CoverageRegionUriAddressesIdRequestBuilder addressesRequestBuilder = this.navitiaSdk.addressesApi.newCoverageRegionUriAddressesIdRequestBuilder();
        cordova.getThreadPool().execute(new Runnable() {
            @Override
            public void run() {
                try {
                    if (params.has("region") && (params.getString("region") != null) && (!params.getString("region").isEmpty()) ) {
                        // Param: region, Type: String
                        addressesRequestBuilder.withRegion(stringStraightPass(params.getString("region")));
                    }
                    if (params.has("uri") && (params.getString("uri") != null) && (!params.getString("uri").isEmpty()) ) {
                        // Param: uri, Type: String
                        addressesRequestBuilder.withUri(stringStraightPass(params.getString("uri")));
                    }
                    if (params.has("id") && (params.getString("id") != null) && (!params.getString("id").isEmpty()) ) {
                        // Param: id, Type: String
                        addressesRequestBuilder.withId(stringStraightPass(params.getString("id")));
                    }
                    
                    addressesRequestBuilder.rawGet(new ApiCallback<String>() {
                        @Override
                        public void onFailure(ApiException e, int statusCode, Map<String, List<String>> responseHeaders) {
                            callbackContext.error("Problem during request call | " + e.getMessage());
                        }

                        @Override
                        public void onSuccess(String result, int statusCode, Map<String, List<String>> responseHeaders) {
                            JSONObject jsonObject = null;
                            try {
                                jsonObject = new JSONObject(result);
                                callbackContext.success(jsonObject);
                            } catch (Exception e) {
                                String errorMessage = "Problem during response parsing | " + String.valueOf(e.hashCode()) + ": " + e.getMessage();
                                callbackContext.error(errorMessage);
                            }
                        }

                        @Override
                        public void onUploadProgress(long bytesWritten, long contentLength, boolean done) {
                        }

                        @Override
                        public void onDownloadProgress(long bytesRead, long contentLength, boolean done) {
                        }
                    });
                } catch (Exception e) {
                    String errorMessage = "Problem during request building | " + String.valueOf(e.hashCode()) + ": " + e.getMessage();
                    callbackContext.error(errorMessage);
                }
            }
        });
    }
    final private void coverageLonLatCalendars(final JSONObject params, final CallbackContext callbackContext) {
        if (this.navitiaSdk == null) {
            callbackContext.error("NavitiaSDK is not instanciated");
            return;
        }

        final CalendarsApi.CoverageLonLatCalendarsRequestBuilder calendarsRequestBuilder = this.navitiaSdk.calendarsApi.newCoverageLonLatCalendarsRequestBuilder();
        cordova.getThreadPool().execute(new Runnable() {
            @Override
            public void run() {
                try {
                    if (params.has("lat") && (params.getString("lat") != null) && (!params.getString("lat").isEmpty()) ) {
                        // Param: lat, Type: BigDecimal
                        calendarsRequestBuilder.withLat(longToBigDecimal(params.getLong("lat")));
                    }
                    if (params.has("lon") && (params.getString("lon") != null) && (!params.getString("lon").isEmpty()) ) {
                        // Param: lon, Type: BigDecimal
                        calendarsRequestBuilder.withLon(longToBigDecimal(params.getLong("lon")));
                    }
                    if (params.has("depth") && (params.getString("depth") != null) && (!params.getString("depth").isEmpty()) ) {
                        // Param: depth, Type: Integer
                        calendarsRequestBuilder.withDepth(integerStraightPass(params.getInt("depth")));
                    }
                    if (params.has("count") && (params.getString("count") != null) && (!params.getString("count").isEmpty()) ) {
                        // Param: count, Type: Integer
                        calendarsRequestBuilder.withCount(integerStraightPass(params.getInt("count")));
                    }
                    if (params.has("startPage") && (params.getString("startPage") != null) && (!params.getString("startPage").isEmpty()) ) {
                        // Param: startPage, Type: Integer
                        calendarsRequestBuilder.withStartPage(integerStraightPass(params.getInt("startPage")));
                    }
                    if (params.has("startDate") && (params.getString("startDate") != null) && (!params.getString("startDate").isEmpty()) ) {
                        // Param: startDate, Type: String
                        calendarsRequestBuilder.withStartDate(stringStraightPass(params.getString("startDate")));
                    }
                    if (params.has("endDate") && (params.getString("endDate") != null) && (!params.getString("endDate").isEmpty()) ) {
                        // Param: endDate, Type: String
                        calendarsRequestBuilder.withEndDate(stringStraightPass(params.getString("endDate")));
                    }
                    if (params.has("forbiddenId") && (params.getString("forbiddenId") != null) && (!params.getString("forbiddenId").isEmpty()) ) {
                        // Param: forbiddenId, Type: List
                        calendarsRequestBuilder.withForbiddenId(jsonArrayToStringList(params.getJSONArray("forbiddenId")));
                    }
                    if (params.has("forbiddenUris") && (params.getString("forbiddenUris") != null) && (!params.getString("forbiddenUris").isEmpty()) ) {
                        // Param: forbiddenUris, Type: List
                        calendarsRequestBuilder.withForbiddenUris(jsonArrayToStringList(params.getJSONArray("forbiddenUris")));
                    }
                    if (params.has("distance") && (params.getString("distance") != null) && (!params.getString("distance").isEmpty()) ) {
                        // Param: distance, Type: Integer
                        calendarsRequestBuilder.withDistance(integerStraightPass(params.getInt("distance")));
                    }
                    
                    calendarsRequestBuilder.rawGet(new ApiCallback<String>() {
                        @Override
                        public void onFailure(ApiException e, int statusCode, Map<String, List<String>> responseHeaders) {
                            callbackContext.error("Problem during request call | " + e.getMessage());
                        }

                        @Override
                        public void onSuccess(String result, int statusCode, Map<String, List<String>> responseHeaders) {
                            JSONObject jsonObject = null;
                            try {
                                jsonObject = new JSONObject(result);
                                callbackContext.success(jsonObject);
                            } catch (Exception e) {
                                String errorMessage = "Problem during response parsing | " + String.valueOf(e.hashCode()) + ": " + e.getMessage();
                                callbackContext.error(errorMessage);
                            }
                        }

                        @Override
                        public void onUploadProgress(long bytesWritten, long contentLength, boolean done) {
                        }

                        @Override
                        public void onDownloadProgress(long bytesRead, long contentLength, boolean done) {
                        }
                    });
                } catch (Exception e) {
                    String errorMessage = "Problem during request building | " + String.valueOf(e.hashCode()) + ": " + e.getMessage();
                    callbackContext.error(errorMessage);
                }
            }
        });
    }
    final private void coverageLonLatCalendarsId(final JSONObject params, final CallbackContext callbackContext) {
        if (this.navitiaSdk == null) {
            callbackContext.error("NavitiaSDK is not instanciated");
            return;
        }

        final CalendarsApi.CoverageLonLatCalendarsIdRequestBuilder calendarsRequestBuilder = this.navitiaSdk.calendarsApi.newCoverageLonLatCalendarsIdRequestBuilder();
        cordova.getThreadPool().execute(new Runnable() {
            @Override
            public void run() {
                try {
                    if (params.has("lat") && (params.getString("lat") != null) && (!params.getString("lat").isEmpty()) ) {
                        // Param: lat, Type: BigDecimal
                        calendarsRequestBuilder.withLat(longToBigDecimal(params.getLong("lat")));
                    }
                    if (params.has("lon") && (params.getString("lon") != null) && (!params.getString("lon").isEmpty()) ) {
                        // Param: lon, Type: BigDecimal
                        calendarsRequestBuilder.withLon(longToBigDecimal(params.getLong("lon")));
                    }
                    if (params.has("id") && (params.getString("id") != null) && (!params.getString("id").isEmpty()) ) {
                        // Param: id, Type: String
                        calendarsRequestBuilder.withId(stringStraightPass(params.getString("id")));
                    }
                    if (params.has("depth") && (params.getString("depth") != null) && (!params.getString("depth").isEmpty()) ) {
                        // Param: depth, Type: Integer
                        calendarsRequestBuilder.withDepth(integerStraightPass(params.getInt("depth")));
                    }
                    if (params.has("count") && (params.getString("count") != null) && (!params.getString("count").isEmpty()) ) {
                        // Param: count, Type: Integer
                        calendarsRequestBuilder.withCount(integerStraightPass(params.getInt("count")));
                    }
                    if (params.has("startPage") && (params.getString("startPage") != null) && (!params.getString("startPage").isEmpty()) ) {
                        // Param: startPage, Type: Integer
                        calendarsRequestBuilder.withStartPage(integerStraightPass(params.getInt("startPage")));
                    }
                    if (params.has("startDate") && (params.getString("startDate") != null) && (!params.getString("startDate").isEmpty()) ) {
                        // Param: startDate, Type: String
                        calendarsRequestBuilder.withStartDate(stringStraightPass(params.getString("startDate")));
                    }
                    if (params.has("endDate") && (params.getString("endDate") != null) && (!params.getString("endDate").isEmpty()) ) {
                        // Param: endDate, Type: String
                        calendarsRequestBuilder.withEndDate(stringStraightPass(params.getString("endDate")));
                    }
                    if (params.has("forbiddenId") && (params.getString("forbiddenId") != null) && (!params.getString("forbiddenId").isEmpty()) ) {
                        // Param: forbiddenId, Type: List
                        calendarsRequestBuilder.withForbiddenId(jsonArrayToStringList(params.getJSONArray("forbiddenId")));
                    }
                    if (params.has("forbiddenUris") && (params.getString("forbiddenUris") != null) && (!params.getString("forbiddenUris").isEmpty()) ) {
                        // Param: forbiddenUris, Type: List
                        calendarsRequestBuilder.withForbiddenUris(jsonArrayToStringList(params.getJSONArray("forbiddenUris")));
                    }
                    if (params.has("distance") && (params.getString("distance") != null) && (!params.getString("distance").isEmpty()) ) {
                        // Param: distance, Type: Integer
                        calendarsRequestBuilder.withDistance(integerStraightPass(params.getInt("distance")));
                    }
                    
                    calendarsRequestBuilder.rawGet(new ApiCallback<String>() {
                        @Override
                        public void onFailure(ApiException e, int statusCode, Map<String, List<String>> responseHeaders) {
                            callbackContext.error("Problem during request call | " + e.getMessage());
                        }

                        @Override
                        public void onSuccess(String result, int statusCode, Map<String, List<String>> responseHeaders) {
                            JSONObject jsonObject = null;
                            try {
                                jsonObject = new JSONObject(result);
                                callbackContext.success(jsonObject);
                            } catch (Exception e) {
                                String errorMessage = "Problem during response parsing | " + String.valueOf(e.hashCode()) + ": " + e.getMessage();
                                callbackContext.error(errorMessage);
                            }
                        }

                        @Override
                        public void onUploadProgress(long bytesWritten, long contentLength, boolean done) {
                        }

                        @Override
                        public void onDownloadProgress(long bytesRead, long contentLength, boolean done) {
                        }
                    });
                } catch (Exception e) {
                    String errorMessage = "Problem during request building | " + String.valueOf(e.hashCode()) + ": " + e.getMessage();
                    callbackContext.error(errorMessage);
                }
            }
        });
    }
    final private void coverageLonLatUriCalendars(final JSONObject params, final CallbackContext callbackContext) {
        if (this.navitiaSdk == null) {
            callbackContext.error("NavitiaSDK is not instanciated");
            return;
        }

        final CalendarsApi.CoverageLonLatUriCalendarsRequestBuilder calendarsRequestBuilder = this.navitiaSdk.calendarsApi.newCoverageLonLatUriCalendarsRequestBuilder();
        cordova.getThreadPool().execute(new Runnable() {
            @Override
            public void run() {
                try {
                    if (params.has("lat") && (params.getString("lat") != null) && (!params.getString("lat").isEmpty()) ) {
                        // Param: lat, Type: BigDecimal
                        calendarsRequestBuilder.withLat(longToBigDecimal(params.getLong("lat")));
                    }
                    if (params.has("lon") && (params.getString("lon") != null) && (!params.getString("lon").isEmpty()) ) {
                        // Param: lon, Type: BigDecimal
                        calendarsRequestBuilder.withLon(longToBigDecimal(params.getLong("lon")));
                    }
                    if (params.has("uri") && (params.getString("uri") != null) && (!params.getString("uri").isEmpty()) ) {
                        // Param: uri, Type: String
                        calendarsRequestBuilder.withUri(stringStraightPass(params.getString("uri")));
                    }
                    if (params.has("depth") && (params.getString("depth") != null) && (!params.getString("depth").isEmpty()) ) {
                        // Param: depth, Type: Integer
                        calendarsRequestBuilder.withDepth(integerStraightPass(params.getInt("depth")));
                    }
                    if (params.has("count") && (params.getString("count") != null) && (!params.getString("count").isEmpty()) ) {
                        // Param: count, Type: Integer
                        calendarsRequestBuilder.withCount(integerStraightPass(params.getInt("count")));
                    }
                    if (params.has("startPage") && (params.getString("startPage") != null) && (!params.getString("startPage").isEmpty()) ) {
                        // Param: startPage, Type: Integer
                        calendarsRequestBuilder.withStartPage(integerStraightPass(params.getInt("startPage")));
                    }
                    if (params.has("startDate") && (params.getString("startDate") != null) && (!params.getString("startDate").isEmpty()) ) {
                        // Param: startDate, Type: String
                        calendarsRequestBuilder.withStartDate(stringStraightPass(params.getString("startDate")));
                    }
                    if (params.has("endDate") && (params.getString("endDate") != null) && (!params.getString("endDate").isEmpty()) ) {
                        // Param: endDate, Type: String
                        calendarsRequestBuilder.withEndDate(stringStraightPass(params.getString("endDate")));
                    }
                    if (params.has("forbiddenId") && (params.getString("forbiddenId") != null) && (!params.getString("forbiddenId").isEmpty()) ) {
                        // Param: forbiddenId, Type: List
                        calendarsRequestBuilder.withForbiddenId(jsonArrayToStringList(params.getJSONArray("forbiddenId")));
                    }
                    if (params.has("forbiddenUris") && (params.getString("forbiddenUris") != null) && (!params.getString("forbiddenUris").isEmpty()) ) {
                        // Param: forbiddenUris, Type: List
                        calendarsRequestBuilder.withForbiddenUris(jsonArrayToStringList(params.getJSONArray("forbiddenUris")));
                    }
                    if (params.has("distance") && (params.getString("distance") != null) && (!params.getString("distance").isEmpty()) ) {
                        // Param: distance, Type: Integer
                        calendarsRequestBuilder.withDistance(integerStraightPass(params.getInt("distance")));
                    }
                    
                    calendarsRequestBuilder.rawGet(new ApiCallback<String>() {
                        @Override
                        public void onFailure(ApiException e, int statusCode, Map<String, List<String>> responseHeaders) {
                            callbackContext.error("Problem during request call | " + e.getMessage());
                        }

                        @Override
                        public void onSuccess(String result, int statusCode, Map<String, List<String>> responseHeaders) {
                            JSONObject jsonObject = null;
                            try {
                                jsonObject = new JSONObject(result);
                                callbackContext.success(jsonObject);
                            } catch (Exception e) {
                                String errorMessage = "Problem during response parsing | " + String.valueOf(e.hashCode()) + ": " + e.getMessage();
                                callbackContext.error(errorMessage);
                            }
                        }

                        @Override
                        public void onUploadProgress(long bytesWritten, long contentLength, boolean done) {
                        }

                        @Override
                        public void onDownloadProgress(long bytesRead, long contentLength, boolean done) {
                        }
                    });
                } catch (Exception e) {
                    String errorMessage = "Problem during request building | " + String.valueOf(e.hashCode()) + ": " + e.getMessage();
                    callbackContext.error(errorMessage);
                }
            }
        });
    }
    final private void coverageRegionCalendars(final JSONObject params, final CallbackContext callbackContext) {
        if (this.navitiaSdk == null) {
            callbackContext.error("NavitiaSDK is not instanciated");
            return;
        }

        final CalendarsApi.CoverageRegionCalendarsRequestBuilder calendarsRequestBuilder = this.navitiaSdk.calendarsApi.newCoverageRegionCalendarsRequestBuilder();
        cordova.getThreadPool().execute(new Runnable() {
            @Override
            public void run() {
                try {
                    if (params.has("region") && (params.getString("region") != null) && (!params.getString("region").isEmpty()) ) {
                        // Param: region, Type: String
                        calendarsRequestBuilder.withRegion(stringStraightPass(params.getString("region")));
                    }
                    if (params.has("depth") && (params.getString("depth") != null) && (!params.getString("depth").isEmpty()) ) {
                        // Param: depth, Type: Integer
                        calendarsRequestBuilder.withDepth(integerStraightPass(params.getInt("depth")));
                    }
                    if (params.has("count") && (params.getString("count") != null) && (!params.getString("count").isEmpty()) ) {
                        // Param: count, Type: Integer
                        calendarsRequestBuilder.withCount(integerStraightPass(params.getInt("count")));
                    }
                    if (params.has("startPage") && (params.getString("startPage") != null) && (!params.getString("startPage").isEmpty()) ) {
                        // Param: startPage, Type: Integer
                        calendarsRequestBuilder.withStartPage(integerStraightPass(params.getInt("startPage")));
                    }
                    if (params.has("startDate") && (params.getString("startDate") != null) && (!params.getString("startDate").isEmpty()) ) {
                        // Param: startDate, Type: String
                        calendarsRequestBuilder.withStartDate(stringStraightPass(params.getString("startDate")));
                    }
                    if (params.has("endDate") && (params.getString("endDate") != null) && (!params.getString("endDate").isEmpty()) ) {
                        // Param: endDate, Type: String
                        calendarsRequestBuilder.withEndDate(stringStraightPass(params.getString("endDate")));
                    }
                    if (params.has("forbiddenId") && (params.getString("forbiddenId") != null) && (!params.getString("forbiddenId").isEmpty()) ) {
                        // Param: forbiddenId, Type: List
                        calendarsRequestBuilder.withForbiddenId(jsonArrayToStringList(params.getJSONArray("forbiddenId")));
                    }
                    if (params.has("forbiddenUris") && (params.getString("forbiddenUris") != null) && (!params.getString("forbiddenUris").isEmpty()) ) {
                        // Param: forbiddenUris, Type: List
                        calendarsRequestBuilder.withForbiddenUris(jsonArrayToStringList(params.getJSONArray("forbiddenUris")));
                    }
                    if (params.has("distance") && (params.getString("distance") != null) && (!params.getString("distance").isEmpty()) ) {
                        // Param: distance, Type: Integer
                        calendarsRequestBuilder.withDistance(integerStraightPass(params.getInt("distance")));
                    }
                    
                    calendarsRequestBuilder.rawGet(new ApiCallback<String>() {
                        @Override
                        public void onFailure(ApiException e, int statusCode, Map<String, List<String>> responseHeaders) {
                            callbackContext.error("Problem during request call | " + e.getMessage());
                        }

                        @Override
                        public void onSuccess(String result, int statusCode, Map<String, List<String>> responseHeaders) {
                            JSONObject jsonObject = null;
                            try {
                                jsonObject = new JSONObject(result);
                                callbackContext.success(jsonObject);
                            } catch (Exception e) {
                                String errorMessage = "Problem during response parsing | " + String.valueOf(e.hashCode()) + ": " + e.getMessage();
                                callbackContext.error(errorMessage);
                            }
                        }

                        @Override
                        public void onUploadProgress(long bytesWritten, long contentLength, boolean done) {
                        }

                        @Override
                        public void onDownloadProgress(long bytesRead, long contentLength, boolean done) {
                        }
                    });
                } catch (Exception e) {
                    String errorMessage = "Problem during request building | " + String.valueOf(e.hashCode()) + ": " + e.getMessage();
                    callbackContext.error(errorMessage);
                }
            }
        });
    }
    final private void coverageRegionCalendarsId(final JSONObject params, final CallbackContext callbackContext) {
        if (this.navitiaSdk == null) {
            callbackContext.error("NavitiaSDK is not instanciated");
            return;
        }

        final CalendarsApi.CoverageRegionCalendarsIdRequestBuilder calendarsRequestBuilder = this.navitiaSdk.calendarsApi.newCoverageRegionCalendarsIdRequestBuilder();
        cordova.getThreadPool().execute(new Runnable() {
            @Override
            public void run() {
                try {
                    if (params.has("region") && (params.getString("region") != null) && (!params.getString("region").isEmpty()) ) {
                        // Param: region, Type: String
                        calendarsRequestBuilder.withRegion(stringStraightPass(params.getString("region")));
                    }
                    if (params.has("id") && (params.getString("id") != null) && (!params.getString("id").isEmpty()) ) {
                        // Param: id, Type: String
                        calendarsRequestBuilder.withId(stringStraightPass(params.getString("id")));
                    }
                    if (params.has("depth") && (params.getString("depth") != null) && (!params.getString("depth").isEmpty()) ) {
                        // Param: depth, Type: Integer
                        calendarsRequestBuilder.withDepth(integerStraightPass(params.getInt("depth")));
                    }
                    if (params.has("count") && (params.getString("count") != null) && (!params.getString("count").isEmpty()) ) {
                        // Param: count, Type: Integer
                        calendarsRequestBuilder.withCount(integerStraightPass(params.getInt("count")));
                    }
                    if (params.has("startPage") && (params.getString("startPage") != null) && (!params.getString("startPage").isEmpty()) ) {
                        // Param: startPage, Type: Integer
                        calendarsRequestBuilder.withStartPage(integerStraightPass(params.getInt("startPage")));
                    }
                    if (params.has("startDate") && (params.getString("startDate") != null) && (!params.getString("startDate").isEmpty()) ) {
                        // Param: startDate, Type: String
                        calendarsRequestBuilder.withStartDate(stringStraightPass(params.getString("startDate")));
                    }
                    if (params.has("endDate") && (params.getString("endDate") != null) && (!params.getString("endDate").isEmpty()) ) {
                        // Param: endDate, Type: String
                        calendarsRequestBuilder.withEndDate(stringStraightPass(params.getString("endDate")));
                    }
                    if (params.has("forbiddenId") && (params.getString("forbiddenId") != null) && (!params.getString("forbiddenId").isEmpty()) ) {
                        // Param: forbiddenId, Type: List
                        calendarsRequestBuilder.withForbiddenId(jsonArrayToStringList(params.getJSONArray("forbiddenId")));
                    }
                    if (params.has("forbiddenUris") && (params.getString("forbiddenUris") != null) && (!params.getString("forbiddenUris").isEmpty()) ) {
                        // Param: forbiddenUris, Type: List
                        calendarsRequestBuilder.withForbiddenUris(jsonArrayToStringList(params.getJSONArray("forbiddenUris")));
                    }
                    if (params.has("distance") && (params.getString("distance") != null) && (!params.getString("distance").isEmpty()) ) {
                        // Param: distance, Type: Integer
                        calendarsRequestBuilder.withDistance(integerStraightPass(params.getInt("distance")));
                    }
                    
                    calendarsRequestBuilder.rawGet(new ApiCallback<String>() {
                        @Override
                        public void onFailure(ApiException e, int statusCode, Map<String, List<String>> responseHeaders) {
                            callbackContext.error("Problem during request call | " + e.getMessage());
                        }

                        @Override
                        public void onSuccess(String result, int statusCode, Map<String, List<String>> responseHeaders) {
                            JSONObject jsonObject = null;
                            try {
                                jsonObject = new JSONObject(result);
                                callbackContext.success(jsonObject);
                            } catch (Exception e) {
                                String errorMessage = "Problem during response parsing | " + String.valueOf(e.hashCode()) + ": " + e.getMessage();
                                callbackContext.error(errorMessage);
                            }
                        }

                        @Override
                        public void onUploadProgress(long bytesWritten, long contentLength, boolean done) {
                        }

                        @Override
                        public void onDownloadProgress(long bytesRead, long contentLength, boolean done) {
                        }
                    });
                } catch (Exception e) {
                    String errorMessage = "Problem during request building | " + String.valueOf(e.hashCode()) + ": " + e.getMessage();
                    callbackContext.error(errorMessage);
                }
            }
        });
    }
    final private void coverageRegionUriCalendars(final JSONObject params, final CallbackContext callbackContext) {
        if (this.navitiaSdk == null) {
            callbackContext.error("NavitiaSDK is not instanciated");
            return;
        }

        final CalendarsApi.CoverageRegionUriCalendarsRequestBuilder calendarsRequestBuilder = this.navitiaSdk.calendarsApi.newCoverageRegionUriCalendarsRequestBuilder();
        cordova.getThreadPool().execute(new Runnable() {
            @Override
            public void run() {
                try {
                    if (params.has("region") && (params.getString("region") != null) && (!params.getString("region").isEmpty()) ) {
                        // Param: region, Type: String
                        calendarsRequestBuilder.withRegion(stringStraightPass(params.getString("region")));
                    }
                    if (params.has("uri") && (params.getString("uri") != null) && (!params.getString("uri").isEmpty()) ) {
                        // Param: uri, Type: String
                        calendarsRequestBuilder.withUri(stringStraightPass(params.getString("uri")));
                    }
                    if (params.has("depth") && (params.getString("depth") != null) && (!params.getString("depth").isEmpty()) ) {
                        // Param: depth, Type: Integer
                        calendarsRequestBuilder.withDepth(integerStraightPass(params.getInt("depth")));
                    }
                    if (params.has("count") && (params.getString("count") != null) && (!params.getString("count").isEmpty()) ) {
                        // Param: count, Type: Integer
                        calendarsRequestBuilder.withCount(integerStraightPass(params.getInt("count")));
                    }
                    if (params.has("startPage") && (params.getString("startPage") != null) && (!params.getString("startPage").isEmpty()) ) {
                        // Param: startPage, Type: Integer
                        calendarsRequestBuilder.withStartPage(integerStraightPass(params.getInt("startPage")));
                    }
                    if (params.has("startDate") && (params.getString("startDate") != null) && (!params.getString("startDate").isEmpty()) ) {
                        // Param: startDate, Type: String
                        calendarsRequestBuilder.withStartDate(stringStraightPass(params.getString("startDate")));
                    }
                    if (params.has("endDate") && (params.getString("endDate") != null) && (!params.getString("endDate").isEmpty()) ) {
                        // Param: endDate, Type: String
                        calendarsRequestBuilder.withEndDate(stringStraightPass(params.getString("endDate")));
                    }
                    if (params.has("forbiddenId") && (params.getString("forbiddenId") != null) && (!params.getString("forbiddenId").isEmpty()) ) {
                        // Param: forbiddenId, Type: List
                        calendarsRequestBuilder.withForbiddenId(jsonArrayToStringList(params.getJSONArray("forbiddenId")));
                    }
                    if (params.has("forbiddenUris") && (params.getString("forbiddenUris") != null) && (!params.getString("forbiddenUris").isEmpty()) ) {
                        // Param: forbiddenUris, Type: List
                        calendarsRequestBuilder.withForbiddenUris(jsonArrayToStringList(params.getJSONArray("forbiddenUris")));
                    }
                    if (params.has("distance") && (params.getString("distance") != null) && (!params.getString("distance").isEmpty()) ) {
                        // Param: distance, Type: Integer
                        calendarsRequestBuilder.withDistance(integerStraightPass(params.getInt("distance")));
                    }
                    
                    calendarsRequestBuilder.rawGet(new ApiCallback<String>() {
                        @Override
                        public void onFailure(ApiException e, int statusCode, Map<String, List<String>> responseHeaders) {
                            callbackContext.error("Problem during request call | " + e.getMessage());
                        }

                        @Override
                        public void onSuccess(String result, int statusCode, Map<String, List<String>> responseHeaders) {
                            JSONObject jsonObject = null;
                            try {
                                jsonObject = new JSONObject(result);
                                callbackContext.success(jsonObject);
                            } catch (Exception e) {
                                String errorMessage = "Problem during response parsing | " + String.valueOf(e.hashCode()) + ": " + e.getMessage();
                                callbackContext.error(errorMessage);
                            }
                        }

                        @Override
                        public void onUploadProgress(long bytesWritten, long contentLength, boolean done) {
                        }

                        @Override
                        public void onDownloadProgress(long bytesRead, long contentLength, boolean done) {
                        }
                    });
                } catch (Exception e) {
                    String errorMessage = "Problem during request building | " + String.valueOf(e.hashCode()) + ": " + e.getMessage();
                    callbackContext.error(errorMessage);
                }
            }
        });
    }
    final private void coverageLonLatCommercialModes(final JSONObject params, final CallbackContext callbackContext) {
        if (this.navitiaSdk == null) {
            callbackContext.error("NavitiaSDK is not instanciated");
            return;
        }

        final CommercialModesApi.CoverageLonLatCommercialModesRequestBuilder commercialModesRequestBuilder = this.navitiaSdk.commercialModesApi.newCoverageLonLatCommercialModesRequestBuilder();
        cordova.getThreadPool().execute(new Runnable() {
            @Override
            public void run() {
                try {
                    if (params.has("lat") && (params.getString("lat") != null) && (!params.getString("lat").isEmpty()) ) {
                        // Param: lat, Type: BigDecimal
                        commercialModesRequestBuilder.withLat(longToBigDecimal(params.getLong("lat")));
                    }
                    if (params.has("lon") && (params.getString("lon") != null) && (!params.getString("lon").isEmpty()) ) {
                        // Param: lon, Type: BigDecimal
                        commercialModesRequestBuilder.withLon(longToBigDecimal(params.getLong("lon")));
                    }
                    if (params.has("startPage") && (params.getString("startPage") != null) && (!params.getString("startPage").isEmpty()) ) {
                        // Param: startPage, Type: Integer
                        commercialModesRequestBuilder.withStartPage(integerStraightPass(params.getInt("startPage")));
                    }
                    if (params.has("count") && (params.getString("count") != null) && (!params.getString("count").isEmpty()) ) {
                        // Param: count, Type: Integer
                        commercialModesRequestBuilder.withCount(integerStraightPass(params.getInt("count")));
                    }
                    if (params.has("depth") && (params.getString("depth") != null) && (!params.getString("depth").isEmpty()) ) {
                        // Param: depth, Type: Integer
                        commercialModesRequestBuilder.withDepth(integerStraightPass(params.getInt("depth")));
                    }
                    if (params.has("forbiddenId") && (params.getString("forbiddenId") != null) && (!params.getString("forbiddenId").isEmpty()) ) {
                        // Param: forbiddenId, Type: List
                        commercialModesRequestBuilder.withForbiddenId(jsonArrayToStringList(params.getJSONArray("forbiddenId")));
                    }
                    if (params.has("forbiddenUris") && (params.getString("forbiddenUris") != null) && (!params.getString("forbiddenUris").isEmpty()) ) {
                        // Param: forbiddenUris, Type: List
                        commercialModesRequestBuilder.withForbiddenUris(jsonArrayToStringList(params.getJSONArray("forbiddenUris")));
                    }
                    if (params.has("externalCode") && (params.getString("externalCode") != null) && (!params.getString("externalCode").isEmpty()) ) {
                        // Param: externalCode, Type: String
                        commercialModesRequestBuilder.withExternalCode(stringStraightPass(params.getString("externalCode")));
                    }
                    if (params.has("headsign") && (params.getString("headsign") != null) && (!params.getString("headsign").isEmpty()) ) {
                        // Param: headsign, Type: String
                        commercialModesRequestBuilder.withHeadsign(stringStraightPass(params.getString("headsign")));
                    }
                    if (params.has("showCodes") && (params.getString("showCodes") != null) && (!params.getString("showCodes").isEmpty()) ) {
                        // Param: showCodes, Type: Boolean
                        commercialModesRequestBuilder.withShowCodes(booleanStraightPass(params.getBoolean("showCodes")));
                    }
                    if (params.has("odtLevel") && (params.getString("odtLevel") != null) && (!params.getString("odtLevel").isEmpty()) ) {
                        // Param: odtLevel, Type: String
                        commercialModesRequestBuilder.withOdtLevel(stringStraightPass(params.getString("odtLevel")));
                    }
                    if (params.has("dataFreshness") && (params.getString("dataFreshness") != null) && (!params.getString("dataFreshness").isEmpty()) ) {
                        // Param: dataFreshness, Type: String
                        commercialModesRequestBuilder.withDataFreshness(stringStraightPass(params.getString("dataFreshness")));
                    }
                    if (params.has("distance") && (params.getString("distance") != null) && (!params.getString("distance").isEmpty()) ) {
                        // Param: distance, Type: Integer
                        commercialModesRequestBuilder.withDistance(integerStraightPass(params.getInt("distance")));
                    }
                    if (params.has("since") && (params.getString("since") != null) && (!params.getString("since").isEmpty()) ) {
                        // Param: since, Type: Date
                        commercialModesRequestBuilder.withSince(stringToDateTime(params.getString("since")));
                    }
                    if (params.has("until") && (params.getString("until") != null) && (!params.getString("until").isEmpty()) ) {
                        // Param: until, Type: Date
                        commercialModesRequestBuilder.withUntil(stringToDateTime(params.getString("until")));
                    }
                    if (params.has("disableGeojson") && (params.getString("disableGeojson") != null) && (!params.getString("disableGeojson").isEmpty()) ) {
                        // Param: disableGeojson, Type: Boolean
                        commercialModesRequestBuilder.withDisableGeojson(booleanStraightPass(params.getBoolean("disableGeojson")));
                    }
                    if (params.has("disableDisruption") && (params.getString("disableDisruption") != null) && (!params.getString("disableDisruption").isEmpty()) ) {
                        // Param: disableDisruption, Type: Boolean
                        commercialModesRequestBuilder.withDisableDisruption(booleanStraightPass(params.getBoolean("disableDisruption")));
                    }
                    if (params.has("filter") && (params.getString("filter") != null) && (!params.getString("filter").isEmpty()) ) {
                        // Param: filter, Type: String
                        commercialModesRequestBuilder.withFilter(stringStraightPass(params.getString("filter")));
                    }
                    if (params.has("tags") && (params.getString("tags") != null) && (!params.getString("tags").isEmpty()) ) {
                        // Param: tags, Type: List
                        commercialModesRequestBuilder.withTags(jsonArrayToStringList(params.getJSONArray("tags")));
                    }
                    
                    commercialModesRequestBuilder.rawGet(new ApiCallback<String>() {
                        @Override
                        public void onFailure(ApiException e, int statusCode, Map<String, List<String>> responseHeaders) {
                            callbackContext.error("Problem during request call | " + e.getMessage());
                        }

                        @Override
                        public void onSuccess(String result, int statusCode, Map<String, List<String>> responseHeaders) {
                            JSONObject jsonObject = null;
                            try {
                                jsonObject = new JSONObject(result);
                                callbackContext.success(jsonObject);
                            } catch (Exception e) {
                                String errorMessage = "Problem during response parsing | " + String.valueOf(e.hashCode()) + ": " + e.getMessage();
                                callbackContext.error(errorMessage);
                            }
                        }

                        @Override
                        public void onUploadProgress(long bytesWritten, long contentLength, boolean done) {
                        }

                        @Override
                        public void onDownloadProgress(long bytesRead, long contentLength, boolean done) {
                        }
                    });
                } catch (Exception e) {
                    String errorMessage = "Problem during request building | " + String.valueOf(e.hashCode()) + ": " + e.getMessage();
                    callbackContext.error(errorMessage);
                }
            }
        });
    }
    final private void coverageLonLatCommercialModesId(final JSONObject params, final CallbackContext callbackContext) {
        if (this.navitiaSdk == null) {
            callbackContext.error("NavitiaSDK is not instanciated");
            return;
        }

        final CommercialModesApi.CoverageLonLatCommercialModesIdRequestBuilder commercialModesRequestBuilder = this.navitiaSdk.commercialModesApi.newCoverageLonLatCommercialModesIdRequestBuilder();
        cordova.getThreadPool().execute(new Runnable() {
            @Override
            public void run() {
                try {
                    if (params.has("lat") && (params.getString("lat") != null) && (!params.getString("lat").isEmpty()) ) {
                        // Param: lat, Type: BigDecimal
                        commercialModesRequestBuilder.withLat(longToBigDecimal(params.getLong("lat")));
                    }
                    if (params.has("lon") && (params.getString("lon") != null) && (!params.getString("lon").isEmpty()) ) {
                        // Param: lon, Type: BigDecimal
                        commercialModesRequestBuilder.withLon(longToBigDecimal(params.getLong("lon")));
                    }
                    if (params.has("id") && (params.getString("id") != null) && (!params.getString("id").isEmpty()) ) {
                        // Param: id, Type: String
                        commercialModesRequestBuilder.withId(stringStraightPass(params.getString("id")));
                    }
                    if (params.has("startPage") && (params.getString("startPage") != null) && (!params.getString("startPage").isEmpty()) ) {
                        // Param: startPage, Type: Integer
                        commercialModesRequestBuilder.withStartPage(integerStraightPass(params.getInt("startPage")));
                    }
                    if (params.has("count") && (params.getString("count") != null) && (!params.getString("count").isEmpty()) ) {
                        // Param: count, Type: Integer
                        commercialModesRequestBuilder.withCount(integerStraightPass(params.getInt("count")));
                    }
                    if (params.has("depth") && (params.getString("depth") != null) && (!params.getString("depth").isEmpty()) ) {
                        // Param: depth, Type: Integer
                        commercialModesRequestBuilder.withDepth(integerStraightPass(params.getInt("depth")));
                    }
                    if (params.has("forbiddenId") && (params.getString("forbiddenId") != null) && (!params.getString("forbiddenId").isEmpty()) ) {
                        // Param: forbiddenId, Type: List
                        commercialModesRequestBuilder.withForbiddenId(jsonArrayToStringList(params.getJSONArray("forbiddenId")));
                    }
                    if (params.has("forbiddenUris") && (params.getString("forbiddenUris") != null) && (!params.getString("forbiddenUris").isEmpty()) ) {
                        // Param: forbiddenUris, Type: List
                        commercialModesRequestBuilder.withForbiddenUris(jsonArrayToStringList(params.getJSONArray("forbiddenUris")));
                    }
                    if (params.has("externalCode") && (params.getString("externalCode") != null) && (!params.getString("externalCode").isEmpty()) ) {
                        // Param: externalCode, Type: String
                        commercialModesRequestBuilder.withExternalCode(stringStraightPass(params.getString("externalCode")));
                    }
                    if (params.has("headsign") && (params.getString("headsign") != null) && (!params.getString("headsign").isEmpty()) ) {
                        // Param: headsign, Type: String
                        commercialModesRequestBuilder.withHeadsign(stringStraightPass(params.getString("headsign")));
                    }
                    if (params.has("showCodes") && (params.getString("showCodes") != null) && (!params.getString("showCodes").isEmpty()) ) {
                        // Param: showCodes, Type: Boolean
                        commercialModesRequestBuilder.withShowCodes(booleanStraightPass(params.getBoolean("showCodes")));
                    }
                    if (params.has("odtLevel") && (params.getString("odtLevel") != null) && (!params.getString("odtLevel").isEmpty()) ) {
                        // Param: odtLevel, Type: String
                        commercialModesRequestBuilder.withOdtLevel(stringStraightPass(params.getString("odtLevel")));
                    }
                    if (params.has("dataFreshness") && (params.getString("dataFreshness") != null) && (!params.getString("dataFreshness").isEmpty()) ) {
                        // Param: dataFreshness, Type: String
                        commercialModesRequestBuilder.withDataFreshness(stringStraightPass(params.getString("dataFreshness")));
                    }
                    if (params.has("distance") && (params.getString("distance") != null) && (!params.getString("distance").isEmpty()) ) {
                        // Param: distance, Type: Integer
                        commercialModesRequestBuilder.withDistance(integerStraightPass(params.getInt("distance")));
                    }
                    if (params.has("since") && (params.getString("since") != null) && (!params.getString("since").isEmpty()) ) {
                        // Param: since, Type: Date
                        commercialModesRequestBuilder.withSince(stringToDateTime(params.getString("since")));
                    }
                    if (params.has("until") && (params.getString("until") != null) && (!params.getString("until").isEmpty()) ) {
                        // Param: until, Type: Date
                        commercialModesRequestBuilder.withUntil(stringToDateTime(params.getString("until")));
                    }
                    if (params.has("disableGeojson") && (params.getString("disableGeojson") != null) && (!params.getString("disableGeojson").isEmpty()) ) {
                        // Param: disableGeojson, Type: Boolean
                        commercialModesRequestBuilder.withDisableGeojson(booleanStraightPass(params.getBoolean("disableGeojson")));
                    }
                    if (params.has("disableDisruption") && (params.getString("disableDisruption") != null) && (!params.getString("disableDisruption").isEmpty()) ) {
                        // Param: disableDisruption, Type: Boolean
                        commercialModesRequestBuilder.withDisableDisruption(booleanStraightPass(params.getBoolean("disableDisruption")));
                    }
                    if (params.has("tags") && (params.getString("tags") != null) && (!params.getString("tags").isEmpty()) ) {
                        // Param: tags, Type: List
                        commercialModesRequestBuilder.withTags(jsonArrayToStringList(params.getJSONArray("tags")));
                    }
                    
                    commercialModesRequestBuilder.rawGet(new ApiCallback<String>() {
                        @Override
                        public void onFailure(ApiException e, int statusCode, Map<String, List<String>> responseHeaders) {
                            callbackContext.error("Problem during request call | " + e.getMessage());
                        }

                        @Override
                        public void onSuccess(String result, int statusCode, Map<String, List<String>> responseHeaders) {
                            JSONObject jsonObject = null;
                            try {
                                jsonObject = new JSONObject(result);
                                callbackContext.success(jsonObject);
                            } catch (Exception e) {
                                String errorMessage = "Problem during response parsing | " + String.valueOf(e.hashCode()) + ": " + e.getMessage();
                                callbackContext.error(errorMessage);
                            }
                        }

                        @Override
                        public void onUploadProgress(long bytesWritten, long contentLength, boolean done) {
                        }

                        @Override
                        public void onDownloadProgress(long bytesRead, long contentLength, boolean done) {
                        }
                    });
                } catch (Exception e) {
                    String errorMessage = "Problem during request building | " + String.valueOf(e.hashCode()) + ": " + e.getMessage();
                    callbackContext.error(errorMessage);
                }
            }
        });
    }
    final private void coverageLonLatUriCommercialModes(final JSONObject params, final CallbackContext callbackContext) {
        if (this.navitiaSdk == null) {
            callbackContext.error("NavitiaSDK is not instanciated");
            return;
        }

        final CommercialModesApi.CoverageLonLatUriCommercialModesRequestBuilder commercialModesRequestBuilder = this.navitiaSdk.commercialModesApi.newCoverageLonLatUriCommercialModesRequestBuilder();
        cordova.getThreadPool().execute(new Runnable() {
            @Override
            public void run() {
                try {
                    if (params.has("lat") && (params.getString("lat") != null) && (!params.getString("lat").isEmpty()) ) {
                        // Param: lat, Type: BigDecimal
                        commercialModesRequestBuilder.withLat(longToBigDecimal(params.getLong("lat")));
                    }
                    if (params.has("lon") && (params.getString("lon") != null) && (!params.getString("lon").isEmpty()) ) {
                        // Param: lon, Type: BigDecimal
                        commercialModesRequestBuilder.withLon(longToBigDecimal(params.getLong("lon")));
                    }
                    if (params.has("uri") && (params.getString("uri") != null) && (!params.getString("uri").isEmpty()) ) {
                        // Param: uri, Type: String
                        commercialModesRequestBuilder.withUri(stringStraightPass(params.getString("uri")));
                    }
                    if (params.has("startPage") && (params.getString("startPage") != null) && (!params.getString("startPage").isEmpty()) ) {
                        // Param: startPage, Type: Integer
                        commercialModesRequestBuilder.withStartPage(integerStraightPass(params.getInt("startPage")));
                    }
                    if (params.has("count") && (params.getString("count") != null) && (!params.getString("count").isEmpty()) ) {
                        // Param: count, Type: Integer
                        commercialModesRequestBuilder.withCount(integerStraightPass(params.getInt("count")));
                    }
                    if (params.has("depth") && (params.getString("depth") != null) && (!params.getString("depth").isEmpty()) ) {
                        // Param: depth, Type: Integer
                        commercialModesRequestBuilder.withDepth(integerStraightPass(params.getInt("depth")));
                    }
                    if (params.has("forbiddenId") && (params.getString("forbiddenId") != null) && (!params.getString("forbiddenId").isEmpty()) ) {
                        // Param: forbiddenId, Type: List
                        commercialModesRequestBuilder.withForbiddenId(jsonArrayToStringList(params.getJSONArray("forbiddenId")));
                    }
                    if (params.has("forbiddenUris") && (params.getString("forbiddenUris") != null) && (!params.getString("forbiddenUris").isEmpty()) ) {
                        // Param: forbiddenUris, Type: List
                        commercialModesRequestBuilder.withForbiddenUris(jsonArrayToStringList(params.getJSONArray("forbiddenUris")));
                    }
                    if (params.has("externalCode") && (params.getString("externalCode") != null) && (!params.getString("externalCode").isEmpty()) ) {
                        // Param: externalCode, Type: String
                        commercialModesRequestBuilder.withExternalCode(stringStraightPass(params.getString("externalCode")));
                    }
                    if (params.has("headsign") && (params.getString("headsign") != null) && (!params.getString("headsign").isEmpty()) ) {
                        // Param: headsign, Type: String
                        commercialModesRequestBuilder.withHeadsign(stringStraightPass(params.getString("headsign")));
                    }
                    if (params.has("showCodes") && (params.getString("showCodes") != null) && (!params.getString("showCodes").isEmpty()) ) {
                        // Param: showCodes, Type: Boolean
                        commercialModesRequestBuilder.withShowCodes(booleanStraightPass(params.getBoolean("showCodes")));
                    }
                    if (params.has("odtLevel") && (params.getString("odtLevel") != null) && (!params.getString("odtLevel").isEmpty()) ) {
                        // Param: odtLevel, Type: String
                        commercialModesRequestBuilder.withOdtLevel(stringStraightPass(params.getString("odtLevel")));
                    }
                    if (params.has("dataFreshness") && (params.getString("dataFreshness") != null) && (!params.getString("dataFreshness").isEmpty()) ) {
                        // Param: dataFreshness, Type: String
                        commercialModesRequestBuilder.withDataFreshness(stringStraightPass(params.getString("dataFreshness")));
                    }
                    if (params.has("distance") && (params.getString("distance") != null) && (!params.getString("distance").isEmpty()) ) {
                        // Param: distance, Type: Integer
                        commercialModesRequestBuilder.withDistance(integerStraightPass(params.getInt("distance")));
                    }
                    if (params.has("since") && (params.getString("since") != null) && (!params.getString("since").isEmpty()) ) {
                        // Param: since, Type: Date
                        commercialModesRequestBuilder.withSince(stringToDateTime(params.getString("since")));
                    }
                    if (params.has("until") && (params.getString("until") != null) && (!params.getString("until").isEmpty()) ) {
                        // Param: until, Type: Date
                        commercialModesRequestBuilder.withUntil(stringToDateTime(params.getString("until")));
                    }
                    if (params.has("disableGeojson") && (params.getString("disableGeojson") != null) && (!params.getString("disableGeojson").isEmpty()) ) {
                        // Param: disableGeojson, Type: Boolean
                        commercialModesRequestBuilder.withDisableGeojson(booleanStraightPass(params.getBoolean("disableGeojson")));
                    }
                    if (params.has("disableDisruption") && (params.getString("disableDisruption") != null) && (!params.getString("disableDisruption").isEmpty()) ) {
                        // Param: disableDisruption, Type: Boolean
                        commercialModesRequestBuilder.withDisableDisruption(booleanStraightPass(params.getBoolean("disableDisruption")));
                    }
                    if (params.has("filter") && (params.getString("filter") != null) && (!params.getString("filter").isEmpty()) ) {
                        // Param: filter, Type: String
                        commercialModesRequestBuilder.withFilter(stringStraightPass(params.getString("filter")));
                    }
                    if (params.has("tags") && (params.getString("tags") != null) && (!params.getString("tags").isEmpty()) ) {
                        // Param: tags, Type: List
                        commercialModesRequestBuilder.withTags(jsonArrayToStringList(params.getJSONArray("tags")));
                    }
                    
                    commercialModesRequestBuilder.rawGet(new ApiCallback<String>() {
                        @Override
                        public void onFailure(ApiException e, int statusCode, Map<String, List<String>> responseHeaders) {
                            callbackContext.error("Problem during request call | " + e.getMessage());
                        }

                        @Override
                        public void onSuccess(String result, int statusCode, Map<String, List<String>> responseHeaders) {
                            JSONObject jsonObject = null;
                            try {
                                jsonObject = new JSONObject(result);
                                callbackContext.success(jsonObject);
                            } catch (Exception e) {
                                String errorMessage = "Problem during response parsing | " + String.valueOf(e.hashCode()) + ": " + e.getMessage();
                                callbackContext.error(errorMessage);
                            }
                        }

                        @Override
                        public void onUploadProgress(long bytesWritten, long contentLength, boolean done) {
                        }

                        @Override
                        public void onDownloadProgress(long bytesRead, long contentLength, boolean done) {
                        }
                    });
                } catch (Exception e) {
                    String errorMessage = "Problem during request building | " + String.valueOf(e.hashCode()) + ": " + e.getMessage();
                    callbackContext.error(errorMessage);
                }
            }
        });
    }
    final private void coverageLonLatUriCommercialModesId(final JSONObject params, final CallbackContext callbackContext) {
        if (this.navitiaSdk == null) {
            callbackContext.error("NavitiaSDK is not instanciated");
            return;
        }

        final CommercialModesApi.CoverageLonLatUriCommercialModesIdRequestBuilder commercialModesRequestBuilder = this.navitiaSdk.commercialModesApi.newCoverageLonLatUriCommercialModesIdRequestBuilder();
        cordova.getThreadPool().execute(new Runnable() {
            @Override
            public void run() {
                try {
                    if (params.has("lat") && (params.getString("lat") != null) && (!params.getString("lat").isEmpty()) ) {
                        // Param: lat, Type: BigDecimal
                        commercialModesRequestBuilder.withLat(longToBigDecimal(params.getLong("lat")));
                    }
                    if (params.has("lon") && (params.getString("lon") != null) && (!params.getString("lon").isEmpty()) ) {
                        // Param: lon, Type: BigDecimal
                        commercialModesRequestBuilder.withLon(longToBigDecimal(params.getLong("lon")));
                    }
                    if (params.has("uri") && (params.getString("uri") != null) && (!params.getString("uri").isEmpty()) ) {
                        // Param: uri, Type: String
                        commercialModesRequestBuilder.withUri(stringStraightPass(params.getString("uri")));
                    }
                    if (params.has("id") && (params.getString("id") != null) && (!params.getString("id").isEmpty()) ) {
                        // Param: id, Type: String
                        commercialModesRequestBuilder.withId(stringStraightPass(params.getString("id")));
                    }
                    if (params.has("startPage") && (params.getString("startPage") != null) && (!params.getString("startPage").isEmpty()) ) {
                        // Param: startPage, Type: Integer
                        commercialModesRequestBuilder.withStartPage(integerStraightPass(params.getInt("startPage")));
                    }
                    if (params.has("count") && (params.getString("count") != null) && (!params.getString("count").isEmpty()) ) {
                        // Param: count, Type: Integer
                        commercialModesRequestBuilder.withCount(integerStraightPass(params.getInt("count")));
                    }
                    if (params.has("depth") && (params.getString("depth") != null) && (!params.getString("depth").isEmpty()) ) {
                        // Param: depth, Type: Integer
                        commercialModesRequestBuilder.withDepth(integerStraightPass(params.getInt("depth")));
                    }
                    if (params.has("forbiddenId") && (params.getString("forbiddenId") != null) && (!params.getString("forbiddenId").isEmpty()) ) {
                        // Param: forbiddenId, Type: List
                        commercialModesRequestBuilder.withForbiddenId(jsonArrayToStringList(params.getJSONArray("forbiddenId")));
                    }
                    if (params.has("forbiddenUris") && (params.getString("forbiddenUris") != null) && (!params.getString("forbiddenUris").isEmpty()) ) {
                        // Param: forbiddenUris, Type: List
                        commercialModesRequestBuilder.withForbiddenUris(jsonArrayToStringList(params.getJSONArray("forbiddenUris")));
                    }
                    if (params.has("externalCode") && (params.getString("externalCode") != null) && (!params.getString("externalCode").isEmpty()) ) {
                        // Param: externalCode, Type: String
                        commercialModesRequestBuilder.withExternalCode(stringStraightPass(params.getString("externalCode")));
                    }
                    if (params.has("headsign") && (params.getString("headsign") != null) && (!params.getString("headsign").isEmpty()) ) {
                        // Param: headsign, Type: String
                        commercialModesRequestBuilder.withHeadsign(stringStraightPass(params.getString("headsign")));
                    }
                    if (params.has("showCodes") && (params.getString("showCodes") != null) && (!params.getString("showCodes").isEmpty()) ) {
                        // Param: showCodes, Type: Boolean
                        commercialModesRequestBuilder.withShowCodes(booleanStraightPass(params.getBoolean("showCodes")));
                    }
                    if (params.has("odtLevel") && (params.getString("odtLevel") != null) && (!params.getString("odtLevel").isEmpty()) ) {
                        // Param: odtLevel, Type: String
                        commercialModesRequestBuilder.withOdtLevel(stringStraightPass(params.getString("odtLevel")));
                    }
                    if (params.has("dataFreshness") && (params.getString("dataFreshness") != null) && (!params.getString("dataFreshness").isEmpty()) ) {
                        // Param: dataFreshness, Type: String
                        commercialModesRequestBuilder.withDataFreshness(stringStraightPass(params.getString("dataFreshness")));
                    }
                    if (params.has("distance") && (params.getString("distance") != null) && (!params.getString("distance").isEmpty()) ) {
                        // Param: distance, Type: Integer
                        commercialModesRequestBuilder.withDistance(integerStraightPass(params.getInt("distance")));
                    }
                    if (params.has("since") && (params.getString("since") != null) && (!params.getString("since").isEmpty()) ) {
                        // Param: since, Type: Date
                        commercialModesRequestBuilder.withSince(stringToDateTime(params.getString("since")));
                    }
                    if (params.has("until") && (params.getString("until") != null) && (!params.getString("until").isEmpty()) ) {
                        // Param: until, Type: Date
                        commercialModesRequestBuilder.withUntil(stringToDateTime(params.getString("until")));
                    }
                    if (params.has("disableGeojson") && (params.getString("disableGeojson") != null) && (!params.getString("disableGeojson").isEmpty()) ) {
                        // Param: disableGeojson, Type: Boolean
                        commercialModesRequestBuilder.withDisableGeojson(booleanStraightPass(params.getBoolean("disableGeojson")));
                    }
                    if (params.has("disableDisruption") && (params.getString("disableDisruption") != null) && (!params.getString("disableDisruption").isEmpty()) ) {
                        // Param: disableDisruption, Type: Boolean
                        commercialModesRequestBuilder.withDisableDisruption(booleanStraightPass(params.getBoolean("disableDisruption")));
                    }
                    if (params.has("tags") && (params.getString("tags") != null) && (!params.getString("tags").isEmpty()) ) {
                        // Param: tags, Type: List
                        commercialModesRequestBuilder.withTags(jsonArrayToStringList(params.getJSONArray("tags")));
                    }
                    
                    commercialModesRequestBuilder.rawGet(new ApiCallback<String>() {
                        @Override
                        public void onFailure(ApiException e, int statusCode, Map<String, List<String>> responseHeaders) {
                            callbackContext.error("Problem during request call | " + e.getMessage());
                        }

                        @Override
                        public void onSuccess(String result, int statusCode, Map<String, List<String>> responseHeaders) {
                            JSONObject jsonObject = null;
                            try {
                                jsonObject = new JSONObject(result);
                                callbackContext.success(jsonObject);
                            } catch (Exception e) {
                                String errorMessage = "Problem during response parsing | " + String.valueOf(e.hashCode()) + ": " + e.getMessage();
                                callbackContext.error(errorMessage);
                            }
                        }

                        @Override
                        public void onUploadProgress(long bytesWritten, long contentLength, boolean done) {
                        }

                        @Override
                        public void onDownloadProgress(long bytesRead, long contentLength, boolean done) {
                        }
                    });
                } catch (Exception e) {
                    String errorMessage = "Problem during request building | " + String.valueOf(e.hashCode()) + ": " + e.getMessage();
                    callbackContext.error(errorMessage);
                }
            }
        });
    }
    final private void coverageRegionCommercialModes(final JSONObject params, final CallbackContext callbackContext) {
        if (this.navitiaSdk == null) {
            callbackContext.error("NavitiaSDK is not instanciated");
            return;
        }

        final CommercialModesApi.CoverageRegionCommercialModesRequestBuilder commercialModesRequestBuilder = this.navitiaSdk.commercialModesApi.newCoverageRegionCommercialModesRequestBuilder();
        cordova.getThreadPool().execute(new Runnable() {
            @Override
            public void run() {
                try {
                    if (params.has("region") && (params.getString("region") != null) && (!params.getString("region").isEmpty()) ) {
                        // Param: region, Type: String
                        commercialModesRequestBuilder.withRegion(stringStraightPass(params.getString("region")));
                    }
                    if (params.has("startPage") && (params.getString("startPage") != null) && (!params.getString("startPage").isEmpty()) ) {
                        // Param: startPage, Type: Integer
                        commercialModesRequestBuilder.withStartPage(integerStraightPass(params.getInt("startPage")));
                    }
                    if (params.has("count") && (params.getString("count") != null) && (!params.getString("count").isEmpty()) ) {
                        // Param: count, Type: Integer
                        commercialModesRequestBuilder.withCount(integerStraightPass(params.getInt("count")));
                    }
                    if (params.has("depth") && (params.getString("depth") != null) && (!params.getString("depth").isEmpty()) ) {
                        // Param: depth, Type: Integer
                        commercialModesRequestBuilder.withDepth(integerStraightPass(params.getInt("depth")));
                    }
                    if (params.has("forbiddenId") && (params.getString("forbiddenId") != null) && (!params.getString("forbiddenId").isEmpty()) ) {
                        // Param: forbiddenId, Type: List
                        commercialModesRequestBuilder.withForbiddenId(jsonArrayToStringList(params.getJSONArray("forbiddenId")));
                    }
                    if (params.has("forbiddenUris") && (params.getString("forbiddenUris") != null) && (!params.getString("forbiddenUris").isEmpty()) ) {
                        // Param: forbiddenUris, Type: List
                        commercialModesRequestBuilder.withForbiddenUris(jsonArrayToStringList(params.getJSONArray("forbiddenUris")));
                    }
                    if (params.has("externalCode") && (params.getString("externalCode") != null) && (!params.getString("externalCode").isEmpty()) ) {
                        // Param: externalCode, Type: String
                        commercialModesRequestBuilder.withExternalCode(stringStraightPass(params.getString("externalCode")));
                    }
                    if (params.has("headsign") && (params.getString("headsign") != null) && (!params.getString("headsign").isEmpty()) ) {
                        // Param: headsign, Type: String
                        commercialModesRequestBuilder.withHeadsign(stringStraightPass(params.getString("headsign")));
                    }
                    if (params.has("showCodes") && (params.getString("showCodes") != null) && (!params.getString("showCodes").isEmpty()) ) {
                        // Param: showCodes, Type: Boolean
                        commercialModesRequestBuilder.withShowCodes(booleanStraightPass(params.getBoolean("showCodes")));
                    }
                    if (params.has("odtLevel") && (params.getString("odtLevel") != null) && (!params.getString("odtLevel").isEmpty()) ) {
                        // Param: odtLevel, Type: String
                        commercialModesRequestBuilder.withOdtLevel(stringStraightPass(params.getString("odtLevel")));
                    }
                    if (params.has("dataFreshness") && (params.getString("dataFreshness") != null) && (!params.getString("dataFreshness").isEmpty()) ) {
                        // Param: dataFreshness, Type: String
                        commercialModesRequestBuilder.withDataFreshness(stringStraightPass(params.getString("dataFreshness")));
                    }
                    if (params.has("distance") && (params.getString("distance") != null) && (!params.getString("distance").isEmpty()) ) {
                        // Param: distance, Type: Integer
                        commercialModesRequestBuilder.withDistance(integerStraightPass(params.getInt("distance")));
                    }
                    if (params.has("since") && (params.getString("since") != null) && (!params.getString("since").isEmpty()) ) {
                        // Param: since, Type: Date
                        commercialModesRequestBuilder.withSince(stringToDateTime(params.getString("since")));
                    }
                    if (params.has("until") && (params.getString("until") != null) && (!params.getString("until").isEmpty()) ) {
                        // Param: until, Type: Date
                        commercialModesRequestBuilder.withUntil(stringToDateTime(params.getString("until")));
                    }
                    if (params.has("disableGeojson") && (params.getString("disableGeojson") != null) && (!params.getString("disableGeojson").isEmpty()) ) {
                        // Param: disableGeojson, Type: Boolean
                        commercialModesRequestBuilder.withDisableGeojson(booleanStraightPass(params.getBoolean("disableGeojson")));
                    }
                    if (params.has("disableDisruption") && (params.getString("disableDisruption") != null) && (!params.getString("disableDisruption").isEmpty()) ) {
                        // Param: disableDisruption, Type: Boolean
                        commercialModesRequestBuilder.withDisableDisruption(booleanStraightPass(params.getBoolean("disableDisruption")));
                    }
                    if (params.has("filter") && (params.getString("filter") != null) && (!params.getString("filter").isEmpty()) ) {
                        // Param: filter, Type: String
                        commercialModesRequestBuilder.withFilter(stringStraightPass(params.getString("filter")));
                    }
                    if (params.has("tags") && (params.getString("tags") != null) && (!params.getString("tags").isEmpty()) ) {
                        // Param: tags, Type: List
                        commercialModesRequestBuilder.withTags(jsonArrayToStringList(params.getJSONArray("tags")));
                    }
                    
                    commercialModesRequestBuilder.rawGet(new ApiCallback<String>() {
                        @Override
                        public void onFailure(ApiException e, int statusCode, Map<String, List<String>> responseHeaders) {
                            callbackContext.error("Problem during request call | " + e.getMessage());
                        }

                        @Override
                        public void onSuccess(String result, int statusCode, Map<String, List<String>> responseHeaders) {
                            JSONObject jsonObject = null;
                            try {
                                jsonObject = new JSONObject(result);
                                callbackContext.success(jsonObject);
                            } catch (Exception e) {
                                String errorMessage = "Problem during response parsing | " + String.valueOf(e.hashCode()) + ": " + e.getMessage();
                                callbackContext.error(errorMessage);
                            }
                        }

                        @Override
                        public void onUploadProgress(long bytesWritten, long contentLength, boolean done) {
                        }

                        @Override
                        public void onDownloadProgress(long bytesRead, long contentLength, boolean done) {
                        }
                    });
                } catch (Exception e) {
                    String errorMessage = "Problem during request building | " + String.valueOf(e.hashCode()) + ": " + e.getMessage();
                    callbackContext.error(errorMessage);
                }
            }
        });
    }
    final private void coverageRegionCommercialModesId(final JSONObject params, final CallbackContext callbackContext) {
        if (this.navitiaSdk == null) {
            callbackContext.error("NavitiaSDK is not instanciated");
            return;
        }

        final CommercialModesApi.CoverageRegionCommercialModesIdRequestBuilder commercialModesRequestBuilder = this.navitiaSdk.commercialModesApi.newCoverageRegionCommercialModesIdRequestBuilder();
        cordova.getThreadPool().execute(new Runnable() {
            @Override
            public void run() {
                try {
                    if (params.has("region") && (params.getString("region") != null) && (!params.getString("region").isEmpty()) ) {
                        // Param: region, Type: String
                        commercialModesRequestBuilder.withRegion(stringStraightPass(params.getString("region")));
                    }
                    if (params.has("id") && (params.getString("id") != null) && (!params.getString("id").isEmpty()) ) {
                        // Param: id, Type: String
                        commercialModesRequestBuilder.withId(stringStraightPass(params.getString("id")));
                    }
                    if (params.has("startPage") && (params.getString("startPage") != null) && (!params.getString("startPage").isEmpty()) ) {
                        // Param: startPage, Type: Integer
                        commercialModesRequestBuilder.withStartPage(integerStraightPass(params.getInt("startPage")));
                    }
                    if (params.has("count") && (params.getString("count") != null) && (!params.getString("count").isEmpty()) ) {
                        // Param: count, Type: Integer
                        commercialModesRequestBuilder.withCount(integerStraightPass(params.getInt("count")));
                    }
                    if (params.has("depth") && (params.getString("depth") != null) && (!params.getString("depth").isEmpty()) ) {
                        // Param: depth, Type: Integer
                        commercialModesRequestBuilder.withDepth(integerStraightPass(params.getInt("depth")));
                    }
                    if (params.has("forbiddenId") && (params.getString("forbiddenId") != null) && (!params.getString("forbiddenId").isEmpty()) ) {
                        // Param: forbiddenId, Type: List
                        commercialModesRequestBuilder.withForbiddenId(jsonArrayToStringList(params.getJSONArray("forbiddenId")));
                    }
                    if (params.has("forbiddenUris") && (params.getString("forbiddenUris") != null) && (!params.getString("forbiddenUris").isEmpty()) ) {
                        // Param: forbiddenUris, Type: List
                        commercialModesRequestBuilder.withForbiddenUris(jsonArrayToStringList(params.getJSONArray("forbiddenUris")));
                    }
                    if (params.has("externalCode") && (params.getString("externalCode") != null) && (!params.getString("externalCode").isEmpty()) ) {
                        // Param: externalCode, Type: String
                        commercialModesRequestBuilder.withExternalCode(stringStraightPass(params.getString("externalCode")));
                    }
                    if (params.has("headsign") && (params.getString("headsign") != null) && (!params.getString("headsign").isEmpty()) ) {
                        // Param: headsign, Type: String
                        commercialModesRequestBuilder.withHeadsign(stringStraightPass(params.getString("headsign")));
                    }
                    if (params.has("showCodes") && (params.getString("showCodes") != null) && (!params.getString("showCodes").isEmpty()) ) {
                        // Param: showCodes, Type: Boolean
                        commercialModesRequestBuilder.withShowCodes(booleanStraightPass(params.getBoolean("showCodes")));
                    }
                    if (params.has("odtLevel") && (params.getString("odtLevel") != null) && (!params.getString("odtLevel").isEmpty()) ) {
                        // Param: odtLevel, Type: String
                        commercialModesRequestBuilder.withOdtLevel(stringStraightPass(params.getString("odtLevel")));
                    }
                    if (params.has("dataFreshness") && (params.getString("dataFreshness") != null) && (!params.getString("dataFreshness").isEmpty()) ) {
                        // Param: dataFreshness, Type: String
                        commercialModesRequestBuilder.withDataFreshness(stringStraightPass(params.getString("dataFreshness")));
                    }
                    if (params.has("distance") && (params.getString("distance") != null) && (!params.getString("distance").isEmpty()) ) {
                        // Param: distance, Type: Integer
                        commercialModesRequestBuilder.withDistance(integerStraightPass(params.getInt("distance")));
                    }
                    if (params.has("since") && (params.getString("since") != null) && (!params.getString("since").isEmpty()) ) {
                        // Param: since, Type: Date
                        commercialModesRequestBuilder.withSince(stringToDateTime(params.getString("since")));
                    }
                    if (params.has("until") && (params.getString("until") != null) && (!params.getString("until").isEmpty()) ) {
                        // Param: until, Type: Date
                        commercialModesRequestBuilder.withUntil(stringToDateTime(params.getString("until")));
                    }
                    if (params.has("disableGeojson") && (params.getString("disableGeojson") != null) && (!params.getString("disableGeojson").isEmpty()) ) {
                        // Param: disableGeojson, Type: Boolean
                        commercialModesRequestBuilder.withDisableGeojson(booleanStraightPass(params.getBoolean("disableGeojson")));
                    }
                    if (params.has("disableDisruption") && (params.getString("disableDisruption") != null) && (!params.getString("disableDisruption").isEmpty()) ) {
                        // Param: disableDisruption, Type: Boolean
                        commercialModesRequestBuilder.withDisableDisruption(booleanStraightPass(params.getBoolean("disableDisruption")));
                    }
                    if (params.has("tags") && (params.getString("tags") != null) && (!params.getString("tags").isEmpty()) ) {
                        // Param: tags, Type: List
                        commercialModesRequestBuilder.withTags(jsonArrayToStringList(params.getJSONArray("tags")));
                    }
                    
                    commercialModesRequestBuilder.rawGet(new ApiCallback<String>() {
                        @Override
                        public void onFailure(ApiException e, int statusCode, Map<String, List<String>> responseHeaders) {
                            callbackContext.error("Problem during request call | " + e.getMessage());
                        }

                        @Override
                        public void onSuccess(String result, int statusCode, Map<String, List<String>> responseHeaders) {
                            JSONObject jsonObject = null;
                            try {
                                jsonObject = new JSONObject(result);
                                callbackContext.success(jsonObject);
                            } catch (Exception e) {
                                String errorMessage = "Problem during response parsing | " + String.valueOf(e.hashCode()) + ": " + e.getMessage();
                                callbackContext.error(errorMessage);
                            }
                        }

                        @Override
                        public void onUploadProgress(long bytesWritten, long contentLength, boolean done) {
                        }

                        @Override
                        public void onDownloadProgress(long bytesRead, long contentLength, boolean done) {
                        }
                    });
                } catch (Exception e) {
                    String errorMessage = "Problem during request building | " + String.valueOf(e.hashCode()) + ": " + e.getMessage();
                    callbackContext.error(errorMessage);
                }
            }
        });
    }
    final private void coverageRegionUriCommercialModes(final JSONObject params, final CallbackContext callbackContext) {
        if (this.navitiaSdk == null) {
            callbackContext.error("NavitiaSDK is not instanciated");
            return;
        }

        final CommercialModesApi.CoverageRegionUriCommercialModesRequestBuilder commercialModesRequestBuilder = this.navitiaSdk.commercialModesApi.newCoverageRegionUriCommercialModesRequestBuilder();
        cordova.getThreadPool().execute(new Runnable() {
            @Override
            public void run() {
                try {
                    if (params.has("region") && (params.getString("region") != null) && (!params.getString("region").isEmpty()) ) {
                        // Param: region, Type: String
                        commercialModesRequestBuilder.withRegion(stringStraightPass(params.getString("region")));
                    }
                    if (params.has("uri") && (params.getString("uri") != null) && (!params.getString("uri").isEmpty()) ) {
                        // Param: uri, Type: String
                        commercialModesRequestBuilder.withUri(stringStraightPass(params.getString("uri")));
                    }
                    if (params.has("startPage") && (params.getString("startPage") != null) && (!params.getString("startPage").isEmpty()) ) {
                        // Param: startPage, Type: Integer
                        commercialModesRequestBuilder.withStartPage(integerStraightPass(params.getInt("startPage")));
                    }
                    if (params.has("count") && (params.getString("count") != null) && (!params.getString("count").isEmpty()) ) {
                        // Param: count, Type: Integer
                        commercialModesRequestBuilder.withCount(integerStraightPass(params.getInt("count")));
                    }
                    if (params.has("depth") && (params.getString("depth") != null) && (!params.getString("depth").isEmpty()) ) {
                        // Param: depth, Type: Integer
                        commercialModesRequestBuilder.withDepth(integerStraightPass(params.getInt("depth")));
                    }
                    if (params.has("forbiddenId") && (params.getString("forbiddenId") != null) && (!params.getString("forbiddenId").isEmpty()) ) {
                        // Param: forbiddenId, Type: List
                        commercialModesRequestBuilder.withForbiddenId(jsonArrayToStringList(params.getJSONArray("forbiddenId")));
                    }
                    if (params.has("forbiddenUris") && (params.getString("forbiddenUris") != null) && (!params.getString("forbiddenUris").isEmpty()) ) {
                        // Param: forbiddenUris, Type: List
                        commercialModesRequestBuilder.withForbiddenUris(jsonArrayToStringList(params.getJSONArray("forbiddenUris")));
                    }
                    if (params.has("externalCode") && (params.getString("externalCode") != null) && (!params.getString("externalCode").isEmpty()) ) {
                        // Param: externalCode, Type: String
                        commercialModesRequestBuilder.withExternalCode(stringStraightPass(params.getString("externalCode")));
                    }
                    if (params.has("headsign") && (params.getString("headsign") != null) && (!params.getString("headsign").isEmpty()) ) {
                        // Param: headsign, Type: String
                        commercialModesRequestBuilder.withHeadsign(stringStraightPass(params.getString("headsign")));
                    }
                    if (params.has("showCodes") && (params.getString("showCodes") != null) && (!params.getString("showCodes").isEmpty()) ) {
                        // Param: showCodes, Type: Boolean
                        commercialModesRequestBuilder.withShowCodes(booleanStraightPass(params.getBoolean("showCodes")));
                    }
                    if (params.has("odtLevel") && (params.getString("odtLevel") != null) && (!params.getString("odtLevel").isEmpty()) ) {
                        // Param: odtLevel, Type: String
                        commercialModesRequestBuilder.withOdtLevel(stringStraightPass(params.getString("odtLevel")));
                    }
                    if (params.has("dataFreshness") && (params.getString("dataFreshness") != null) && (!params.getString("dataFreshness").isEmpty()) ) {
                        // Param: dataFreshness, Type: String
                        commercialModesRequestBuilder.withDataFreshness(stringStraightPass(params.getString("dataFreshness")));
                    }
                    if (params.has("distance") && (params.getString("distance") != null) && (!params.getString("distance").isEmpty()) ) {
                        // Param: distance, Type: Integer
                        commercialModesRequestBuilder.withDistance(integerStraightPass(params.getInt("distance")));
                    }
                    if (params.has("since") && (params.getString("since") != null) && (!params.getString("since").isEmpty()) ) {
                        // Param: since, Type: Date
                        commercialModesRequestBuilder.withSince(stringToDateTime(params.getString("since")));
                    }
                    if (params.has("until") && (params.getString("until") != null) && (!params.getString("until").isEmpty()) ) {
                        // Param: until, Type: Date
                        commercialModesRequestBuilder.withUntil(stringToDateTime(params.getString("until")));
                    }
                    if (params.has("disableGeojson") && (params.getString("disableGeojson") != null) && (!params.getString("disableGeojson").isEmpty()) ) {
                        // Param: disableGeojson, Type: Boolean
                        commercialModesRequestBuilder.withDisableGeojson(booleanStraightPass(params.getBoolean("disableGeojson")));
                    }
                    if (params.has("disableDisruption") && (params.getString("disableDisruption") != null) && (!params.getString("disableDisruption").isEmpty()) ) {
                        // Param: disableDisruption, Type: Boolean
                        commercialModesRequestBuilder.withDisableDisruption(booleanStraightPass(params.getBoolean("disableDisruption")));
                    }
                    if (params.has("filter") && (params.getString("filter") != null) && (!params.getString("filter").isEmpty()) ) {
                        // Param: filter, Type: String
                        commercialModesRequestBuilder.withFilter(stringStraightPass(params.getString("filter")));
                    }
                    if (params.has("tags") && (params.getString("tags") != null) && (!params.getString("tags").isEmpty()) ) {
                        // Param: tags, Type: List
                        commercialModesRequestBuilder.withTags(jsonArrayToStringList(params.getJSONArray("tags")));
                    }
                    
                    commercialModesRequestBuilder.rawGet(new ApiCallback<String>() {
                        @Override
                        public void onFailure(ApiException e, int statusCode, Map<String, List<String>> responseHeaders) {
                            callbackContext.error("Problem during request call | " + e.getMessage());
                        }

                        @Override
                        public void onSuccess(String result, int statusCode, Map<String, List<String>> responseHeaders) {
                            JSONObject jsonObject = null;
                            try {
                                jsonObject = new JSONObject(result);
                                callbackContext.success(jsonObject);
                            } catch (Exception e) {
                                String errorMessage = "Problem during response parsing | " + String.valueOf(e.hashCode()) + ": " + e.getMessage();
                                callbackContext.error(errorMessage);
                            }
                        }

                        @Override
                        public void onUploadProgress(long bytesWritten, long contentLength, boolean done) {
                        }

                        @Override
                        public void onDownloadProgress(long bytesRead, long contentLength, boolean done) {
                        }
                    });
                } catch (Exception e) {
                    String errorMessage = "Problem during request building | " + String.valueOf(e.hashCode()) + ": " + e.getMessage();
                    callbackContext.error(errorMessage);
                }
            }
        });
    }
    final private void coverageRegionUriCommercialModesId(final JSONObject params, final CallbackContext callbackContext) {
        if (this.navitiaSdk == null) {
            callbackContext.error("NavitiaSDK is not instanciated");
            return;
        }

        final CommercialModesApi.CoverageRegionUriCommercialModesIdRequestBuilder commercialModesRequestBuilder = this.navitiaSdk.commercialModesApi.newCoverageRegionUriCommercialModesIdRequestBuilder();
        cordova.getThreadPool().execute(new Runnable() {
            @Override
            public void run() {
                try {
                    if (params.has("region") && (params.getString("region") != null) && (!params.getString("region").isEmpty()) ) {
                        // Param: region, Type: String
                        commercialModesRequestBuilder.withRegion(stringStraightPass(params.getString("region")));
                    }
                    if (params.has("uri") && (params.getString("uri") != null) && (!params.getString("uri").isEmpty()) ) {
                        // Param: uri, Type: String
                        commercialModesRequestBuilder.withUri(stringStraightPass(params.getString("uri")));
                    }
                    if (params.has("id") && (params.getString("id") != null) && (!params.getString("id").isEmpty()) ) {
                        // Param: id, Type: String
                        commercialModesRequestBuilder.withId(stringStraightPass(params.getString("id")));
                    }
                    if (params.has("startPage") && (params.getString("startPage") != null) && (!params.getString("startPage").isEmpty()) ) {
                        // Param: startPage, Type: Integer
                        commercialModesRequestBuilder.withStartPage(integerStraightPass(params.getInt("startPage")));
                    }
                    if (params.has("count") && (params.getString("count") != null) && (!params.getString("count").isEmpty()) ) {
                        // Param: count, Type: Integer
                        commercialModesRequestBuilder.withCount(integerStraightPass(params.getInt("count")));
                    }
                    if (params.has("depth") && (params.getString("depth") != null) && (!params.getString("depth").isEmpty()) ) {
                        // Param: depth, Type: Integer
                        commercialModesRequestBuilder.withDepth(integerStraightPass(params.getInt("depth")));
                    }
                    if (params.has("forbiddenId") && (params.getString("forbiddenId") != null) && (!params.getString("forbiddenId").isEmpty()) ) {
                        // Param: forbiddenId, Type: List
                        commercialModesRequestBuilder.withForbiddenId(jsonArrayToStringList(params.getJSONArray("forbiddenId")));
                    }
                    if (params.has("forbiddenUris") && (params.getString("forbiddenUris") != null) && (!params.getString("forbiddenUris").isEmpty()) ) {
                        // Param: forbiddenUris, Type: List
                        commercialModesRequestBuilder.withForbiddenUris(jsonArrayToStringList(params.getJSONArray("forbiddenUris")));
                    }
                    if (params.has("externalCode") && (params.getString("externalCode") != null) && (!params.getString("externalCode").isEmpty()) ) {
                        // Param: externalCode, Type: String
                        commercialModesRequestBuilder.withExternalCode(stringStraightPass(params.getString("externalCode")));
                    }
                    if (params.has("headsign") && (params.getString("headsign") != null) && (!params.getString("headsign").isEmpty()) ) {
                        // Param: headsign, Type: String
                        commercialModesRequestBuilder.withHeadsign(stringStraightPass(params.getString("headsign")));
                    }
                    if (params.has("showCodes") && (params.getString("showCodes") != null) && (!params.getString("showCodes").isEmpty()) ) {
                        // Param: showCodes, Type: Boolean
                        commercialModesRequestBuilder.withShowCodes(booleanStraightPass(params.getBoolean("showCodes")));
                    }
                    if (params.has("odtLevel") && (params.getString("odtLevel") != null) && (!params.getString("odtLevel").isEmpty()) ) {
                        // Param: odtLevel, Type: String
                        commercialModesRequestBuilder.withOdtLevel(stringStraightPass(params.getString("odtLevel")));
                    }
                    if (params.has("dataFreshness") && (params.getString("dataFreshness") != null) && (!params.getString("dataFreshness").isEmpty()) ) {
                        // Param: dataFreshness, Type: String
                        commercialModesRequestBuilder.withDataFreshness(stringStraightPass(params.getString("dataFreshness")));
                    }
                    if (params.has("distance") && (params.getString("distance") != null) && (!params.getString("distance").isEmpty()) ) {
                        // Param: distance, Type: Integer
                        commercialModesRequestBuilder.withDistance(integerStraightPass(params.getInt("distance")));
                    }
                    if (params.has("since") && (params.getString("since") != null) && (!params.getString("since").isEmpty()) ) {
                        // Param: since, Type: Date
                        commercialModesRequestBuilder.withSince(stringToDateTime(params.getString("since")));
                    }
                    if (params.has("until") && (params.getString("until") != null) && (!params.getString("until").isEmpty()) ) {
                        // Param: until, Type: Date
                        commercialModesRequestBuilder.withUntil(stringToDateTime(params.getString("until")));
                    }
                    if (params.has("disableGeojson") && (params.getString("disableGeojson") != null) && (!params.getString("disableGeojson").isEmpty()) ) {
                        // Param: disableGeojson, Type: Boolean
                        commercialModesRequestBuilder.withDisableGeojson(booleanStraightPass(params.getBoolean("disableGeojson")));
                    }
                    if (params.has("disableDisruption") && (params.getString("disableDisruption") != null) && (!params.getString("disableDisruption").isEmpty()) ) {
                        // Param: disableDisruption, Type: Boolean
                        commercialModesRequestBuilder.withDisableDisruption(booleanStraightPass(params.getBoolean("disableDisruption")));
                    }
                    if (params.has("tags") && (params.getString("tags") != null) && (!params.getString("tags").isEmpty()) ) {
                        // Param: tags, Type: List
                        commercialModesRequestBuilder.withTags(jsonArrayToStringList(params.getJSONArray("tags")));
                    }
                    
                    commercialModesRequestBuilder.rawGet(new ApiCallback<String>() {
                        @Override
                        public void onFailure(ApiException e, int statusCode, Map<String, List<String>> responseHeaders) {
                            callbackContext.error("Problem during request call | " + e.getMessage());
                        }

                        @Override
                        public void onSuccess(String result, int statusCode, Map<String, List<String>> responseHeaders) {
                            JSONObject jsonObject = null;
                            try {
                                jsonObject = new JSONObject(result);
                                callbackContext.success(jsonObject);
                            } catch (Exception e) {
                                String errorMessage = "Problem during response parsing | " + String.valueOf(e.hashCode()) + ": " + e.getMessage();
                                callbackContext.error(errorMessage);
                            }
                        }

                        @Override
                        public void onUploadProgress(long bytesWritten, long contentLength, boolean done) {
                        }

                        @Override
                        public void onDownloadProgress(long bytesRead, long contentLength, boolean done) {
                        }
                    });
                } catch (Exception e) {
                    String errorMessage = "Problem during request building | " + String.valueOf(e.hashCode()) + ": " + e.getMessage();
                    callbackContext.error(errorMessage);
                }
            }
        });
    }
    final private void coverageLonLatCompanies(final JSONObject params, final CallbackContext callbackContext) {
        if (this.navitiaSdk == null) {
            callbackContext.error("NavitiaSDK is not instanciated");
            return;
        }

        final CompaniesApi.CoverageLonLatCompaniesRequestBuilder companiesRequestBuilder = this.navitiaSdk.companiesApi.newCoverageLonLatCompaniesRequestBuilder();
        cordova.getThreadPool().execute(new Runnable() {
            @Override
            public void run() {
                try {
                    if (params.has("lat") && (params.getString("lat") != null) && (!params.getString("lat").isEmpty()) ) {
                        // Param: lat, Type: BigDecimal
                        companiesRequestBuilder.withLat(longToBigDecimal(params.getLong("lat")));
                    }
                    if (params.has("lon") && (params.getString("lon") != null) && (!params.getString("lon").isEmpty()) ) {
                        // Param: lon, Type: BigDecimal
                        companiesRequestBuilder.withLon(longToBigDecimal(params.getLong("lon")));
                    }
                    if (params.has("startPage") && (params.getString("startPage") != null) && (!params.getString("startPage").isEmpty()) ) {
                        // Param: startPage, Type: Integer
                        companiesRequestBuilder.withStartPage(integerStraightPass(params.getInt("startPage")));
                    }
                    if (params.has("count") && (params.getString("count") != null) && (!params.getString("count").isEmpty()) ) {
                        // Param: count, Type: Integer
                        companiesRequestBuilder.withCount(integerStraightPass(params.getInt("count")));
                    }
                    if (params.has("depth") && (params.getString("depth") != null) && (!params.getString("depth").isEmpty()) ) {
                        // Param: depth, Type: Integer
                        companiesRequestBuilder.withDepth(integerStraightPass(params.getInt("depth")));
                    }
                    if (params.has("forbiddenId") && (params.getString("forbiddenId") != null) && (!params.getString("forbiddenId").isEmpty()) ) {
                        // Param: forbiddenId, Type: List
                        companiesRequestBuilder.withForbiddenId(jsonArrayToStringList(params.getJSONArray("forbiddenId")));
                    }
                    if (params.has("forbiddenUris") && (params.getString("forbiddenUris") != null) && (!params.getString("forbiddenUris").isEmpty()) ) {
                        // Param: forbiddenUris, Type: List
                        companiesRequestBuilder.withForbiddenUris(jsonArrayToStringList(params.getJSONArray("forbiddenUris")));
                    }
                    if (params.has("externalCode") && (params.getString("externalCode") != null) && (!params.getString("externalCode").isEmpty()) ) {
                        // Param: externalCode, Type: String
                        companiesRequestBuilder.withExternalCode(stringStraightPass(params.getString("externalCode")));
                    }
                    if (params.has("headsign") && (params.getString("headsign") != null) && (!params.getString("headsign").isEmpty()) ) {
                        // Param: headsign, Type: String
                        companiesRequestBuilder.withHeadsign(stringStraightPass(params.getString("headsign")));
                    }
                    if (params.has("showCodes") && (params.getString("showCodes") != null) && (!params.getString("showCodes").isEmpty()) ) {
                        // Param: showCodes, Type: Boolean
                        companiesRequestBuilder.withShowCodes(booleanStraightPass(params.getBoolean("showCodes")));
                    }
                    if (params.has("odtLevel") && (params.getString("odtLevel") != null) && (!params.getString("odtLevel").isEmpty()) ) {
                        // Param: odtLevel, Type: String
                        companiesRequestBuilder.withOdtLevel(stringStraightPass(params.getString("odtLevel")));
                    }
                    if (params.has("dataFreshness") && (params.getString("dataFreshness") != null) && (!params.getString("dataFreshness").isEmpty()) ) {
                        // Param: dataFreshness, Type: String
                        companiesRequestBuilder.withDataFreshness(stringStraightPass(params.getString("dataFreshness")));
                    }
                    if (params.has("distance") && (params.getString("distance") != null) && (!params.getString("distance").isEmpty()) ) {
                        // Param: distance, Type: Integer
                        companiesRequestBuilder.withDistance(integerStraightPass(params.getInt("distance")));
                    }
                    if (params.has("since") && (params.getString("since") != null) && (!params.getString("since").isEmpty()) ) {
                        // Param: since, Type: Date
                        companiesRequestBuilder.withSince(stringToDateTime(params.getString("since")));
                    }
                    if (params.has("until") && (params.getString("until") != null) && (!params.getString("until").isEmpty()) ) {
                        // Param: until, Type: Date
                        companiesRequestBuilder.withUntil(stringToDateTime(params.getString("until")));
                    }
                    if (params.has("disableGeojson") && (params.getString("disableGeojson") != null) && (!params.getString("disableGeojson").isEmpty()) ) {
                        // Param: disableGeojson, Type: Boolean
                        companiesRequestBuilder.withDisableGeojson(booleanStraightPass(params.getBoolean("disableGeojson")));
                    }
                    if (params.has("disableDisruption") && (params.getString("disableDisruption") != null) && (!params.getString("disableDisruption").isEmpty()) ) {
                        // Param: disableDisruption, Type: Boolean
                        companiesRequestBuilder.withDisableDisruption(booleanStraightPass(params.getBoolean("disableDisruption")));
                    }
                    if (params.has("filter") && (params.getString("filter") != null) && (!params.getString("filter").isEmpty()) ) {
                        // Param: filter, Type: String
                        companiesRequestBuilder.withFilter(stringStraightPass(params.getString("filter")));
                    }
                    if (params.has("tags") && (params.getString("tags") != null) && (!params.getString("tags").isEmpty()) ) {
                        // Param: tags, Type: List
                        companiesRequestBuilder.withTags(jsonArrayToStringList(params.getJSONArray("tags")));
                    }
                    
                    companiesRequestBuilder.rawGet(new ApiCallback<String>() {
                        @Override
                        public void onFailure(ApiException e, int statusCode, Map<String, List<String>> responseHeaders) {
                            callbackContext.error("Problem during request call | " + e.getMessage());
                        }

                        @Override
                        public void onSuccess(String result, int statusCode, Map<String, List<String>> responseHeaders) {
                            JSONObject jsonObject = null;
                            try {
                                jsonObject = new JSONObject(result);
                                callbackContext.success(jsonObject);
                            } catch (Exception e) {
                                String errorMessage = "Problem during response parsing | " + String.valueOf(e.hashCode()) + ": " + e.getMessage();
                                callbackContext.error(errorMessage);
                            }
                        }

                        @Override
                        public void onUploadProgress(long bytesWritten, long contentLength, boolean done) {
                        }

                        @Override
                        public void onDownloadProgress(long bytesRead, long contentLength, boolean done) {
                        }
                    });
                } catch (Exception e) {
                    String errorMessage = "Problem during request building | " + String.valueOf(e.hashCode()) + ": " + e.getMessage();
                    callbackContext.error(errorMessage);
                }
            }
        });
    }
    final private void coverageLonLatCompaniesId(final JSONObject params, final CallbackContext callbackContext) {
        if (this.navitiaSdk == null) {
            callbackContext.error("NavitiaSDK is not instanciated");
            return;
        }

        final CompaniesApi.CoverageLonLatCompaniesIdRequestBuilder companiesRequestBuilder = this.navitiaSdk.companiesApi.newCoverageLonLatCompaniesIdRequestBuilder();
        cordova.getThreadPool().execute(new Runnable() {
            @Override
            public void run() {
                try {
                    if (params.has("lat") && (params.getString("lat") != null) && (!params.getString("lat").isEmpty()) ) {
                        // Param: lat, Type: BigDecimal
                        companiesRequestBuilder.withLat(longToBigDecimal(params.getLong("lat")));
                    }
                    if (params.has("lon") && (params.getString("lon") != null) && (!params.getString("lon").isEmpty()) ) {
                        // Param: lon, Type: BigDecimal
                        companiesRequestBuilder.withLon(longToBigDecimal(params.getLong("lon")));
                    }
                    if (params.has("id") && (params.getString("id") != null) && (!params.getString("id").isEmpty()) ) {
                        // Param: id, Type: String
                        companiesRequestBuilder.withId(stringStraightPass(params.getString("id")));
                    }
                    if (params.has("startPage") && (params.getString("startPage") != null) && (!params.getString("startPage").isEmpty()) ) {
                        // Param: startPage, Type: Integer
                        companiesRequestBuilder.withStartPage(integerStraightPass(params.getInt("startPage")));
                    }
                    if (params.has("count") && (params.getString("count") != null) && (!params.getString("count").isEmpty()) ) {
                        // Param: count, Type: Integer
                        companiesRequestBuilder.withCount(integerStraightPass(params.getInt("count")));
                    }
                    if (params.has("depth") && (params.getString("depth") != null) && (!params.getString("depth").isEmpty()) ) {
                        // Param: depth, Type: Integer
                        companiesRequestBuilder.withDepth(integerStraightPass(params.getInt("depth")));
                    }
                    if (params.has("forbiddenId") && (params.getString("forbiddenId") != null) && (!params.getString("forbiddenId").isEmpty()) ) {
                        // Param: forbiddenId, Type: List
                        companiesRequestBuilder.withForbiddenId(jsonArrayToStringList(params.getJSONArray("forbiddenId")));
                    }
                    if (params.has("forbiddenUris") && (params.getString("forbiddenUris") != null) && (!params.getString("forbiddenUris").isEmpty()) ) {
                        // Param: forbiddenUris, Type: List
                        companiesRequestBuilder.withForbiddenUris(jsonArrayToStringList(params.getJSONArray("forbiddenUris")));
                    }
                    if (params.has("externalCode") && (params.getString("externalCode") != null) && (!params.getString("externalCode").isEmpty()) ) {
                        // Param: externalCode, Type: String
                        companiesRequestBuilder.withExternalCode(stringStraightPass(params.getString("externalCode")));
                    }
                    if (params.has("headsign") && (params.getString("headsign") != null) && (!params.getString("headsign").isEmpty()) ) {
                        // Param: headsign, Type: String
                        companiesRequestBuilder.withHeadsign(stringStraightPass(params.getString("headsign")));
                    }
                    if (params.has("showCodes") && (params.getString("showCodes") != null) && (!params.getString("showCodes").isEmpty()) ) {
                        // Param: showCodes, Type: Boolean
                        companiesRequestBuilder.withShowCodes(booleanStraightPass(params.getBoolean("showCodes")));
                    }
                    if (params.has("odtLevel") && (params.getString("odtLevel") != null) && (!params.getString("odtLevel").isEmpty()) ) {
                        // Param: odtLevel, Type: String
                        companiesRequestBuilder.withOdtLevel(stringStraightPass(params.getString("odtLevel")));
                    }
                    if (params.has("dataFreshness") && (params.getString("dataFreshness") != null) && (!params.getString("dataFreshness").isEmpty()) ) {
                        // Param: dataFreshness, Type: String
                        companiesRequestBuilder.withDataFreshness(stringStraightPass(params.getString("dataFreshness")));
                    }
                    if (params.has("distance") && (params.getString("distance") != null) && (!params.getString("distance").isEmpty()) ) {
                        // Param: distance, Type: Integer
                        companiesRequestBuilder.withDistance(integerStraightPass(params.getInt("distance")));
                    }
                    if (params.has("since") && (params.getString("since") != null) && (!params.getString("since").isEmpty()) ) {
                        // Param: since, Type: Date
                        companiesRequestBuilder.withSince(stringToDateTime(params.getString("since")));
                    }
                    if (params.has("until") && (params.getString("until") != null) && (!params.getString("until").isEmpty()) ) {
                        // Param: until, Type: Date
                        companiesRequestBuilder.withUntil(stringToDateTime(params.getString("until")));
                    }
                    if (params.has("disableGeojson") && (params.getString("disableGeojson") != null) && (!params.getString("disableGeojson").isEmpty()) ) {
                        // Param: disableGeojson, Type: Boolean
                        companiesRequestBuilder.withDisableGeojson(booleanStraightPass(params.getBoolean("disableGeojson")));
                    }
                    if (params.has("disableDisruption") && (params.getString("disableDisruption") != null) && (!params.getString("disableDisruption").isEmpty()) ) {
                        // Param: disableDisruption, Type: Boolean
                        companiesRequestBuilder.withDisableDisruption(booleanStraightPass(params.getBoolean("disableDisruption")));
                    }
                    if (params.has("tags") && (params.getString("tags") != null) && (!params.getString("tags").isEmpty()) ) {
                        // Param: tags, Type: List
                        companiesRequestBuilder.withTags(jsonArrayToStringList(params.getJSONArray("tags")));
                    }
                    
                    companiesRequestBuilder.rawGet(new ApiCallback<String>() {
                        @Override
                        public void onFailure(ApiException e, int statusCode, Map<String, List<String>> responseHeaders) {
                            callbackContext.error("Problem during request call | " + e.getMessage());
                        }

                        @Override
                        public void onSuccess(String result, int statusCode, Map<String, List<String>> responseHeaders) {
                            JSONObject jsonObject = null;
                            try {
                                jsonObject = new JSONObject(result);
                                callbackContext.success(jsonObject);
                            } catch (Exception e) {
                                String errorMessage = "Problem during response parsing | " + String.valueOf(e.hashCode()) + ": " + e.getMessage();
                                callbackContext.error(errorMessage);
                            }
                        }

                        @Override
                        public void onUploadProgress(long bytesWritten, long contentLength, boolean done) {
                        }

                        @Override
                        public void onDownloadProgress(long bytesRead, long contentLength, boolean done) {
                        }
                    });
                } catch (Exception e) {
                    String errorMessage = "Problem during request building | " + String.valueOf(e.hashCode()) + ": " + e.getMessage();
                    callbackContext.error(errorMessage);
                }
            }
        });
    }
    final private void coverageLonLatUriCompanies(final JSONObject params, final CallbackContext callbackContext) {
        if (this.navitiaSdk == null) {
            callbackContext.error("NavitiaSDK is not instanciated");
            return;
        }

        final CompaniesApi.CoverageLonLatUriCompaniesRequestBuilder companiesRequestBuilder = this.navitiaSdk.companiesApi.newCoverageLonLatUriCompaniesRequestBuilder();
        cordova.getThreadPool().execute(new Runnable() {
            @Override
            public void run() {
                try {
                    if (params.has("lat") && (params.getString("lat") != null) && (!params.getString("lat").isEmpty()) ) {
                        // Param: lat, Type: BigDecimal
                        companiesRequestBuilder.withLat(longToBigDecimal(params.getLong("lat")));
                    }
                    if (params.has("lon") && (params.getString("lon") != null) && (!params.getString("lon").isEmpty()) ) {
                        // Param: lon, Type: BigDecimal
                        companiesRequestBuilder.withLon(longToBigDecimal(params.getLong("lon")));
                    }
                    if (params.has("uri") && (params.getString("uri") != null) && (!params.getString("uri").isEmpty()) ) {
                        // Param: uri, Type: String
                        companiesRequestBuilder.withUri(stringStraightPass(params.getString("uri")));
                    }
                    if (params.has("startPage") && (params.getString("startPage") != null) && (!params.getString("startPage").isEmpty()) ) {
                        // Param: startPage, Type: Integer
                        companiesRequestBuilder.withStartPage(integerStraightPass(params.getInt("startPage")));
                    }
                    if (params.has("count") && (params.getString("count") != null) && (!params.getString("count").isEmpty()) ) {
                        // Param: count, Type: Integer
                        companiesRequestBuilder.withCount(integerStraightPass(params.getInt("count")));
                    }
                    if (params.has("depth") && (params.getString("depth") != null) && (!params.getString("depth").isEmpty()) ) {
                        // Param: depth, Type: Integer
                        companiesRequestBuilder.withDepth(integerStraightPass(params.getInt("depth")));
                    }
                    if (params.has("forbiddenId") && (params.getString("forbiddenId") != null) && (!params.getString("forbiddenId").isEmpty()) ) {
                        // Param: forbiddenId, Type: List
                        companiesRequestBuilder.withForbiddenId(jsonArrayToStringList(params.getJSONArray("forbiddenId")));
                    }
                    if (params.has("forbiddenUris") && (params.getString("forbiddenUris") != null) && (!params.getString("forbiddenUris").isEmpty()) ) {
                        // Param: forbiddenUris, Type: List
                        companiesRequestBuilder.withForbiddenUris(jsonArrayToStringList(params.getJSONArray("forbiddenUris")));
                    }
                    if (params.has("externalCode") && (params.getString("externalCode") != null) && (!params.getString("externalCode").isEmpty()) ) {
                        // Param: externalCode, Type: String
                        companiesRequestBuilder.withExternalCode(stringStraightPass(params.getString("externalCode")));
                    }
                    if (params.has("headsign") && (params.getString("headsign") != null) && (!params.getString("headsign").isEmpty()) ) {
                        // Param: headsign, Type: String
                        companiesRequestBuilder.withHeadsign(stringStraightPass(params.getString("headsign")));
                    }
                    if (params.has("showCodes") && (params.getString("showCodes") != null) && (!params.getString("showCodes").isEmpty()) ) {
                        // Param: showCodes, Type: Boolean
                        companiesRequestBuilder.withShowCodes(booleanStraightPass(params.getBoolean("showCodes")));
                    }
                    if (params.has("odtLevel") && (params.getString("odtLevel") != null) && (!params.getString("odtLevel").isEmpty()) ) {
                        // Param: odtLevel, Type: String
                        companiesRequestBuilder.withOdtLevel(stringStraightPass(params.getString("odtLevel")));
                    }
                    if (params.has("dataFreshness") && (params.getString("dataFreshness") != null) && (!params.getString("dataFreshness").isEmpty()) ) {
                        // Param: dataFreshness, Type: String
                        companiesRequestBuilder.withDataFreshness(stringStraightPass(params.getString("dataFreshness")));
                    }
                    if (params.has("distance") && (params.getString("distance") != null) && (!params.getString("distance").isEmpty()) ) {
                        // Param: distance, Type: Integer
                        companiesRequestBuilder.withDistance(integerStraightPass(params.getInt("distance")));
                    }
                    if (params.has("since") && (params.getString("since") != null) && (!params.getString("since").isEmpty()) ) {
                        // Param: since, Type: Date
                        companiesRequestBuilder.withSince(stringToDateTime(params.getString("since")));
                    }
                    if (params.has("until") && (params.getString("until") != null) && (!params.getString("until").isEmpty()) ) {
                        // Param: until, Type: Date
                        companiesRequestBuilder.withUntil(stringToDateTime(params.getString("until")));
                    }
                    if (params.has("disableGeojson") && (params.getString("disableGeojson") != null) && (!params.getString("disableGeojson").isEmpty()) ) {
                        // Param: disableGeojson, Type: Boolean
                        companiesRequestBuilder.withDisableGeojson(booleanStraightPass(params.getBoolean("disableGeojson")));
                    }
                    if (params.has("disableDisruption") && (params.getString("disableDisruption") != null) && (!params.getString("disableDisruption").isEmpty()) ) {
                        // Param: disableDisruption, Type: Boolean
                        companiesRequestBuilder.withDisableDisruption(booleanStraightPass(params.getBoolean("disableDisruption")));
                    }
                    if (params.has("filter") && (params.getString("filter") != null) && (!params.getString("filter").isEmpty()) ) {
                        // Param: filter, Type: String
                        companiesRequestBuilder.withFilter(stringStraightPass(params.getString("filter")));
                    }
                    if (params.has("tags") && (params.getString("tags") != null) && (!params.getString("tags").isEmpty()) ) {
                        // Param: tags, Type: List
                        companiesRequestBuilder.withTags(jsonArrayToStringList(params.getJSONArray("tags")));
                    }
                    
                    companiesRequestBuilder.rawGet(new ApiCallback<String>() {
                        @Override
                        public void onFailure(ApiException e, int statusCode, Map<String, List<String>> responseHeaders) {
                            callbackContext.error("Problem during request call | " + e.getMessage());
                        }

                        @Override
                        public void onSuccess(String result, int statusCode, Map<String, List<String>> responseHeaders) {
                            JSONObject jsonObject = null;
                            try {
                                jsonObject = new JSONObject(result);
                                callbackContext.success(jsonObject);
                            } catch (Exception e) {
                                String errorMessage = "Problem during response parsing | " + String.valueOf(e.hashCode()) + ": " + e.getMessage();
                                callbackContext.error(errorMessage);
                            }
                        }

                        @Override
                        public void onUploadProgress(long bytesWritten, long contentLength, boolean done) {
                        }

                        @Override
                        public void onDownloadProgress(long bytesRead, long contentLength, boolean done) {
                        }
                    });
                } catch (Exception e) {
                    String errorMessage = "Problem during request building | " + String.valueOf(e.hashCode()) + ": " + e.getMessage();
                    callbackContext.error(errorMessage);
                }
            }
        });
    }
    final private void coverageLonLatUriCompaniesId(final JSONObject params, final CallbackContext callbackContext) {
        if (this.navitiaSdk == null) {
            callbackContext.error("NavitiaSDK is not instanciated");
            return;
        }

        final CompaniesApi.CoverageLonLatUriCompaniesIdRequestBuilder companiesRequestBuilder = this.navitiaSdk.companiesApi.newCoverageLonLatUriCompaniesIdRequestBuilder();
        cordova.getThreadPool().execute(new Runnable() {
            @Override
            public void run() {
                try {
                    if (params.has("lat") && (params.getString("lat") != null) && (!params.getString("lat").isEmpty()) ) {
                        // Param: lat, Type: BigDecimal
                        companiesRequestBuilder.withLat(longToBigDecimal(params.getLong("lat")));
                    }
                    if (params.has("lon") && (params.getString("lon") != null) && (!params.getString("lon").isEmpty()) ) {
                        // Param: lon, Type: BigDecimal
                        companiesRequestBuilder.withLon(longToBigDecimal(params.getLong("lon")));
                    }
                    if (params.has("uri") && (params.getString("uri") != null) && (!params.getString("uri").isEmpty()) ) {
                        // Param: uri, Type: String
                        companiesRequestBuilder.withUri(stringStraightPass(params.getString("uri")));
                    }
                    if (params.has("id") && (params.getString("id") != null) && (!params.getString("id").isEmpty()) ) {
                        // Param: id, Type: String
                        companiesRequestBuilder.withId(stringStraightPass(params.getString("id")));
                    }
                    if (params.has("startPage") && (params.getString("startPage") != null) && (!params.getString("startPage").isEmpty()) ) {
                        // Param: startPage, Type: Integer
                        companiesRequestBuilder.withStartPage(integerStraightPass(params.getInt("startPage")));
                    }
                    if (params.has("count") && (params.getString("count") != null) && (!params.getString("count").isEmpty()) ) {
                        // Param: count, Type: Integer
                        companiesRequestBuilder.withCount(integerStraightPass(params.getInt("count")));
                    }
                    if (params.has("depth") && (params.getString("depth") != null) && (!params.getString("depth").isEmpty()) ) {
                        // Param: depth, Type: Integer
                        companiesRequestBuilder.withDepth(integerStraightPass(params.getInt("depth")));
                    }
                    if (params.has("forbiddenId") && (params.getString("forbiddenId") != null) && (!params.getString("forbiddenId").isEmpty()) ) {
                        // Param: forbiddenId, Type: List
                        companiesRequestBuilder.withForbiddenId(jsonArrayToStringList(params.getJSONArray("forbiddenId")));
                    }
                    if (params.has("forbiddenUris") && (params.getString("forbiddenUris") != null) && (!params.getString("forbiddenUris").isEmpty()) ) {
                        // Param: forbiddenUris, Type: List
                        companiesRequestBuilder.withForbiddenUris(jsonArrayToStringList(params.getJSONArray("forbiddenUris")));
                    }
                    if (params.has("externalCode") && (params.getString("externalCode") != null) && (!params.getString("externalCode").isEmpty()) ) {
                        // Param: externalCode, Type: String
                        companiesRequestBuilder.withExternalCode(stringStraightPass(params.getString("externalCode")));
                    }
                    if (params.has("headsign") && (params.getString("headsign") != null) && (!params.getString("headsign").isEmpty()) ) {
                        // Param: headsign, Type: String
                        companiesRequestBuilder.withHeadsign(stringStraightPass(params.getString("headsign")));
                    }
                    if (params.has("showCodes") && (params.getString("showCodes") != null) && (!params.getString("showCodes").isEmpty()) ) {
                        // Param: showCodes, Type: Boolean
                        companiesRequestBuilder.withShowCodes(booleanStraightPass(params.getBoolean("showCodes")));
                    }
                    if (params.has("odtLevel") && (params.getString("odtLevel") != null) && (!params.getString("odtLevel").isEmpty()) ) {
                        // Param: odtLevel, Type: String
                        companiesRequestBuilder.withOdtLevel(stringStraightPass(params.getString("odtLevel")));
                    }
                    if (params.has("dataFreshness") && (params.getString("dataFreshness") != null) && (!params.getString("dataFreshness").isEmpty()) ) {
                        // Param: dataFreshness, Type: String
                        companiesRequestBuilder.withDataFreshness(stringStraightPass(params.getString("dataFreshness")));
                    }
                    if (params.has("distance") && (params.getString("distance") != null) && (!params.getString("distance").isEmpty()) ) {
                        // Param: distance, Type: Integer
                        companiesRequestBuilder.withDistance(integerStraightPass(params.getInt("distance")));
                    }
                    if (params.has("since") && (params.getString("since") != null) && (!params.getString("since").isEmpty()) ) {
                        // Param: since, Type: Date
                        companiesRequestBuilder.withSince(stringToDateTime(params.getString("since")));
                    }
                    if (params.has("until") && (params.getString("until") != null) && (!params.getString("until").isEmpty()) ) {
                        // Param: until, Type: Date
                        companiesRequestBuilder.withUntil(stringToDateTime(params.getString("until")));
                    }
                    if (params.has("disableGeojson") && (params.getString("disableGeojson") != null) && (!params.getString("disableGeojson").isEmpty()) ) {
                        // Param: disableGeojson, Type: Boolean
                        companiesRequestBuilder.withDisableGeojson(booleanStraightPass(params.getBoolean("disableGeojson")));
                    }
                    if (params.has("disableDisruption") && (params.getString("disableDisruption") != null) && (!params.getString("disableDisruption").isEmpty()) ) {
                        // Param: disableDisruption, Type: Boolean
                        companiesRequestBuilder.withDisableDisruption(booleanStraightPass(params.getBoolean("disableDisruption")));
                    }
                    if (params.has("tags") && (params.getString("tags") != null) && (!params.getString("tags").isEmpty()) ) {
                        // Param: tags, Type: List
                        companiesRequestBuilder.withTags(jsonArrayToStringList(params.getJSONArray("tags")));
                    }
                    
                    companiesRequestBuilder.rawGet(new ApiCallback<String>() {
                        @Override
                        public void onFailure(ApiException e, int statusCode, Map<String, List<String>> responseHeaders) {
                            callbackContext.error("Problem during request call | " + e.getMessage());
                        }

                        @Override
                        public void onSuccess(String result, int statusCode, Map<String, List<String>> responseHeaders) {
                            JSONObject jsonObject = null;
                            try {
                                jsonObject = new JSONObject(result);
                                callbackContext.success(jsonObject);
                            } catch (Exception e) {
                                String errorMessage = "Problem during response parsing | " + String.valueOf(e.hashCode()) + ": " + e.getMessage();
                                callbackContext.error(errorMessage);
                            }
                        }

                        @Override
                        public void onUploadProgress(long bytesWritten, long contentLength, boolean done) {
                        }

                        @Override
                        public void onDownloadProgress(long bytesRead, long contentLength, boolean done) {
                        }
                    });
                } catch (Exception e) {
                    String errorMessage = "Problem during request building | " + String.valueOf(e.hashCode()) + ": " + e.getMessage();
                    callbackContext.error(errorMessage);
                }
            }
        });
    }
    final private void coverageRegionCompanies(final JSONObject params, final CallbackContext callbackContext) {
        if (this.navitiaSdk == null) {
            callbackContext.error("NavitiaSDK is not instanciated");
            return;
        }

        final CompaniesApi.CoverageRegionCompaniesRequestBuilder companiesRequestBuilder = this.navitiaSdk.companiesApi.newCoverageRegionCompaniesRequestBuilder();
        cordova.getThreadPool().execute(new Runnable() {
            @Override
            public void run() {
                try {
                    if (params.has("region") && (params.getString("region") != null) && (!params.getString("region").isEmpty()) ) {
                        // Param: region, Type: String
                        companiesRequestBuilder.withRegion(stringStraightPass(params.getString("region")));
                    }
                    if (params.has("startPage") && (params.getString("startPage") != null) && (!params.getString("startPage").isEmpty()) ) {
                        // Param: startPage, Type: Integer
                        companiesRequestBuilder.withStartPage(integerStraightPass(params.getInt("startPage")));
                    }
                    if (params.has("count") && (params.getString("count") != null) && (!params.getString("count").isEmpty()) ) {
                        // Param: count, Type: Integer
                        companiesRequestBuilder.withCount(integerStraightPass(params.getInt("count")));
                    }
                    if (params.has("depth") && (params.getString("depth") != null) && (!params.getString("depth").isEmpty()) ) {
                        // Param: depth, Type: Integer
                        companiesRequestBuilder.withDepth(integerStraightPass(params.getInt("depth")));
                    }
                    if (params.has("forbiddenId") && (params.getString("forbiddenId") != null) && (!params.getString("forbiddenId").isEmpty()) ) {
                        // Param: forbiddenId, Type: List
                        companiesRequestBuilder.withForbiddenId(jsonArrayToStringList(params.getJSONArray("forbiddenId")));
                    }
                    if (params.has("forbiddenUris") && (params.getString("forbiddenUris") != null) && (!params.getString("forbiddenUris").isEmpty()) ) {
                        // Param: forbiddenUris, Type: List
                        companiesRequestBuilder.withForbiddenUris(jsonArrayToStringList(params.getJSONArray("forbiddenUris")));
                    }
                    if (params.has("externalCode") && (params.getString("externalCode") != null) && (!params.getString("externalCode").isEmpty()) ) {
                        // Param: externalCode, Type: String
                        companiesRequestBuilder.withExternalCode(stringStraightPass(params.getString("externalCode")));
                    }
                    if (params.has("headsign") && (params.getString("headsign") != null) && (!params.getString("headsign").isEmpty()) ) {
                        // Param: headsign, Type: String
                        companiesRequestBuilder.withHeadsign(stringStraightPass(params.getString("headsign")));
                    }
                    if (params.has("showCodes") && (params.getString("showCodes") != null) && (!params.getString("showCodes").isEmpty()) ) {
                        // Param: showCodes, Type: Boolean
                        companiesRequestBuilder.withShowCodes(booleanStraightPass(params.getBoolean("showCodes")));
                    }
                    if (params.has("odtLevel") && (params.getString("odtLevel") != null) && (!params.getString("odtLevel").isEmpty()) ) {
                        // Param: odtLevel, Type: String
                        companiesRequestBuilder.withOdtLevel(stringStraightPass(params.getString("odtLevel")));
                    }
                    if (params.has("dataFreshness") && (params.getString("dataFreshness") != null) && (!params.getString("dataFreshness").isEmpty()) ) {
                        // Param: dataFreshness, Type: String
                        companiesRequestBuilder.withDataFreshness(stringStraightPass(params.getString("dataFreshness")));
                    }
                    if (params.has("distance") && (params.getString("distance") != null) && (!params.getString("distance").isEmpty()) ) {
                        // Param: distance, Type: Integer
                        companiesRequestBuilder.withDistance(integerStraightPass(params.getInt("distance")));
                    }
                    if (params.has("since") && (params.getString("since") != null) && (!params.getString("since").isEmpty()) ) {
                        // Param: since, Type: Date
                        companiesRequestBuilder.withSince(stringToDateTime(params.getString("since")));
                    }
                    if (params.has("until") && (params.getString("until") != null) && (!params.getString("until").isEmpty()) ) {
                        // Param: until, Type: Date
                        companiesRequestBuilder.withUntil(stringToDateTime(params.getString("until")));
                    }
                    if (params.has("disableGeojson") && (params.getString("disableGeojson") != null) && (!params.getString("disableGeojson").isEmpty()) ) {
                        // Param: disableGeojson, Type: Boolean
                        companiesRequestBuilder.withDisableGeojson(booleanStraightPass(params.getBoolean("disableGeojson")));
                    }
                    if (params.has("disableDisruption") && (params.getString("disableDisruption") != null) && (!params.getString("disableDisruption").isEmpty()) ) {
                        // Param: disableDisruption, Type: Boolean
                        companiesRequestBuilder.withDisableDisruption(booleanStraightPass(params.getBoolean("disableDisruption")));
                    }
                    if (params.has("filter") && (params.getString("filter") != null) && (!params.getString("filter").isEmpty()) ) {
                        // Param: filter, Type: String
                        companiesRequestBuilder.withFilter(stringStraightPass(params.getString("filter")));
                    }
                    if (params.has("tags") && (params.getString("tags") != null) && (!params.getString("tags").isEmpty()) ) {
                        // Param: tags, Type: List
                        companiesRequestBuilder.withTags(jsonArrayToStringList(params.getJSONArray("tags")));
                    }
                    
                    companiesRequestBuilder.rawGet(new ApiCallback<String>() {
                        @Override
                        public void onFailure(ApiException e, int statusCode, Map<String, List<String>> responseHeaders) {
                            callbackContext.error("Problem during request call | " + e.getMessage());
                        }

                        @Override
                        public void onSuccess(String result, int statusCode, Map<String, List<String>> responseHeaders) {
                            JSONObject jsonObject = null;
                            try {
                                jsonObject = new JSONObject(result);
                                callbackContext.success(jsonObject);
                            } catch (Exception e) {
                                String errorMessage = "Problem during response parsing | " + String.valueOf(e.hashCode()) + ": " + e.getMessage();
                                callbackContext.error(errorMessage);
                            }
                        }

                        @Override
                        public void onUploadProgress(long bytesWritten, long contentLength, boolean done) {
                        }

                        @Override
                        public void onDownloadProgress(long bytesRead, long contentLength, boolean done) {
                        }
                    });
                } catch (Exception e) {
                    String errorMessage = "Problem during request building | " + String.valueOf(e.hashCode()) + ": " + e.getMessage();
                    callbackContext.error(errorMessage);
                }
            }
        });
    }
    final private void coverageRegionCompaniesId(final JSONObject params, final CallbackContext callbackContext) {
        if (this.navitiaSdk == null) {
            callbackContext.error("NavitiaSDK is not instanciated");
            return;
        }

        final CompaniesApi.CoverageRegionCompaniesIdRequestBuilder companiesRequestBuilder = this.navitiaSdk.companiesApi.newCoverageRegionCompaniesIdRequestBuilder();
        cordova.getThreadPool().execute(new Runnable() {
            @Override
            public void run() {
                try {
                    if (params.has("region") && (params.getString("region") != null) && (!params.getString("region").isEmpty()) ) {
                        // Param: region, Type: String
                        companiesRequestBuilder.withRegion(stringStraightPass(params.getString("region")));
                    }
                    if (params.has("id") && (params.getString("id") != null) && (!params.getString("id").isEmpty()) ) {
                        // Param: id, Type: String
                        companiesRequestBuilder.withId(stringStraightPass(params.getString("id")));
                    }
                    if (params.has("startPage") && (params.getString("startPage") != null) && (!params.getString("startPage").isEmpty()) ) {
                        // Param: startPage, Type: Integer
                        companiesRequestBuilder.withStartPage(integerStraightPass(params.getInt("startPage")));
                    }
                    if (params.has("count") && (params.getString("count") != null) && (!params.getString("count").isEmpty()) ) {
                        // Param: count, Type: Integer
                        companiesRequestBuilder.withCount(integerStraightPass(params.getInt("count")));
                    }
                    if (params.has("depth") && (params.getString("depth") != null) && (!params.getString("depth").isEmpty()) ) {
                        // Param: depth, Type: Integer
                        companiesRequestBuilder.withDepth(integerStraightPass(params.getInt("depth")));
                    }
                    if (params.has("forbiddenId") && (params.getString("forbiddenId") != null) && (!params.getString("forbiddenId").isEmpty()) ) {
                        // Param: forbiddenId, Type: List
                        companiesRequestBuilder.withForbiddenId(jsonArrayToStringList(params.getJSONArray("forbiddenId")));
                    }
                    if (params.has("forbiddenUris") && (params.getString("forbiddenUris") != null) && (!params.getString("forbiddenUris").isEmpty()) ) {
                        // Param: forbiddenUris, Type: List
                        companiesRequestBuilder.withForbiddenUris(jsonArrayToStringList(params.getJSONArray("forbiddenUris")));
                    }
                    if (params.has("externalCode") && (params.getString("externalCode") != null) && (!params.getString("externalCode").isEmpty()) ) {
                        // Param: externalCode, Type: String
                        companiesRequestBuilder.withExternalCode(stringStraightPass(params.getString("externalCode")));
                    }
                    if (params.has("headsign") && (params.getString("headsign") != null) && (!params.getString("headsign").isEmpty()) ) {
                        // Param: headsign, Type: String
                        companiesRequestBuilder.withHeadsign(stringStraightPass(params.getString("headsign")));
                    }
                    if (params.has("showCodes") && (params.getString("showCodes") != null) && (!params.getString("showCodes").isEmpty()) ) {
                        // Param: showCodes, Type: Boolean
                        companiesRequestBuilder.withShowCodes(booleanStraightPass(params.getBoolean("showCodes")));
                    }
                    if (params.has("odtLevel") && (params.getString("odtLevel") != null) && (!params.getString("odtLevel").isEmpty()) ) {
                        // Param: odtLevel, Type: String
                        companiesRequestBuilder.withOdtLevel(stringStraightPass(params.getString("odtLevel")));
                    }
                    if (params.has("dataFreshness") && (params.getString("dataFreshness") != null) && (!params.getString("dataFreshness").isEmpty()) ) {
                        // Param: dataFreshness, Type: String
                        companiesRequestBuilder.withDataFreshness(stringStraightPass(params.getString("dataFreshness")));
                    }
                    if (params.has("distance") && (params.getString("distance") != null) && (!params.getString("distance").isEmpty()) ) {
                        // Param: distance, Type: Integer
                        companiesRequestBuilder.withDistance(integerStraightPass(params.getInt("distance")));
                    }
                    if (params.has("since") && (params.getString("since") != null) && (!params.getString("since").isEmpty()) ) {
                        // Param: since, Type: Date
                        companiesRequestBuilder.withSince(stringToDateTime(params.getString("since")));
                    }
                    if (params.has("until") && (params.getString("until") != null) && (!params.getString("until").isEmpty()) ) {
                        // Param: until, Type: Date
                        companiesRequestBuilder.withUntil(stringToDateTime(params.getString("until")));
                    }
                    if (params.has("disableGeojson") && (params.getString("disableGeojson") != null) && (!params.getString("disableGeojson").isEmpty()) ) {
                        // Param: disableGeojson, Type: Boolean
                        companiesRequestBuilder.withDisableGeojson(booleanStraightPass(params.getBoolean("disableGeojson")));
                    }
                    if (params.has("disableDisruption") && (params.getString("disableDisruption") != null) && (!params.getString("disableDisruption").isEmpty()) ) {
                        // Param: disableDisruption, Type: Boolean
                        companiesRequestBuilder.withDisableDisruption(booleanStraightPass(params.getBoolean("disableDisruption")));
                    }
                    if (params.has("tags") && (params.getString("tags") != null) && (!params.getString("tags").isEmpty()) ) {
                        // Param: tags, Type: List
                        companiesRequestBuilder.withTags(jsonArrayToStringList(params.getJSONArray("tags")));
                    }
                    
                    companiesRequestBuilder.rawGet(new ApiCallback<String>() {
                        @Override
                        public void onFailure(ApiException e, int statusCode, Map<String, List<String>> responseHeaders) {
                            callbackContext.error("Problem during request call | " + e.getMessage());
                        }

                        @Override
                        public void onSuccess(String result, int statusCode, Map<String, List<String>> responseHeaders) {
                            JSONObject jsonObject = null;
                            try {
                                jsonObject = new JSONObject(result);
                                callbackContext.success(jsonObject);
                            } catch (Exception e) {
                                String errorMessage = "Problem during response parsing | " + String.valueOf(e.hashCode()) + ": " + e.getMessage();
                                callbackContext.error(errorMessage);
                            }
                        }

                        @Override
                        public void onUploadProgress(long bytesWritten, long contentLength, boolean done) {
                        }

                        @Override
                        public void onDownloadProgress(long bytesRead, long contentLength, boolean done) {
                        }
                    });
                } catch (Exception e) {
                    String errorMessage = "Problem during request building | " + String.valueOf(e.hashCode()) + ": " + e.getMessage();
                    callbackContext.error(errorMessage);
                }
            }
        });
    }
    final private void coverageRegionUriCompanies(final JSONObject params, final CallbackContext callbackContext) {
        if (this.navitiaSdk == null) {
            callbackContext.error("NavitiaSDK is not instanciated");
            return;
        }

        final CompaniesApi.CoverageRegionUriCompaniesRequestBuilder companiesRequestBuilder = this.navitiaSdk.companiesApi.newCoverageRegionUriCompaniesRequestBuilder();
        cordova.getThreadPool().execute(new Runnable() {
            @Override
            public void run() {
                try {
                    if (params.has("region") && (params.getString("region") != null) && (!params.getString("region").isEmpty()) ) {
                        // Param: region, Type: String
                        companiesRequestBuilder.withRegion(stringStraightPass(params.getString("region")));
                    }
                    if (params.has("uri") && (params.getString("uri") != null) && (!params.getString("uri").isEmpty()) ) {
                        // Param: uri, Type: String
                        companiesRequestBuilder.withUri(stringStraightPass(params.getString("uri")));
                    }
                    if (params.has("startPage") && (params.getString("startPage") != null) && (!params.getString("startPage").isEmpty()) ) {
                        // Param: startPage, Type: Integer
                        companiesRequestBuilder.withStartPage(integerStraightPass(params.getInt("startPage")));
                    }
                    if (params.has("count") && (params.getString("count") != null) && (!params.getString("count").isEmpty()) ) {
                        // Param: count, Type: Integer
                        companiesRequestBuilder.withCount(integerStraightPass(params.getInt("count")));
                    }
                    if (params.has("depth") && (params.getString("depth") != null) && (!params.getString("depth").isEmpty()) ) {
                        // Param: depth, Type: Integer
                        companiesRequestBuilder.withDepth(integerStraightPass(params.getInt("depth")));
                    }
                    if (params.has("forbiddenId") && (params.getString("forbiddenId") != null) && (!params.getString("forbiddenId").isEmpty()) ) {
                        // Param: forbiddenId, Type: List
                        companiesRequestBuilder.withForbiddenId(jsonArrayToStringList(params.getJSONArray("forbiddenId")));
                    }
                    if (params.has("forbiddenUris") && (params.getString("forbiddenUris") != null) && (!params.getString("forbiddenUris").isEmpty()) ) {
                        // Param: forbiddenUris, Type: List
                        companiesRequestBuilder.withForbiddenUris(jsonArrayToStringList(params.getJSONArray("forbiddenUris")));
                    }
                    if (params.has("externalCode") && (params.getString("externalCode") != null) && (!params.getString("externalCode").isEmpty()) ) {
                        // Param: externalCode, Type: String
                        companiesRequestBuilder.withExternalCode(stringStraightPass(params.getString("externalCode")));
                    }
                    if (params.has("headsign") && (params.getString("headsign") != null) && (!params.getString("headsign").isEmpty()) ) {
                        // Param: headsign, Type: String
                        companiesRequestBuilder.withHeadsign(stringStraightPass(params.getString("headsign")));
                    }
                    if (params.has("showCodes") && (params.getString("showCodes") != null) && (!params.getString("showCodes").isEmpty()) ) {
                        // Param: showCodes, Type: Boolean
                        companiesRequestBuilder.withShowCodes(booleanStraightPass(params.getBoolean("showCodes")));
                    }
                    if (params.has("odtLevel") && (params.getString("odtLevel") != null) && (!params.getString("odtLevel").isEmpty()) ) {
                        // Param: odtLevel, Type: String
                        companiesRequestBuilder.withOdtLevel(stringStraightPass(params.getString("odtLevel")));
                    }
                    if (params.has("dataFreshness") && (params.getString("dataFreshness") != null) && (!params.getString("dataFreshness").isEmpty()) ) {
                        // Param: dataFreshness, Type: String
                        companiesRequestBuilder.withDataFreshness(stringStraightPass(params.getString("dataFreshness")));
                    }
                    if (params.has("distance") && (params.getString("distance") != null) && (!params.getString("distance").isEmpty()) ) {
                        // Param: distance, Type: Integer
                        companiesRequestBuilder.withDistance(integerStraightPass(params.getInt("distance")));
                    }
                    if (params.has("since") && (params.getString("since") != null) && (!params.getString("since").isEmpty()) ) {
                        // Param: since, Type: Date
                        companiesRequestBuilder.withSince(stringToDateTime(params.getString("since")));
                    }
                    if (params.has("until") && (params.getString("until") != null) && (!params.getString("until").isEmpty()) ) {
                        // Param: until, Type: Date
                        companiesRequestBuilder.withUntil(stringToDateTime(params.getString("until")));
                    }
                    if (params.has("disableGeojson") && (params.getString("disableGeojson") != null) && (!params.getString("disableGeojson").isEmpty()) ) {
                        // Param: disableGeojson, Type: Boolean
                        companiesRequestBuilder.withDisableGeojson(booleanStraightPass(params.getBoolean("disableGeojson")));
                    }
                    if (params.has("disableDisruption") && (params.getString("disableDisruption") != null) && (!params.getString("disableDisruption").isEmpty()) ) {
                        // Param: disableDisruption, Type: Boolean
                        companiesRequestBuilder.withDisableDisruption(booleanStraightPass(params.getBoolean("disableDisruption")));
                    }
                    if (params.has("filter") && (params.getString("filter") != null) && (!params.getString("filter").isEmpty()) ) {
                        // Param: filter, Type: String
                        companiesRequestBuilder.withFilter(stringStraightPass(params.getString("filter")));
                    }
                    if (params.has("tags") && (params.getString("tags") != null) && (!params.getString("tags").isEmpty()) ) {
                        // Param: tags, Type: List
                        companiesRequestBuilder.withTags(jsonArrayToStringList(params.getJSONArray("tags")));
                    }
                    
                    companiesRequestBuilder.rawGet(new ApiCallback<String>() {
                        @Override
                        public void onFailure(ApiException e, int statusCode, Map<String, List<String>> responseHeaders) {
                            callbackContext.error("Problem during request call | " + e.getMessage());
                        }

                        @Override
                        public void onSuccess(String result, int statusCode, Map<String, List<String>> responseHeaders) {
                            JSONObject jsonObject = null;
                            try {
                                jsonObject = new JSONObject(result);
                                callbackContext.success(jsonObject);
                            } catch (Exception e) {
                                String errorMessage = "Problem during response parsing | " + String.valueOf(e.hashCode()) + ": " + e.getMessage();
                                callbackContext.error(errorMessage);
                            }
                        }

                        @Override
                        public void onUploadProgress(long bytesWritten, long contentLength, boolean done) {
                        }

                        @Override
                        public void onDownloadProgress(long bytesRead, long contentLength, boolean done) {
                        }
                    });
                } catch (Exception e) {
                    String errorMessage = "Problem during request building | " + String.valueOf(e.hashCode()) + ": " + e.getMessage();
                    callbackContext.error(errorMessage);
                }
            }
        });
    }
    final private void coverageRegionUriCompaniesId(final JSONObject params, final CallbackContext callbackContext) {
        if (this.navitiaSdk == null) {
            callbackContext.error("NavitiaSDK is not instanciated");
            return;
        }

        final CompaniesApi.CoverageRegionUriCompaniesIdRequestBuilder companiesRequestBuilder = this.navitiaSdk.companiesApi.newCoverageRegionUriCompaniesIdRequestBuilder();
        cordova.getThreadPool().execute(new Runnable() {
            @Override
            public void run() {
                try {
                    if (params.has("region") && (params.getString("region") != null) && (!params.getString("region").isEmpty()) ) {
                        // Param: region, Type: String
                        companiesRequestBuilder.withRegion(stringStraightPass(params.getString("region")));
                    }
                    if (params.has("uri") && (params.getString("uri") != null) && (!params.getString("uri").isEmpty()) ) {
                        // Param: uri, Type: String
                        companiesRequestBuilder.withUri(stringStraightPass(params.getString("uri")));
                    }
                    if (params.has("id") && (params.getString("id") != null) && (!params.getString("id").isEmpty()) ) {
                        // Param: id, Type: String
                        companiesRequestBuilder.withId(stringStraightPass(params.getString("id")));
                    }
                    if (params.has("startPage") && (params.getString("startPage") != null) && (!params.getString("startPage").isEmpty()) ) {
                        // Param: startPage, Type: Integer
                        companiesRequestBuilder.withStartPage(integerStraightPass(params.getInt("startPage")));
                    }
                    if (params.has("count") && (params.getString("count") != null) && (!params.getString("count").isEmpty()) ) {
                        // Param: count, Type: Integer
                        companiesRequestBuilder.withCount(integerStraightPass(params.getInt("count")));
                    }
                    if (params.has("depth") && (params.getString("depth") != null) && (!params.getString("depth").isEmpty()) ) {
                        // Param: depth, Type: Integer
                        companiesRequestBuilder.withDepth(integerStraightPass(params.getInt("depth")));
                    }
                    if (params.has("forbiddenId") && (params.getString("forbiddenId") != null) && (!params.getString("forbiddenId").isEmpty()) ) {
                        // Param: forbiddenId, Type: List
                        companiesRequestBuilder.withForbiddenId(jsonArrayToStringList(params.getJSONArray("forbiddenId")));
                    }
                    if (params.has("forbiddenUris") && (params.getString("forbiddenUris") != null) && (!params.getString("forbiddenUris").isEmpty()) ) {
                        // Param: forbiddenUris, Type: List
                        companiesRequestBuilder.withForbiddenUris(jsonArrayToStringList(params.getJSONArray("forbiddenUris")));
                    }
                    if (params.has("externalCode") && (params.getString("externalCode") != null) && (!params.getString("externalCode").isEmpty()) ) {
                        // Param: externalCode, Type: String
                        companiesRequestBuilder.withExternalCode(stringStraightPass(params.getString("externalCode")));
                    }
                    if (params.has("headsign") && (params.getString("headsign") != null) && (!params.getString("headsign").isEmpty()) ) {
                        // Param: headsign, Type: String
                        companiesRequestBuilder.withHeadsign(stringStraightPass(params.getString("headsign")));
                    }
                    if (params.has("showCodes") && (params.getString("showCodes") != null) && (!params.getString("showCodes").isEmpty()) ) {
                        // Param: showCodes, Type: Boolean
                        companiesRequestBuilder.withShowCodes(booleanStraightPass(params.getBoolean("showCodes")));
                    }
                    if (params.has("odtLevel") && (params.getString("odtLevel") != null) && (!params.getString("odtLevel").isEmpty()) ) {
                        // Param: odtLevel, Type: String
                        companiesRequestBuilder.withOdtLevel(stringStraightPass(params.getString("odtLevel")));
                    }
                    if (params.has("dataFreshness") && (params.getString("dataFreshness") != null) && (!params.getString("dataFreshness").isEmpty()) ) {
                        // Param: dataFreshness, Type: String
                        companiesRequestBuilder.withDataFreshness(stringStraightPass(params.getString("dataFreshness")));
                    }
                    if (params.has("distance") && (params.getString("distance") != null) && (!params.getString("distance").isEmpty()) ) {
                        // Param: distance, Type: Integer
                        companiesRequestBuilder.withDistance(integerStraightPass(params.getInt("distance")));
                    }
                    if (params.has("since") && (params.getString("since") != null) && (!params.getString("since").isEmpty()) ) {
                        // Param: since, Type: Date
                        companiesRequestBuilder.withSince(stringToDateTime(params.getString("since")));
                    }
                    if (params.has("until") && (params.getString("until") != null) && (!params.getString("until").isEmpty()) ) {
                        // Param: until, Type: Date
                        companiesRequestBuilder.withUntil(stringToDateTime(params.getString("until")));
                    }
                    if (params.has("disableGeojson") && (params.getString("disableGeojson") != null) && (!params.getString("disableGeojson").isEmpty()) ) {
                        // Param: disableGeojson, Type: Boolean
                        companiesRequestBuilder.withDisableGeojson(booleanStraightPass(params.getBoolean("disableGeojson")));
                    }
                    if (params.has("disableDisruption") && (params.getString("disableDisruption") != null) && (!params.getString("disableDisruption").isEmpty()) ) {
                        // Param: disableDisruption, Type: Boolean
                        companiesRequestBuilder.withDisableDisruption(booleanStraightPass(params.getBoolean("disableDisruption")));
                    }
                    if (params.has("tags") && (params.getString("tags") != null) && (!params.getString("tags").isEmpty()) ) {
                        // Param: tags, Type: List
                        companiesRequestBuilder.withTags(jsonArrayToStringList(params.getJSONArray("tags")));
                    }
                    
                    companiesRequestBuilder.rawGet(new ApiCallback<String>() {
                        @Override
                        public void onFailure(ApiException e, int statusCode, Map<String, List<String>> responseHeaders) {
                            callbackContext.error("Problem during request call | " + e.getMessage());
                        }

                        @Override
                        public void onSuccess(String result, int statusCode, Map<String, List<String>> responseHeaders) {
                            JSONObject jsonObject = null;
                            try {
                                jsonObject = new JSONObject(result);
                                callbackContext.success(jsonObject);
                            } catch (Exception e) {
                                String errorMessage = "Problem during response parsing | " + String.valueOf(e.hashCode()) + ": " + e.getMessage();
                                callbackContext.error(errorMessage);
                            }
                        }

                        @Override
                        public void onUploadProgress(long bytesWritten, long contentLength, boolean done) {
                        }

                        @Override
                        public void onDownloadProgress(long bytesRead, long contentLength, boolean done) {
                        }
                    });
                } catch (Exception e) {
                    String errorMessage = "Problem during request building | " + String.valueOf(e.hashCode()) + ": " + e.getMessage();
                    callbackContext.error(errorMessage);
                }
            }
        });
    }
    final private void coverageLonLatContributors(final JSONObject params, final CallbackContext callbackContext) {
        if (this.navitiaSdk == null) {
            callbackContext.error("NavitiaSDK is not instanciated");
            return;
        }

        final ContributorsApi.CoverageLonLatContributorsRequestBuilder contributorsRequestBuilder = this.navitiaSdk.contributorsApi.newCoverageLonLatContributorsRequestBuilder();
        cordova.getThreadPool().execute(new Runnable() {
            @Override
            public void run() {
                try {
                    if (params.has("lat") && (params.getString("lat") != null) && (!params.getString("lat").isEmpty()) ) {
                        // Param: lat, Type: BigDecimal
                        contributorsRequestBuilder.withLat(longToBigDecimal(params.getLong("lat")));
                    }
                    if (params.has("lon") && (params.getString("lon") != null) && (!params.getString("lon").isEmpty()) ) {
                        // Param: lon, Type: BigDecimal
                        contributorsRequestBuilder.withLon(longToBigDecimal(params.getLong("lon")));
                    }
                    if (params.has("startPage") && (params.getString("startPage") != null) && (!params.getString("startPage").isEmpty()) ) {
                        // Param: startPage, Type: Integer
                        contributorsRequestBuilder.withStartPage(integerStraightPass(params.getInt("startPage")));
                    }
                    if (params.has("count") && (params.getString("count") != null) && (!params.getString("count").isEmpty()) ) {
                        // Param: count, Type: Integer
                        contributorsRequestBuilder.withCount(integerStraightPass(params.getInt("count")));
                    }
                    if (params.has("depth") && (params.getString("depth") != null) && (!params.getString("depth").isEmpty()) ) {
                        // Param: depth, Type: Integer
                        contributorsRequestBuilder.withDepth(integerStraightPass(params.getInt("depth")));
                    }
                    if (params.has("forbiddenId") && (params.getString("forbiddenId") != null) && (!params.getString("forbiddenId").isEmpty()) ) {
                        // Param: forbiddenId, Type: List
                        contributorsRequestBuilder.withForbiddenId(jsonArrayToStringList(params.getJSONArray("forbiddenId")));
                    }
                    if (params.has("forbiddenUris") && (params.getString("forbiddenUris") != null) && (!params.getString("forbiddenUris").isEmpty()) ) {
                        // Param: forbiddenUris, Type: List
                        contributorsRequestBuilder.withForbiddenUris(jsonArrayToStringList(params.getJSONArray("forbiddenUris")));
                    }
                    if (params.has("externalCode") && (params.getString("externalCode") != null) && (!params.getString("externalCode").isEmpty()) ) {
                        // Param: externalCode, Type: String
                        contributorsRequestBuilder.withExternalCode(stringStraightPass(params.getString("externalCode")));
                    }
                    if (params.has("headsign") && (params.getString("headsign") != null) && (!params.getString("headsign").isEmpty()) ) {
                        // Param: headsign, Type: String
                        contributorsRequestBuilder.withHeadsign(stringStraightPass(params.getString("headsign")));
                    }
                    if (params.has("showCodes") && (params.getString("showCodes") != null) && (!params.getString("showCodes").isEmpty()) ) {
                        // Param: showCodes, Type: Boolean
                        contributorsRequestBuilder.withShowCodes(booleanStraightPass(params.getBoolean("showCodes")));
                    }
                    if (params.has("odtLevel") && (params.getString("odtLevel") != null) && (!params.getString("odtLevel").isEmpty()) ) {
                        // Param: odtLevel, Type: String
                        contributorsRequestBuilder.withOdtLevel(stringStraightPass(params.getString("odtLevel")));
                    }
                    if (params.has("dataFreshness") && (params.getString("dataFreshness") != null) && (!params.getString("dataFreshness").isEmpty()) ) {
                        // Param: dataFreshness, Type: String
                        contributorsRequestBuilder.withDataFreshness(stringStraightPass(params.getString("dataFreshness")));
                    }
                    if (params.has("distance") && (params.getString("distance") != null) && (!params.getString("distance").isEmpty()) ) {
                        // Param: distance, Type: Integer
                        contributorsRequestBuilder.withDistance(integerStraightPass(params.getInt("distance")));
                    }
                    if (params.has("since") && (params.getString("since") != null) && (!params.getString("since").isEmpty()) ) {
                        // Param: since, Type: Date
                        contributorsRequestBuilder.withSince(stringToDateTime(params.getString("since")));
                    }
                    if (params.has("until") && (params.getString("until") != null) && (!params.getString("until").isEmpty()) ) {
                        // Param: until, Type: Date
                        contributorsRequestBuilder.withUntil(stringToDateTime(params.getString("until")));
                    }
                    if (params.has("disableGeojson") && (params.getString("disableGeojson") != null) && (!params.getString("disableGeojson").isEmpty()) ) {
                        // Param: disableGeojson, Type: Boolean
                        contributorsRequestBuilder.withDisableGeojson(booleanStraightPass(params.getBoolean("disableGeojson")));
                    }
                    if (params.has("disableDisruption") && (params.getString("disableDisruption") != null) && (!params.getString("disableDisruption").isEmpty()) ) {
                        // Param: disableDisruption, Type: Boolean
                        contributorsRequestBuilder.withDisableDisruption(booleanStraightPass(params.getBoolean("disableDisruption")));
                    }
                    if (params.has("filter") && (params.getString("filter") != null) && (!params.getString("filter").isEmpty()) ) {
                        // Param: filter, Type: String
                        contributorsRequestBuilder.withFilter(stringStraightPass(params.getString("filter")));
                    }
                    if (params.has("tags") && (params.getString("tags") != null) && (!params.getString("tags").isEmpty()) ) {
                        // Param: tags, Type: List
                        contributorsRequestBuilder.withTags(jsonArrayToStringList(params.getJSONArray("tags")));
                    }
                    
                    contributorsRequestBuilder.rawGet(new ApiCallback<String>() {
                        @Override
                        public void onFailure(ApiException e, int statusCode, Map<String, List<String>> responseHeaders) {
                            callbackContext.error("Problem during request call | " + e.getMessage());
                        }

                        @Override
                        public void onSuccess(String result, int statusCode, Map<String, List<String>> responseHeaders) {
                            JSONObject jsonObject = null;
                            try {
                                jsonObject = new JSONObject(result);
                                callbackContext.success(jsonObject);
                            } catch (Exception e) {
                                String errorMessage = "Problem during response parsing | " + String.valueOf(e.hashCode()) + ": " + e.getMessage();
                                callbackContext.error(errorMessage);
                            }
                        }

                        @Override
                        public void onUploadProgress(long bytesWritten, long contentLength, boolean done) {
                        }

                        @Override
                        public void onDownloadProgress(long bytesRead, long contentLength, boolean done) {
                        }
                    });
                } catch (Exception e) {
                    String errorMessage = "Problem during request building | " + String.valueOf(e.hashCode()) + ": " + e.getMessage();
                    callbackContext.error(errorMessage);
                }
            }
        });
    }
    final private void coverageLonLatContributorsId(final JSONObject params, final CallbackContext callbackContext) {
        if (this.navitiaSdk == null) {
            callbackContext.error("NavitiaSDK is not instanciated");
            return;
        }

        final ContributorsApi.CoverageLonLatContributorsIdRequestBuilder contributorsRequestBuilder = this.navitiaSdk.contributorsApi.newCoverageLonLatContributorsIdRequestBuilder();
        cordova.getThreadPool().execute(new Runnable() {
            @Override
            public void run() {
                try {
                    if (params.has("lat") && (params.getString("lat") != null) && (!params.getString("lat").isEmpty()) ) {
                        // Param: lat, Type: BigDecimal
                        contributorsRequestBuilder.withLat(longToBigDecimal(params.getLong("lat")));
                    }
                    if (params.has("lon") && (params.getString("lon") != null) && (!params.getString("lon").isEmpty()) ) {
                        // Param: lon, Type: BigDecimal
                        contributorsRequestBuilder.withLon(longToBigDecimal(params.getLong("lon")));
                    }
                    if (params.has("id") && (params.getString("id") != null) && (!params.getString("id").isEmpty()) ) {
                        // Param: id, Type: String
                        contributorsRequestBuilder.withId(stringStraightPass(params.getString("id")));
                    }
                    if (params.has("startPage") && (params.getString("startPage") != null) && (!params.getString("startPage").isEmpty()) ) {
                        // Param: startPage, Type: Integer
                        contributorsRequestBuilder.withStartPage(integerStraightPass(params.getInt("startPage")));
                    }
                    if (params.has("count") && (params.getString("count") != null) && (!params.getString("count").isEmpty()) ) {
                        // Param: count, Type: Integer
                        contributorsRequestBuilder.withCount(integerStraightPass(params.getInt("count")));
                    }
                    if (params.has("depth") && (params.getString("depth") != null) && (!params.getString("depth").isEmpty()) ) {
                        // Param: depth, Type: Integer
                        contributorsRequestBuilder.withDepth(integerStraightPass(params.getInt("depth")));
                    }
                    if (params.has("forbiddenId") && (params.getString("forbiddenId") != null) && (!params.getString("forbiddenId").isEmpty()) ) {
                        // Param: forbiddenId, Type: List
                        contributorsRequestBuilder.withForbiddenId(jsonArrayToStringList(params.getJSONArray("forbiddenId")));
                    }
                    if (params.has("forbiddenUris") && (params.getString("forbiddenUris") != null) && (!params.getString("forbiddenUris").isEmpty()) ) {
                        // Param: forbiddenUris, Type: List
                        contributorsRequestBuilder.withForbiddenUris(jsonArrayToStringList(params.getJSONArray("forbiddenUris")));
                    }
                    if (params.has("externalCode") && (params.getString("externalCode") != null) && (!params.getString("externalCode").isEmpty()) ) {
                        // Param: externalCode, Type: String
                        contributorsRequestBuilder.withExternalCode(stringStraightPass(params.getString("externalCode")));
                    }
                    if (params.has("headsign") && (params.getString("headsign") != null) && (!params.getString("headsign").isEmpty()) ) {
                        // Param: headsign, Type: String
                        contributorsRequestBuilder.withHeadsign(stringStraightPass(params.getString("headsign")));
                    }
                    if (params.has("showCodes") && (params.getString("showCodes") != null) && (!params.getString("showCodes").isEmpty()) ) {
                        // Param: showCodes, Type: Boolean
                        contributorsRequestBuilder.withShowCodes(booleanStraightPass(params.getBoolean("showCodes")));
                    }
                    if (params.has("odtLevel") && (params.getString("odtLevel") != null) && (!params.getString("odtLevel").isEmpty()) ) {
                        // Param: odtLevel, Type: String
                        contributorsRequestBuilder.withOdtLevel(stringStraightPass(params.getString("odtLevel")));
                    }
                    if (params.has("dataFreshness") && (params.getString("dataFreshness") != null) && (!params.getString("dataFreshness").isEmpty()) ) {
                        // Param: dataFreshness, Type: String
                        contributorsRequestBuilder.withDataFreshness(stringStraightPass(params.getString("dataFreshness")));
                    }
                    if (params.has("distance") && (params.getString("distance") != null) && (!params.getString("distance").isEmpty()) ) {
                        // Param: distance, Type: Integer
                        contributorsRequestBuilder.withDistance(integerStraightPass(params.getInt("distance")));
                    }
                    if (params.has("since") && (params.getString("since") != null) && (!params.getString("since").isEmpty()) ) {
                        // Param: since, Type: Date
                        contributorsRequestBuilder.withSince(stringToDateTime(params.getString("since")));
                    }
                    if (params.has("until") && (params.getString("until") != null) && (!params.getString("until").isEmpty()) ) {
                        // Param: until, Type: Date
                        contributorsRequestBuilder.withUntil(stringToDateTime(params.getString("until")));
                    }
                    if (params.has("disableGeojson") && (params.getString("disableGeojson") != null) && (!params.getString("disableGeojson").isEmpty()) ) {
                        // Param: disableGeojson, Type: Boolean
                        contributorsRequestBuilder.withDisableGeojson(booleanStraightPass(params.getBoolean("disableGeojson")));
                    }
                    if (params.has("disableDisruption") && (params.getString("disableDisruption") != null) && (!params.getString("disableDisruption").isEmpty()) ) {
                        // Param: disableDisruption, Type: Boolean
                        contributorsRequestBuilder.withDisableDisruption(booleanStraightPass(params.getBoolean("disableDisruption")));
                    }
                    if (params.has("tags") && (params.getString("tags") != null) && (!params.getString("tags").isEmpty()) ) {
                        // Param: tags, Type: List
                        contributorsRequestBuilder.withTags(jsonArrayToStringList(params.getJSONArray("tags")));
                    }
                    
                    contributorsRequestBuilder.rawGet(new ApiCallback<String>() {
                        @Override
                        public void onFailure(ApiException e, int statusCode, Map<String, List<String>> responseHeaders) {
                            callbackContext.error("Problem during request call | " + e.getMessage());
                        }

                        @Override
                        public void onSuccess(String result, int statusCode, Map<String, List<String>> responseHeaders) {
                            JSONObject jsonObject = null;
                            try {
                                jsonObject = new JSONObject(result);
                                callbackContext.success(jsonObject);
                            } catch (Exception e) {
                                String errorMessage = "Problem during response parsing | " + String.valueOf(e.hashCode()) + ": " + e.getMessage();
                                callbackContext.error(errorMessage);
                            }
                        }

                        @Override
                        public void onUploadProgress(long bytesWritten, long contentLength, boolean done) {
                        }

                        @Override
                        public void onDownloadProgress(long bytesRead, long contentLength, boolean done) {
                        }
                    });
                } catch (Exception e) {
                    String errorMessage = "Problem during request building | " + String.valueOf(e.hashCode()) + ": " + e.getMessage();
                    callbackContext.error(errorMessage);
                }
            }
        });
    }
    final private void coverageLonLatUriContributors(final JSONObject params, final CallbackContext callbackContext) {
        if (this.navitiaSdk == null) {
            callbackContext.error("NavitiaSDK is not instanciated");
            return;
        }

        final ContributorsApi.CoverageLonLatUriContributorsRequestBuilder contributorsRequestBuilder = this.navitiaSdk.contributorsApi.newCoverageLonLatUriContributorsRequestBuilder();
        cordova.getThreadPool().execute(new Runnable() {
            @Override
            public void run() {
                try {
                    if (params.has("lat") && (params.getString("lat") != null) && (!params.getString("lat").isEmpty()) ) {
                        // Param: lat, Type: BigDecimal
                        contributorsRequestBuilder.withLat(longToBigDecimal(params.getLong("lat")));
                    }
                    if (params.has("lon") && (params.getString("lon") != null) && (!params.getString("lon").isEmpty()) ) {
                        // Param: lon, Type: BigDecimal
                        contributorsRequestBuilder.withLon(longToBigDecimal(params.getLong("lon")));
                    }
                    if (params.has("uri") && (params.getString("uri") != null) && (!params.getString("uri").isEmpty()) ) {
                        // Param: uri, Type: String
                        contributorsRequestBuilder.withUri(stringStraightPass(params.getString("uri")));
                    }
                    if (params.has("startPage") && (params.getString("startPage") != null) && (!params.getString("startPage").isEmpty()) ) {
                        // Param: startPage, Type: Integer
                        contributorsRequestBuilder.withStartPage(integerStraightPass(params.getInt("startPage")));
                    }
                    if (params.has("count") && (params.getString("count") != null) && (!params.getString("count").isEmpty()) ) {
                        // Param: count, Type: Integer
                        contributorsRequestBuilder.withCount(integerStraightPass(params.getInt("count")));
                    }
                    if (params.has("depth") && (params.getString("depth") != null) && (!params.getString("depth").isEmpty()) ) {
                        // Param: depth, Type: Integer
                        contributorsRequestBuilder.withDepth(integerStraightPass(params.getInt("depth")));
                    }
                    if (params.has("forbiddenId") && (params.getString("forbiddenId") != null) && (!params.getString("forbiddenId").isEmpty()) ) {
                        // Param: forbiddenId, Type: List
                        contributorsRequestBuilder.withForbiddenId(jsonArrayToStringList(params.getJSONArray("forbiddenId")));
                    }
                    if (params.has("forbiddenUris") && (params.getString("forbiddenUris") != null) && (!params.getString("forbiddenUris").isEmpty()) ) {
                        // Param: forbiddenUris, Type: List
                        contributorsRequestBuilder.withForbiddenUris(jsonArrayToStringList(params.getJSONArray("forbiddenUris")));
                    }
                    if (params.has("externalCode") && (params.getString("externalCode") != null) && (!params.getString("externalCode").isEmpty()) ) {
                        // Param: externalCode, Type: String
                        contributorsRequestBuilder.withExternalCode(stringStraightPass(params.getString("externalCode")));
                    }
                    if (params.has("headsign") && (params.getString("headsign") != null) && (!params.getString("headsign").isEmpty()) ) {
                        // Param: headsign, Type: String
                        contributorsRequestBuilder.withHeadsign(stringStraightPass(params.getString("headsign")));
                    }
                    if (params.has("showCodes") && (params.getString("showCodes") != null) && (!params.getString("showCodes").isEmpty()) ) {
                        // Param: showCodes, Type: Boolean
                        contributorsRequestBuilder.withShowCodes(booleanStraightPass(params.getBoolean("showCodes")));
                    }
                    if (params.has("odtLevel") && (params.getString("odtLevel") != null) && (!params.getString("odtLevel").isEmpty()) ) {
                        // Param: odtLevel, Type: String
                        contributorsRequestBuilder.withOdtLevel(stringStraightPass(params.getString("odtLevel")));
                    }
                    if (params.has("dataFreshness") && (params.getString("dataFreshness") != null) && (!params.getString("dataFreshness").isEmpty()) ) {
                        // Param: dataFreshness, Type: String
                        contributorsRequestBuilder.withDataFreshness(stringStraightPass(params.getString("dataFreshness")));
                    }
                    if (params.has("distance") && (params.getString("distance") != null) && (!params.getString("distance").isEmpty()) ) {
                        // Param: distance, Type: Integer
                        contributorsRequestBuilder.withDistance(integerStraightPass(params.getInt("distance")));
                    }
                    if (params.has("since") && (params.getString("since") != null) && (!params.getString("since").isEmpty()) ) {
                        // Param: since, Type: Date
                        contributorsRequestBuilder.withSince(stringToDateTime(params.getString("since")));
                    }
                    if (params.has("until") && (params.getString("until") != null) && (!params.getString("until").isEmpty()) ) {
                        // Param: until, Type: Date
                        contributorsRequestBuilder.withUntil(stringToDateTime(params.getString("until")));
                    }
                    if (params.has("disableGeojson") && (params.getString("disableGeojson") != null) && (!params.getString("disableGeojson").isEmpty()) ) {
                        // Param: disableGeojson, Type: Boolean
                        contributorsRequestBuilder.withDisableGeojson(booleanStraightPass(params.getBoolean("disableGeojson")));
                    }
                    if (params.has("disableDisruption") && (params.getString("disableDisruption") != null) && (!params.getString("disableDisruption").isEmpty()) ) {
                        // Param: disableDisruption, Type: Boolean
                        contributorsRequestBuilder.withDisableDisruption(booleanStraightPass(params.getBoolean("disableDisruption")));
                    }
                    if (params.has("filter") && (params.getString("filter") != null) && (!params.getString("filter").isEmpty()) ) {
                        // Param: filter, Type: String
                        contributorsRequestBuilder.withFilter(stringStraightPass(params.getString("filter")));
                    }
                    if (params.has("tags") && (params.getString("tags") != null) && (!params.getString("tags").isEmpty()) ) {
                        // Param: tags, Type: List
                        contributorsRequestBuilder.withTags(jsonArrayToStringList(params.getJSONArray("tags")));
                    }
                    
                    contributorsRequestBuilder.rawGet(new ApiCallback<String>() {
                        @Override
                        public void onFailure(ApiException e, int statusCode, Map<String, List<String>> responseHeaders) {
                            callbackContext.error("Problem during request call | " + e.getMessage());
                        }

                        @Override
                        public void onSuccess(String result, int statusCode, Map<String, List<String>> responseHeaders) {
                            JSONObject jsonObject = null;
                            try {
                                jsonObject = new JSONObject(result);
                                callbackContext.success(jsonObject);
                            } catch (Exception e) {
                                String errorMessage = "Problem during response parsing | " + String.valueOf(e.hashCode()) + ": " + e.getMessage();
                                callbackContext.error(errorMessage);
                            }
                        }

                        @Override
                        public void onUploadProgress(long bytesWritten, long contentLength, boolean done) {
                        }

                        @Override
                        public void onDownloadProgress(long bytesRead, long contentLength, boolean done) {
                        }
                    });
                } catch (Exception e) {
                    String errorMessage = "Problem during request building | " + String.valueOf(e.hashCode()) + ": " + e.getMessage();
                    callbackContext.error(errorMessage);
                }
            }
        });
    }
    final private void coverageLonLatUriContributorsId(final JSONObject params, final CallbackContext callbackContext) {
        if (this.navitiaSdk == null) {
            callbackContext.error("NavitiaSDK is not instanciated");
            return;
        }

        final ContributorsApi.CoverageLonLatUriContributorsIdRequestBuilder contributorsRequestBuilder = this.navitiaSdk.contributorsApi.newCoverageLonLatUriContributorsIdRequestBuilder();
        cordova.getThreadPool().execute(new Runnable() {
            @Override
            public void run() {
                try {
                    if (params.has("lat") && (params.getString("lat") != null) && (!params.getString("lat").isEmpty()) ) {
                        // Param: lat, Type: BigDecimal
                        contributorsRequestBuilder.withLat(longToBigDecimal(params.getLong("lat")));
                    }
                    if (params.has("lon") && (params.getString("lon") != null) && (!params.getString("lon").isEmpty()) ) {
                        // Param: lon, Type: BigDecimal
                        contributorsRequestBuilder.withLon(longToBigDecimal(params.getLong("lon")));
                    }
                    if (params.has("uri") && (params.getString("uri") != null) && (!params.getString("uri").isEmpty()) ) {
                        // Param: uri, Type: String
                        contributorsRequestBuilder.withUri(stringStraightPass(params.getString("uri")));
                    }
                    if (params.has("id") && (params.getString("id") != null) && (!params.getString("id").isEmpty()) ) {
                        // Param: id, Type: String
                        contributorsRequestBuilder.withId(stringStraightPass(params.getString("id")));
                    }
                    if (params.has("startPage") && (params.getString("startPage") != null) && (!params.getString("startPage").isEmpty()) ) {
                        // Param: startPage, Type: Integer
                        contributorsRequestBuilder.withStartPage(integerStraightPass(params.getInt("startPage")));
                    }
                    if (params.has("count") && (params.getString("count") != null) && (!params.getString("count").isEmpty()) ) {
                        // Param: count, Type: Integer
                        contributorsRequestBuilder.withCount(integerStraightPass(params.getInt("count")));
                    }
                    if (params.has("depth") && (params.getString("depth") != null) && (!params.getString("depth").isEmpty()) ) {
                        // Param: depth, Type: Integer
                        contributorsRequestBuilder.withDepth(integerStraightPass(params.getInt("depth")));
                    }
                    if (params.has("forbiddenId") && (params.getString("forbiddenId") != null) && (!params.getString("forbiddenId").isEmpty()) ) {
                        // Param: forbiddenId, Type: List
                        contributorsRequestBuilder.withForbiddenId(jsonArrayToStringList(params.getJSONArray("forbiddenId")));
                    }
                    if (params.has("forbiddenUris") && (params.getString("forbiddenUris") != null) && (!params.getString("forbiddenUris").isEmpty()) ) {
                        // Param: forbiddenUris, Type: List
                        contributorsRequestBuilder.withForbiddenUris(jsonArrayToStringList(params.getJSONArray("forbiddenUris")));
                    }
                    if (params.has("externalCode") && (params.getString("externalCode") != null) && (!params.getString("externalCode").isEmpty()) ) {
                        // Param: externalCode, Type: String
                        contributorsRequestBuilder.withExternalCode(stringStraightPass(params.getString("externalCode")));
                    }
                    if (params.has("headsign") && (params.getString("headsign") != null) && (!params.getString("headsign").isEmpty()) ) {
                        // Param: headsign, Type: String
                        contributorsRequestBuilder.withHeadsign(stringStraightPass(params.getString("headsign")));
                    }
                    if (params.has("showCodes") && (params.getString("showCodes") != null) && (!params.getString("showCodes").isEmpty()) ) {
                        // Param: showCodes, Type: Boolean
                        contributorsRequestBuilder.withShowCodes(booleanStraightPass(params.getBoolean("showCodes")));
                    }
                    if (params.has("odtLevel") && (params.getString("odtLevel") != null) && (!params.getString("odtLevel").isEmpty()) ) {
                        // Param: odtLevel, Type: String
                        contributorsRequestBuilder.withOdtLevel(stringStraightPass(params.getString("odtLevel")));
                    }
                    if (params.has("dataFreshness") && (params.getString("dataFreshness") != null) && (!params.getString("dataFreshness").isEmpty()) ) {
                        // Param: dataFreshness, Type: String
                        contributorsRequestBuilder.withDataFreshness(stringStraightPass(params.getString("dataFreshness")));
                    }
                    if (params.has("distance") && (params.getString("distance") != null) && (!params.getString("distance").isEmpty()) ) {
                        // Param: distance, Type: Integer
                        contributorsRequestBuilder.withDistance(integerStraightPass(params.getInt("distance")));
                    }
                    if (params.has("since") && (params.getString("since") != null) && (!params.getString("since").isEmpty()) ) {
                        // Param: since, Type: Date
                        contributorsRequestBuilder.withSince(stringToDateTime(params.getString("since")));
                    }
                    if (params.has("until") && (params.getString("until") != null) && (!params.getString("until").isEmpty()) ) {
                        // Param: until, Type: Date
                        contributorsRequestBuilder.withUntil(stringToDateTime(params.getString("until")));
                    }
                    if (params.has("disableGeojson") && (params.getString("disableGeojson") != null) && (!params.getString("disableGeojson").isEmpty()) ) {
                        // Param: disableGeojson, Type: Boolean
                        contributorsRequestBuilder.withDisableGeojson(booleanStraightPass(params.getBoolean("disableGeojson")));
                    }
                    if (params.has("disableDisruption") && (params.getString("disableDisruption") != null) && (!params.getString("disableDisruption").isEmpty()) ) {
                        // Param: disableDisruption, Type: Boolean
                        contributorsRequestBuilder.withDisableDisruption(booleanStraightPass(params.getBoolean("disableDisruption")));
                    }
                    if (params.has("tags") && (params.getString("tags") != null) && (!params.getString("tags").isEmpty()) ) {
                        // Param: tags, Type: List
                        contributorsRequestBuilder.withTags(jsonArrayToStringList(params.getJSONArray("tags")));
                    }
                    
                    contributorsRequestBuilder.rawGet(new ApiCallback<String>() {
                        @Override
                        public void onFailure(ApiException e, int statusCode, Map<String, List<String>> responseHeaders) {
                            callbackContext.error("Problem during request call | " + e.getMessage());
                        }

                        @Override
                        public void onSuccess(String result, int statusCode, Map<String, List<String>> responseHeaders) {
                            JSONObject jsonObject = null;
                            try {
                                jsonObject = new JSONObject(result);
                                callbackContext.success(jsonObject);
                            } catch (Exception e) {
                                String errorMessage = "Problem during response parsing | " + String.valueOf(e.hashCode()) + ": " + e.getMessage();
                                callbackContext.error(errorMessage);
                            }
                        }

                        @Override
                        public void onUploadProgress(long bytesWritten, long contentLength, boolean done) {
                        }

                        @Override
                        public void onDownloadProgress(long bytesRead, long contentLength, boolean done) {
                        }
                    });
                } catch (Exception e) {
                    String errorMessage = "Problem during request building | " + String.valueOf(e.hashCode()) + ": " + e.getMessage();
                    callbackContext.error(errorMessage);
                }
            }
        });
    }
    final private void coverageRegionContributors(final JSONObject params, final CallbackContext callbackContext) {
        if (this.navitiaSdk == null) {
            callbackContext.error("NavitiaSDK is not instanciated");
            return;
        }

        final ContributorsApi.CoverageRegionContributorsRequestBuilder contributorsRequestBuilder = this.navitiaSdk.contributorsApi.newCoverageRegionContributorsRequestBuilder();
        cordova.getThreadPool().execute(new Runnable() {
            @Override
            public void run() {
                try {
                    if (params.has("region") && (params.getString("region") != null) && (!params.getString("region").isEmpty()) ) {
                        // Param: region, Type: String
                        contributorsRequestBuilder.withRegion(stringStraightPass(params.getString("region")));
                    }
                    if (params.has("startPage") && (params.getString("startPage") != null) && (!params.getString("startPage").isEmpty()) ) {
                        // Param: startPage, Type: Integer
                        contributorsRequestBuilder.withStartPage(integerStraightPass(params.getInt("startPage")));
                    }
                    if (params.has("count") && (params.getString("count") != null) && (!params.getString("count").isEmpty()) ) {
                        // Param: count, Type: Integer
                        contributorsRequestBuilder.withCount(integerStraightPass(params.getInt("count")));
                    }
                    if (params.has("depth") && (params.getString("depth") != null) && (!params.getString("depth").isEmpty()) ) {
                        // Param: depth, Type: Integer
                        contributorsRequestBuilder.withDepth(integerStraightPass(params.getInt("depth")));
                    }
                    if (params.has("forbiddenId") && (params.getString("forbiddenId") != null) && (!params.getString("forbiddenId").isEmpty()) ) {
                        // Param: forbiddenId, Type: List
                        contributorsRequestBuilder.withForbiddenId(jsonArrayToStringList(params.getJSONArray("forbiddenId")));
                    }
                    if (params.has("forbiddenUris") && (params.getString("forbiddenUris") != null) && (!params.getString("forbiddenUris").isEmpty()) ) {
                        // Param: forbiddenUris, Type: List
                        contributorsRequestBuilder.withForbiddenUris(jsonArrayToStringList(params.getJSONArray("forbiddenUris")));
                    }
                    if (params.has("externalCode") && (params.getString("externalCode") != null) && (!params.getString("externalCode").isEmpty()) ) {
                        // Param: externalCode, Type: String
                        contributorsRequestBuilder.withExternalCode(stringStraightPass(params.getString("externalCode")));
                    }
                    if (params.has("headsign") && (params.getString("headsign") != null) && (!params.getString("headsign").isEmpty()) ) {
                        // Param: headsign, Type: String
                        contributorsRequestBuilder.withHeadsign(stringStraightPass(params.getString("headsign")));
                    }
                    if (params.has("showCodes") && (params.getString("showCodes") != null) && (!params.getString("showCodes").isEmpty()) ) {
                        // Param: showCodes, Type: Boolean
                        contributorsRequestBuilder.withShowCodes(booleanStraightPass(params.getBoolean("showCodes")));
                    }
                    if (params.has("odtLevel") && (params.getString("odtLevel") != null) && (!params.getString("odtLevel").isEmpty()) ) {
                        // Param: odtLevel, Type: String
                        contributorsRequestBuilder.withOdtLevel(stringStraightPass(params.getString("odtLevel")));
                    }
                    if (params.has("dataFreshness") && (params.getString("dataFreshness") != null) && (!params.getString("dataFreshness").isEmpty()) ) {
                        // Param: dataFreshness, Type: String
                        contributorsRequestBuilder.withDataFreshness(stringStraightPass(params.getString("dataFreshness")));
                    }
                    if (params.has("distance") && (params.getString("distance") != null) && (!params.getString("distance").isEmpty()) ) {
                        // Param: distance, Type: Integer
                        contributorsRequestBuilder.withDistance(integerStraightPass(params.getInt("distance")));
                    }
                    if (params.has("since") && (params.getString("since") != null) && (!params.getString("since").isEmpty()) ) {
                        // Param: since, Type: Date
                        contributorsRequestBuilder.withSince(stringToDateTime(params.getString("since")));
                    }
                    if (params.has("until") && (params.getString("until") != null) && (!params.getString("until").isEmpty()) ) {
                        // Param: until, Type: Date
                        contributorsRequestBuilder.withUntil(stringToDateTime(params.getString("until")));
                    }
                    if (params.has("disableGeojson") && (params.getString("disableGeojson") != null) && (!params.getString("disableGeojson").isEmpty()) ) {
                        // Param: disableGeojson, Type: Boolean
                        contributorsRequestBuilder.withDisableGeojson(booleanStraightPass(params.getBoolean("disableGeojson")));
                    }
                    if (params.has("disableDisruption") && (params.getString("disableDisruption") != null) && (!params.getString("disableDisruption").isEmpty()) ) {
                        // Param: disableDisruption, Type: Boolean
                        contributorsRequestBuilder.withDisableDisruption(booleanStraightPass(params.getBoolean("disableDisruption")));
                    }
                    if (params.has("filter") && (params.getString("filter") != null) && (!params.getString("filter").isEmpty()) ) {
                        // Param: filter, Type: String
                        contributorsRequestBuilder.withFilter(stringStraightPass(params.getString("filter")));
                    }
                    if (params.has("tags") && (params.getString("tags") != null) && (!params.getString("tags").isEmpty()) ) {
                        // Param: tags, Type: List
                        contributorsRequestBuilder.withTags(jsonArrayToStringList(params.getJSONArray("tags")));
                    }
                    
                    contributorsRequestBuilder.rawGet(new ApiCallback<String>() {
                        @Override
                        public void onFailure(ApiException e, int statusCode, Map<String, List<String>> responseHeaders) {
                            callbackContext.error("Problem during request call | " + e.getMessage());
                        }

                        @Override
                        public void onSuccess(String result, int statusCode, Map<String, List<String>> responseHeaders) {
                            JSONObject jsonObject = null;
                            try {
                                jsonObject = new JSONObject(result);
                                callbackContext.success(jsonObject);
                            } catch (Exception e) {
                                String errorMessage = "Problem during response parsing | " + String.valueOf(e.hashCode()) + ": " + e.getMessage();
                                callbackContext.error(errorMessage);
                            }
                        }

                        @Override
                        public void onUploadProgress(long bytesWritten, long contentLength, boolean done) {
                        }

                        @Override
                        public void onDownloadProgress(long bytesRead, long contentLength, boolean done) {
                        }
                    });
                } catch (Exception e) {
                    String errorMessage = "Problem during request building | " + String.valueOf(e.hashCode()) + ": " + e.getMessage();
                    callbackContext.error(errorMessage);
                }
            }
        });
    }
    final private void coverageRegionContributorsId(final JSONObject params, final CallbackContext callbackContext) {
        if (this.navitiaSdk == null) {
            callbackContext.error("NavitiaSDK is not instanciated");
            return;
        }

        final ContributorsApi.CoverageRegionContributorsIdRequestBuilder contributorsRequestBuilder = this.navitiaSdk.contributorsApi.newCoverageRegionContributorsIdRequestBuilder();
        cordova.getThreadPool().execute(new Runnable() {
            @Override
            public void run() {
                try {
                    if (params.has("region") && (params.getString("region") != null) && (!params.getString("region").isEmpty()) ) {
                        // Param: region, Type: String
                        contributorsRequestBuilder.withRegion(stringStraightPass(params.getString("region")));
                    }
                    if (params.has("id") && (params.getString("id") != null) && (!params.getString("id").isEmpty()) ) {
                        // Param: id, Type: String
                        contributorsRequestBuilder.withId(stringStraightPass(params.getString("id")));
                    }
                    if (params.has("startPage") && (params.getString("startPage") != null) && (!params.getString("startPage").isEmpty()) ) {
                        // Param: startPage, Type: Integer
                        contributorsRequestBuilder.withStartPage(integerStraightPass(params.getInt("startPage")));
                    }
                    if (params.has("count") && (params.getString("count") != null) && (!params.getString("count").isEmpty()) ) {
                        // Param: count, Type: Integer
                        contributorsRequestBuilder.withCount(integerStraightPass(params.getInt("count")));
                    }
                    if (params.has("depth") && (params.getString("depth") != null) && (!params.getString("depth").isEmpty()) ) {
                        // Param: depth, Type: Integer
                        contributorsRequestBuilder.withDepth(integerStraightPass(params.getInt("depth")));
                    }
                    if (params.has("forbiddenId") && (params.getString("forbiddenId") != null) && (!params.getString("forbiddenId").isEmpty()) ) {
                        // Param: forbiddenId, Type: List
                        contributorsRequestBuilder.withForbiddenId(jsonArrayToStringList(params.getJSONArray("forbiddenId")));
                    }
                    if (params.has("forbiddenUris") && (params.getString("forbiddenUris") != null) && (!params.getString("forbiddenUris").isEmpty()) ) {
                        // Param: forbiddenUris, Type: List
                        contributorsRequestBuilder.withForbiddenUris(jsonArrayToStringList(params.getJSONArray("forbiddenUris")));
                    }
                    if (params.has("externalCode") && (params.getString("externalCode") != null) && (!params.getString("externalCode").isEmpty()) ) {
                        // Param: externalCode, Type: String
                        contributorsRequestBuilder.withExternalCode(stringStraightPass(params.getString("externalCode")));
                    }
                    if (params.has("headsign") && (params.getString("headsign") != null) && (!params.getString("headsign").isEmpty()) ) {
                        // Param: headsign, Type: String
                        contributorsRequestBuilder.withHeadsign(stringStraightPass(params.getString("headsign")));
                    }
                    if (params.has("showCodes") && (params.getString("showCodes") != null) && (!params.getString("showCodes").isEmpty()) ) {
                        // Param: showCodes, Type: Boolean
                        contributorsRequestBuilder.withShowCodes(booleanStraightPass(params.getBoolean("showCodes")));
                    }
                    if (params.has("odtLevel") && (params.getString("odtLevel") != null) && (!params.getString("odtLevel").isEmpty()) ) {
                        // Param: odtLevel, Type: String
                        contributorsRequestBuilder.withOdtLevel(stringStraightPass(params.getString("odtLevel")));
                    }
                    if (params.has("dataFreshness") && (params.getString("dataFreshness") != null) && (!params.getString("dataFreshness").isEmpty()) ) {
                        // Param: dataFreshness, Type: String
                        contributorsRequestBuilder.withDataFreshness(stringStraightPass(params.getString("dataFreshness")));
                    }
                    if (params.has("distance") && (params.getString("distance") != null) && (!params.getString("distance").isEmpty()) ) {
                        // Param: distance, Type: Integer
                        contributorsRequestBuilder.withDistance(integerStraightPass(params.getInt("distance")));
                    }
                    if (params.has("since") && (params.getString("since") != null) && (!params.getString("since").isEmpty()) ) {
                        // Param: since, Type: Date
                        contributorsRequestBuilder.withSince(stringToDateTime(params.getString("since")));
                    }
                    if (params.has("until") && (params.getString("until") != null) && (!params.getString("until").isEmpty()) ) {
                        // Param: until, Type: Date
                        contributorsRequestBuilder.withUntil(stringToDateTime(params.getString("until")));
                    }
                    if (params.has("disableGeojson") && (params.getString("disableGeojson") != null) && (!params.getString("disableGeojson").isEmpty()) ) {
                        // Param: disableGeojson, Type: Boolean
                        contributorsRequestBuilder.withDisableGeojson(booleanStraightPass(params.getBoolean("disableGeojson")));
                    }
                    if (params.has("disableDisruption") && (params.getString("disableDisruption") != null) && (!params.getString("disableDisruption").isEmpty()) ) {
                        // Param: disableDisruption, Type: Boolean
                        contributorsRequestBuilder.withDisableDisruption(booleanStraightPass(params.getBoolean("disableDisruption")));
                    }
                    if (params.has("tags") && (params.getString("tags") != null) && (!params.getString("tags").isEmpty()) ) {
                        // Param: tags, Type: List
                        contributorsRequestBuilder.withTags(jsonArrayToStringList(params.getJSONArray("tags")));
                    }
                    
                    contributorsRequestBuilder.rawGet(new ApiCallback<String>() {
                        @Override
                        public void onFailure(ApiException e, int statusCode, Map<String, List<String>> responseHeaders) {
                            callbackContext.error("Problem during request call | " + e.getMessage());
                        }

                        @Override
                        public void onSuccess(String result, int statusCode, Map<String, List<String>> responseHeaders) {
                            JSONObject jsonObject = null;
                            try {
                                jsonObject = new JSONObject(result);
                                callbackContext.success(jsonObject);
                            } catch (Exception e) {
                                String errorMessage = "Problem during response parsing | " + String.valueOf(e.hashCode()) + ": " + e.getMessage();
                                callbackContext.error(errorMessage);
                            }
                        }

                        @Override
                        public void onUploadProgress(long bytesWritten, long contentLength, boolean done) {
                        }

                        @Override
                        public void onDownloadProgress(long bytesRead, long contentLength, boolean done) {
                        }
                    });
                } catch (Exception e) {
                    String errorMessage = "Problem during request building | " + String.valueOf(e.hashCode()) + ": " + e.getMessage();
                    callbackContext.error(errorMessage);
                }
            }
        });
    }
    final private void coverageRegionUriContributors(final JSONObject params, final CallbackContext callbackContext) {
        if (this.navitiaSdk == null) {
            callbackContext.error("NavitiaSDK is not instanciated");
            return;
        }

        final ContributorsApi.CoverageRegionUriContributorsRequestBuilder contributorsRequestBuilder = this.navitiaSdk.contributorsApi.newCoverageRegionUriContributorsRequestBuilder();
        cordova.getThreadPool().execute(new Runnable() {
            @Override
            public void run() {
                try {
                    if (params.has("region") && (params.getString("region") != null) && (!params.getString("region").isEmpty()) ) {
                        // Param: region, Type: String
                        contributorsRequestBuilder.withRegion(stringStraightPass(params.getString("region")));
                    }
                    if (params.has("uri") && (params.getString("uri") != null) && (!params.getString("uri").isEmpty()) ) {
                        // Param: uri, Type: String
                        contributorsRequestBuilder.withUri(stringStraightPass(params.getString("uri")));
                    }
                    if (params.has("startPage") && (params.getString("startPage") != null) && (!params.getString("startPage").isEmpty()) ) {
                        // Param: startPage, Type: Integer
                        contributorsRequestBuilder.withStartPage(integerStraightPass(params.getInt("startPage")));
                    }
                    if (params.has("count") && (params.getString("count") != null) && (!params.getString("count").isEmpty()) ) {
                        // Param: count, Type: Integer
                        contributorsRequestBuilder.withCount(integerStraightPass(params.getInt("count")));
                    }
                    if (params.has("depth") && (params.getString("depth") != null) && (!params.getString("depth").isEmpty()) ) {
                        // Param: depth, Type: Integer
                        contributorsRequestBuilder.withDepth(integerStraightPass(params.getInt("depth")));
                    }
                    if (params.has("forbiddenId") && (params.getString("forbiddenId") != null) && (!params.getString("forbiddenId").isEmpty()) ) {
                        // Param: forbiddenId, Type: List
                        contributorsRequestBuilder.withForbiddenId(jsonArrayToStringList(params.getJSONArray("forbiddenId")));
                    }
                    if (params.has("forbiddenUris") && (params.getString("forbiddenUris") != null) && (!params.getString("forbiddenUris").isEmpty()) ) {
                        // Param: forbiddenUris, Type: List
                        contributorsRequestBuilder.withForbiddenUris(jsonArrayToStringList(params.getJSONArray("forbiddenUris")));
                    }
                    if (params.has("externalCode") && (params.getString("externalCode") != null) && (!params.getString("externalCode").isEmpty()) ) {
                        // Param: externalCode, Type: String
                        contributorsRequestBuilder.withExternalCode(stringStraightPass(params.getString("externalCode")));
                    }
                    if (params.has("headsign") && (params.getString("headsign") != null) && (!params.getString("headsign").isEmpty()) ) {
                        // Param: headsign, Type: String
                        contributorsRequestBuilder.withHeadsign(stringStraightPass(params.getString("headsign")));
                    }
                    if (params.has("showCodes") && (params.getString("showCodes") != null) && (!params.getString("showCodes").isEmpty()) ) {
                        // Param: showCodes, Type: Boolean
                        contributorsRequestBuilder.withShowCodes(booleanStraightPass(params.getBoolean("showCodes")));
                    }
                    if (params.has("odtLevel") && (params.getString("odtLevel") != null) && (!params.getString("odtLevel").isEmpty()) ) {
                        // Param: odtLevel, Type: String
                        contributorsRequestBuilder.withOdtLevel(stringStraightPass(params.getString("odtLevel")));
                    }
                    if (params.has("dataFreshness") && (params.getString("dataFreshness") != null) && (!params.getString("dataFreshness").isEmpty()) ) {
                        // Param: dataFreshness, Type: String
                        contributorsRequestBuilder.withDataFreshness(stringStraightPass(params.getString("dataFreshness")));
                    }
                    if (params.has("distance") && (params.getString("distance") != null) && (!params.getString("distance").isEmpty()) ) {
                        // Param: distance, Type: Integer
                        contributorsRequestBuilder.withDistance(integerStraightPass(params.getInt("distance")));
                    }
                    if (params.has("since") && (params.getString("since") != null) && (!params.getString("since").isEmpty()) ) {
                        // Param: since, Type: Date
                        contributorsRequestBuilder.withSince(stringToDateTime(params.getString("since")));
                    }
                    if (params.has("until") && (params.getString("until") != null) && (!params.getString("until").isEmpty()) ) {
                        // Param: until, Type: Date
                        contributorsRequestBuilder.withUntil(stringToDateTime(params.getString("until")));
                    }
                    if (params.has("disableGeojson") && (params.getString("disableGeojson") != null) && (!params.getString("disableGeojson").isEmpty()) ) {
                        // Param: disableGeojson, Type: Boolean
                        contributorsRequestBuilder.withDisableGeojson(booleanStraightPass(params.getBoolean("disableGeojson")));
                    }
                    if (params.has("disableDisruption") && (params.getString("disableDisruption") != null) && (!params.getString("disableDisruption").isEmpty()) ) {
                        // Param: disableDisruption, Type: Boolean
                        contributorsRequestBuilder.withDisableDisruption(booleanStraightPass(params.getBoolean("disableDisruption")));
                    }
                    if (params.has("filter") && (params.getString("filter") != null) && (!params.getString("filter").isEmpty()) ) {
                        // Param: filter, Type: String
                        contributorsRequestBuilder.withFilter(stringStraightPass(params.getString("filter")));
                    }
                    if (params.has("tags") && (params.getString("tags") != null) && (!params.getString("tags").isEmpty()) ) {
                        // Param: tags, Type: List
                        contributorsRequestBuilder.withTags(jsonArrayToStringList(params.getJSONArray("tags")));
                    }
                    
                    contributorsRequestBuilder.rawGet(new ApiCallback<String>() {
                        @Override
                        public void onFailure(ApiException e, int statusCode, Map<String, List<String>> responseHeaders) {
                            callbackContext.error("Problem during request call | " + e.getMessage());
                        }

                        @Override
                        public void onSuccess(String result, int statusCode, Map<String, List<String>> responseHeaders) {
                            JSONObject jsonObject = null;
                            try {
                                jsonObject = new JSONObject(result);
                                callbackContext.success(jsonObject);
                            } catch (Exception e) {
                                String errorMessage = "Problem during response parsing | " + String.valueOf(e.hashCode()) + ": " + e.getMessage();
                                callbackContext.error(errorMessage);
                            }
                        }

                        @Override
                        public void onUploadProgress(long bytesWritten, long contentLength, boolean done) {
                        }

                        @Override
                        public void onDownloadProgress(long bytesRead, long contentLength, boolean done) {
                        }
                    });
                } catch (Exception e) {
                    String errorMessage = "Problem during request building | " + String.valueOf(e.hashCode()) + ": " + e.getMessage();
                    callbackContext.error(errorMessage);
                }
            }
        });
    }
    final private void coverageRegionUriContributorsId(final JSONObject params, final CallbackContext callbackContext) {
        if (this.navitiaSdk == null) {
            callbackContext.error("NavitiaSDK is not instanciated");
            return;
        }

        final ContributorsApi.CoverageRegionUriContributorsIdRequestBuilder contributorsRequestBuilder = this.navitiaSdk.contributorsApi.newCoverageRegionUriContributorsIdRequestBuilder();
        cordova.getThreadPool().execute(new Runnable() {
            @Override
            public void run() {
                try {
                    if (params.has("region") && (params.getString("region") != null) && (!params.getString("region").isEmpty()) ) {
                        // Param: region, Type: String
                        contributorsRequestBuilder.withRegion(stringStraightPass(params.getString("region")));
                    }
                    if (params.has("uri") && (params.getString("uri") != null) && (!params.getString("uri").isEmpty()) ) {
                        // Param: uri, Type: String
                        contributorsRequestBuilder.withUri(stringStraightPass(params.getString("uri")));
                    }
                    if (params.has("id") && (params.getString("id") != null) && (!params.getString("id").isEmpty()) ) {
                        // Param: id, Type: String
                        contributorsRequestBuilder.withId(stringStraightPass(params.getString("id")));
                    }
                    if (params.has("startPage") && (params.getString("startPage") != null) && (!params.getString("startPage").isEmpty()) ) {
                        // Param: startPage, Type: Integer
                        contributorsRequestBuilder.withStartPage(integerStraightPass(params.getInt("startPage")));
                    }
                    if (params.has("count") && (params.getString("count") != null) && (!params.getString("count").isEmpty()) ) {
                        // Param: count, Type: Integer
                        contributorsRequestBuilder.withCount(integerStraightPass(params.getInt("count")));
                    }
                    if (params.has("depth") && (params.getString("depth") != null) && (!params.getString("depth").isEmpty()) ) {
                        // Param: depth, Type: Integer
                        contributorsRequestBuilder.withDepth(integerStraightPass(params.getInt("depth")));
                    }
                    if (params.has("forbiddenId") && (params.getString("forbiddenId") != null) && (!params.getString("forbiddenId").isEmpty()) ) {
                        // Param: forbiddenId, Type: List
                        contributorsRequestBuilder.withForbiddenId(jsonArrayToStringList(params.getJSONArray("forbiddenId")));
                    }
                    if (params.has("forbiddenUris") && (params.getString("forbiddenUris") != null) && (!params.getString("forbiddenUris").isEmpty()) ) {
                        // Param: forbiddenUris, Type: List
                        contributorsRequestBuilder.withForbiddenUris(jsonArrayToStringList(params.getJSONArray("forbiddenUris")));
                    }
                    if (params.has("externalCode") && (params.getString("externalCode") != null) && (!params.getString("externalCode").isEmpty()) ) {
                        // Param: externalCode, Type: String
                        contributorsRequestBuilder.withExternalCode(stringStraightPass(params.getString("externalCode")));
                    }
                    if (params.has("headsign") && (params.getString("headsign") != null) && (!params.getString("headsign").isEmpty()) ) {
                        // Param: headsign, Type: String
                        contributorsRequestBuilder.withHeadsign(stringStraightPass(params.getString("headsign")));
                    }
                    if (params.has("showCodes") && (params.getString("showCodes") != null) && (!params.getString("showCodes").isEmpty()) ) {
                        // Param: showCodes, Type: Boolean
                        contributorsRequestBuilder.withShowCodes(booleanStraightPass(params.getBoolean("showCodes")));
                    }
                    if (params.has("odtLevel") && (params.getString("odtLevel") != null) && (!params.getString("odtLevel").isEmpty()) ) {
                        // Param: odtLevel, Type: String
                        contributorsRequestBuilder.withOdtLevel(stringStraightPass(params.getString("odtLevel")));
                    }
                    if (params.has("dataFreshness") && (params.getString("dataFreshness") != null) && (!params.getString("dataFreshness").isEmpty()) ) {
                        // Param: dataFreshness, Type: String
                        contributorsRequestBuilder.withDataFreshness(stringStraightPass(params.getString("dataFreshness")));
                    }
                    if (params.has("distance") && (params.getString("distance") != null) && (!params.getString("distance").isEmpty()) ) {
                        // Param: distance, Type: Integer
                        contributorsRequestBuilder.withDistance(integerStraightPass(params.getInt("distance")));
                    }
                    if (params.has("since") && (params.getString("since") != null) && (!params.getString("since").isEmpty()) ) {
                        // Param: since, Type: Date
                        contributorsRequestBuilder.withSince(stringToDateTime(params.getString("since")));
                    }
                    if (params.has("until") && (params.getString("until") != null) && (!params.getString("until").isEmpty()) ) {
                        // Param: until, Type: Date
                        contributorsRequestBuilder.withUntil(stringToDateTime(params.getString("until")));
                    }
                    if (params.has("disableGeojson") && (params.getString("disableGeojson") != null) && (!params.getString("disableGeojson").isEmpty()) ) {
                        // Param: disableGeojson, Type: Boolean
                        contributorsRequestBuilder.withDisableGeojson(booleanStraightPass(params.getBoolean("disableGeojson")));
                    }
                    if (params.has("disableDisruption") && (params.getString("disableDisruption") != null) && (!params.getString("disableDisruption").isEmpty()) ) {
                        // Param: disableDisruption, Type: Boolean
                        contributorsRequestBuilder.withDisableDisruption(booleanStraightPass(params.getBoolean("disableDisruption")));
                    }
                    if (params.has("tags") && (params.getString("tags") != null) && (!params.getString("tags").isEmpty()) ) {
                        // Param: tags, Type: List
                        contributorsRequestBuilder.withTags(jsonArrayToStringList(params.getJSONArray("tags")));
                    }
                    
                    contributorsRequestBuilder.rawGet(new ApiCallback<String>() {
                        @Override
                        public void onFailure(ApiException e, int statusCode, Map<String, List<String>> responseHeaders) {
                            callbackContext.error("Problem during request call | " + e.getMessage());
                        }

                        @Override
                        public void onSuccess(String result, int statusCode, Map<String, List<String>> responseHeaders) {
                            JSONObject jsonObject = null;
                            try {
                                jsonObject = new JSONObject(result);
                                callbackContext.success(jsonObject);
                            } catch (Exception e) {
                                String errorMessage = "Problem during response parsing | " + String.valueOf(e.hashCode()) + ": " + e.getMessage();
                                callbackContext.error(errorMessage);
                            }
                        }

                        @Override
                        public void onUploadProgress(long bytesWritten, long contentLength, boolean done) {
                        }

                        @Override
                        public void onDownloadProgress(long bytesRead, long contentLength, boolean done) {
                        }
                    });
                } catch (Exception e) {
                    String errorMessage = "Problem during request building | " + String.valueOf(e.hashCode()) + ": " + e.getMessage();
                    callbackContext.error(errorMessage);
                }
            }
        });
    }
    final private void coordLonLat(final JSONObject params, final CallbackContext callbackContext) {
        if (this.navitiaSdk == null) {
            callbackContext.error("NavitiaSDK is not instanciated");
            return;
        }

        final CoordApi.CoordLonLatRequestBuilder coordRequestBuilder = this.navitiaSdk.coordApi.newCoordLonLatRequestBuilder();
        cordova.getThreadPool().execute(new Runnable() {
            @Override
            public void run() {
                try {
                    if (params.has("lat") && (params.getString("lat") != null) && (!params.getString("lat").isEmpty()) ) {
                        // Param: lat, Type: BigDecimal
                        coordRequestBuilder.withLat(longToBigDecimal(params.getLong("lat")));
                    }
                    if (params.has("lon") && (params.getString("lon") != null) && (!params.getString("lon").isEmpty()) ) {
                        // Param: lon, Type: BigDecimal
                        coordRequestBuilder.withLon(longToBigDecimal(params.getLong("lon")));
                    }
                    
                    coordRequestBuilder.rawGet(new ApiCallback<String>() {
                        @Override
                        public void onFailure(ApiException e, int statusCode, Map<String, List<String>> responseHeaders) {
                            callbackContext.error("Problem during request call | " + e.getMessage());
                        }

                        @Override
                        public void onSuccess(String result, int statusCode, Map<String, List<String>> responseHeaders) {
                            JSONObject jsonObject = null;
                            try {
                                jsonObject = new JSONObject(result);
                                callbackContext.success(jsonObject);
                            } catch (Exception e) {
                                String errorMessage = "Problem during response parsing | " + String.valueOf(e.hashCode()) + ": " + e.getMessage();
                                callbackContext.error(errorMessage);
                            }
                        }

                        @Override
                        public void onUploadProgress(long bytesWritten, long contentLength, boolean done) {
                        }

                        @Override
                        public void onDownloadProgress(long bytesRead, long contentLength, boolean done) {
                        }
                    });
                } catch (Exception e) {
                    String errorMessage = "Problem during request building | " + String.valueOf(e.hashCode()) + ": " + e.getMessage();
                    callbackContext.error(errorMessage);
                }
            }
        });
    }
    final private void coordsLonLat(final JSONObject params, final CallbackContext callbackContext) {
        if (this.navitiaSdk == null) {
            callbackContext.error("NavitiaSDK is not instanciated");
            return;
        }

        final CoordApi.CoordsLonLatRequestBuilder coordRequestBuilder = this.navitiaSdk.coordApi.newCoordsLonLatRequestBuilder();
        cordova.getThreadPool().execute(new Runnable() {
            @Override
            public void run() {
                try {
                    if (params.has("lat") && (params.getString("lat") != null) && (!params.getString("lat").isEmpty()) ) {
                        // Param: lat, Type: BigDecimal
                        coordRequestBuilder.withLat(longToBigDecimal(params.getLong("lat")));
                    }
                    if (params.has("lon") && (params.getString("lon") != null) && (!params.getString("lon").isEmpty()) ) {
                        // Param: lon, Type: BigDecimal
                        coordRequestBuilder.withLon(longToBigDecimal(params.getLong("lon")));
                    }
                    
                    coordRequestBuilder.rawGet(new ApiCallback<String>() {
                        @Override
                        public void onFailure(ApiException e, int statusCode, Map<String, List<String>> responseHeaders) {
                            callbackContext.error("Problem during request call | " + e.getMessage());
                        }

                        @Override
                        public void onSuccess(String result, int statusCode, Map<String, List<String>> responseHeaders) {
                            JSONObject jsonObject = null;
                            try {
                                jsonObject = new JSONObject(result);
                                callbackContext.success(jsonObject);
                            } catch (Exception e) {
                                String errorMessage = "Problem during response parsing | " + String.valueOf(e.hashCode()) + ": " + e.getMessage();
                                callbackContext.error(errorMessage);
                            }
                        }

                        @Override
                        public void onUploadProgress(long bytesWritten, long contentLength, boolean done) {
                        }

                        @Override
                        public void onDownloadProgress(long bytesRead, long contentLength, boolean done) {
                        }
                    });
                } catch (Exception e) {
                    String errorMessage = "Problem during request building | " + String.valueOf(e.hashCode()) + ": " + e.getMessage();
                    callbackContext.error(errorMessage);
                }
            }
        });
    }
    final private void coverageRegionCoordLonLatAddresses(final JSONObject params, final CallbackContext callbackContext) {
        if (this.navitiaSdk == null) {
            callbackContext.error("NavitiaSDK is not instanciated");
            return;
        }

        final CoordApi.CoverageRegionCoordLonLatAddressesRequestBuilder coordRequestBuilder = this.navitiaSdk.coordApi.newCoverageRegionCoordLonLatAddressesRequestBuilder();
        cordova.getThreadPool().execute(new Runnable() {
            @Override
            public void run() {
                try {
                    if (params.has("lat") && (params.getString("lat") != null) && (!params.getString("lat").isEmpty()) ) {
                        // Param: lat, Type: BigDecimal
                        coordRequestBuilder.withLat(longToBigDecimal(params.getLong("lat")));
                    }
                    if (params.has("region") && (params.getString("region") != null) && (!params.getString("region").isEmpty()) ) {
                        // Param: region, Type: String
                        coordRequestBuilder.withRegion(stringStraightPass(params.getString("region")));
                    }
                    if (params.has("lon") && (params.getString("lon") != null) && (!params.getString("lon").isEmpty()) ) {
                        // Param: lon, Type: BigDecimal
                        coordRequestBuilder.withLon(longToBigDecimal(params.getLong("lon")));
                    }
                    
                    coordRequestBuilder.rawGet(new ApiCallback<String>() {
                        @Override
                        public void onFailure(ApiException e, int statusCode, Map<String, List<String>> responseHeaders) {
                            callbackContext.error("Problem during request call | " + e.getMessage());
                        }

                        @Override
                        public void onSuccess(String result, int statusCode, Map<String, List<String>> responseHeaders) {
                            JSONObject jsonObject = null;
                            try {
                                jsonObject = new JSONObject(result);
                                callbackContext.success(jsonObject);
                            } catch (Exception e) {
                                String errorMessage = "Problem during response parsing | " + String.valueOf(e.hashCode()) + ": " + e.getMessage();
                                callbackContext.error(errorMessage);
                            }
                        }

                        @Override
                        public void onUploadProgress(long bytesWritten, long contentLength, boolean done) {
                        }

                        @Override
                        public void onDownloadProgress(long bytesRead, long contentLength, boolean done) {
                        }
                    });
                } catch (Exception e) {
                    String errorMessage = "Problem during request building | " + String.valueOf(e.hashCode()) + ": " + e.getMessage();
                    callbackContext.error(errorMessage);
                }
            }
        });
    }
    final private void coverageRegionCoordsLonLatAddresses(final JSONObject params, final CallbackContext callbackContext) {
        if (this.navitiaSdk == null) {
            callbackContext.error("NavitiaSDK is not instanciated");
            return;
        }

        final CoordApi.CoverageRegionCoordsLonLatAddressesRequestBuilder coordRequestBuilder = this.navitiaSdk.coordApi.newCoverageRegionCoordsLonLatAddressesRequestBuilder();
        cordova.getThreadPool().execute(new Runnable() {
            @Override
            public void run() {
                try {
                    if (params.has("lat") && (params.getString("lat") != null) && (!params.getString("lat").isEmpty()) ) {
                        // Param: lat, Type: BigDecimal
                        coordRequestBuilder.withLat(longToBigDecimal(params.getLong("lat")));
                    }
                    if (params.has("region") && (params.getString("region") != null) && (!params.getString("region").isEmpty()) ) {
                        // Param: region, Type: String
                        coordRequestBuilder.withRegion(stringStraightPass(params.getString("region")));
                    }
                    if (params.has("lon") && (params.getString("lon") != null) && (!params.getString("lon").isEmpty()) ) {
                        // Param: lon, Type: BigDecimal
                        coordRequestBuilder.withLon(longToBigDecimal(params.getLong("lon")));
                    }
                    
                    coordRequestBuilder.rawGet(new ApiCallback<String>() {
                        @Override
                        public void onFailure(ApiException e, int statusCode, Map<String, List<String>> responseHeaders) {
                            callbackContext.error("Problem during request call | " + e.getMessage());
                        }

                        @Override
                        public void onSuccess(String result, int statusCode, Map<String, List<String>> responseHeaders) {
                            JSONObject jsonObject = null;
                            try {
                                jsonObject = new JSONObject(result);
                                callbackContext.success(jsonObject);
                            } catch (Exception e) {
                                String errorMessage = "Problem during response parsing | " + String.valueOf(e.hashCode()) + ": " + e.getMessage();
                                callbackContext.error(errorMessage);
                            }
                        }

                        @Override
                        public void onUploadProgress(long bytesWritten, long contentLength, boolean done) {
                        }

                        @Override
                        public void onDownloadProgress(long bytesRead, long contentLength, boolean done) {
                        }
                    });
                } catch (Exception e) {
                    String errorMessage = "Problem during request building | " + String.valueOf(e.hashCode()) + ": " + e.getMessage();
                    callbackContext.error(errorMessage);
                }
            }
        });
    }
    final private void coverageLonLatCoord(final JSONObject params, final CallbackContext callbackContext) {
        if (this.navitiaSdk == null) {
            callbackContext.error("NavitiaSDK is not instanciated");
            return;
        }

        final CoordsApi.CoverageLonLatCoordRequestBuilder coordsRequestBuilder = this.navitiaSdk.coordsApi.newCoverageLonLatCoordRequestBuilder();
        cordova.getThreadPool().execute(new Runnable() {
            @Override
            public void run() {
                try {
                    if (params.has("lat") && (params.getString("lat") != null) && (!params.getString("lat").isEmpty()) ) {
                        // Param: lat, Type: BigDecimal
                        coordsRequestBuilder.withLat(longToBigDecimal(params.getLong("lat")));
                    }
                    if (params.has("lon") && (params.getString("lon") != null) && (!params.getString("lon").isEmpty()) ) {
                        // Param: lon, Type: BigDecimal
                        coordsRequestBuilder.withLon(longToBigDecimal(params.getLong("lon")));
                    }
                    
                    coordsRequestBuilder.rawGet(new ApiCallback<String>() {
                        @Override
                        public void onFailure(ApiException e, int statusCode, Map<String, List<String>> responseHeaders) {
                            callbackContext.error("Problem during request call | " + e.getMessage());
                        }

                        @Override
                        public void onSuccess(String result, int statusCode, Map<String, List<String>> responseHeaders) {
                            JSONObject jsonObject = null;
                            try {
                                jsonObject = new JSONObject(result);
                                callbackContext.success(jsonObject);
                            } catch (Exception e) {
                                String errorMessage = "Problem during response parsing | " + String.valueOf(e.hashCode()) + ": " + e.getMessage();
                                callbackContext.error(errorMessage);
                            }
                        }

                        @Override
                        public void onUploadProgress(long bytesWritten, long contentLength, boolean done) {
                        }

                        @Override
                        public void onDownloadProgress(long bytesRead, long contentLength, boolean done) {
                        }
                    });
                } catch (Exception e) {
                    String errorMessage = "Problem during request building | " + String.valueOf(e.hashCode()) + ": " + e.getMessage();
                    callbackContext.error(errorMessage);
                }
            }
        });
    }
    final private void coverageLonLatCoordId(final JSONObject params, final CallbackContext callbackContext) {
        if (this.navitiaSdk == null) {
            callbackContext.error("NavitiaSDK is not instanciated");
            return;
        }

        final CoordsApi.CoverageLonLatCoordIdRequestBuilder coordsRequestBuilder = this.navitiaSdk.coordsApi.newCoverageLonLatCoordIdRequestBuilder();
        cordova.getThreadPool().execute(new Runnable() {
            @Override
            public void run() {
                try {
                    if (params.has("lat") && (params.getString("lat") != null) && (!params.getString("lat").isEmpty()) ) {
                        // Param: lat, Type: BigDecimal
                        coordsRequestBuilder.withLat(longToBigDecimal(params.getLong("lat")));
                    }
                    if (params.has("lon") && (params.getString("lon") != null) && (!params.getString("lon").isEmpty()) ) {
                        // Param: lon, Type: BigDecimal
                        coordsRequestBuilder.withLon(longToBigDecimal(params.getLong("lon")));
                    }
                    if (params.has("id") && (params.getString("id") != null) && (!params.getString("id").isEmpty()) ) {
                        // Param: id, Type: String
                        coordsRequestBuilder.withId(stringStraightPass(params.getString("id")));
                    }
                    
                    coordsRequestBuilder.rawGet(new ApiCallback<String>() {
                        @Override
                        public void onFailure(ApiException e, int statusCode, Map<String, List<String>> responseHeaders) {
                            callbackContext.error("Problem during request call | " + e.getMessage());
                        }

                        @Override
                        public void onSuccess(String result, int statusCode, Map<String, List<String>> responseHeaders) {
                            JSONObject jsonObject = null;
                            try {
                                jsonObject = new JSONObject(result);
                                callbackContext.success(jsonObject);
                            } catch (Exception e) {
                                String errorMessage = "Problem during response parsing | " + String.valueOf(e.hashCode()) + ": " + e.getMessage();
                                callbackContext.error(errorMessage);
                            }
                        }

                        @Override
                        public void onUploadProgress(long bytesWritten, long contentLength, boolean done) {
                        }

                        @Override
                        public void onDownloadProgress(long bytesRead, long contentLength, boolean done) {
                        }
                    });
                } catch (Exception e) {
                    String errorMessage = "Problem during request building | " + String.valueOf(e.hashCode()) + ": " + e.getMessage();
                    callbackContext.error(errorMessage);
                }
            }
        });
    }
    final private void coverageLonLatCoords(final JSONObject params, final CallbackContext callbackContext) {
        if (this.navitiaSdk == null) {
            callbackContext.error("NavitiaSDK is not instanciated");
            return;
        }

        final CoordsApi.CoverageLonLatCoordsRequestBuilder coordsRequestBuilder = this.navitiaSdk.coordsApi.newCoverageLonLatCoordsRequestBuilder();
        cordova.getThreadPool().execute(new Runnable() {
            @Override
            public void run() {
                try {
                    if (params.has("lat") && (params.getString("lat") != null) && (!params.getString("lat").isEmpty()) ) {
                        // Param: lat, Type: BigDecimal
                        coordsRequestBuilder.withLat(longToBigDecimal(params.getLong("lat")));
                    }
                    if (params.has("lon") && (params.getString("lon") != null) && (!params.getString("lon").isEmpty()) ) {
                        // Param: lon, Type: BigDecimal
                        coordsRequestBuilder.withLon(longToBigDecimal(params.getLong("lon")));
                    }
                    
                    coordsRequestBuilder.rawGet(new ApiCallback<String>() {
                        @Override
                        public void onFailure(ApiException e, int statusCode, Map<String, List<String>> responseHeaders) {
                            callbackContext.error("Problem during request call | " + e.getMessage());
                        }

                        @Override
                        public void onSuccess(String result, int statusCode, Map<String, List<String>> responseHeaders) {
                            JSONObject jsonObject = null;
                            try {
                                jsonObject = new JSONObject(result);
                                callbackContext.success(jsonObject);
                            } catch (Exception e) {
                                String errorMessage = "Problem during response parsing | " + String.valueOf(e.hashCode()) + ": " + e.getMessage();
                                callbackContext.error(errorMessage);
                            }
                        }

                        @Override
                        public void onUploadProgress(long bytesWritten, long contentLength, boolean done) {
                        }

                        @Override
                        public void onDownloadProgress(long bytesRead, long contentLength, boolean done) {
                        }
                    });
                } catch (Exception e) {
                    String errorMessage = "Problem during request building | " + String.valueOf(e.hashCode()) + ": " + e.getMessage();
                    callbackContext.error(errorMessage);
                }
            }
        });
    }
    final private void coverageLonLatCoordsId(final JSONObject params, final CallbackContext callbackContext) {
        if (this.navitiaSdk == null) {
            callbackContext.error("NavitiaSDK is not instanciated");
            return;
        }

        final CoordsApi.CoverageLonLatCoordsIdRequestBuilder coordsRequestBuilder = this.navitiaSdk.coordsApi.newCoverageLonLatCoordsIdRequestBuilder();
        cordova.getThreadPool().execute(new Runnable() {
            @Override
            public void run() {
                try {
                    if (params.has("lat") && (params.getString("lat") != null) && (!params.getString("lat").isEmpty()) ) {
                        // Param: lat, Type: BigDecimal
                        coordsRequestBuilder.withLat(longToBigDecimal(params.getLong("lat")));
                    }
                    if (params.has("lon") && (params.getString("lon") != null) && (!params.getString("lon").isEmpty()) ) {
                        // Param: lon, Type: BigDecimal
                        coordsRequestBuilder.withLon(longToBigDecimal(params.getLong("lon")));
                    }
                    if (params.has("id") && (params.getString("id") != null) && (!params.getString("id").isEmpty()) ) {
                        // Param: id, Type: String
                        coordsRequestBuilder.withId(stringStraightPass(params.getString("id")));
                    }
                    
                    coordsRequestBuilder.rawGet(new ApiCallback<String>() {
                        @Override
                        public void onFailure(ApiException e, int statusCode, Map<String, List<String>> responseHeaders) {
                            callbackContext.error("Problem during request call | " + e.getMessage());
                        }

                        @Override
                        public void onSuccess(String result, int statusCode, Map<String, List<String>> responseHeaders) {
                            JSONObject jsonObject = null;
                            try {
                                jsonObject = new JSONObject(result);
                                callbackContext.success(jsonObject);
                            } catch (Exception e) {
                                String errorMessage = "Problem during response parsing | " + String.valueOf(e.hashCode()) + ": " + e.getMessage();
                                callbackContext.error(errorMessage);
                            }
                        }

                        @Override
                        public void onUploadProgress(long bytesWritten, long contentLength, boolean done) {
                        }

                        @Override
                        public void onDownloadProgress(long bytesRead, long contentLength, boolean done) {
                        }
                    });
                } catch (Exception e) {
                    String errorMessage = "Problem during request building | " + String.valueOf(e.hashCode()) + ": " + e.getMessage();
                    callbackContext.error(errorMessage);
                }
            }
        });
    }
    final private void coverageLonLatUriCoord(final JSONObject params, final CallbackContext callbackContext) {
        if (this.navitiaSdk == null) {
            callbackContext.error("NavitiaSDK is not instanciated");
            return;
        }

        final CoordsApi.CoverageLonLatUriCoordRequestBuilder coordsRequestBuilder = this.navitiaSdk.coordsApi.newCoverageLonLatUriCoordRequestBuilder();
        cordova.getThreadPool().execute(new Runnable() {
            @Override
            public void run() {
                try {
                    if (params.has("lat") && (params.getString("lat") != null) && (!params.getString("lat").isEmpty()) ) {
                        // Param: lat, Type: BigDecimal
                        coordsRequestBuilder.withLat(longToBigDecimal(params.getLong("lat")));
                    }
                    if (params.has("lon") && (params.getString("lon") != null) && (!params.getString("lon").isEmpty()) ) {
                        // Param: lon, Type: BigDecimal
                        coordsRequestBuilder.withLon(longToBigDecimal(params.getLong("lon")));
                    }
                    if (params.has("uri") && (params.getString("uri") != null) && (!params.getString("uri").isEmpty()) ) {
                        // Param: uri, Type: String
                        coordsRequestBuilder.withUri(stringStraightPass(params.getString("uri")));
                    }
                    
                    coordsRequestBuilder.rawGet(new ApiCallback<String>() {
                        @Override
                        public void onFailure(ApiException e, int statusCode, Map<String, List<String>> responseHeaders) {
                            callbackContext.error("Problem during request call | " + e.getMessage());
                        }

                        @Override
                        public void onSuccess(String result, int statusCode, Map<String, List<String>> responseHeaders) {
                            JSONObject jsonObject = null;
                            try {
                                jsonObject = new JSONObject(result);
                                callbackContext.success(jsonObject);
                            } catch (Exception e) {
                                String errorMessage = "Problem during response parsing | " + String.valueOf(e.hashCode()) + ": " + e.getMessage();
                                callbackContext.error(errorMessage);
                            }
                        }

                        @Override
                        public void onUploadProgress(long bytesWritten, long contentLength, boolean done) {
                        }

                        @Override
                        public void onDownloadProgress(long bytesRead, long contentLength, boolean done) {
                        }
                    });
                } catch (Exception e) {
                    String errorMessage = "Problem during request building | " + String.valueOf(e.hashCode()) + ": " + e.getMessage();
                    callbackContext.error(errorMessage);
                }
            }
        });
    }
    final private void coverageLonLatUriCoordId(final JSONObject params, final CallbackContext callbackContext) {
        if (this.navitiaSdk == null) {
            callbackContext.error("NavitiaSDK is not instanciated");
            return;
        }

        final CoordsApi.CoverageLonLatUriCoordIdRequestBuilder coordsRequestBuilder = this.navitiaSdk.coordsApi.newCoverageLonLatUriCoordIdRequestBuilder();
        cordova.getThreadPool().execute(new Runnable() {
            @Override
            public void run() {
                try {
                    if (params.has("lat") && (params.getString("lat") != null) && (!params.getString("lat").isEmpty()) ) {
                        // Param: lat, Type: BigDecimal
                        coordsRequestBuilder.withLat(longToBigDecimal(params.getLong("lat")));
                    }
                    if (params.has("lon") && (params.getString("lon") != null) && (!params.getString("lon").isEmpty()) ) {
                        // Param: lon, Type: BigDecimal
                        coordsRequestBuilder.withLon(longToBigDecimal(params.getLong("lon")));
                    }
                    if (params.has("uri") && (params.getString("uri") != null) && (!params.getString("uri").isEmpty()) ) {
                        // Param: uri, Type: String
                        coordsRequestBuilder.withUri(stringStraightPass(params.getString("uri")));
                    }
                    if (params.has("id") && (params.getString("id") != null) && (!params.getString("id").isEmpty()) ) {
                        // Param: id, Type: String
                        coordsRequestBuilder.withId(stringStraightPass(params.getString("id")));
                    }
                    
                    coordsRequestBuilder.rawGet(new ApiCallback<String>() {
                        @Override
                        public void onFailure(ApiException e, int statusCode, Map<String, List<String>> responseHeaders) {
                            callbackContext.error("Problem during request call | " + e.getMessage());
                        }

                        @Override
                        public void onSuccess(String result, int statusCode, Map<String, List<String>> responseHeaders) {
                            JSONObject jsonObject = null;
                            try {
                                jsonObject = new JSONObject(result);
                                callbackContext.success(jsonObject);
                            } catch (Exception e) {
                                String errorMessage = "Problem during response parsing | " + String.valueOf(e.hashCode()) + ": " + e.getMessage();
                                callbackContext.error(errorMessage);
                            }
                        }

                        @Override
                        public void onUploadProgress(long bytesWritten, long contentLength, boolean done) {
                        }

                        @Override
                        public void onDownloadProgress(long bytesRead, long contentLength, boolean done) {
                        }
                    });
                } catch (Exception e) {
                    String errorMessage = "Problem during request building | " + String.valueOf(e.hashCode()) + ": " + e.getMessage();
                    callbackContext.error(errorMessage);
                }
            }
        });
    }
    final private void coverageLonLatUriCoords(final JSONObject params, final CallbackContext callbackContext) {
        if (this.navitiaSdk == null) {
            callbackContext.error("NavitiaSDK is not instanciated");
            return;
        }

        final CoordsApi.CoverageLonLatUriCoordsRequestBuilder coordsRequestBuilder = this.navitiaSdk.coordsApi.newCoverageLonLatUriCoordsRequestBuilder();
        cordova.getThreadPool().execute(new Runnable() {
            @Override
            public void run() {
                try {
                    if (params.has("lat") && (params.getString("lat") != null) && (!params.getString("lat").isEmpty()) ) {
                        // Param: lat, Type: BigDecimal
                        coordsRequestBuilder.withLat(longToBigDecimal(params.getLong("lat")));
                    }
                    if (params.has("lon") && (params.getString("lon") != null) && (!params.getString("lon").isEmpty()) ) {
                        // Param: lon, Type: BigDecimal
                        coordsRequestBuilder.withLon(longToBigDecimal(params.getLong("lon")));
                    }
                    if (params.has("uri") && (params.getString("uri") != null) && (!params.getString("uri").isEmpty()) ) {
                        // Param: uri, Type: String
                        coordsRequestBuilder.withUri(stringStraightPass(params.getString("uri")));
                    }
                    
                    coordsRequestBuilder.rawGet(new ApiCallback<String>() {
                        @Override
                        public void onFailure(ApiException e, int statusCode, Map<String, List<String>> responseHeaders) {
                            callbackContext.error("Problem during request call | " + e.getMessage());
                        }

                        @Override
                        public void onSuccess(String result, int statusCode, Map<String, List<String>> responseHeaders) {
                            JSONObject jsonObject = null;
                            try {
                                jsonObject = new JSONObject(result);
                                callbackContext.success(jsonObject);
                            } catch (Exception e) {
                                String errorMessage = "Problem during response parsing | " + String.valueOf(e.hashCode()) + ": " + e.getMessage();
                                callbackContext.error(errorMessage);
                            }
                        }

                        @Override
                        public void onUploadProgress(long bytesWritten, long contentLength, boolean done) {
                        }

                        @Override
                        public void onDownloadProgress(long bytesRead, long contentLength, boolean done) {
                        }
                    });
                } catch (Exception e) {
                    String errorMessage = "Problem during request building | " + String.valueOf(e.hashCode()) + ": " + e.getMessage();
                    callbackContext.error(errorMessage);
                }
            }
        });
    }
    final private void coverageLonLatUriCoordsId(final JSONObject params, final CallbackContext callbackContext) {
        if (this.navitiaSdk == null) {
            callbackContext.error("NavitiaSDK is not instanciated");
            return;
        }

        final CoordsApi.CoverageLonLatUriCoordsIdRequestBuilder coordsRequestBuilder = this.navitiaSdk.coordsApi.newCoverageLonLatUriCoordsIdRequestBuilder();
        cordova.getThreadPool().execute(new Runnable() {
            @Override
            public void run() {
                try {
                    if (params.has("lat") && (params.getString("lat") != null) && (!params.getString("lat").isEmpty()) ) {
                        // Param: lat, Type: BigDecimal
                        coordsRequestBuilder.withLat(longToBigDecimal(params.getLong("lat")));
                    }
                    if (params.has("lon") && (params.getString("lon") != null) && (!params.getString("lon").isEmpty()) ) {
                        // Param: lon, Type: BigDecimal
                        coordsRequestBuilder.withLon(longToBigDecimal(params.getLong("lon")));
                    }
                    if (params.has("uri") && (params.getString("uri") != null) && (!params.getString("uri").isEmpty()) ) {
                        // Param: uri, Type: String
                        coordsRequestBuilder.withUri(stringStraightPass(params.getString("uri")));
                    }
                    if (params.has("id") && (params.getString("id") != null) && (!params.getString("id").isEmpty()) ) {
                        // Param: id, Type: String
                        coordsRequestBuilder.withId(stringStraightPass(params.getString("id")));
                    }
                    
                    coordsRequestBuilder.rawGet(new ApiCallback<String>() {
                        @Override
                        public void onFailure(ApiException e, int statusCode, Map<String, List<String>> responseHeaders) {
                            callbackContext.error("Problem during request call | " + e.getMessage());
                        }

                        @Override
                        public void onSuccess(String result, int statusCode, Map<String, List<String>> responseHeaders) {
                            JSONObject jsonObject = null;
                            try {
                                jsonObject = new JSONObject(result);
                                callbackContext.success(jsonObject);
                            } catch (Exception e) {
                                String errorMessage = "Problem during response parsing | " + String.valueOf(e.hashCode()) + ": " + e.getMessage();
                                callbackContext.error(errorMessage);
                            }
                        }

                        @Override
                        public void onUploadProgress(long bytesWritten, long contentLength, boolean done) {
                        }

                        @Override
                        public void onDownloadProgress(long bytesRead, long contentLength, boolean done) {
                        }
                    });
                } catch (Exception e) {
                    String errorMessage = "Problem during request building | " + String.valueOf(e.hashCode()) + ": " + e.getMessage();
                    callbackContext.error(errorMessage);
                }
            }
        });
    }
    final private void coverageRegionCoord(final JSONObject params, final CallbackContext callbackContext) {
        if (this.navitiaSdk == null) {
            callbackContext.error("NavitiaSDK is not instanciated");
            return;
        }

        final CoordsApi.CoverageRegionCoordRequestBuilder coordsRequestBuilder = this.navitiaSdk.coordsApi.newCoverageRegionCoordRequestBuilder();
        cordova.getThreadPool().execute(new Runnable() {
            @Override
            public void run() {
                try {
                    if (params.has("region") && (params.getString("region") != null) && (!params.getString("region").isEmpty()) ) {
                        // Param: region, Type: String
                        coordsRequestBuilder.withRegion(stringStraightPass(params.getString("region")));
                    }
                    
                    coordsRequestBuilder.rawGet(new ApiCallback<String>() {
                        @Override
                        public void onFailure(ApiException e, int statusCode, Map<String, List<String>> responseHeaders) {
                            callbackContext.error("Problem during request call | " + e.getMessage());
                        }

                        @Override
                        public void onSuccess(String result, int statusCode, Map<String, List<String>> responseHeaders) {
                            JSONObject jsonObject = null;
                            try {
                                jsonObject = new JSONObject(result);
                                callbackContext.success(jsonObject);
                            } catch (Exception e) {
                                String errorMessage = "Problem during response parsing | " + String.valueOf(e.hashCode()) + ": " + e.getMessage();
                                callbackContext.error(errorMessage);
                            }
                        }

                        @Override
                        public void onUploadProgress(long bytesWritten, long contentLength, boolean done) {
                        }

                        @Override
                        public void onDownloadProgress(long bytesRead, long contentLength, boolean done) {
                        }
                    });
                } catch (Exception e) {
                    String errorMessage = "Problem during request building | " + String.valueOf(e.hashCode()) + ": " + e.getMessage();
                    callbackContext.error(errorMessage);
                }
            }
        });
    }
    final private void coverageRegionCoordId(final JSONObject params, final CallbackContext callbackContext) {
        if (this.navitiaSdk == null) {
            callbackContext.error("NavitiaSDK is not instanciated");
            return;
        }

        final CoordsApi.CoverageRegionCoordIdRequestBuilder coordsRequestBuilder = this.navitiaSdk.coordsApi.newCoverageRegionCoordIdRequestBuilder();
        cordova.getThreadPool().execute(new Runnable() {
            @Override
            public void run() {
                try {
                    if (params.has("region") && (params.getString("region") != null) && (!params.getString("region").isEmpty()) ) {
                        // Param: region, Type: String
                        coordsRequestBuilder.withRegion(stringStraightPass(params.getString("region")));
                    }
                    if (params.has("id") && (params.getString("id") != null) && (!params.getString("id").isEmpty()) ) {
                        // Param: id, Type: String
                        coordsRequestBuilder.withId(stringStraightPass(params.getString("id")));
                    }
                    
                    coordsRequestBuilder.rawGet(new ApiCallback<String>() {
                        @Override
                        public void onFailure(ApiException e, int statusCode, Map<String, List<String>> responseHeaders) {
                            callbackContext.error("Problem during request call | " + e.getMessage());
                        }

                        @Override
                        public void onSuccess(String result, int statusCode, Map<String, List<String>> responseHeaders) {
                            JSONObject jsonObject = null;
                            try {
                                jsonObject = new JSONObject(result);
                                callbackContext.success(jsonObject);
                            } catch (Exception e) {
                                String errorMessage = "Problem during response parsing | " + String.valueOf(e.hashCode()) + ": " + e.getMessage();
                                callbackContext.error(errorMessage);
                            }
                        }

                        @Override
                        public void onUploadProgress(long bytesWritten, long contentLength, boolean done) {
                        }

                        @Override
                        public void onDownloadProgress(long bytesRead, long contentLength, boolean done) {
                        }
                    });
                } catch (Exception e) {
                    String errorMessage = "Problem during request building | " + String.valueOf(e.hashCode()) + ": " + e.getMessage();
                    callbackContext.error(errorMessage);
                }
            }
        });
    }
    final private void coverageRegionCoords(final JSONObject params, final CallbackContext callbackContext) {
        if (this.navitiaSdk == null) {
            callbackContext.error("NavitiaSDK is not instanciated");
            return;
        }

        final CoordsApi.CoverageRegionCoordsRequestBuilder coordsRequestBuilder = this.navitiaSdk.coordsApi.newCoverageRegionCoordsRequestBuilder();
        cordova.getThreadPool().execute(new Runnable() {
            @Override
            public void run() {
                try {
                    if (params.has("region") && (params.getString("region") != null) && (!params.getString("region").isEmpty()) ) {
                        // Param: region, Type: String
                        coordsRequestBuilder.withRegion(stringStraightPass(params.getString("region")));
                    }
                    
                    coordsRequestBuilder.rawGet(new ApiCallback<String>() {
                        @Override
                        public void onFailure(ApiException e, int statusCode, Map<String, List<String>> responseHeaders) {
                            callbackContext.error("Problem during request call | " + e.getMessage());
                        }

                        @Override
                        public void onSuccess(String result, int statusCode, Map<String, List<String>> responseHeaders) {
                            JSONObject jsonObject = null;
                            try {
                                jsonObject = new JSONObject(result);
                                callbackContext.success(jsonObject);
                            } catch (Exception e) {
                                String errorMessage = "Problem during response parsing | " + String.valueOf(e.hashCode()) + ": " + e.getMessage();
                                callbackContext.error(errorMessage);
                            }
                        }

                        @Override
                        public void onUploadProgress(long bytesWritten, long contentLength, boolean done) {
                        }

                        @Override
                        public void onDownloadProgress(long bytesRead, long contentLength, boolean done) {
                        }
                    });
                } catch (Exception e) {
                    String errorMessage = "Problem during request building | " + String.valueOf(e.hashCode()) + ": " + e.getMessage();
                    callbackContext.error(errorMessage);
                }
            }
        });
    }
    final private void coverageRegionCoordsId(final JSONObject params, final CallbackContext callbackContext) {
        if (this.navitiaSdk == null) {
            callbackContext.error("NavitiaSDK is not instanciated");
            return;
        }

        final CoordsApi.CoverageRegionCoordsIdRequestBuilder coordsRequestBuilder = this.navitiaSdk.coordsApi.newCoverageRegionCoordsIdRequestBuilder();
        cordova.getThreadPool().execute(new Runnable() {
            @Override
            public void run() {
                try {
                    if (params.has("region") && (params.getString("region") != null) && (!params.getString("region").isEmpty()) ) {
                        // Param: region, Type: String
                        coordsRequestBuilder.withRegion(stringStraightPass(params.getString("region")));
                    }
                    if (params.has("id") && (params.getString("id") != null) && (!params.getString("id").isEmpty()) ) {
                        // Param: id, Type: String
                        coordsRequestBuilder.withId(stringStraightPass(params.getString("id")));
                    }
                    
                    coordsRequestBuilder.rawGet(new ApiCallback<String>() {
                        @Override
                        public void onFailure(ApiException e, int statusCode, Map<String, List<String>> responseHeaders) {
                            callbackContext.error("Problem during request call | " + e.getMessage());
                        }

                        @Override
                        public void onSuccess(String result, int statusCode, Map<String, List<String>> responseHeaders) {
                            JSONObject jsonObject = null;
                            try {
                                jsonObject = new JSONObject(result);
                                callbackContext.success(jsonObject);
                            } catch (Exception e) {
                                String errorMessage = "Problem during response parsing | " + String.valueOf(e.hashCode()) + ": " + e.getMessage();
                                callbackContext.error(errorMessage);
                            }
                        }

                        @Override
                        public void onUploadProgress(long bytesWritten, long contentLength, boolean done) {
                        }

                        @Override
                        public void onDownloadProgress(long bytesRead, long contentLength, boolean done) {
                        }
                    });
                } catch (Exception e) {
                    String errorMessage = "Problem during request building | " + String.valueOf(e.hashCode()) + ": " + e.getMessage();
                    callbackContext.error(errorMessage);
                }
            }
        });
    }
    final private void coverageRegionUriCoord(final JSONObject params, final CallbackContext callbackContext) {
        if (this.navitiaSdk == null) {
            callbackContext.error("NavitiaSDK is not instanciated");
            return;
        }

        final CoordsApi.CoverageRegionUriCoordRequestBuilder coordsRequestBuilder = this.navitiaSdk.coordsApi.newCoverageRegionUriCoordRequestBuilder();
        cordova.getThreadPool().execute(new Runnable() {
            @Override
            public void run() {
                try {
                    if (params.has("region") && (params.getString("region") != null) && (!params.getString("region").isEmpty()) ) {
                        // Param: region, Type: String
                        coordsRequestBuilder.withRegion(stringStraightPass(params.getString("region")));
                    }
                    if (params.has("uri") && (params.getString("uri") != null) && (!params.getString("uri").isEmpty()) ) {
                        // Param: uri, Type: String
                        coordsRequestBuilder.withUri(stringStraightPass(params.getString("uri")));
                    }
                    
                    coordsRequestBuilder.rawGet(new ApiCallback<String>() {
                        @Override
                        public void onFailure(ApiException e, int statusCode, Map<String, List<String>> responseHeaders) {
                            callbackContext.error("Problem during request call | " + e.getMessage());
                        }

                        @Override
                        public void onSuccess(String result, int statusCode, Map<String, List<String>> responseHeaders) {
                            JSONObject jsonObject = null;
                            try {
                                jsonObject = new JSONObject(result);
                                callbackContext.success(jsonObject);
                            } catch (Exception e) {
                                String errorMessage = "Problem during response parsing | " + String.valueOf(e.hashCode()) + ": " + e.getMessage();
                                callbackContext.error(errorMessage);
                            }
                        }

                        @Override
                        public void onUploadProgress(long bytesWritten, long contentLength, boolean done) {
                        }

                        @Override
                        public void onDownloadProgress(long bytesRead, long contentLength, boolean done) {
                        }
                    });
                } catch (Exception e) {
                    String errorMessage = "Problem during request building | " + String.valueOf(e.hashCode()) + ": " + e.getMessage();
                    callbackContext.error(errorMessage);
                }
            }
        });
    }
    final private void coverageRegionUriCoordId(final JSONObject params, final CallbackContext callbackContext) {
        if (this.navitiaSdk == null) {
            callbackContext.error("NavitiaSDK is not instanciated");
            return;
        }

        final CoordsApi.CoverageRegionUriCoordIdRequestBuilder coordsRequestBuilder = this.navitiaSdk.coordsApi.newCoverageRegionUriCoordIdRequestBuilder();
        cordova.getThreadPool().execute(new Runnable() {
            @Override
            public void run() {
                try {
                    if (params.has("region") && (params.getString("region") != null) && (!params.getString("region").isEmpty()) ) {
                        // Param: region, Type: String
                        coordsRequestBuilder.withRegion(stringStraightPass(params.getString("region")));
                    }
                    if (params.has("uri") && (params.getString("uri") != null) && (!params.getString("uri").isEmpty()) ) {
                        // Param: uri, Type: String
                        coordsRequestBuilder.withUri(stringStraightPass(params.getString("uri")));
                    }
                    if (params.has("id") && (params.getString("id") != null) && (!params.getString("id").isEmpty()) ) {
                        // Param: id, Type: String
                        coordsRequestBuilder.withId(stringStraightPass(params.getString("id")));
                    }
                    
                    coordsRequestBuilder.rawGet(new ApiCallback<String>() {
                        @Override
                        public void onFailure(ApiException e, int statusCode, Map<String, List<String>> responseHeaders) {
                            callbackContext.error("Problem during request call | " + e.getMessage());
                        }

                        @Override
                        public void onSuccess(String result, int statusCode, Map<String, List<String>> responseHeaders) {
                            JSONObject jsonObject = null;
                            try {
                                jsonObject = new JSONObject(result);
                                callbackContext.success(jsonObject);
                            } catch (Exception e) {
                                String errorMessage = "Problem during response parsing | " + String.valueOf(e.hashCode()) + ": " + e.getMessage();
                                callbackContext.error(errorMessage);
                            }
                        }

                        @Override
                        public void onUploadProgress(long bytesWritten, long contentLength, boolean done) {
                        }

                        @Override
                        public void onDownloadProgress(long bytesRead, long contentLength, boolean done) {
                        }
                    });
                } catch (Exception e) {
                    String errorMessage = "Problem during request building | " + String.valueOf(e.hashCode()) + ": " + e.getMessage();
                    callbackContext.error(errorMessage);
                }
            }
        });
    }
    final private void coverageRegionUriCoords(final JSONObject params, final CallbackContext callbackContext) {
        if (this.navitiaSdk == null) {
            callbackContext.error("NavitiaSDK is not instanciated");
            return;
        }

        final CoordsApi.CoverageRegionUriCoordsRequestBuilder coordsRequestBuilder = this.navitiaSdk.coordsApi.newCoverageRegionUriCoordsRequestBuilder();
        cordova.getThreadPool().execute(new Runnable() {
            @Override
            public void run() {
                try {
                    if (params.has("region") && (params.getString("region") != null) && (!params.getString("region").isEmpty()) ) {
                        // Param: region, Type: String
                        coordsRequestBuilder.withRegion(stringStraightPass(params.getString("region")));
                    }
                    if (params.has("uri") && (params.getString("uri") != null) && (!params.getString("uri").isEmpty()) ) {
                        // Param: uri, Type: String
                        coordsRequestBuilder.withUri(stringStraightPass(params.getString("uri")));
                    }
                    
                    coordsRequestBuilder.rawGet(new ApiCallback<String>() {
                        @Override
                        public void onFailure(ApiException e, int statusCode, Map<String, List<String>> responseHeaders) {
                            callbackContext.error("Problem during request call | " + e.getMessage());
                        }

                        @Override
                        public void onSuccess(String result, int statusCode, Map<String, List<String>> responseHeaders) {
                            JSONObject jsonObject = null;
                            try {
                                jsonObject = new JSONObject(result);
                                callbackContext.success(jsonObject);
                            } catch (Exception e) {
                                String errorMessage = "Problem during response parsing | " + String.valueOf(e.hashCode()) + ": " + e.getMessage();
                                callbackContext.error(errorMessage);
                            }
                        }

                        @Override
                        public void onUploadProgress(long bytesWritten, long contentLength, boolean done) {
                        }

                        @Override
                        public void onDownloadProgress(long bytesRead, long contentLength, boolean done) {
                        }
                    });
                } catch (Exception e) {
                    String errorMessage = "Problem during request building | " + String.valueOf(e.hashCode()) + ": " + e.getMessage();
                    callbackContext.error(errorMessage);
                }
            }
        });
    }
    final private void coverageRegionUriCoordsId(final JSONObject params, final CallbackContext callbackContext) {
        if (this.navitiaSdk == null) {
            callbackContext.error("NavitiaSDK is not instanciated");
            return;
        }

        final CoordsApi.CoverageRegionUriCoordsIdRequestBuilder coordsRequestBuilder = this.navitiaSdk.coordsApi.newCoverageRegionUriCoordsIdRequestBuilder();
        cordova.getThreadPool().execute(new Runnable() {
            @Override
            public void run() {
                try {
                    if (params.has("region") && (params.getString("region") != null) && (!params.getString("region").isEmpty()) ) {
                        // Param: region, Type: String
                        coordsRequestBuilder.withRegion(stringStraightPass(params.getString("region")));
                    }
                    if (params.has("uri") && (params.getString("uri") != null) && (!params.getString("uri").isEmpty()) ) {
                        // Param: uri, Type: String
                        coordsRequestBuilder.withUri(stringStraightPass(params.getString("uri")));
                    }
                    if (params.has("id") && (params.getString("id") != null) && (!params.getString("id").isEmpty()) ) {
                        // Param: id, Type: String
                        coordsRequestBuilder.withId(stringStraightPass(params.getString("id")));
                    }
                    
                    coordsRequestBuilder.rawGet(new ApiCallback<String>() {
                        @Override
                        public void onFailure(ApiException e, int statusCode, Map<String, List<String>> responseHeaders) {
                            callbackContext.error("Problem during request call | " + e.getMessage());
                        }

                        @Override
                        public void onSuccess(String result, int statusCode, Map<String, List<String>> responseHeaders) {
                            JSONObject jsonObject = null;
                            try {
                                jsonObject = new JSONObject(result);
                                callbackContext.success(jsonObject);
                            } catch (Exception e) {
                                String errorMessage = "Problem during response parsing | " + String.valueOf(e.hashCode()) + ": " + e.getMessage();
                                callbackContext.error(errorMessage);
                            }
                        }

                        @Override
                        public void onUploadProgress(long bytesWritten, long contentLength, boolean done) {
                        }

                        @Override
                        public void onDownloadProgress(long bytesRead, long contentLength, boolean done) {
                        }
                    });
                } catch (Exception e) {
                    String errorMessage = "Problem during request building | " + String.valueOf(e.hashCode()) + ": " + e.getMessage();
                    callbackContext.error(errorMessage);
                }
            }
        });
    }
    final private void coverage(final JSONObject params, final CallbackContext callbackContext) {
        if (this.navitiaSdk == null) {
            callbackContext.error("NavitiaSDK is not instanciated");
            return;
        }

        final CoverageApi.CoverageRequestBuilder coverageRequestBuilder = this.navitiaSdk.coverageApi.newCoverageRequestBuilder();
        cordova.getThreadPool().execute(new Runnable() {
            @Override
            public void run() {
                try {
                    if (params.has("disableGeojson") && (params.getString("disableGeojson") != null) && (!params.getString("disableGeojson").isEmpty()) ) {
                        // Param: disableGeojson, Type: Boolean
                        coverageRequestBuilder.withDisableGeojson(booleanStraightPass(params.getBoolean("disableGeojson")));
                    }
                    
                    coverageRequestBuilder.rawGet(new ApiCallback<String>() {
                        @Override
                        public void onFailure(ApiException e, int statusCode, Map<String, List<String>> responseHeaders) {
                            callbackContext.error("Problem during request call | " + e.getMessage());
                        }

                        @Override
                        public void onSuccess(String result, int statusCode, Map<String, List<String>> responseHeaders) {
                            JSONObject jsonObject = null;
                            try {
                                jsonObject = new JSONObject(result);
                                callbackContext.success(jsonObject);
                            } catch (Exception e) {
                                String errorMessage = "Problem during response parsing | " + String.valueOf(e.hashCode()) + ": " + e.getMessage();
                                callbackContext.error(errorMessage);
                            }
                        }

                        @Override
                        public void onUploadProgress(long bytesWritten, long contentLength, boolean done) {
                        }

                        @Override
                        public void onDownloadProgress(long bytesRead, long contentLength, boolean done) {
                        }
                    });
                } catch (Exception e) {
                    String errorMessage = "Problem during request building | " + String.valueOf(e.hashCode()) + ": " + e.getMessage();
                    callbackContext.error(errorMessage);
                }
            }
        });
    }
    final private void coverageLonLat(final JSONObject params, final CallbackContext callbackContext) {
        if (this.navitiaSdk == null) {
            callbackContext.error("NavitiaSDK is not instanciated");
            return;
        }

        final CoverageApi.CoverageLonLatRequestBuilder coverageRequestBuilder = this.navitiaSdk.coverageApi.newCoverageLonLatRequestBuilder();
        cordova.getThreadPool().execute(new Runnable() {
            @Override
            public void run() {
                try {
                    if (params.has("lat") && (params.getString("lat") != null) && (!params.getString("lat").isEmpty()) ) {
                        // Param: lat, Type: BigDecimal
                        coverageRequestBuilder.withLat(longToBigDecimal(params.getLong("lat")));
                    }
                    if (params.has("lon") && (params.getString("lon") != null) && (!params.getString("lon").isEmpty()) ) {
                        // Param: lon, Type: BigDecimal
                        coverageRequestBuilder.withLon(longToBigDecimal(params.getLong("lon")));
                    }
                    if (params.has("disableGeojson") && (params.getString("disableGeojson") != null) && (!params.getString("disableGeojson").isEmpty()) ) {
                        // Param: disableGeojson, Type: Boolean
                        coverageRequestBuilder.withDisableGeojson(booleanStraightPass(params.getBoolean("disableGeojson")));
                    }
                    
                    coverageRequestBuilder.rawGet(new ApiCallback<String>() {
                        @Override
                        public void onFailure(ApiException e, int statusCode, Map<String, List<String>> responseHeaders) {
                            callbackContext.error("Problem during request call | " + e.getMessage());
                        }

                        @Override
                        public void onSuccess(String result, int statusCode, Map<String, List<String>> responseHeaders) {
                            JSONObject jsonObject = null;
                            try {
                                jsonObject = new JSONObject(result);
                                callbackContext.success(jsonObject);
                            } catch (Exception e) {
                                String errorMessage = "Problem during response parsing | " + String.valueOf(e.hashCode()) + ": " + e.getMessage();
                                callbackContext.error(errorMessage);
                            }
                        }

                        @Override
                        public void onUploadProgress(long bytesWritten, long contentLength, boolean done) {
                        }

                        @Override
                        public void onDownloadProgress(long bytesRead, long contentLength, boolean done) {
                        }
                    });
                } catch (Exception e) {
                    String errorMessage = "Problem during request building | " + String.valueOf(e.hashCode()) + ": " + e.getMessage();
                    callbackContext.error(errorMessage);
                }
            }
        });
    }
    final private void coverageRegion(final JSONObject params, final CallbackContext callbackContext) {
        if (this.navitiaSdk == null) {
            callbackContext.error("NavitiaSDK is not instanciated");
            return;
        }

        final CoverageApi.CoverageRegionRequestBuilder coverageRequestBuilder = this.navitiaSdk.coverageApi.newCoverageRegionRequestBuilder();
        cordova.getThreadPool().execute(new Runnable() {
            @Override
            public void run() {
                try {
                    if (params.has("region") && (params.getString("region") != null) && (!params.getString("region").isEmpty()) ) {
                        // Param: region, Type: String
                        coverageRequestBuilder.withRegion(stringStraightPass(params.getString("region")));
                    }
                    if (params.has("disableGeojson") && (params.getString("disableGeojson") != null) && (!params.getString("disableGeojson").isEmpty()) ) {
                        // Param: disableGeojson, Type: Boolean
                        coverageRequestBuilder.withDisableGeojson(booleanStraightPass(params.getBoolean("disableGeojson")));
                    }
                    
                    coverageRequestBuilder.rawGet(new ApiCallback<String>() {
                        @Override
                        public void onFailure(ApiException e, int statusCode, Map<String, List<String>> responseHeaders) {
                            callbackContext.error("Problem during request call | " + e.getMessage());
                        }

                        @Override
                        public void onSuccess(String result, int statusCode, Map<String, List<String>> responseHeaders) {
                            JSONObject jsonObject = null;
                            try {
                                jsonObject = new JSONObject(result);
                                callbackContext.success(jsonObject);
                            } catch (Exception e) {
                                String errorMessage = "Problem during response parsing | " + String.valueOf(e.hashCode()) + ": " + e.getMessage();
                                callbackContext.error(errorMessage);
                            }
                        }

                        @Override
                        public void onUploadProgress(long bytesWritten, long contentLength, boolean done) {
                        }

                        @Override
                        public void onDownloadProgress(long bytesRead, long contentLength, boolean done) {
                        }
                    });
                } catch (Exception e) {
                    String errorMessage = "Problem during request building | " + String.valueOf(e.hashCode()) + ": " + e.getMessage();
                    callbackContext.error(errorMessage);
                }
            }
        });
    }
    final private void coverageLonLatDatasets(final JSONObject params, final CallbackContext callbackContext) {
        if (this.navitiaSdk == null) {
            callbackContext.error("NavitiaSDK is not instanciated");
            return;
        }

        final DatasetsApi.CoverageLonLatDatasetsRequestBuilder datasetsRequestBuilder = this.navitiaSdk.datasetsApi.newCoverageLonLatDatasetsRequestBuilder();
        cordova.getThreadPool().execute(new Runnable() {
            @Override
            public void run() {
                try {
                    if (params.has("lat") && (params.getString("lat") != null) && (!params.getString("lat").isEmpty()) ) {
                        // Param: lat, Type: BigDecimal
                        datasetsRequestBuilder.withLat(longToBigDecimal(params.getLong("lat")));
                    }
                    if (params.has("lon") && (params.getString("lon") != null) && (!params.getString("lon").isEmpty()) ) {
                        // Param: lon, Type: BigDecimal
                        datasetsRequestBuilder.withLon(longToBigDecimal(params.getLong("lon")));
                    }
                    if (params.has("startPage") && (params.getString("startPage") != null) && (!params.getString("startPage").isEmpty()) ) {
                        // Param: startPage, Type: Integer
                        datasetsRequestBuilder.withStartPage(integerStraightPass(params.getInt("startPage")));
                    }
                    if (params.has("count") && (params.getString("count") != null) && (!params.getString("count").isEmpty()) ) {
                        // Param: count, Type: Integer
                        datasetsRequestBuilder.withCount(integerStraightPass(params.getInt("count")));
                    }
                    if (params.has("depth") && (params.getString("depth") != null) && (!params.getString("depth").isEmpty()) ) {
                        // Param: depth, Type: Integer
                        datasetsRequestBuilder.withDepth(integerStraightPass(params.getInt("depth")));
                    }
                    if (params.has("forbiddenId") && (params.getString("forbiddenId") != null) && (!params.getString("forbiddenId").isEmpty()) ) {
                        // Param: forbiddenId, Type: List
                        datasetsRequestBuilder.withForbiddenId(jsonArrayToStringList(params.getJSONArray("forbiddenId")));
                    }
                    if (params.has("forbiddenUris") && (params.getString("forbiddenUris") != null) && (!params.getString("forbiddenUris").isEmpty()) ) {
                        // Param: forbiddenUris, Type: List
                        datasetsRequestBuilder.withForbiddenUris(jsonArrayToStringList(params.getJSONArray("forbiddenUris")));
                    }
                    if (params.has("externalCode") && (params.getString("externalCode") != null) && (!params.getString("externalCode").isEmpty()) ) {
                        // Param: externalCode, Type: String
                        datasetsRequestBuilder.withExternalCode(stringStraightPass(params.getString("externalCode")));
                    }
                    if (params.has("headsign") && (params.getString("headsign") != null) && (!params.getString("headsign").isEmpty()) ) {
                        // Param: headsign, Type: String
                        datasetsRequestBuilder.withHeadsign(stringStraightPass(params.getString("headsign")));
                    }
                    if (params.has("showCodes") && (params.getString("showCodes") != null) && (!params.getString("showCodes").isEmpty()) ) {
                        // Param: showCodes, Type: Boolean
                        datasetsRequestBuilder.withShowCodes(booleanStraightPass(params.getBoolean("showCodes")));
                    }
                    if (params.has("odtLevel") && (params.getString("odtLevel") != null) && (!params.getString("odtLevel").isEmpty()) ) {
                        // Param: odtLevel, Type: String
                        datasetsRequestBuilder.withOdtLevel(stringStraightPass(params.getString("odtLevel")));
                    }
                    if (params.has("dataFreshness") && (params.getString("dataFreshness") != null) && (!params.getString("dataFreshness").isEmpty()) ) {
                        // Param: dataFreshness, Type: String
                        datasetsRequestBuilder.withDataFreshness(stringStraightPass(params.getString("dataFreshness")));
                    }
                    if (params.has("distance") && (params.getString("distance") != null) && (!params.getString("distance").isEmpty()) ) {
                        // Param: distance, Type: Integer
                        datasetsRequestBuilder.withDistance(integerStraightPass(params.getInt("distance")));
                    }
                    if (params.has("since") && (params.getString("since") != null) && (!params.getString("since").isEmpty()) ) {
                        // Param: since, Type: Date
                        datasetsRequestBuilder.withSince(stringToDateTime(params.getString("since")));
                    }
                    if (params.has("until") && (params.getString("until") != null) && (!params.getString("until").isEmpty()) ) {
                        // Param: until, Type: Date
                        datasetsRequestBuilder.withUntil(stringToDateTime(params.getString("until")));
                    }
                    if (params.has("disableGeojson") && (params.getString("disableGeojson") != null) && (!params.getString("disableGeojson").isEmpty()) ) {
                        // Param: disableGeojson, Type: Boolean
                        datasetsRequestBuilder.withDisableGeojson(booleanStraightPass(params.getBoolean("disableGeojson")));
                    }
                    if (params.has("disableDisruption") && (params.getString("disableDisruption") != null) && (!params.getString("disableDisruption").isEmpty()) ) {
                        // Param: disableDisruption, Type: Boolean
                        datasetsRequestBuilder.withDisableDisruption(booleanStraightPass(params.getBoolean("disableDisruption")));
                    }
                    if (params.has("filter") && (params.getString("filter") != null) && (!params.getString("filter").isEmpty()) ) {
                        // Param: filter, Type: String
                        datasetsRequestBuilder.withFilter(stringStraightPass(params.getString("filter")));
                    }
                    if (params.has("tags") && (params.getString("tags") != null) && (!params.getString("tags").isEmpty()) ) {
                        // Param: tags, Type: List
                        datasetsRequestBuilder.withTags(jsonArrayToStringList(params.getJSONArray("tags")));
                    }
                    
                    datasetsRequestBuilder.rawGet(new ApiCallback<String>() {
                        @Override
                        public void onFailure(ApiException e, int statusCode, Map<String, List<String>> responseHeaders) {
                            callbackContext.error("Problem during request call | " + e.getMessage());
                        }

                        @Override
                        public void onSuccess(String result, int statusCode, Map<String, List<String>> responseHeaders) {
                            JSONObject jsonObject = null;
                            try {
                                jsonObject = new JSONObject(result);
                                callbackContext.success(jsonObject);
                            } catch (Exception e) {
                                String errorMessage = "Problem during response parsing | " + String.valueOf(e.hashCode()) + ": " + e.getMessage();
                                callbackContext.error(errorMessage);
                            }
                        }

                        @Override
                        public void onUploadProgress(long bytesWritten, long contentLength, boolean done) {
                        }

                        @Override
                        public void onDownloadProgress(long bytesRead, long contentLength, boolean done) {
                        }
                    });
                } catch (Exception e) {
                    String errorMessage = "Problem during request building | " + String.valueOf(e.hashCode()) + ": " + e.getMessage();
                    callbackContext.error(errorMessage);
                }
            }
        });
    }
    final private void coverageLonLatDatasetsId(final JSONObject params, final CallbackContext callbackContext) {
        if (this.navitiaSdk == null) {
            callbackContext.error("NavitiaSDK is not instanciated");
            return;
        }

        final DatasetsApi.CoverageLonLatDatasetsIdRequestBuilder datasetsRequestBuilder = this.navitiaSdk.datasetsApi.newCoverageLonLatDatasetsIdRequestBuilder();
        cordova.getThreadPool().execute(new Runnable() {
            @Override
            public void run() {
                try {
                    if (params.has("lat") && (params.getString("lat") != null) && (!params.getString("lat").isEmpty()) ) {
                        // Param: lat, Type: BigDecimal
                        datasetsRequestBuilder.withLat(longToBigDecimal(params.getLong("lat")));
                    }
                    if (params.has("lon") && (params.getString("lon") != null) && (!params.getString("lon").isEmpty()) ) {
                        // Param: lon, Type: BigDecimal
                        datasetsRequestBuilder.withLon(longToBigDecimal(params.getLong("lon")));
                    }
                    if (params.has("id") && (params.getString("id") != null) && (!params.getString("id").isEmpty()) ) {
                        // Param: id, Type: String
                        datasetsRequestBuilder.withId(stringStraightPass(params.getString("id")));
                    }
                    if (params.has("startPage") && (params.getString("startPage") != null) && (!params.getString("startPage").isEmpty()) ) {
                        // Param: startPage, Type: Integer
                        datasetsRequestBuilder.withStartPage(integerStraightPass(params.getInt("startPage")));
                    }
                    if (params.has("count") && (params.getString("count") != null) && (!params.getString("count").isEmpty()) ) {
                        // Param: count, Type: Integer
                        datasetsRequestBuilder.withCount(integerStraightPass(params.getInt("count")));
                    }
                    if (params.has("depth") && (params.getString("depth") != null) && (!params.getString("depth").isEmpty()) ) {
                        // Param: depth, Type: Integer
                        datasetsRequestBuilder.withDepth(integerStraightPass(params.getInt("depth")));
                    }
                    if (params.has("forbiddenId") && (params.getString("forbiddenId") != null) && (!params.getString("forbiddenId").isEmpty()) ) {
                        // Param: forbiddenId, Type: List
                        datasetsRequestBuilder.withForbiddenId(jsonArrayToStringList(params.getJSONArray("forbiddenId")));
                    }
                    if (params.has("forbiddenUris") && (params.getString("forbiddenUris") != null) && (!params.getString("forbiddenUris").isEmpty()) ) {
                        // Param: forbiddenUris, Type: List
                        datasetsRequestBuilder.withForbiddenUris(jsonArrayToStringList(params.getJSONArray("forbiddenUris")));
                    }
                    if (params.has("externalCode") && (params.getString("externalCode") != null) && (!params.getString("externalCode").isEmpty()) ) {
                        // Param: externalCode, Type: String
                        datasetsRequestBuilder.withExternalCode(stringStraightPass(params.getString("externalCode")));
                    }
                    if (params.has("headsign") && (params.getString("headsign") != null) && (!params.getString("headsign").isEmpty()) ) {
                        // Param: headsign, Type: String
                        datasetsRequestBuilder.withHeadsign(stringStraightPass(params.getString("headsign")));
                    }
                    if (params.has("showCodes") && (params.getString("showCodes") != null) && (!params.getString("showCodes").isEmpty()) ) {
                        // Param: showCodes, Type: Boolean
                        datasetsRequestBuilder.withShowCodes(booleanStraightPass(params.getBoolean("showCodes")));
                    }
                    if (params.has("odtLevel") && (params.getString("odtLevel") != null) && (!params.getString("odtLevel").isEmpty()) ) {
                        // Param: odtLevel, Type: String
                        datasetsRequestBuilder.withOdtLevel(stringStraightPass(params.getString("odtLevel")));
                    }
                    if (params.has("dataFreshness") && (params.getString("dataFreshness") != null) && (!params.getString("dataFreshness").isEmpty()) ) {
                        // Param: dataFreshness, Type: String
                        datasetsRequestBuilder.withDataFreshness(stringStraightPass(params.getString("dataFreshness")));
                    }
                    if (params.has("distance") && (params.getString("distance") != null) && (!params.getString("distance").isEmpty()) ) {
                        // Param: distance, Type: Integer
                        datasetsRequestBuilder.withDistance(integerStraightPass(params.getInt("distance")));
                    }
                    if (params.has("since") && (params.getString("since") != null) && (!params.getString("since").isEmpty()) ) {
                        // Param: since, Type: Date
                        datasetsRequestBuilder.withSince(stringToDateTime(params.getString("since")));
                    }
                    if (params.has("until") && (params.getString("until") != null) && (!params.getString("until").isEmpty()) ) {
                        // Param: until, Type: Date
                        datasetsRequestBuilder.withUntil(stringToDateTime(params.getString("until")));
                    }
                    if (params.has("disableGeojson") && (params.getString("disableGeojson") != null) && (!params.getString("disableGeojson").isEmpty()) ) {
                        // Param: disableGeojson, Type: Boolean
                        datasetsRequestBuilder.withDisableGeojson(booleanStraightPass(params.getBoolean("disableGeojson")));
                    }
                    if (params.has("disableDisruption") && (params.getString("disableDisruption") != null) && (!params.getString("disableDisruption").isEmpty()) ) {
                        // Param: disableDisruption, Type: Boolean
                        datasetsRequestBuilder.withDisableDisruption(booleanStraightPass(params.getBoolean("disableDisruption")));
                    }
                    if (params.has("tags") && (params.getString("tags") != null) && (!params.getString("tags").isEmpty()) ) {
                        // Param: tags, Type: List
                        datasetsRequestBuilder.withTags(jsonArrayToStringList(params.getJSONArray("tags")));
                    }
                    
                    datasetsRequestBuilder.rawGet(new ApiCallback<String>() {
                        @Override
                        public void onFailure(ApiException e, int statusCode, Map<String, List<String>> responseHeaders) {
                            callbackContext.error("Problem during request call | " + e.getMessage());
                        }

                        @Override
                        public void onSuccess(String result, int statusCode, Map<String, List<String>> responseHeaders) {
                            JSONObject jsonObject = null;
                            try {
                                jsonObject = new JSONObject(result);
                                callbackContext.success(jsonObject);
                            } catch (Exception e) {
                                String errorMessage = "Problem during response parsing | " + String.valueOf(e.hashCode()) + ": " + e.getMessage();
                                callbackContext.error(errorMessage);
                            }
                        }

                        @Override
                        public void onUploadProgress(long bytesWritten, long contentLength, boolean done) {
                        }

                        @Override
                        public void onDownloadProgress(long bytesRead, long contentLength, boolean done) {
                        }
                    });
                } catch (Exception e) {
                    String errorMessage = "Problem during request building | " + String.valueOf(e.hashCode()) + ": " + e.getMessage();
                    callbackContext.error(errorMessage);
                }
            }
        });
    }
    final private void coverageLonLatUriDatasets(final JSONObject params, final CallbackContext callbackContext) {
        if (this.navitiaSdk == null) {
            callbackContext.error("NavitiaSDK is not instanciated");
            return;
        }

        final DatasetsApi.CoverageLonLatUriDatasetsRequestBuilder datasetsRequestBuilder = this.navitiaSdk.datasetsApi.newCoverageLonLatUriDatasetsRequestBuilder();
        cordova.getThreadPool().execute(new Runnable() {
            @Override
            public void run() {
                try {
                    if (params.has("lat") && (params.getString("lat") != null) && (!params.getString("lat").isEmpty()) ) {
                        // Param: lat, Type: BigDecimal
                        datasetsRequestBuilder.withLat(longToBigDecimal(params.getLong("lat")));
                    }
                    if (params.has("lon") && (params.getString("lon") != null) && (!params.getString("lon").isEmpty()) ) {
                        // Param: lon, Type: BigDecimal
                        datasetsRequestBuilder.withLon(longToBigDecimal(params.getLong("lon")));
                    }
                    if (params.has("uri") && (params.getString("uri") != null) && (!params.getString("uri").isEmpty()) ) {
                        // Param: uri, Type: String
                        datasetsRequestBuilder.withUri(stringStraightPass(params.getString("uri")));
                    }
                    if (params.has("startPage") && (params.getString("startPage") != null) && (!params.getString("startPage").isEmpty()) ) {
                        // Param: startPage, Type: Integer
                        datasetsRequestBuilder.withStartPage(integerStraightPass(params.getInt("startPage")));
                    }
                    if (params.has("count") && (params.getString("count") != null) && (!params.getString("count").isEmpty()) ) {
                        // Param: count, Type: Integer
                        datasetsRequestBuilder.withCount(integerStraightPass(params.getInt("count")));
                    }
                    if (params.has("depth") && (params.getString("depth") != null) && (!params.getString("depth").isEmpty()) ) {
                        // Param: depth, Type: Integer
                        datasetsRequestBuilder.withDepth(integerStraightPass(params.getInt("depth")));
                    }
                    if (params.has("forbiddenId") && (params.getString("forbiddenId") != null) && (!params.getString("forbiddenId").isEmpty()) ) {
                        // Param: forbiddenId, Type: List
                        datasetsRequestBuilder.withForbiddenId(jsonArrayToStringList(params.getJSONArray("forbiddenId")));
                    }
                    if (params.has("forbiddenUris") && (params.getString("forbiddenUris") != null) && (!params.getString("forbiddenUris").isEmpty()) ) {
                        // Param: forbiddenUris, Type: List
                        datasetsRequestBuilder.withForbiddenUris(jsonArrayToStringList(params.getJSONArray("forbiddenUris")));
                    }
                    if (params.has("externalCode") && (params.getString("externalCode") != null) && (!params.getString("externalCode").isEmpty()) ) {
                        // Param: externalCode, Type: String
                        datasetsRequestBuilder.withExternalCode(stringStraightPass(params.getString("externalCode")));
                    }
                    if (params.has("headsign") && (params.getString("headsign") != null) && (!params.getString("headsign").isEmpty()) ) {
                        // Param: headsign, Type: String
                        datasetsRequestBuilder.withHeadsign(stringStraightPass(params.getString("headsign")));
                    }
                    if (params.has("showCodes") && (params.getString("showCodes") != null) && (!params.getString("showCodes").isEmpty()) ) {
                        // Param: showCodes, Type: Boolean
                        datasetsRequestBuilder.withShowCodes(booleanStraightPass(params.getBoolean("showCodes")));
                    }
                    if (params.has("odtLevel") && (params.getString("odtLevel") != null) && (!params.getString("odtLevel").isEmpty()) ) {
                        // Param: odtLevel, Type: String
                        datasetsRequestBuilder.withOdtLevel(stringStraightPass(params.getString("odtLevel")));
                    }
                    if (params.has("dataFreshness") && (params.getString("dataFreshness") != null) && (!params.getString("dataFreshness").isEmpty()) ) {
                        // Param: dataFreshness, Type: String
                        datasetsRequestBuilder.withDataFreshness(stringStraightPass(params.getString("dataFreshness")));
                    }
                    if (params.has("distance") && (params.getString("distance") != null) && (!params.getString("distance").isEmpty()) ) {
                        // Param: distance, Type: Integer
                        datasetsRequestBuilder.withDistance(integerStraightPass(params.getInt("distance")));
                    }
                    if (params.has("since") && (params.getString("since") != null) && (!params.getString("since").isEmpty()) ) {
                        // Param: since, Type: Date
                        datasetsRequestBuilder.withSince(stringToDateTime(params.getString("since")));
                    }
                    if (params.has("until") && (params.getString("until") != null) && (!params.getString("until").isEmpty()) ) {
                        // Param: until, Type: Date
                        datasetsRequestBuilder.withUntil(stringToDateTime(params.getString("until")));
                    }
                    if (params.has("disableGeojson") && (params.getString("disableGeojson") != null) && (!params.getString("disableGeojson").isEmpty()) ) {
                        // Param: disableGeojson, Type: Boolean
                        datasetsRequestBuilder.withDisableGeojson(booleanStraightPass(params.getBoolean("disableGeojson")));
                    }
                    if (params.has("disableDisruption") && (params.getString("disableDisruption") != null) && (!params.getString("disableDisruption").isEmpty()) ) {
                        // Param: disableDisruption, Type: Boolean
                        datasetsRequestBuilder.withDisableDisruption(booleanStraightPass(params.getBoolean("disableDisruption")));
                    }
                    if (params.has("filter") && (params.getString("filter") != null) && (!params.getString("filter").isEmpty()) ) {
                        // Param: filter, Type: String
                        datasetsRequestBuilder.withFilter(stringStraightPass(params.getString("filter")));
                    }
                    if (params.has("tags") && (params.getString("tags") != null) && (!params.getString("tags").isEmpty()) ) {
                        // Param: tags, Type: List
                        datasetsRequestBuilder.withTags(jsonArrayToStringList(params.getJSONArray("tags")));
                    }
                    
                    datasetsRequestBuilder.rawGet(new ApiCallback<String>() {
                        @Override
                        public void onFailure(ApiException e, int statusCode, Map<String, List<String>> responseHeaders) {
                            callbackContext.error("Problem during request call | " + e.getMessage());
                        }

                        @Override
                        public void onSuccess(String result, int statusCode, Map<String, List<String>> responseHeaders) {
                            JSONObject jsonObject = null;
                            try {
                                jsonObject = new JSONObject(result);
                                callbackContext.success(jsonObject);
                            } catch (Exception e) {
                                String errorMessage = "Problem during response parsing | " + String.valueOf(e.hashCode()) + ": " + e.getMessage();
                                callbackContext.error(errorMessage);
                            }
                        }

                        @Override
                        public void onUploadProgress(long bytesWritten, long contentLength, boolean done) {
                        }

                        @Override
                        public void onDownloadProgress(long bytesRead, long contentLength, boolean done) {
                        }
                    });
                } catch (Exception e) {
                    String errorMessage = "Problem during request building | " + String.valueOf(e.hashCode()) + ": " + e.getMessage();
                    callbackContext.error(errorMessage);
                }
            }
        });
    }
    final private void coverageLonLatUriDatasetsId(final JSONObject params, final CallbackContext callbackContext) {
        if (this.navitiaSdk == null) {
            callbackContext.error("NavitiaSDK is not instanciated");
            return;
        }

        final DatasetsApi.CoverageLonLatUriDatasetsIdRequestBuilder datasetsRequestBuilder = this.navitiaSdk.datasetsApi.newCoverageLonLatUriDatasetsIdRequestBuilder();
        cordova.getThreadPool().execute(new Runnable() {
            @Override
            public void run() {
                try {
                    if (params.has("lat") && (params.getString("lat") != null) && (!params.getString("lat").isEmpty()) ) {
                        // Param: lat, Type: BigDecimal
                        datasetsRequestBuilder.withLat(longToBigDecimal(params.getLong("lat")));
                    }
                    if (params.has("lon") && (params.getString("lon") != null) && (!params.getString("lon").isEmpty()) ) {
                        // Param: lon, Type: BigDecimal
                        datasetsRequestBuilder.withLon(longToBigDecimal(params.getLong("lon")));
                    }
                    if (params.has("uri") && (params.getString("uri") != null) && (!params.getString("uri").isEmpty()) ) {
                        // Param: uri, Type: String
                        datasetsRequestBuilder.withUri(stringStraightPass(params.getString("uri")));
                    }
                    if (params.has("id") && (params.getString("id") != null) && (!params.getString("id").isEmpty()) ) {
                        // Param: id, Type: String
                        datasetsRequestBuilder.withId(stringStraightPass(params.getString("id")));
                    }
                    if (params.has("startPage") && (params.getString("startPage") != null) && (!params.getString("startPage").isEmpty()) ) {
                        // Param: startPage, Type: Integer
                        datasetsRequestBuilder.withStartPage(integerStraightPass(params.getInt("startPage")));
                    }
                    if (params.has("count") && (params.getString("count") != null) && (!params.getString("count").isEmpty()) ) {
                        // Param: count, Type: Integer
                        datasetsRequestBuilder.withCount(integerStraightPass(params.getInt("count")));
                    }
                    if (params.has("depth") && (params.getString("depth") != null) && (!params.getString("depth").isEmpty()) ) {
                        // Param: depth, Type: Integer
                        datasetsRequestBuilder.withDepth(integerStraightPass(params.getInt("depth")));
                    }
                    if (params.has("forbiddenId") && (params.getString("forbiddenId") != null) && (!params.getString("forbiddenId").isEmpty()) ) {
                        // Param: forbiddenId, Type: List
                        datasetsRequestBuilder.withForbiddenId(jsonArrayToStringList(params.getJSONArray("forbiddenId")));
                    }
                    if (params.has("forbiddenUris") && (params.getString("forbiddenUris") != null) && (!params.getString("forbiddenUris").isEmpty()) ) {
                        // Param: forbiddenUris, Type: List
                        datasetsRequestBuilder.withForbiddenUris(jsonArrayToStringList(params.getJSONArray("forbiddenUris")));
                    }
                    if (params.has("externalCode") && (params.getString("externalCode") != null) && (!params.getString("externalCode").isEmpty()) ) {
                        // Param: externalCode, Type: String
                        datasetsRequestBuilder.withExternalCode(stringStraightPass(params.getString("externalCode")));
                    }
                    if (params.has("headsign") && (params.getString("headsign") != null) && (!params.getString("headsign").isEmpty()) ) {
                        // Param: headsign, Type: String
                        datasetsRequestBuilder.withHeadsign(stringStraightPass(params.getString("headsign")));
                    }
                    if (params.has("showCodes") && (params.getString("showCodes") != null) && (!params.getString("showCodes").isEmpty()) ) {
                        // Param: showCodes, Type: Boolean
                        datasetsRequestBuilder.withShowCodes(booleanStraightPass(params.getBoolean("showCodes")));
                    }
                    if (params.has("odtLevel") && (params.getString("odtLevel") != null) && (!params.getString("odtLevel").isEmpty()) ) {
                        // Param: odtLevel, Type: String
                        datasetsRequestBuilder.withOdtLevel(stringStraightPass(params.getString("odtLevel")));
                    }
                    if (params.has("dataFreshness") && (params.getString("dataFreshness") != null) && (!params.getString("dataFreshness").isEmpty()) ) {
                        // Param: dataFreshness, Type: String
                        datasetsRequestBuilder.withDataFreshness(stringStraightPass(params.getString("dataFreshness")));
                    }
                    if (params.has("distance") && (params.getString("distance") != null) && (!params.getString("distance").isEmpty()) ) {
                        // Param: distance, Type: Integer
                        datasetsRequestBuilder.withDistance(integerStraightPass(params.getInt("distance")));
                    }
                    if (params.has("since") && (params.getString("since") != null) && (!params.getString("since").isEmpty()) ) {
                        // Param: since, Type: Date
                        datasetsRequestBuilder.withSince(stringToDateTime(params.getString("since")));
                    }
                    if (params.has("until") && (params.getString("until") != null) && (!params.getString("until").isEmpty()) ) {
                        // Param: until, Type: Date
                        datasetsRequestBuilder.withUntil(stringToDateTime(params.getString("until")));
                    }
                    if (params.has("disableGeojson") && (params.getString("disableGeojson") != null) && (!params.getString("disableGeojson").isEmpty()) ) {
                        // Param: disableGeojson, Type: Boolean
                        datasetsRequestBuilder.withDisableGeojson(booleanStraightPass(params.getBoolean("disableGeojson")));
                    }
                    if (params.has("disableDisruption") && (params.getString("disableDisruption") != null) && (!params.getString("disableDisruption").isEmpty()) ) {
                        // Param: disableDisruption, Type: Boolean
                        datasetsRequestBuilder.withDisableDisruption(booleanStraightPass(params.getBoolean("disableDisruption")));
                    }
                    if (params.has("tags") && (params.getString("tags") != null) && (!params.getString("tags").isEmpty()) ) {
                        // Param: tags, Type: List
                        datasetsRequestBuilder.withTags(jsonArrayToStringList(params.getJSONArray("tags")));
                    }
                    
                    datasetsRequestBuilder.rawGet(new ApiCallback<String>() {
                        @Override
                        public void onFailure(ApiException e, int statusCode, Map<String, List<String>> responseHeaders) {
                            callbackContext.error("Problem during request call | " + e.getMessage());
                        }

                        @Override
                        public void onSuccess(String result, int statusCode, Map<String, List<String>> responseHeaders) {
                            JSONObject jsonObject = null;
                            try {
                                jsonObject = new JSONObject(result);
                                callbackContext.success(jsonObject);
                            } catch (Exception e) {
                                String errorMessage = "Problem during response parsing | " + String.valueOf(e.hashCode()) + ": " + e.getMessage();
                                callbackContext.error(errorMessage);
                            }
                        }

                        @Override
                        public void onUploadProgress(long bytesWritten, long contentLength, boolean done) {
                        }

                        @Override
                        public void onDownloadProgress(long bytesRead, long contentLength, boolean done) {
                        }
                    });
                } catch (Exception e) {
                    String errorMessage = "Problem during request building | " + String.valueOf(e.hashCode()) + ": " + e.getMessage();
                    callbackContext.error(errorMessage);
                }
            }
        });
    }
    final private void coverageRegionDatasets(final JSONObject params, final CallbackContext callbackContext) {
        if (this.navitiaSdk == null) {
            callbackContext.error("NavitiaSDK is not instanciated");
            return;
        }

        final DatasetsApi.CoverageRegionDatasetsRequestBuilder datasetsRequestBuilder = this.navitiaSdk.datasetsApi.newCoverageRegionDatasetsRequestBuilder();
        cordova.getThreadPool().execute(new Runnable() {
            @Override
            public void run() {
                try {
                    if (params.has("region") && (params.getString("region") != null) && (!params.getString("region").isEmpty()) ) {
                        // Param: region, Type: String
                        datasetsRequestBuilder.withRegion(stringStraightPass(params.getString("region")));
                    }
                    if (params.has("startPage") && (params.getString("startPage") != null) && (!params.getString("startPage").isEmpty()) ) {
                        // Param: startPage, Type: Integer
                        datasetsRequestBuilder.withStartPage(integerStraightPass(params.getInt("startPage")));
                    }
                    if (params.has("count") && (params.getString("count") != null) && (!params.getString("count").isEmpty()) ) {
                        // Param: count, Type: Integer
                        datasetsRequestBuilder.withCount(integerStraightPass(params.getInt("count")));
                    }
                    if (params.has("depth") && (params.getString("depth") != null) && (!params.getString("depth").isEmpty()) ) {
                        // Param: depth, Type: Integer
                        datasetsRequestBuilder.withDepth(integerStraightPass(params.getInt("depth")));
                    }
                    if (params.has("forbiddenId") && (params.getString("forbiddenId") != null) && (!params.getString("forbiddenId").isEmpty()) ) {
                        // Param: forbiddenId, Type: List
                        datasetsRequestBuilder.withForbiddenId(jsonArrayToStringList(params.getJSONArray("forbiddenId")));
                    }
                    if (params.has("forbiddenUris") && (params.getString("forbiddenUris") != null) && (!params.getString("forbiddenUris").isEmpty()) ) {
                        // Param: forbiddenUris, Type: List
                        datasetsRequestBuilder.withForbiddenUris(jsonArrayToStringList(params.getJSONArray("forbiddenUris")));
                    }
                    if (params.has("externalCode") && (params.getString("externalCode") != null) && (!params.getString("externalCode").isEmpty()) ) {
                        // Param: externalCode, Type: String
                        datasetsRequestBuilder.withExternalCode(stringStraightPass(params.getString("externalCode")));
                    }
                    if (params.has("headsign") && (params.getString("headsign") != null) && (!params.getString("headsign").isEmpty()) ) {
                        // Param: headsign, Type: String
                        datasetsRequestBuilder.withHeadsign(stringStraightPass(params.getString("headsign")));
                    }
                    if (params.has("showCodes") && (params.getString("showCodes") != null) && (!params.getString("showCodes").isEmpty()) ) {
                        // Param: showCodes, Type: Boolean
                        datasetsRequestBuilder.withShowCodes(booleanStraightPass(params.getBoolean("showCodes")));
                    }
                    if (params.has("odtLevel") && (params.getString("odtLevel") != null) && (!params.getString("odtLevel").isEmpty()) ) {
                        // Param: odtLevel, Type: String
                        datasetsRequestBuilder.withOdtLevel(stringStraightPass(params.getString("odtLevel")));
                    }
                    if (params.has("dataFreshness") && (params.getString("dataFreshness") != null) && (!params.getString("dataFreshness").isEmpty()) ) {
                        // Param: dataFreshness, Type: String
                        datasetsRequestBuilder.withDataFreshness(stringStraightPass(params.getString("dataFreshness")));
                    }
                    if (params.has("distance") && (params.getString("distance") != null) && (!params.getString("distance").isEmpty()) ) {
                        // Param: distance, Type: Integer
                        datasetsRequestBuilder.withDistance(integerStraightPass(params.getInt("distance")));
                    }
                    if (params.has("since") && (params.getString("since") != null) && (!params.getString("since").isEmpty()) ) {
                        // Param: since, Type: Date
                        datasetsRequestBuilder.withSince(stringToDateTime(params.getString("since")));
                    }
                    if (params.has("until") && (params.getString("until") != null) && (!params.getString("until").isEmpty()) ) {
                        // Param: until, Type: Date
                        datasetsRequestBuilder.withUntil(stringToDateTime(params.getString("until")));
                    }
                    if (params.has("disableGeojson") && (params.getString("disableGeojson") != null) && (!params.getString("disableGeojson").isEmpty()) ) {
                        // Param: disableGeojson, Type: Boolean
                        datasetsRequestBuilder.withDisableGeojson(booleanStraightPass(params.getBoolean("disableGeojson")));
                    }
                    if (params.has("disableDisruption") && (params.getString("disableDisruption") != null) && (!params.getString("disableDisruption").isEmpty()) ) {
                        // Param: disableDisruption, Type: Boolean
                        datasetsRequestBuilder.withDisableDisruption(booleanStraightPass(params.getBoolean("disableDisruption")));
                    }
                    if (params.has("filter") && (params.getString("filter") != null) && (!params.getString("filter").isEmpty()) ) {
                        // Param: filter, Type: String
                        datasetsRequestBuilder.withFilter(stringStraightPass(params.getString("filter")));
                    }
                    if (params.has("tags") && (params.getString("tags") != null) && (!params.getString("tags").isEmpty()) ) {
                        // Param: tags, Type: List
                        datasetsRequestBuilder.withTags(jsonArrayToStringList(params.getJSONArray("tags")));
                    }
                    
                    datasetsRequestBuilder.rawGet(new ApiCallback<String>() {
                        @Override
                        public void onFailure(ApiException e, int statusCode, Map<String, List<String>> responseHeaders) {
                            callbackContext.error("Problem during request call | " + e.getMessage());
                        }

                        @Override
                        public void onSuccess(String result, int statusCode, Map<String, List<String>> responseHeaders) {
                            JSONObject jsonObject = null;
                            try {
                                jsonObject = new JSONObject(result);
                                callbackContext.success(jsonObject);
                            } catch (Exception e) {
                                String errorMessage = "Problem during response parsing | " + String.valueOf(e.hashCode()) + ": " + e.getMessage();
                                callbackContext.error(errorMessage);
                            }
                        }

                        @Override
                        public void onUploadProgress(long bytesWritten, long contentLength, boolean done) {
                        }

                        @Override
                        public void onDownloadProgress(long bytesRead, long contentLength, boolean done) {
                        }
                    });
                } catch (Exception e) {
                    String errorMessage = "Problem during request building | " + String.valueOf(e.hashCode()) + ": " + e.getMessage();
                    callbackContext.error(errorMessage);
                }
            }
        });
    }
    final private void coverageRegionDatasetsId(final JSONObject params, final CallbackContext callbackContext) {
        if (this.navitiaSdk == null) {
            callbackContext.error("NavitiaSDK is not instanciated");
            return;
        }

        final DatasetsApi.CoverageRegionDatasetsIdRequestBuilder datasetsRequestBuilder = this.navitiaSdk.datasetsApi.newCoverageRegionDatasetsIdRequestBuilder();
        cordova.getThreadPool().execute(new Runnable() {
            @Override
            public void run() {
                try {
                    if (params.has("region") && (params.getString("region") != null) && (!params.getString("region").isEmpty()) ) {
                        // Param: region, Type: String
                        datasetsRequestBuilder.withRegion(stringStraightPass(params.getString("region")));
                    }
                    if (params.has("id") && (params.getString("id") != null) && (!params.getString("id").isEmpty()) ) {
                        // Param: id, Type: String
                        datasetsRequestBuilder.withId(stringStraightPass(params.getString("id")));
                    }
                    if (params.has("startPage") && (params.getString("startPage") != null) && (!params.getString("startPage").isEmpty()) ) {
                        // Param: startPage, Type: Integer
                        datasetsRequestBuilder.withStartPage(integerStraightPass(params.getInt("startPage")));
                    }
                    if (params.has("count") && (params.getString("count") != null) && (!params.getString("count").isEmpty()) ) {
                        // Param: count, Type: Integer
                        datasetsRequestBuilder.withCount(integerStraightPass(params.getInt("count")));
                    }
                    if (params.has("depth") && (params.getString("depth") != null) && (!params.getString("depth").isEmpty()) ) {
                        // Param: depth, Type: Integer
                        datasetsRequestBuilder.withDepth(integerStraightPass(params.getInt("depth")));
                    }
                    if (params.has("forbiddenId") && (params.getString("forbiddenId") != null) && (!params.getString("forbiddenId").isEmpty()) ) {
                        // Param: forbiddenId, Type: List
                        datasetsRequestBuilder.withForbiddenId(jsonArrayToStringList(params.getJSONArray("forbiddenId")));
                    }
                    if (params.has("forbiddenUris") && (params.getString("forbiddenUris") != null) && (!params.getString("forbiddenUris").isEmpty()) ) {
                        // Param: forbiddenUris, Type: List
                        datasetsRequestBuilder.withForbiddenUris(jsonArrayToStringList(params.getJSONArray("forbiddenUris")));
                    }
                    if (params.has("externalCode") && (params.getString("externalCode") != null) && (!params.getString("externalCode").isEmpty()) ) {
                        // Param: externalCode, Type: String
                        datasetsRequestBuilder.withExternalCode(stringStraightPass(params.getString("externalCode")));
                    }
                    if (params.has("headsign") && (params.getString("headsign") != null) && (!params.getString("headsign").isEmpty()) ) {
                        // Param: headsign, Type: String
                        datasetsRequestBuilder.withHeadsign(stringStraightPass(params.getString("headsign")));
                    }
                    if (params.has("showCodes") && (params.getString("showCodes") != null) && (!params.getString("showCodes").isEmpty()) ) {
                        // Param: showCodes, Type: Boolean
                        datasetsRequestBuilder.withShowCodes(booleanStraightPass(params.getBoolean("showCodes")));
                    }
                    if (params.has("odtLevel") && (params.getString("odtLevel") != null) && (!params.getString("odtLevel").isEmpty()) ) {
                        // Param: odtLevel, Type: String
                        datasetsRequestBuilder.withOdtLevel(stringStraightPass(params.getString("odtLevel")));
                    }
                    if (params.has("dataFreshness") && (params.getString("dataFreshness") != null) && (!params.getString("dataFreshness").isEmpty()) ) {
                        // Param: dataFreshness, Type: String
                        datasetsRequestBuilder.withDataFreshness(stringStraightPass(params.getString("dataFreshness")));
                    }
                    if (params.has("distance") && (params.getString("distance") != null) && (!params.getString("distance").isEmpty()) ) {
                        // Param: distance, Type: Integer
                        datasetsRequestBuilder.withDistance(integerStraightPass(params.getInt("distance")));
                    }
                    if (params.has("since") && (params.getString("since") != null) && (!params.getString("since").isEmpty()) ) {
                        // Param: since, Type: Date
                        datasetsRequestBuilder.withSince(stringToDateTime(params.getString("since")));
                    }
                    if (params.has("until") && (params.getString("until") != null) && (!params.getString("until").isEmpty()) ) {
                        // Param: until, Type: Date
                        datasetsRequestBuilder.withUntil(stringToDateTime(params.getString("until")));
                    }
                    if (params.has("disableGeojson") && (params.getString("disableGeojson") != null) && (!params.getString("disableGeojson").isEmpty()) ) {
                        // Param: disableGeojson, Type: Boolean
                        datasetsRequestBuilder.withDisableGeojson(booleanStraightPass(params.getBoolean("disableGeojson")));
                    }
                    if (params.has("disableDisruption") && (params.getString("disableDisruption") != null) && (!params.getString("disableDisruption").isEmpty()) ) {
                        // Param: disableDisruption, Type: Boolean
                        datasetsRequestBuilder.withDisableDisruption(booleanStraightPass(params.getBoolean("disableDisruption")));
                    }
                    if (params.has("tags") && (params.getString("tags") != null) && (!params.getString("tags").isEmpty()) ) {
                        // Param: tags, Type: List
                        datasetsRequestBuilder.withTags(jsonArrayToStringList(params.getJSONArray("tags")));
                    }
                    
                    datasetsRequestBuilder.rawGet(new ApiCallback<String>() {
                        @Override
                        public void onFailure(ApiException e, int statusCode, Map<String, List<String>> responseHeaders) {
                            callbackContext.error("Problem during request call | " + e.getMessage());
                        }

                        @Override
                        public void onSuccess(String result, int statusCode, Map<String, List<String>> responseHeaders) {
                            JSONObject jsonObject = null;
                            try {
                                jsonObject = new JSONObject(result);
                                callbackContext.success(jsonObject);
                            } catch (Exception e) {
                                String errorMessage = "Problem during response parsing | " + String.valueOf(e.hashCode()) + ": " + e.getMessage();
                                callbackContext.error(errorMessage);
                            }
                        }

                        @Override
                        public void onUploadProgress(long bytesWritten, long contentLength, boolean done) {
                        }

                        @Override
                        public void onDownloadProgress(long bytesRead, long contentLength, boolean done) {
                        }
                    });
                } catch (Exception e) {
                    String errorMessage = "Problem during request building | " + String.valueOf(e.hashCode()) + ": " + e.getMessage();
                    callbackContext.error(errorMessage);
                }
            }
        });
    }
    final private void coverageRegionUriDatasets(final JSONObject params, final CallbackContext callbackContext) {
        if (this.navitiaSdk == null) {
            callbackContext.error("NavitiaSDK is not instanciated");
            return;
        }

        final DatasetsApi.CoverageRegionUriDatasetsRequestBuilder datasetsRequestBuilder = this.navitiaSdk.datasetsApi.newCoverageRegionUriDatasetsRequestBuilder();
        cordova.getThreadPool().execute(new Runnable() {
            @Override
            public void run() {
                try {
                    if (params.has("region") && (params.getString("region") != null) && (!params.getString("region").isEmpty()) ) {
                        // Param: region, Type: String
                        datasetsRequestBuilder.withRegion(stringStraightPass(params.getString("region")));
                    }
                    if (params.has("uri") && (params.getString("uri") != null) && (!params.getString("uri").isEmpty()) ) {
                        // Param: uri, Type: String
                        datasetsRequestBuilder.withUri(stringStraightPass(params.getString("uri")));
                    }
                    if (params.has("startPage") && (params.getString("startPage") != null) && (!params.getString("startPage").isEmpty()) ) {
                        // Param: startPage, Type: Integer
                        datasetsRequestBuilder.withStartPage(integerStraightPass(params.getInt("startPage")));
                    }
                    if (params.has("count") && (params.getString("count") != null) && (!params.getString("count").isEmpty()) ) {
                        // Param: count, Type: Integer
                        datasetsRequestBuilder.withCount(integerStraightPass(params.getInt("count")));
                    }
                    if (params.has("depth") && (params.getString("depth") != null) && (!params.getString("depth").isEmpty()) ) {
                        // Param: depth, Type: Integer
                        datasetsRequestBuilder.withDepth(integerStraightPass(params.getInt("depth")));
                    }
                    if (params.has("forbiddenId") && (params.getString("forbiddenId") != null) && (!params.getString("forbiddenId").isEmpty()) ) {
                        // Param: forbiddenId, Type: List
                        datasetsRequestBuilder.withForbiddenId(jsonArrayToStringList(params.getJSONArray("forbiddenId")));
                    }
                    if (params.has("forbiddenUris") && (params.getString("forbiddenUris") != null) && (!params.getString("forbiddenUris").isEmpty()) ) {
                        // Param: forbiddenUris, Type: List
                        datasetsRequestBuilder.withForbiddenUris(jsonArrayToStringList(params.getJSONArray("forbiddenUris")));
                    }
                    if (params.has("externalCode") && (params.getString("externalCode") != null) && (!params.getString("externalCode").isEmpty()) ) {
                        // Param: externalCode, Type: String
                        datasetsRequestBuilder.withExternalCode(stringStraightPass(params.getString("externalCode")));
                    }
                    if (params.has("headsign") && (params.getString("headsign") != null) && (!params.getString("headsign").isEmpty()) ) {
                        // Param: headsign, Type: String
                        datasetsRequestBuilder.withHeadsign(stringStraightPass(params.getString("headsign")));
                    }
                    if (params.has("showCodes") && (params.getString("showCodes") != null) && (!params.getString("showCodes").isEmpty()) ) {
                        // Param: showCodes, Type: Boolean
                        datasetsRequestBuilder.withShowCodes(booleanStraightPass(params.getBoolean("showCodes")));
                    }
                    if (params.has("odtLevel") && (params.getString("odtLevel") != null) && (!params.getString("odtLevel").isEmpty()) ) {
                        // Param: odtLevel, Type: String
                        datasetsRequestBuilder.withOdtLevel(stringStraightPass(params.getString("odtLevel")));
                    }
                    if (params.has("dataFreshness") && (params.getString("dataFreshness") != null) && (!params.getString("dataFreshness").isEmpty()) ) {
                        // Param: dataFreshness, Type: String
                        datasetsRequestBuilder.withDataFreshness(stringStraightPass(params.getString("dataFreshness")));
                    }
                    if (params.has("distance") && (params.getString("distance") != null) && (!params.getString("distance").isEmpty()) ) {
                        // Param: distance, Type: Integer
                        datasetsRequestBuilder.withDistance(integerStraightPass(params.getInt("distance")));
                    }
                    if (params.has("since") && (params.getString("since") != null) && (!params.getString("since").isEmpty()) ) {
                        // Param: since, Type: Date
                        datasetsRequestBuilder.withSince(stringToDateTime(params.getString("since")));
                    }
                    if (params.has("until") && (params.getString("until") != null) && (!params.getString("until").isEmpty()) ) {
                        // Param: until, Type: Date
                        datasetsRequestBuilder.withUntil(stringToDateTime(params.getString("until")));
                    }
                    if (params.has("disableGeojson") && (params.getString("disableGeojson") != null) && (!params.getString("disableGeojson").isEmpty()) ) {
                        // Param: disableGeojson, Type: Boolean
                        datasetsRequestBuilder.withDisableGeojson(booleanStraightPass(params.getBoolean("disableGeojson")));
                    }
                    if (params.has("disableDisruption") && (params.getString("disableDisruption") != null) && (!params.getString("disableDisruption").isEmpty()) ) {
                        // Param: disableDisruption, Type: Boolean
                        datasetsRequestBuilder.withDisableDisruption(booleanStraightPass(params.getBoolean("disableDisruption")));
                    }
                    if (params.has("filter") && (params.getString("filter") != null) && (!params.getString("filter").isEmpty()) ) {
                        // Param: filter, Type: String
                        datasetsRequestBuilder.withFilter(stringStraightPass(params.getString("filter")));
                    }
                    if (params.has("tags") && (params.getString("tags") != null) && (!params.getString("tags").isEmpty()) ) {
                        // Param: tags, Type: List
                        datasetsRequestBuilder.withTags(jsonArrayToStringList(params.getJSONArray("tags")));
                    }
                    
                    datasetsRequestBuilder.rawGet(new ApiCallback<String>() {
                        @Override
                        public void onFailure(ApiException e, int statusCode, Map<String, List<String>> responseHeaders) {
                            callbackContext.error("Problem during request call | " + e.getMessage());
                        }

                        @Override
                        public void onSuccess(String result, int statusCode, Map<String, List<String>> responseHeaders) {
                            JSONObject jsonObject = null;
                            try {
                                jsonObject = new JSONObject(result);
                                callbackContext.success(jsonObject);
                            } catch (Exception e) {
                                String errorMessage = "Problem during response parsing | " + String.valueOf(e.hashCode()) + ": " + e.getMessage();
                                callbackContext.error(errorMessage);
                            }
                        }

                        @Override
                        public void onUploadProgress(long bytesWritten, long contentLength, boolean done) {
                        }

                        @Override
                        public void onDownloadProgress(long bytesRead, long contentLength, boolean done) {
                        }
                    });
                } catch (Exception e) {
                    String errorMessage = "Problem during request building | " + String.valueOf(e.hashCode()) + ": " + e.getMessage();
                    callbackContext.error(errorMessage);
                }
            }
        });
    }
    final private void coverageRegionUriDatasetsId(final JSONObject params, final CallbackContext callbackContext) {
        if (this.navitiaSdk == null) {
            callbackContext.error("NavitiaSDK is not instanciated");
            return;
        }

        final DatasetsApi.CoverageRegionUriDatasetsIdRequestBuilder datasetsRequestBuilder = this.navitiaSdk.datasetsApi.newCoverageRegionUriDatasetsIdRequestBuilder();
        cordova.getThreadPool().execute(new Runnable() {
            @Override
            public void run() {
                try {
                    if (params.has("region") && (params.getString("region") != null) && (!params.getString("region").isEmpty()) ) {
                        // Param: region, Type: String
                        datasetsRequestBuilder.withRegion(stringStraightPass(params.getString("region")));
                    }
                    if (params.has("uri") && (params.getString("uri") != null) && (!params.getString("uri").isEmpty()) ) {
                        // Param: uri, Type: String
                        datasetsRequestBuilder.withUri(stringStraightPass(params.getString("uri")));
                    }
                    if (params.has("id") && (params.getString("id") != null) && (!params.getString("id").isEmpty()) ) {
                        // Param: id, Type: String
                        datasetsRequestBuilder.withId(stringStraightPass(params.getString("id")));
                    }
                    if (params.has("startPage") && (params.getString("startPage") != null) && (!params.getString("startPage").isEmpty()) ) {
                        // Param: startPage, Type: Integer
                        datasetsRequestBuilder.withStartPage(integerStraightPass(params.getInt("startPage")));
                    }
                    if (params.has("count") && (params.getString("count") != null) && (!params.getString("count").isEmpty()) ) {
                        // Param: count, Type: Integer
                        datasetsRequestBuilder.withCount(integerStraightPass(params.getInt("count")));
                    }
                    if (params.has("depth") && (params.getString("depth") != null) && (!params.getString("depth").isEmpty()) ) {
                        // Param: depth, Type: Integer
                        datasetsRequestBuilder.withDepth(integerStraightPass(params.getInt("depth")));
                    }
                    if (params.has("forbiddenId") && (params.getString("forbiddenId") != null) && (!params.getString("forbiddenId").isEmpty()) ) {
                        // Param: forbiddenId, Type: List
                        datasetsRequestBuilder.withForbiddenId(jsonArrayToStringList(params.getJSONArray("forbiddenId")));
                    }
                    if (params.has("forbiddenUris") && (params.getString("forbiddenUris") != null) && (!params.getString("forbiddenUris").isEmpty()) ) {
                        // Param: forbiddenUris, Type: List
                        datasetsRequestBuilder.withForbiddenUris(jsonArrayToStringList(params.getJSONArray("forbiddenUris")));
                    }
                    if (params.has("externalCode") && (params.getString("externalCode") != null) && (!params.getString("externalCode").isEmpty()) ) {
                        // Param: externalCode, Type: String
                        datasetsRequestBuilder.withExternalCode(stringStraightPass(params.getString("externalCode")));
                    }
                    if (params.has("headsign") && (params.getString("headsign") != null) && (!params.getString("headsign").isEmpty()) ) {
                        // Param: headsign, Type: String
                        datasetsRequestBuilder.withHeadsign(stringStraightPass(params.getString("headsign")));
                    }
                    if (params.has("showCodes") && (params.getString("showCodes") != null) && (!params.getString("showCodes").isEmpty()) ) {
                        // Param: showCodes, Type: Boolean
                        datasetsRequestBuilder.withShowCodes(booleanStraightPass(params.getBoolean("showCodes")));
                    }
                    if (params.has("odtLevel") && (params.getString("odtLevel") != null) && (!params.getString("odtLevel").isEmpty()) ) {
                        // Param: odtLevel, Type: String
                        datasetsRequestBuilder.withOdtLevel(stringStraightPass(params.getString("odtLevel")));
                    }
                    if (params.has("dataFreshness") && (params.getString("dataFreshness") != null) && (!params.getString("dataFreshness").isEmpty()) ) {
                        // Param: dataFreshness, Type: String
                        datasetsRequestBuilder.withDataFreshness(stringStraightPass(params.getString("dataFreshness")));
                    }
                    if (params.has("distance") && (params.getString("distance") != null) && (!params.getString("distance").isEmpty()) ) {
                        // Param: distance, Type: Integer
                        datasetsRequestBuilder.withDistance(integerStraightPass(params.getInt("distance")));
                    }
                    if (params.has("since") && (params.getString("since") != null) && (!params.getString("since").isEmpty()) ) {
                        // Param: since, Type: Date
                        datasetsRequestBuilder.withSince(stringToDateTime(params.getString("since")));
                    }
                    if (params.has("until") && (params.getString("until") != null) && (!params.getString("until").isEmpty()) ) {
                        // Param: until, Type: Date
                        datasetsRequestBuilder.withUntil(stringToDateTime(params.getString("until")));
                    }
                    if (params.has("disableGeojson") && (params.getString("disableGeojson") != null) && (!params.getString("disableGeojson").isEmpty()) ) {
                        // Param: disableGeojson, Type: Boolean
                        datasetsRequestBuilder.withDisableGeojson(booleanStraightPass(params.getBoolean("disableGeojson")));
                    }
                    if (params.has("disableDisruption") && (params.getString("disableDisruption") != null) && (!params.getString("disableDisruption").isEmpty()) ) {
                        // Param: disableDisruption, Type: Boolean
                        datasetsRequestBuilder.withDisableDisruption(booleanStraightPass(params.getBoolean("disableDisruption")));
                    }
                    if (params.has("tags") && (params.getString("tags") != null) && (!params.getString("tags").isEmpty()) ) {
                        // Param: tags, Type: List
                        datasetsRequestBuilder.withTags(jsonArrayToStringList(params.getJSONArray("tags")));
                    }
                    
                    datasetsRequestBuilder.rawGet(new ApiCallback<String>() {
                        @Override
                        public void onFailure(ApiException e, int statusCode, Map<String, List<String>> responseHeaders) {
                            callbackContext.error("Problem during request call | " + e.getMessage());
                        }

                        @Override
                        public void onSuccess(String result, int statusCode, Map<String, List<String>> responseHeaders) {
                            JSONObject jsonObject = null;
                            try {
                                jsonObject = new JSONObject(result);
                                callbackContext.success(jsonObject);
                            } catch (Exception e) {
                                String errorMessage = "Problem during response parsing | " + String.valueOf(e.hashCode()) + ": " + e.getMessage();
                                callbackContext.error(errorMessage);
                            }
                        }

                        @Override
                        public void onUploadProgress(long bytesWritten, long contentLength, boolean done) {
                        }

                        @Override
                        public void onDownloadProgress(long bytesRead, long contentLength, boolean done) {
                        }
                    });
                } catch (Exception e) {
                    String errorMessage = "Problem during request building | " + String.valueOf(e.hashCode()) + ": " + e.getMessage();
                    callbackContext.error(errorMessage);
                }
            }
        });
    }
    final private void coverageLonLatDisruptions(final JSONObject params, final CallbackContext callbackContext) {
        if (this.navitiaSdk == null) {
            callbackContext.error("NavitiaSDK is not instanciated");
            return;
        }

        final DisruptionsApi.CoverageLonLatDisruptionsRequestBuilder disruptionsRequestBuilder = this.navitiaSdk.disruptionsApi.newCoverageLonLatDisruptionsRequestBuilder();
        cordova.getThreadPool().execute(new Runnable() {
            @Override
            public void run() {
                try {
                    if (params.has("lat") && (params.getString("lat") != null) && (!params.getString("lat").isEmpty()) ) {
                        // Param: lat, Type: BigDecimal
                        disruptionsRequestBuilder.withLat(longToBigDecimal(params.getLong("lat")));
                    }
                    if (params.has("lon") && (params.getString("lon") != null) && (!params.getString("lon").isEmpty()) ) {
                        // Param: lon, Type: BigDecimal
                        disruptionsRequestBuilder.withLon(longToBigDecimal(params.getLong("lon")));
                    }
                    if (params.has("startPage") && (params.getString("startPage") != null) && (!params.getString("startPage").isEmpty()) ) {
                        // Param: startPage, Type: Integer
                        disruptionsRequestBuilder.withStartPage(integerStraightPass(params.getInt("startPage")));
                    }
                    if (params.has("count") && (params.getString("count") != null) && (!params.getString("count").isEmpty()) ) {
                        // Param: count, Type: Integer
                        disruptionsRequestBuilder.withCount(integerStraightPass(params.getInt("count")));
                    }
                    if (params.has("depth") && (params.getString("depth") != null) && (!params.getString("depth").isEmpty()) ) {
                        // Param: depth, Type: Integer
                        disruptionsRequestBuilder.withDepth(integerStraightPass(params.getInt("depth")));
                    }
                    if (params.has("forbiddenId") && (params.getString("forbiddenId") != null) && (!params.getString("forbiddenId").isEmpty()) ) {
                        // Param: forbiddenId, Type: List
                        disruptionsRequestBuilder.withForbiddenId(jsonArrayToStringList(params.getJSONArray("forbiddenId")));
                    }
                    if (params.has("forbiddenUris") && (params.getString("forbiddenUris") != null) && (!params.getString("forbiddenUris").isEmpty()) ) {
                        // Param: forbiddenUris, Type: List
                        disruptionsRequestBuilder.withForbiddenUris(jsonArrayToStringList(params.getJSONArray("forbiddenUris")));
                    }
                    if (params.has("externalCode") && (params.getString("externalCode") != null) && (!params.getString("externalCode").isEmpty()) ) {
                        // Param: externalCode, Type: String
                        disruptionsRequestBuilder.withExternalCode(stringStraightPass(params.getString("externalCode")));
                    }
                    if (params.has("headsign") && (params.getString("headsign") != null) && (!params.getString("headsign").isEmpty()) ) {
                        // Param: headsign, Type: String
                        disruptionsRequestBuilder.withHeadsign(stringStraightPass(params.getString("headsign")));
                    }
                    if (params.has("showCodes") && (params.getString("showCodes") != null) && (!params.getString("showCodes").isEmpty()) ) {
                        // Param: showCodes, Type: Boolean
                        disruptionsRequestBuilder.withShowCodes(booleanStraightPass(params.getBoolean("showCodes")));
                    }
                    if (params.has("odtLevel") && (params.getString("odtLevel") != null) && (!params.getString("odtLevel").isEmpty()) ) {
                        // Param: odtLevel, Type: String
                        disruptionsRequestBuilder.withOdtLevel(stringStraightPass(params.getString("odtLevel")));
                    }
                    if (params.has("dataFreshness") && (params.getString("dataFreshness") != null) && (!params.getString("dataFreshness").isEmpty()) ) {
                        // Param: dataFreshness, Type: String
                        disruptionsRequestBuilder.withDataFreshness(stringStraightPass(params.getString("dataFreshness")));
                    }
                    if (params.has("distance") && (params.getString("distance") != null) && (!params.getString("distance").isEmpty()) ) {
                        // Param: distance, Type: Integer
                        disruptionsRequestBuilder.withDistance(integerStraightPass(params.getInt("distance")));
                    }
                    if (params.has("since") && (params.getString("since") != null) && (!params.getString("since").isEmpty()) ) {
                        // Param: since, Type: Date
                        disruptionsRequestBuilder.withSince(stringToDateTime(params.getString("since")));
                    }
                    if (params.has("until") && (params.getString("until") != null) && (!params.getString("until").isEmpty()) ) {
                        // Param: until, Type: Date
                        disruptionsRequestBuilder.withUntil(stringToDateTime(params.getString("until")));
                    }
                    if (params.has("disableGeojson") && (params.getString("disableGeojson") != null) && (!params.getString("disableGeojson").isEmpty()) ) {
                        // Param: disableGeojson, Type: Boolean
                        disruptionsRequestBuilder.withDisableGeojson(booleanStraightPass(params.getBoolean("disableGeojson")));
                    }
                    if (params.has("disableDisruption") && (params.getString("disableDisruption") != null) && (!params.getString("disableDisruption").isEmpty()) ) {
                        // Param: disableDisruption, Type: Boolean
                        disruptionsRequestBuilder.withDisableDisruption(booleanStraightPass(params.getBoolean("disableDisruption")));
                    }
                    if (params.has("filter") && (params.getString("filter") != null) && (!params.getString("filter").isEmpty()) ) {
                        // Param: filter, Type: String
                        disruptionsRequestBuilder.withFilter(stringStraightPass(params.getString("filter")));
                    }
                    if (params.has("tags") && (params.getString("tags") != null) && (!params.getString("tags").isEmpty()) ) {
                        // Param: tags, Type: List
                        disruptionsRequestBuilder.withTags(jsonArrayToStringList(params.getJSONArray("tags")));
                    }
                    if (params.has("originalId") && (params.getString("originalId") != null) && (!params.getString("originalId").isEmpty()) ) {
                        // Param: originalId, Type: String
                        disruptionsRequestBuilder.withOriginalId(stringStraightPass(params.getString("originalId")));
                    }
                    
                    disruptionsRequestBuilder.rawGet(new ApiCallback<String>() {
                        @Override
                        public void onFailure(ApiException e, int statusCode, Map<String, List<String>> responseHeaders) {
                            callbackContext.error("Problem during request call | " + e.getMessage());
                        }

                        @Override
                        public void onSuccess(String result, int statusCode, Map<String, List<String>> responseHeaders) {
                            JSONObject jsonObject = null;
                            try {
                                jsonObject = new JSONObject(result);
                                callbackContext.success(jsonObject);
                            } catch (Exception e) {
                                String errorMessage = "Problem during response parsing | " + String.valueOf(e.hashCode()) + ": " + e.getMessage();
                                callbackContext.error(errorMessage);
                            }
                        }

                        @Override
                        public void onUploadProgress(long bytesWritten, long contentLength, boolean done) {
                        }

                        @Override
                        public void onDownloadProgress(long bytesRead, long contentLength, boolean done) {
                        }
                    });
                } catch (Exception e) {
                    String errorMessage = "Problem during request building | " + String.valueOf(e.hashCode()) + ": " + e.getMessage();
                    callbackContext.error(errorMessage);
                }
            }
        });
    }
    final private void coverageLonLatDisruptionsId(final JSONObject params, final CallbackContext callbackContext) {
        if (this.navitiaSdk == null) {
            callbackContext.error("NavitiaSDK is not instanciated");
            return;
        }

        final DisruptionsApi.CoverageLonLatDisruptionsIdRequestBuilder disruptionsRequestBuilder = this.navitiaSdk.disruptionsApi.newCoverageLonLatDisruptionsIdRequestBuilder();
        cordova.getThreadPool().execute(new Runnable() {
            @Override
            public void run() {
                try {
                    if (params.has("lat") && (params.getString("lat") != null) && (!params.getString("lat").isEmpty()) ) {
                        // Param: lat, Type: BigDecimal
                        disruptionsRequestBuilder.withLat(longToBigDecimal(params.getLong("lat")));
                    }
                    if (params.has("lon") && (params.getString("lon") != null) && (!params.getString("lon").isEmpty()) ) {
                        // Param: lon, Type: BigDecimal
                        disruptionsRequestBuilder.withLon(longToBigDecimal(params.getLong("lon")));
                    }
                    if (params.has("id") && (params.getString("id") != null) && (!params.getString("id").isEmpty()) ) {
                        // Param: id, Type: String
                        disruptionsRequestBuilder.withId(stringStraightPass(params.getString("id")));
                    }
                    if (params.has("startPage") && (params.getString("startPage") != null) && (!params.getString("startPage").isEmpty()) ) {
                        // Param: startPage, Type: Integer
                        disruptionsRequestBuilder.withStartPage(integerStraightPass(params.getInt("startPage")));
                    }
                    if (params.has("count") && (params.getString("count") != null) && (!params.getString("count").isEmpty()) ) {
                        // Param: count, Type: Integer
                        disruptionsRequestBuilder.withCount(integerStraightPass(params.getInt("count")));
                    }
                    if (params.has("depth") && (params.getString("depth") != null) && (!params.getString("depth").isEmpty()) ) {
                        // Param: depth, Type: Integer
                        disruptionsRequestBuilder.withDepth(integerStraightPass(params.getInt("depth")));
                    }
                    if (params.has("forbiddenId") && (params.getString("forbiddenId") != null) && (!params.getString("forbiddenId").isEmpty()) ) {
                        // Param: forbiddenId, Type: List
                        disruptionsRequestBuilder.withForbiddenId(jsonArrayToStringList(params.getJSONArray("forbiddenId")));
                    }
                    if (params.has("forbiddenUris") && (params.getString("forbiddenUris") != null) && (!params.getString("forbiddenUris").isEmpty()) ) {
                        // Param: forbiddenUris, Type: List
                        disruptionsRequestBuilder.withForbiddenUris(jsonArrayToStringList(params.getJSONArray("forbiddenUris")));
                    }
                    if (params.has("externalCode") && (params.getString("externalCode") != null) && (!params.getString("externalCode").isEmpty()) ) {
                        // Param: externalCode, Type: String
                        disruptionsRequestBuilder.withExternalCode(stringStraightPass(params.getString("externalCode")));
                    }
                    if (params.has("headsign") && (params.getString("headsign") != null) && (!params.getString("headsign").isEmpty()) ) {
                        // Param: headsign, Type: String
                        disruptionsRequestBuilder.withHeadsign(stringStraightPass(params.getString("headsign")));
                    }
                    if (params.has("showCodes") && (params.getString("showCodes") != null) && (!params.getString("showCodes").isEmpty()) ) {
                        // Param: showCodes, Type: Boolean
                        disruptionsRequestBuilder.withShowCodes(booleanStraightPass(params.getBoolean("showCodes")));
                    }
                    if (params.has("odtLevel") && (params.getString("odtLevel") != null) && (!params.getString("odtLevel").isEmpty()) ) {
                        // Param: odtLevel, Type: String
                        disruptionsRequestBuilder.withOdtLevel(stringStraightPass(params.getString("odtLevel")));
                    }
                    if (params.has("dataFreshness") && (params.getString("dataFreshness") != null) && (!params.getString("dataFreshness").isEmpty()) ) {
                        // Param: dataFreshness, Type: String
                        disruptionsRequestBuilder.withDataFreshness(stringStraightPass(params.getString("dataFreshness")));
                    }
                    if (params.has("distance") && (params.getString("distance") != null) && (!params.getString("distance").isEmpty()) ) {
                        // Param: distance, Type: Integer
                        disruptionsRequestBuilder.withDistance(integerStraightPass(params.getInt("distance")));
                    }
                    if (params.has("since") && (params.getString("since") != null) && (!params.getString("since").isEmpty()) ) {
                        // Param: since, Type: Date
                        disruptionsRequestBuilder.withSince(stringToDateTime(params.getString("since")));
                    }
                    if (params.has("until") && (params.getString("until") != null) && (!params.getString("until").isEmpty()) ) {
                        // Param: until, Type: Date
                        disruptionsRequestBuilder.withUntil(stringToDateTime(params.getString("until")));
                    }
                    if (params.has("disableGeojson") && (params.getString("disableGeojson") != null) && (!params.getString("disableGeojson").isEmpty()) ) {
                        // Param: disableGeojson, Type: Boolean
                        disruptionsRequestBuilder.withDisableGeojson(booleanStraightPass(params.getBoolean("disableGeojson")));
                    }
                    if (params.has("disableDisruption") && (params.getString("disableDisruption") != null) && (!params.getString("disableDisruption").isEmpty()) ) {
                        // Param: disableDisruption, Type: Boolean
                        disruptionsRequestBuilder.withDisableDisruption(booleanStraightPass(params.getBoolean("disableDisruption")));
                    }
                    if (params.has("tags") && (params.getString("tags") != null) && (!params.getString("tags").isEmpty()) ) {
                        // Param: tags, Type: List
                        disruptionsRequestBuilder.withTags(jsonArrayToStringList(params.getJSONArray("tags")));
                    }
                    if (params.has("originalId") && (params.getString("originalId") != null) && (!params.getString("originalId").isEmpty()) ) {
                        // Param: originalId, Type: String
                        disruptionsRequestBuilder.withOriginalId(stringStraightPass(params.getString("originalId")));
                    }
                    
                    disruptionsRequestBuilder.rawGet(new ApiCallback<String>() {
                        @Override
                        public void onFailure(ApiException e, int statusCode, Map<String, List<String>> responseHeaders) {
                            callbackContext.error("Problem during request call | " + e.getMessage());
                        }

                        @Override
                        public void onSuccess(String result, int statusCode, Map<String, List<String>> responseHeaders) {
                            JSONObject jsonObject = null;
                            try {
                                jsonObject = new JSONObject(result);
                                callbackContext.success(jsonObject);
                            } catch (Exception e) {
                                String errorMessage = "Problem during response parsing | " + String.valueOf(e.hashCode()) + ": " + e.getMessage();
                                callbackContext.error(errorMessage);
                            }
                        }

                        @Override
                        public void onUploadProgress(long bytesWritten, long contentLength, boolean done) {
                        }

                        @Override
                        public void onDownloadProgress(long bytesRead, long contentLength, boolean done) {
                        }
                    });
                } catch (Exception e) {
                    String errorMessage = "Problem during request building | " + String.valueOf(e.hashCode()) + ": " + e.getMessage();
                    callbackContext.error(errorMessage);
                }
            }
        });
    }
    final private void coverageLonLatUriDisruptions(final JSONObject params, final CallbackContext callbackContext) {
        if (this.navitiaSdk == null) {
            callbackContext.error("NavitiaSDK is not instanciated");
            return;
        }

        final DisruptionsApi.CoverageLonLatUriDisruptionsRequestBuilder disruptionsRequestBuilder = this.navitiaSdk.disruptionsApi.newCoverageLonLatUriDisruptionsRequestBuilder();
        cordova.getThreadPool().execute(new Runnable() {
            @Override
            public void run() {
                try {
                    if (params.has("lat") && (params.getString("lat") != null) && (!params.getString("lat").isEmpty()) ) {
                        // Param: lat, Type: BigDecimal
                        disruptionsRequestBuilder.withLat(longToBigDecimal(params.getLong("lat")));
                    }
                    if (params.has("lon") && (params.getString("lon") != null) && (!params.getString("lon").isEmpty()) ) {
                        // Param: lon, Type: BigDecimal
                        disruptionsRequestBuilder.withLon(longToBigDecimal(params.getLong("lon")));
                    }
                    if (params.has("uri") && (params.getString("uri") != null) && (!params.getString("uri").isEmpty()) ) {
                        // Param: uri, Type: String
                        disruptionsRequestBuilder.withUri(stringStraightPass(params.getString("uri")));
                    }
                    if (params.has("startPage") && (params.getString("startPage") != null) && (!params.getString("startPage").isEmpty()) ) {
                        // Param: startPage, Type: Integer
                        disruptionsRequestBuilder.withStartPage(integerStraightPass(params.getInt("startPage")));
                    }
                    if (params.has("count") && (params.getString("count") != null) && (!params.getString("count").isEmpty()) ) {
                        // Param: count, Type: Integer
                        disruptionsRequestBuilder.withCount(integerStraightPass(params.getInt("count")));
                    }
                    if (params.has("depth") && (params.getString("depth") != null) && (!params.getString("depth").isEmpty()) ) {
                        // Param: depth, Type: Integer
                        disruptionsRequestBuilder.withDepth(integerStraightPass(params.getInt("depth")));
                    }
                    if (params.has("forbiddenId") && (params.getString("forbiddenId") != null) && (!params.getString("forbiddenId").isEmpty()) ) {
                        // Param: forbiddenId, Type: List
                        disruptionsRequestBuilder.withForbiddenId(jsonArrayToStringList(params.getJSONArray("forbiddenId")));
                    }
                    if (params.has("forbiddenUris") && (params.getString("forbiddenUris") != null) && (!params.getString("forbiddenUris").isEmpty()) ) {
                        // Param: forbiddenUris, Type: List
                        disruptionsRequestBuilder.withForbiddenUris(jsonArrayToStringList(params.getJSONArray("forbiddenUris")));
                    }
                    if (params.has("externalCode") && (params.getString("externalCode") != null) && (!params.getString("externalCode").isEmpty()) ) {
                        // Param: externalCode, Type: String
                        disruptionsRequestBuilder.withExternalCode(stringStraightPass(params.getString("externalCode")));
                    }
                    if (params.has("headsign") && (params.getString("headsign") != null) && (!params.getString("headsign").isEmpty()) ) {
                        // Param: headsign, Type: String
                        disruptionsRequestBuilder.withHeadsign(stringStraightPass(params.getString("headsign")));
                    }
                    if (params.has("showCodes") && (params.getString("showCodes") != null) && (!params.getString("showCodes").isEmpty()) ) {
                        // Param: showCodes, Type: Boolean
                        disruptionsRequestBuilder.withShowCodes(booleanStraightPass(params.getBoolean("showCodes")));
                    }
                    if (params.has("odtLevel") && (params.getString("odtLevel") != null) && (!params.getString("odtLevel").isEmpty()) ) {
                        // Param: odtLevel, Type: String
                        disruptionsRequestBuilder.withOdtLevel(stringStraightPass(params.getString("odtLevel")));
                    }
                    if (params.has("dataFreshness") && (params.getString("dataFreshness") != null) && (!params.getString("dataFreshness").isEmpty()) ) {
                        // Param: dataFreshness, Type: String
                        disruptionsRequestBuilder.withDataFreshness(stringStraightPass(params.getString("dataFreshness")));
                    }
                    if (params.has("distance") && (params.getString("distance") != null) && (!params.getString("distance").isEmpty()) ) {
                        // Param: distance, Type: Integer
                        disruptionsRequestBuilder.withDistance(integerStraightPass(params.getInt("distance")));
                    }
                    if (params.has("since") && (params.getString("since") != null) && (!params.getString("since").isEmpty()) ) {
                        // Param: since, Type: Date
                        disruptionsRequestBuilder.withSince(stringToDateTime(params.getString("since")));
                    }
                    if (params.has("until") && (params.getString("until") != null) && (!params.getString("until").isEmpty()) ) {
                        // Param: until, Type: Date
                        disruptionsRequestBuilder.withUntil(stringToDateTime(params.getString("until")));
                    }
                    if (params.has("disableGeojson") && (params.getString("disableGeojson") != null) && (!params.getString("disableGeojson").isEmpty()) ) {
                        // Param: disableGeojson, Type: Boolean
                        disruptionsRequestBuilder.withDisableGeojson(booleanStraightPass(params.getBoolean("disableGeojson")));
                    }
                    if (params.has("disableDisruption") && (params.getString("disableDisruption") != null) && (!params.getString("disableDisruption").isEmpty()) ) {
                        // Param: disableDisruption, Type: Boolean
                        disruptionsRequestBuilder.withDisableDisruption(booleanStraightPass(params.getBoolean("disableDisruption")));
                    }
                    if (params.has("filter") && (params.getString("filter") != null) && (!params.getString("filter").isEmpty()) ) {
                        // Param: filter, Type: String
                        disruptionsRequestBuilder.withFilter(stringStraightPass(params.getString("filter")));
                    }
                    if (params.has("tags") && (params.getString("tags") != null) && (!params.getString("tags").isEmpty()) ) {
                        // Param: tags, Type: List
                        disruptionsRequestBuilder.withTags(jsonArrayToStringList(params.getJSONArray("tags")));
                    }
                    if (params.has("originalId") && (params.getString("originalId") != null) && (!params.getString("originalId").isEmpty()) ) {
                        // Param: originalId, Type: String
                        disruptionsRequestBuilder.withOriginalId(stringStraightPass(params.getString("originalId")));
                    }
                    
                    disruptionsRequestBuilder.rawGet(new ApiCallback<String>() {
                        @Override
                        public void onFailure(ApiException e, int statusCode, Map<String, List<String>> responseHeaders) {
                            callbackContext.error("Problem during request call | " + e.getMessage());
                        }

                        @Override
                        public void onSuccess(String result, int statusCode, Map<String, List<String>> responseHeaders) {
                            JSONObject jsonObject = null;
                            try {
                                jsonObject = new JSONObject(result);
                                callbackContext.success(jsonObject);
                            } catch (Exception e) {
                                String errorMessage = "Problem during response parsing | " + String.valueOf(e.hashCode()) + ": " + e.getMessage();
                                callbackContext.error(errorMessage);
                            }
                        }

                        @Override
                        public void onUploadProgress(long bytesWritten, long contentLength, boolean done) {
                        }

                        @Override
                        public void onDownloadProgress(long bytesRead, long contentLength, boolean done) {
                        }
                    });
                } catch (Exception e) {
                    String errorMessage = "Problem during request building | " + String.valueOf(e.hashCode()) + ": " + e.getMessage();
                    callbackContext.error(errorMessage);
                }
            }
        });
    }
    final private void coverageLonLatUriDisruptionsId(final JSONObject params, final CallbackContext callbackContext) {
        if (this.navitiaSdk == null) {
            callbackContext.error("NavitiaSDK is not instanciated");
            return;
        }

        final DisruptionsApi.CoverageLonLatUriDisruptionsIdRequestBuilder disruptionsRequestBuilder = this.navitiaSdk.disruptionsApi.newCoverageLonLatUriDisruptionsIdRequestBuilder();
        cordova.getThreadPool().execute(new Runnable() {
            @Override
            public void run() {
                try {
                    if (params.has("lat") && (params.getString("lat") != null) && (!params.getString("lat").isEmpty()) ) {
                        // Param: lat, Type: BigDecimal
                        disruptionsRequestBuilder.withLat(longToBigDecimal(params.getLong("lat")));
                    }
                    if (params.has("lon") && (params.getString("lon") != null) && (!params.getString("lon").isEmpty()) ) {
                        // Param: lon, Type: BigDecimal
                        disruptionsRequestBuilder.withLon(longToBigDecimal(params.getLong("lon")));
                    }
                    if (params.has("uri") && (params.getString("uri") != null) && (!params.getString("uri").isEmpty()) ) {
                        // Param: uri, Type: String
                        disruptionsRequestBuilder.withUri(stringStraightPass(params.getString("uri")));
                    }
                    if (params.has("id") && (params.getString("id") != null) && (!params.getString("id").isEmpty()) ) {
                        // Param: id, Type: String
                        disruptionsRequestBuilder.withId(stringStraightPass(params.getString("id")));
                    }
                    if (params.has("startPage") && (params.getString("startPage") != null) && (!params.getString("startPage").isEmpty()) ) {
                        // Param: startPage, Type: Integer
                        disruptionsRequestBuilder.withStartPage(integerStraightPass(params.getInt("startPage")));
                    }
                    if (params.has("count") && (params.getString("count") != null) && (!params.getString("count").isEmpty()) ) {
                        // Param: count, Type: Integer
                        disruptionsRequestBuilder.withCount(integerStraightPass(params.getInt("count")));
                    }
                    if (params.has("depth") && (params.getString("depth") != null) && (!params.getString("depth").isEmpty()) ) {
                        // Param: depth, Type: Integer
                        disruptionsRequestBuilder.withDepth(integerStraightPass(params.getInt("depth")));
                    }
                    if (params.has("forbiddenId") && (params.getString("forbiddenId") != null) && (!params.getString("forbiddenId").isEmpty()) ) {
                        // Param: forbiddenId, Type: List
                        disruptionsRequestBuilder.withForbiddenId(jsonArrayToStringList(params.getJSONArray("forbiddenId")));
                    }
                    if (params.has("forbiddenUris") && (params.getString("forbiddenUris") != null) && (!params.getString("forbiddenUris").isEmpty()) ) {
                        // Param: forbiddenUris, Type: List
                        disruptionsRequestBuilder.withForbiddenUris(jsonArrayToStringList(params.getJSONArray("forbiddenUris")));
                    }
                    if (params.has("externalCode") && (params.getString("externalCode") != null) && (!params.getString("externalCode").isEmpty()) ) {
                        // Param: externalCode, Type: String
                        disruptionsRequestBuilder.withExternalCode(stringStraightPass(params.getString("externalCode")));
                    }
                    if (params.has("headsign") && (params.getString("headsign") != null) && (!params.getString("headsign").isEmpty()) ) {
                        // Param: headsign, Type: String
                        disruptionsRequestBuilder.withHeadsign(stringStraightPass(params.getString("headsign")));
                    }
                    if (params.has("showCodes") && (params.getString("showCodes") != null) && (!params.getString("showCodes").isEmpty()) ) {
                        // Param: showCodes, Type: Boolean
                        disruptionsRequestBuilder.withShowCodes(booleanStraightPass(params.getBoolean("showCodes")));
                    }
                    if (params.has("odtLevel") && (params.getString("odtLevel") != null) && (!params.getString("odtLevel").isEmpty()) ) {
                        // Param: odtLevel, Type: String
                        disruptionsRequestBuilder.withOdtLevel(stringStraightPass(params.getString("odtLevel")));
                    }
                    if (params.has("dataFreshness") && (params.getString("dataFreshness") != null) && (!params.getString("dataFreshness").isEmpty()) ) {
                        // Param: dataFreshness, Type: String
                        disruptionsRequestBuilder.withDataFreshness(stringStraightPass(params.getString("dataFreshness")));
                    }
                    if (params.has("distance") && (params.getString("distance") != null) && (!params.getString("distance").isEmpty()) ) {
                        // Param: distance, Type: Integer
                        disruptionsRequestBuilder.withDistance(integerStraightPass(params.getInt("distance")));
                    }
                    if (params.has("since") && (params.getString("since") != null) && (!params.getString("since").isEmpty()) ) {
                        // Param: since, Type: Date
                        disruptionsRequestBuilder.withSince(stringToDateTime(params.getString("since")));
                    }
                    if (params.has("until") && (params.getString("until") != null) && (!params.getString("until").isEmpty()) ) {
                        // Param: until, Type: Date
                        disruptionsRequestBuilder.withUntil(stringToDateTime(params.getString("until")));
                    }
                    if (params.has("disableGeojson") && (params.getString("disableGeojson") != null) && (!params.getString("disableGeojson").isEmpty()) ) {
                        // Param: disableGeojson, Type: Boolean
                        disruptionsRequestBuilder.withDisableGeojson(booleanStraightPass(params.getBoolean("disableGeojson")));
                    }
                    if (params.has("disableDisruption") && (params.getString("disableDisruption") != null) && (!params.getString("disableDisruption").isEmpty()) ) {
                        // Param: disableDisruption, Type: Boolean
                        disruptionsRequestBuilder.withDisableDisruption(booleanStraightPass(params.getBoolean("disableDisruption")));
                    }
                    if (params.has("tags") && (params.getString("tags") != null) && (!params.getString("tags").isEmpty()) ) {
                        // Param: tags, Type: List
                        disruptionsRequestBuilder.withTags(jsonArrayToStringList(params.getJSONArray("tags")));
                    }
                    if (params.has("originalId") && (params.getString("originalId") != null) && (!params.getString("originalId").isEmpty()) ) {
                        // Param: originalId, Type: String
                        disruptionsRequestBuilder.withOriginalId(stringStraightPass(params.getString("originalId")));
                    }
                    
                    disruptionsRequestBuilder.rawGet(new ApiCallback<String>() {
                        @Override
                        public void onFailure(ApiException e, int statusCode, Map<String, List<String>> responseHeaders) {
                            callbackContext.error("Problem during request call | " + e.getMessage());
                        }

                        @Override
                        public void onSuccess(String result, int statusCode, Map<String, List<String>> responseHeaders) {
                            JSONObject jsonObject = null;
                            try {
                                jsonObject = new JSONObject(result);
                                callbackContext.success(jsonObject);
                            } catch (Exception e) {
                                String errorMessage = "Problem during response parsing | " + String.valueOf(e.hashCode()) + ": " + e.getMessage();
                                callbackContext.error(errorMessage);
                            }
                        }

                        @Override
                        public void onUploadProgress(long bytesWritten, long contentLength, boolean done) {
                        }

                        @Override
                        public void onDownloadProgress(long bytesRead, long contentLength, boolean done) {
                        }
                    });
                } catch (Exception e) {
                    String errorMessage = "Problem during request building | " + String.valueOf(e.hashCode()) + ": " + e.getMessage();
                    callbackContext.error(errorMessage);
                }
            }
        });
    }
    final private void coverageRegionDisruptions(final JSONObject params, final CallbackContext callbackContext) {
        if (this.navitiaSdk == null) {
            callbackContext.error("NavitiaSDK is not instanciated");
            return;
        }

        final DisruptionsApi.CoverageRegionDisruptionsRequestBuilder disruptionsRequestBuilder = this.navitiaSdk.disruptionsApi.newCoverageRegionDisruptionsRequestBuilder();
        cordova.getThreadPool().execute(new Runnable() {
            @Override
            public void run() {
                try {
                    if (params.has("region") && (params.getString("region") != null) && (!params.getString("region").isEmpty()) ) {
                        // Param: region, Type: String
                        disruptionsRequestBuilder.withRegion(stringStraightPass(params.getString("region")));
                    }
                    if (params.has("startPage") && (params.getString("startPage") != null) && (!params.getString("startPage").isEmpty()) ) {
                        // Param: startPage, Type: Integer
                        disruptionsRequestBuilder.withStartPage(integerStraightPass(params.getInt("startPage")));
                    }
                    if (params.has("count") && (params.getString("count") != null) && (!params.getString("count").isEmpty()) ) {
                        // Param: count, Type: Integer
                        disruptionsRequestBuilder.withCount(integerStraightPass(params.getInt("count")));
                    }
                    if (params.has("depth") && (params.getString("depth") != null) && (!params.getString("depth").isEmpty()) ) {
                        // Param: depth, Type: Integer
                        disruptionsRequestBuilder.withDepth(integerStraightPass(params.getInt("depth")));
                    }
                    if (params.has("forbiddenId") && (params.getString("forbiddenId") != null) && (!params.getString("forbiddenId").isEmpty()) ) {
                        // Param: forbiddenId, Type: List
                        disruptionsRequestBuilder.withForbiddenId(jsonArrayToStringList(params.getJSONArray("forbiddenId")));
                    }
                    if (params.has("forbiddenUris") && (params.getString("forbiddenUris") != null) && (!params.getString("forbiddenUris").isEmpty()) ) {
                        // Param: forbiddenUris, Type: List
                        disruptionsRequestBuilder.withForbiddenUris(jsonArrayToStringList(params.getJSONArray("forbiddenUris")));
                    }
                    if (params.has("externalCode") && (params.getString("externalCode") != null) && (!params.getString("externalCode").isEmpty()) ) {
                        // Param: externalCode, Type: String
                        disruptionsRequestBuilder.withExternalCode(stringStraightPass(params.getString("externalCode")));
                    }
                    if (params.has("headsign") && (params.getString("headsign") != null) && (!params.getString("headsign").isEmpty()) ) {
                        // Param: headsign, Type: String
                        disruptionsRequestBuilder.withHeadsign(stringStraightPass(params.getString("headsign")));
                    }
                    if (params.has("showCodes") && (params.getString("showCodes") != null) && (!params.getString("showCodes").isEmpty()) ) {
                        // Param: showCodes, Type: Boolean
                        disruptionsRequestBuilder.withShowCodes(booleanStraightPass(params.getBoolean("showCodes")));
                    }
                    if (params.has("odtLevel") && (params.getString("odtLevel") != null) && (!params.getString("odtLevel").isEmpty()) ) {
                        // Param: odtLevel, Type: String
                        disruptionsRequestBuilder.withOdtLevel(stringStraightPass(params.getString("odtLevel")));
                    }
                    if (params.has("dataFreshness") && (params.getString("dataFreshness") != null) && (!params.getString("dataFreshness").isEmpty()) ) {
                        // Param: dataFreshness, Type: String
                        disruptionsRequestBuilder.withDataFreshness(stringStraightPass(params.getString("dataFreshness")));
                    }
                    if (params.has("distance") && (params.getString("distance") != null) && (!params.getString("distance").isEmpty()) ) {
                        // Param: distance, Type: Integer
                        disruptionsRequestBuilder.withDistance(integerStraightPass(params.getInt("distance")));
                    }
                    if (params.has("since") && (params.getString("since") != null) && (!params.getString("since").isEmpty()) ) {
                        // Param: since, Type: Date
                        disruptionsRequestBuilder.withSince(stringToDateTime(params.getString("since")));
                    }
                    if (params.has("until") && (params.getString("until") != null) && (!params.getString("until").isEmpty()) ) {
                        // Param: until, Type: Date
                        disruptionsRequestBuilder.withUntil(stringToDateTime(params.getString("until")));
                    }
                    if (params.has("disableGeojson") && (params.getString("disableGeojson") != null) && (!params.getString("disableGeojson").isEmpty()) ) {
                        // Param: disableGeojson, Type: Boolean
                        disruptionsRequestBuilder.withDisableGeojson(booleanStraightPass(params.getBoolean("disableGeojson")));
                    }
                    if (params.has("disableDisruption") && (params.getString("disableDisruption") != null) && (!params.getString("disableDisruption").isEmpty()) ) {
                        // Param: disableDisruption, Type: Boolean
                        disruptionsRequestBuilder.withDisableDisruption(booleanStraightPass(params.getBoolean("disableDisruption")));
                    }
                    if (params.has("filter") && (params.getString("filter") != null) && (!params.getString("filter").isEmpty()) ) {
                        // Param: filter, Type: String
                        disruptionsRequestBuilder.withFilter(stringStraightPass(params.getString("filter")));
                    }
                    if (params.has("tags") && (params.getString("tags") != null) && (!params.getString("tags").isEmpty()) ) {
                        // Param: tags, Type: List
                        disruptionsRequestBuilder.withTags(jsonArrayToStringList(params.getJSONArray("tags")));
                    }
                    if (params.has("originalId") && (params.getString("originalId") != null) && (!params.getString("originalId").isEmpty()) ) {
                        // Param: originalId, Type: String
                        disruptionsRequestBuilder.withOriginalId(stringStraightPass(params.getString("originalId")));
                    }
                    
                    disruptionsRequestBuilder.rawGet(new ApiCallback<String>() {
                        @Override
                        public void onFailure(ApiException e, int statusCode, Map<String, List<String>> responseHeaders) {
                            callbackContext.error("Problem during request call | " + e.getMessage());
                        }

                        @Override
                        public void onSuccess(String result, int statusCode, Map<String, List<String>> responseHeaders) {
                            JSONObject jsonObject = null;
                            try {
                                jsonObject = new JSONObject(result);
                                callbackContext.success(jsonObject);
                            } catch (Exception e) {
                                String errorMessage = "Problem during response parsing | " + String.valueOf(e.hashCode()) + ": " + e.getMessage();
                                callbackContext.error(errorMessage);
                            }
                        }

                        @Override
                        public void onUploadProgress(long bytesWritten, long contentLength, boolean done) {
                        }

                        @Override
                        public void onDownloadProgress(long bytesRead, long contentLength, boolean done) {
                        }
                    });
                } catch (Exception e) {
                    String errorMessage = "Problem during request building | " + String.valueOf(e.hashCode()) + ": " + e.getMessage();
                    callbackContext.error(errorMessage);
                }
            }
        });
    }
    final private void coverageRegionDisruptionsId(final JSONObject params, final CallbackContext callbackContext) {
        if (this.navitiaSdk == null) {
            callbackContext.error("NavitiaSDK is not instanciated");
            return;
        }

        final DisruptionsApi.CoverageRegionDisruptionsIdRequestBuilder disruptionsRequestBuilder = this.navitiaSdk.disruptionsApi.newCoverageRegionDisruptionsIdRequestBuilder();
        cordova.getThreadPool().execute(new Runnable() {
            @Override
            public void run() {
                try {
                    if (params.has("region") && (params.getString("region") != null) && (!params.getString("region").isEmpty()) ) {
                        // Param: region, Type: String
                        disruptionsRequestBuilder.withRegion(stringStraightPass(params.getString("region")));
                    }
                    if (params.has("id") && (params.getString("id") != null) && (!params.getString("id").isEmpty()) ) {
                        // Param: id, Type: String
                        disruptionsRequestBuilder.withId(stringStraightPass(params.getString("id")));
                    }
                    if (params.has("startPage") && (params.getString("startPage") != null) && (!params.getString("startPage").isEmpty()) ) {
                        // Param: startPage, Type: Integer
                        disruptionsRequestBuilder.withStartPage(integerStraightPass(params.getInt("startPage")));
                    }
                    if (params.has("count") && (params.getString("count") != null) && (!params.getString("count").isEmpty()) ) {
                        // Param: count, Type: Integer
                        disruptionsRequestBuilder.withCount(integerStraightPass(params.getInt("count")));
                    }
                    if (params.has("depth") && (params.getString("depth") != null) && (!params.getString("depth").isEmpty()) ) {
                        // Param: depth, Type: Integer
                        disruptionsRequestBuilder.withDepth(integerStraightPass(params.getInt("depth")));
                    }
                    if (params.has("forbiddenId") && (params.getString("forbiddenId") != null) && (!params.getString("forbiddenId").isEmpty()) ) {
                        // Param: forbiddenId, Type: List
                        disruptionsRequestBuilder.withForbiddenId(jsonArrayToStringList(params.getJSONArray("forbiddenId")));
                    }
                    if (params.has("forbiddenUris") && (params.getString("forbiddenUris") != null) && (!params.getString("forbiddenUris").isEmpty()) ) {
                        // Param: forbiddenUris, Type: List
                        disruptionsRequestBuilder.withForbiddenUris(jsonArrayToStringList(params.getJSONArray("forbiddenUris")));
                    }
                    if (params.has("externalCode") && (params.getString("externalCode") != null) && (!params.getString("externalCode").isEmpty()) ) {
                        // Param: externalCode, Type: String
                        disruptionsRequestBuilder.withExternalCode(stringStraightPass(params.getString("externalCode")));
                    }
                    if (params.has("headsign") && (params.getString("headsign") != null) && (!params.getString("headsign").isEmpty()) ) {
                        // Param: headsign, Type: String
                        disruptionsRequestBuilder.withHeadsign(stringStraightPass(params.getString("headsign")));
                    }
                    if (params.has("showCodes") && (params.getString("showCodes") != null) && (!params.getString("showCodes").isEmpty()) ) {
                        // Param: showCodes, Type: Boolean
                        disruptionsRequestBuilder.withShowCodes(booleanStraightPass(params.getBoolean("showCodes")));
                    }
                    if (params.has("odtLevel") && (params.getString("odtLevel") != null) && (!params.getString("odtLevel").isEmpty()) ) {
                        // Param: odtLevel, Type: String
                        disruptionsRequestBuilder.withOdtLevel(stringStraightPass(params.getString("odtLevel")));
                    }
                    if (params.has("dataFreshness") && (params.getString("dataFreshness") != null) && (!params.getString("dataFreshness").isEmpty()) ) {
                        // Param: dataFreshness, Type: String
                        disruptionsRequestBuilder.withDataFreshness(stringStraightPass(params.getString("dataFreshness")));
                    }
                    if (params.has("distance") && (params.getString("distance") != null) && (!params.getString("distance").isEmpty()) ) {
                        // Param: distance, Type: Integer
                        disruptionsRequestBuilder.withDistance(integerStraightPass(params.getInt("distance")));
                    }
                    if (params.has("since") && (params.getString("since") != null) && (!params.getString("since").isEmpty()) ) {
                        // Param: since, Type: Date
                        disruptionsRequestBuilder.withSince(stringToDateTime(params.getString("since")));
                    }
                    if (params.has("until") && (params.getString("until") != null) && (!params.getString("until").isEmpty()) ) {
                        // Param: until, Type: Date
                        disruptionsRequestBuilder.withUntil(stringToDateTime(params.getString("until")));
                    }
                    if (params.has("disableGeojson") && (params.getString("disableGeojson") != null) && (!params.getString("disableGeojson").isEmpty()) ) {
                        // Param: disableGeojson, Type: Boolean
                        disruptionsRequestBuilder.withDisableGeojson(booleanStraightPass(params.getBoolean("disableGeojson")));
                    }
                    if (params.has("disableDisruption") && (params.getString("disableDisruption") != null) && (!params.getString("disableDisruption").isEmpty()) ) {
                        // Param: disableDisruption, Type: Boolean
                        disruptionsRequestBuilder.withDisableDisruption(booleanStraightPass(params.getBoolean("disableDisruption")));
                    }
                    if (params.has("tags") && (params.getString("tags") != null) && (!params.getString("tags").isEmpty()) ) {
                        // Param: tags, Type: List
                        disruptionsRequestBuilder.withTags(jsonArrayToStringList(params.getJSONArray("tags")));
                    }
                    if (params.has("originalId") && (params.getString("originalId") != null) && (!params.getString("originalId").isEmpty()) ) {
                        // Param: originalId, Type: String
                        disruptionsRequestBuilder.withOriginalId(stringStraightPass(params.getString("originalId")));
                    }
                    
                    disruptionsRequestBuilder.rawGet(new ApiCallback<String>() {
                        @Override
                        public void onFailure(ApiException e, int statusCode, Map<String, List<String>> responseHeaders) {
                            callbackContext.error("Problem during request call | " + e.getMessage());
                        }

                        @Override
                        public void onSuccess(String result, int statusCode, Map<String, List<String>> responseHeaders) {
                            JSONObject jsonObject = null;
                            try {
                                jsonObject = new JSONObject(result);
                                callbackContext.success(jsonObject);
                            } catch (Exception e) {
                                String errorMessage = "Problem during response parsing | " + String.valueOf(e.hashCode()) + ": " + e.getMessage();
                                callbackContext.error(errorMessage);
                            }
                        }

                        @Override
                        public void onUploadProgress(long bytesWritten, long contentLength, boolean done) {
                        }

                        @Override
                        public void onDownloadProgress(long bytesRead, long contentLength, boolean done) {
                        }
                    });
                } catch (Exception e) {
                    String errorMessage = "Problem during request building | " + String.valueOf(e.hashCode()) + ": " + e.getMessage();
                    callbackContext.error(errorMessage);
                }
            }
        });
    }
    final private void coverageRegionUriDisruptions(final JSONObject params, final CallbackContext callbackContext) {
        if (this.navitiaSdk == null) {
            callbackContext.error("NavitiaSDK is not instanciated");
            return;
        }

        final DisruptionsApi.CoverageRegionUriDisruptionsRequestBuilder disruptionsRequestBuilder = this.navitiaSdk.disruptionsApi.newCoverageRegionUriDisruptionsRequestBuilder();
        cordova.getThreadPool().execute(new Runnable() {
            @Override
            public void run() {
                try {
                    if (params.has("region") && (params.getString("region") != null) && (!params.getString("region").isEmpty()) ) {
                        // Param: region, Type: String
                        disruptionsRequestBuilder.withRegion(stringStraightPass(params.getString("region")));
                    }
                    if (params.has("uri") && (params.getString("uri") != null) && (!params.getString("uri").isEmpty()) ) {
                        // Param: uri, Type: String
                        disruptionsRequestBuilder.withUri(stringStraightPass(params.getString("uri")));
                    }
                    if (params.has("startPage") && (params.getString("startPage") != null) && (!params.getString("startPage").isEmpty()) ) {
                        // Param: startPage, Type: Integer
                        disruptionsRequestBuilder.withStartPage(integerStraightPass(params.getInt("startPage")));
                    }
                    if (params.has("count") && (params.getString("count") != null) && (!params.getString("count").isEmpty()) ) {
                        // Param: count, Type: Integer
                        disruptionsRequestBuilder.withCount(integerStraightPass(params.getInt("count")));
                    }
                    if (params.has("depth") && (params.getString("depth") != null) && (!params.getString("depth").isEmpty()) ) {
                        // Param: depth, Type: Integer
                        disruptionsRequestBuilder.withDepth(integerStraightPass(params.getInt("depth")));
                    }
                    if (params.has("forbiddenId") && (params.getString("forbiddenId") != null) && (!params.getString("forbiddenId").isEmpty()) ) {
                        // Param: forbiddenId, Type: List
                        disruptionsRequestBuilder.withForbiddenId(jsonArrayToStringList(params.getJSONArray("forbiddenId")));
                    }
                    if (params.has("forbiddenUris") && (params.getString("forbiddenUris") != null) && (!params.getString("forbiddenUris").isEmpty()) ) {
                        // Param: forbiddenUris, Type: List
                        disruptionsRequestBuilder.withForbiddenUris(jsonArrayToStringList(params.getJSONArray("forbiddenUris")));
                    }
                    if (params.has("externalCode") && (params.getString("externalCode") != null) && (!params.getString("externalCode").isEmpty()) ) {
                        // Param: externalCode, Type: String
                        disruptionsRequestBuilder.withExternalCode(stringStraightPass(params.getString("externalCode")));
                    }
                    if (params.has("headsign") && (params.getString("headsign") != null) && (!params.getString("headsign").isEmpty()) ) {
                        // Param: headsign, Type: String
                        disruptionsRequestBuilder.withHeadsign(stringStraightPass(params.getString("headsign")));
                    }
                    if (params.has("showCodes") && (params.getString("showCodes") != null) && (!params.getString("showCodes").isEmpty()) ) {
                        // Param: showCodes, Type: Boolean
                        disruptionsRequestBuilder.withShowCodes(booleanStraightPass(params.getBoolean("showCodes")));
                    }
                    if (params.has("odtLevel") && (params.getString("odtLevel") != null) && (!params.getString("odtLevel").isEmpty()) ) {
                        // Param: odtLevel, Type: String
                        disruptionsRequestBuilder.withOdtLevel(stringStraightPass(params.getString("odtLevel")));
                    }
                    if (params.has("dataFreshness") && (params.getString("dataFreshness") != null) && (!params.getString("dataFreshness").isEmpty()) ) {
                        // Param: dataFreshness, Type: String
                        disruptionsRequestBuilder.withDataFreshness(stringStraightPass(params.getString("dataFreshness")));
                    }
                    if (params.has("distance") && (params.getString("distance") != null) && (!params.getString("distance").isEmpty()) ) {
                        // Param: distance, Type: Integer
                        disruptionsRequestBuilder.withDistance(integerStraightPass(params.getInt("distance")));
                    }
                    if (params.has("since") && (params.getString("since") != null) && (!params.getString("since").isEmpty()) ) {
                        // Param: since, Type: Date
                        disruptionsRequestBuilder.withSince(stringToDateTime(params.getString("since")));
                    }
                    if (params.has("until") && (params.getString("until") != null) && (!params.getString("until").isEmpty()) ) {
                        // Param: until, Type: Date
                        disruptionsRequestBuilder.withUntil(stringToDateTime(params.getString("until")));
                    }
                    if (params.has("disableGeojson") && (params.getString("disableGeojson") != null) && (!params.getString("disableGeojson").isEmpty()) ) {
                        // Param: disableGeojson, Type: Boolean
                        disruptionsRequestBuilder.withDisableGeojson(booleanStraightPass(params.getBoolean("disableGeojson")));
                    }
                    if (params.has("disableDisruption") && (params.getString("disableDisruption") != null) && (!params.getString("disableDisruption").isEmpty()) ) {
                        // Param: disableDisruption, Type: Boolean
                        disruptionsRequestBuilder.withDisableDisruption(booleanStraightPass(params.getBoolean("disableDisruption")));
                    }
                    if (params.has("filter") && (params.getString("filter") != null) && (!params.getString("filter").isEmpty()) ) {
                        // Param: filter, Type: String
                        disruptionsRequestBuilder.withFilter(stringStraightPass(params.getString("filter")));
                    }
                    if (params.has("tags") && (params.getString("tags") != null) && (!params.getString("tags").isEmpty()) ) {
                        // Param: tags, Type: List
                        disruptionsRequestBuilder.withTags(jsonArrayToStringList(params.getJSONArray("tags")));
                    }
                    if (params.has("originalId") && (params.getString("originalId") != null) && (!params.getString("originalId").isEmpty()) ) {
                        // Param: originalId, Type: String
                        disruptionsRequestBuilder.withOriginalId(stringStraightPass(params.getString("originalId")));
                    }
                    
                    disruptionsRequestBuilder.rawGet(new ApiCallback<String>() {
                        @Override
                        public void onFailure(ApiException e, int statusCode, Map<String, List<String>> responseHeaders) {
                            callbackContext.error("Problem during request call | " + e.getMessage());
                        }

                        @Override
                        public void onSuccess(String result, int statusCode, Map<String, List<String>> responseHeaders) {
                            JSONObject jsonObject = null;
                            try {
                                jsonObject = new JSONObject(result);
                                callbackContext.success(jsonObject);
                            } catch (Exception e) {
                                String errorMessage = "Problem during response parsing | " + String.valueOf(e.hashCode()) + ": " + e.getMessage();
                                callbackContext.error(errorMessage);
                            }
                        }

                        @Override
                        public void onUploadProgress(long bytesWritten, long contentLength, boolean done) {
                        }

                        @Override
                        public void onDownloadProgress(long bytesRead, long contentLength, boolean done) {
                        }
                    });
                } catch (Exception e) {
                    String errorMessage = "Problem during request building | " + String.valueOf(e.hashCode()) + ": " + e.getMessage();
                    callbackContext.error(errorMessage);
                }
            }
        });
    }
    final private void coverageRegionUriDisruptionsId(final JSONObject params, final CallbackContext callbackContext) {
        if (this.navitiaSdk == null) {
            callbackContext.error("NavitiaSDK is not instanciated");
            return;
        }

        final DisruptionsApi.CoverageRegionUriDisruptionsIdRequestBuilder disruptionsRequestBuilder = this.navitiaSdk.disruptionsApi.newCoverageRegionUriDisruptionsIdRequestBuilder();
        cordova.getThreadPool().execute(new Runnable() {
            @Override
            public void run() {
                try {
                    if (params.has("region") && (params.getString("region") != null) && (!params.getString("region").isEmpty()) ) {
                        // Param: region, Type: String
                        disruptionsRequestBuilder.withRegion(stringStraightPass(params.getString("region")));
                    }
                    if (params.has("uri") && (params.getString("uri") != null) && (!params.getString("uri").isEmpty()) ) {
                        // Param: uri, Type: String
                        disruptionsRequestBuilder.withUri(stringStraightPass(params.getString("uri")));
                    }
                    if (params.has("id") && (params.getString("id") != null) && (!params.getString("id").isEmpty()) ) {
                        // Param: id, Type: String
                        disruptionsRequestBuilder.withId(stringStraightPass(params.getString("id")));
                    }
                    if (params.has("startPage") && (params.getString("startPage") != null) && (!params.getString("startPage").isEmpty()) ) {
                        // Param: startPage, Type: Integer
                        disruptionsRequestBuilder.withStartPage(integerStraightPass(params.getInt("startPage")));
                    }
                    if (params.has("count") && (params.getString("count") != null) && (!params.getString("count").isEmpty()) ) {
                        // Param: count, Type: Integer
                        disruptionsRequestBuilder.withCount(integerStraightPass(params.getInt("count")));
                    }
                    if (params.has("depth") && (params.getString("depth") != null) && (!params.getString("depth").isEmpty()) ) {
                        // Param: depth, Type: Integer
                        disruptionsRequestBuilder.withDepth(integerStraightPass(params.getInt("depth")));
                    }
                    if (params.has("forbiddenId") && (params.getString("forbiddenId") != null) && (!params.getString("forbiddenId").isEmpty()) ) {
                        // Param: forbiddenId, Type: List
                        disruptionsRequestBuilder.withForbiddenId(jsonArrayToStringList(params.getJSONArray("forbiddenId")));
                    }
                    if (params.has("forbiddenUris") && (params.getString("forbiddenUris") != null) && (!params.getString("forbiddenUris").isEmpty()) ) {
                        // Param: forbiddenUris, Type: List
                        disruptionsRequestBuilder.withForbiddenUris(jsonArrayToStringList(params.getJSONArray("forbiddenUris")));
                    }
                    if (params.has("externalCode") && (params.getString("externalCode") != null) && (!params.getString("externalCode").isEmpty()) ) {
                        // Param: externalCode, Type: String
                        disruptionsRequestBuilder.withExternalCode(stringStraightPass(params.getString("externalCode")));
                    }
                    if (params.has("headsign") && (params.getString("headsign") != null) && (!params.getString("headsign").isEmpty()) ) {
                        // Param: headsign, Type: String
                        disruptionsRequestBuilder.withHeadsign(stringStraightPass(params.getString("headsign")));
                    }
                    if (params.has("showCodes") && (params.getString("showCodes") != null) && (!params.getString("showCodes").isEmpty()) ) {
                        // Param: showCodes, Type: Boolean
                        disruptionsRequestBuilder.withShowCodes(booleanStraightPass(params.getBoolean("showCodes")));
                    }
                    if (params.has("odtLevel") && (params.getString("odtLevel") != null) && (!params.getString("odtLevel").isEmpty()) ) {
                        // Param: odtLevel, Type: String
                        disruptionsRequestBuilder.withOdtLevel(stringStraightPass(params.getString("odtLevel")));
                    }
                    if (params.has("dataFreshness") && (params.getString("dataFreshness") != null) && (!params.getString("dataFreshness").isEmpty()) ) {
                        // Param: dataFreshness, Type: String
                        disruptionsRequestBuilder.withDataFreshness(stringStraightPass(params.getString("dataFreshness")));
                    }
                    if (params.has("distance") && (params.getString("distance") != null) && (!params.getString("distance").isEmpty()) ) {
                        // Param: distance, Type: Integer
                        disruptionsRequestBuilder.withDistance(integerStraightPass(params.getInt("distance")));
                    }
                    if (params.has("since") && (params.getString("since") != null) && (!params.getString("since").isEmpty()) ) {
                        // Param: since, Type: Date
                        disruptionsRequestBuilder.withSince(stringToDateTime(params.getString("since")));
                    }
                    if (params.has("until") && (params.getString("until") != null) && (!params.getString("until").isEmpty()) ) {
                        // Param: until, Type: Date
                        disruptionsRequestBuilder.withUntil(stringToDateTime(params.getString("until")));
                    }
                    if (params.has("disableGeojson") && (params.getString("disableGeojson") != null) && (!params.getString("disableGeojson").isEmpty()) ) {
                        // Param: disableGeojson, Type: Boolean
                        disruptionsRequestBuilder.withDisableGeojson(booleanStraightPass(params.getBoolean("disableGeojson")));
                    }
                    if (params.has("disableDisruption") && (params.getString("disableDisruption") != null) && (!params.getString("disableDisruption").isEmpty()) ) {
                        // Param: disableDisruption, Type: Boolean
                        disruptionsRequestBuilder.withDisableDisruption(booleanStraightPass(params.getBoolean("disableDisruption")));
                    }
                    if (params.has("tags") && (params.getString("tags") != null) && (!params.getString("tags").isEmpty()) ) {
                        // Param: tags, Type: List
                        disruptionsRequestBuilder.withTags(jsonArrayToStringList(params.getJSONArray("tags")));
                    }
                    if (params.has("originalId") && (params.getString("originalId") != null) && (!params.getString("originalId").isEmpty()) ) {
                        // Param: originalId, Type: String
                        disruptionsRequestBuilder.withOriginalId(stringStraightPass(params.getString("originalId")));
                    }
                    
                    disruptionsRequestBuilder.rawGet(new ApiCallback<String>() {
                        @Override
                        public void onFailure(ApiException e, int statusCode, Map<String, List<String>> responseHeaders) {
                            callbackContext.error("Problem during request call | " + e.getMessage());
                        }

                        @Override
                        public void onSuccess(String result, int statusCode, Map<String, List<String>> responseHeaders) {
                            JSONObject jsonObject = null;
                            try {
                                jsonObject = new JSONObject(result);
                                callbackContext.success(jsonObject);
                            } catch (Exception e) {
                                String errorMessage = "Problem during response parsing | " + String.valueOf(e.hashCode()) + ": " + e.getMessage();
                                callbackContext.error(errorMessage);
                            }
                        }

                        @Override
                        public void onUploadProgress(long bytesWritten, long contentLength, boolean done) {
                        }

                        @Override
                        public void onDownloadProgress(long bytesRead, long contentLength, boolean done) {
                        }
                    });
                } catch (Exception e) {
                    String errorMessage = "Problem during request building | " + String.valueOf(e.hashCode()) + ": " + e.getMessage();
                    callbackContext.error(errorMessage);
                }
            }
        });
    }
    final private void coordLonLatEquipmentReports(final JSONObject params, final CallbackContext callbackContext) {
        if (this.navitiaSdk == null) {
            callbackContext.error("NavitiaSDK is not instanciated");
            return;
        }

        final EquipmentReportsApi.CoordLonLatEquipmentReportsRequestBuilder equipmentReportsRequestBuilder = this.navitiaSdk.equipmentReportsApi.newCoordLonLatEquipmentReportsRequestBuilder();
        cordova.getThreadPool().execute(new Runnable() {
            @Override
            public void run() {
                try {
                    if (params.has("lat") && (params.getString("lat") != null) && (!params.getString("lat").isEmpty()) ) {
                        // Param: lat, Type: BigDecimal
                        equipmentReportsRequestBuilder.withLat(longToBigDecimal(params.getLong("lat")));
                    }
                    if (params.has("lon") && (params.getString("lon") != null) && (!params.getString("lon").isEmpty()) ) {
                        // Param: lon, Type: BigDecimal
                        equipmentReportsRequestBuilder.withLon(longToBigDecimal(params.getLong("lon")));
                    }
                    if (params.has("depth") && (params.getString("depth") != null) && (!params.getString("depth").isEmpty()) ) {
                        // Param: depth, Type: Integer
                        equipmentReportsRequestBuilder.withDepth(integerStraightPass(params.getInt("depth")));
                    }
                    if (params.has("count") && (params.getString("count") != null) && (!params.getString("count").isEmpty()) ) {
                        // Param: count, Type: Integer
                        equipmentReportsRequestBuilder.withCount(integerStraightPass(params.getInt("count")));
                    }
                    if (params.has("filter") && (params.getString("filter") != null) && (!params.getString("filter").isEmpty()) ) {
                        // Param: filter, Type: String
                        equipmentReportsRequestBuilder.withFilter(stringStraightPass(params.getString("filter")));
                    }
                    if (params.has("startPage") && (params.getString("startPage") != null) && (!params.getString("startPage").isEmpty()) ) {
                        // Param: startPage, Type: Integer
                        equipmentReportsRequestBuilder.withStartPage(integerStraightPass(params.getInt("startPage")));
                    }
                    if (params.has("forbiddenUris") && (params.getString("forbiddenUris") != null) && (!params.getString("forbiddenUris").isEmpty()) ) {
                        // Param: forbiddenUris, Type: List
                        equipmentReportsRequestBuilder.withForbiddenUris(jsonArrayToStringList(params.getJSONArray("forbiddenUris")));
                    }
                    
                    equipmentReportsRequestBuilder.rawGet(new ApiCallback<String>() {
                        @Override
                        public void onFailure(ApiException e, int statusCode, Map<String, List<String>> responseHeaders) {
                            callbackContext.error("Problem during request call | " + e.getMessage());
                        }

                        @Override
                        public void onSuccess(String result, int statusCode, Map<String, List<String>> responseHeaders) {
                            JSONObject jsonObject = null;
                            try {
                                jsonObject = new JSONObject(result);
                                callbackContext.success(jsonObject);
                            } catch (Exception e) {
                                String errorMessage = "Problem during response parsing | " + String.valueOf(e.hashCode()) + ": " + e.getMessage();
                                callbackContext.error(errorMessage);
                            }
                        }

                        @Override
                        public void onUploadProgress(long bytesWritten, long contentLength, boolean done) {
                        }

                        @Override
                        public void onDownloadProgress(long bytesRead, long contentLength, boolean done) {
                        }
                    });
                } catch (Exception e) {
                    String errorMessage = "Problem during request building | " + String.valueOf(e.hashCode()) + ": " + e.getMessage();
                    callbackContext.error(errorMessage);
                }
            }
        });
    }
    final private void coordsLonLatEquipmentReports(final JSONObject params, final CallbackContext callbackContext) {
        if (this.navitiaSdk == null) {
            callbackContext.error("NavitiaSDK is not instanciated");
            return;
        }

        final EquipmentReportsApi.CoordsLonLatEquipmentReportsRequestBuilder equipmentReportsRequestBuilder = this.navitiaSdk.equipmentReportsApi.newCoordsLonLatEquipmentReportsRequestBuilder();
        cordova.getThreadPool().execute(new Runnable() {
            @Override
            public void run() {
                try {
                    if (params.has("lat") && (params.getString("lat") != null) && (!params.getString("lat").isEmpty()) ) {
                        // Param: lat, Type: BigDecimal
                        equipmentReportsRequestBuilder.withLat(longToBigDecimal(params.getLong("lat")));
                    }
                    if (params.has("lon") && (params.getString("lon") != null) && (!params.getString("lon").isEmpty()) ) {
                        // Param: lon, Type: BigDecimal
                        equipmentReportsRequestBuilder.withLon(longToBigDecimal(params.getLong("lon")));
                    }
                    if (params.has("depth") && (params.getString("depth") != null) && (!params.getString("depth").isEmpty()) ) {
                        // Param: depth, Type: Integer
                        equipmentReportsRequestBuilder.withDepth(integerStraightPass(params.getInt("depth")));
                    }
                    if (params.has("count") && (params.getString("count") != null) && (!params.getString("count").isEmpty()) ) {
                        // Param: count, Type: Integer
                        equipmentReportsRequestBuilder.withCount(integerStraightPass(params.getInt("count")));
                    }
                    if (params.has("filter") && (params.getString("filter") != null) && (!params.getString("filter").isEmpty()) ) {
                        // Param: filter, Type: String
                        equipmentReportsRequestBuilder.withFilter(stringStraightPass(params.getString("filter")));
                    }
                    if (params.has("startPage") && (params.getString("startPage") != null) && (!params.getString("startPage").isEmpty()) ) {
                        // Param: startPage, Type: Integer
                        equipmentReportsRequestBuilder.withStartPage(integerStraightPass(params.getInt("startPage")));
                    }
                    if (params.has("forbiddenUris") && (params.getString("forbiddenUris") != null) && (!params.getString("forbiddenUris").isEmpty()) ) {
                        // Param: forbiddenUris, Type: List
                        equipmentReportsRequestBuilder.withForbiddenUris(jsonArrayToStringList(params.getJSONArray("forbiddenUris")));
                    }
                    
                    equipmentReportsRequestBuilder.rawGet(new ApiCallback<String>() {
                        @Override
                        public void onFailure(ApiException e, int statusCode, Map<String, List<String>> responseHeaders) {
                            callbackContext.error("Problem during request call | " + e.getMessage());
                        }

                        @Override
                        public void onSuccess(String result, int statusCode, Map<String, List<String>> responseHeaders) {
                            JSONObject jsonObject = null;
                            try {
                                jsonObject = new JSONObject(result);
                                callbackContext.success(jsonObject);
                            } catch (Exception e) {
                                String errorMessage = "Problem during response parsing | " + String.valueOf(e.hashCode()) + ": " + e.getMessage();
                                callbackContext.error(errorMessage);
                            }
                        }

                        @Override
                        public void onUploadProgress(long bytesWritten, long contentLength, boolean done) {
                        }

                        @Override
                        public void onDownloadProgress(long bytesRead, long contentLength, boolean done) {
                        }
                    });
                } catch (Exception e) {
                    String errorMessage = "Problem during request building | " + String.valueOf(e.hashCode()) + ": " + e.getMessage();
                    callbackContext.error(errorMessage);
                }
            }
        });
    }
    final private void coverageLonLatEquipmentReports(final JSONObject params, final CallbackContext callbackContext) {
        if (this.navitiaSdk == null) {
            callbackContext.error("NavitiaSDK is not instanciated");
            return;
        }

        final EquipmentReportsApi.CoverageLonLatEquipmentReportsRequestBuilder equipmentReportsRequestBuilder = this.navitiaSdk.equipmentReportsApi.newCoverageLonLatEquipmentReportsRequestBuilder();
        cordova.getThreadPool().execute(new Runnable() {
            @Override
            public void run() {
                try {
                    if (params.has("lat") && (params.getString("lat") != null) && (!params.getString("lat").isEmpty()) ) {
                        // Param: lat, Type: BigDecimal
                        equipmentReportsRequestBuilder.withLat(longToBigDecimal(params.getLong("lat")));
                    }
                    if (params.has("lon") && (params.getString("lon") != null) && (!params.getString("lon").isEmpty()) ) {
                        // Param: lon, Type: BigDecimal
                        equipmentReportsRequestBuilder.withLon(longToBigDecimal(params.getLong("lon")));
                    }
                    if (params.has("depth") && (params.getString("depth") != null) && (!params.getString("depth").isEmpty()) ) {
                        // Param: depth, Type: Integer
                        equipmentReportsRequestBuilder.withDepth(integerStraightPass(params.getInt("depth")));
                    }
                    if (params.has("count") && (params.getString("count") != null) && (!params.getString("count").isEmpty()) ) {
                        // Param: count, Type: Integer
                        equipmentReportsRequestBuilder.withCount(integerStraightPass(params.getInt("count")));
                    }
                    if (params.has("filter") && (params.getString("filter") != null) && (!params.getString("filter").isEmpty()) ) {
                        // Param: filter, Type: String
                        equipmentReportsRequestBuilder.withFilter(stringStraightPass(params.getString("filter")));
                    }
                    if (params.has("startPage") && (params.getString("startPage") != null) && (!params.getString("startPage").isEmpty()) ) {
                        // Param: startPage, Type: Integer
                        equipmentReportsRequestBuilder.withStartPage(integerStraightPass(params.getInt("startPage")));
                    }
                    if (params.has("forbiddenUris") && (params.getString("forbiddenUris") != null) && (!params.getString("forbiddenUris").isEmpty()) ) {
                        // Param: forbiddenUris, Type: List
                        equipmentReportsRequestBuilder.withForbiddenUris(jsonArrayToStringList(params.getJSONArray("forbiddenUris")));
                    }
                    
                    equipmentReportsRequestBuilder.rawGet(new ApiCallback<String>() {
                        @Override
                        public void onFailure(ApiException e, int statusCode, Map<String, List<String>> responseHeaders) {
                            callbackContext.error("Problem during request call | " + e.getMessage());
                        }

                        @Override
                        public void onSuccess(String result, int statusCode, Map<String, List<String>> responseHeaders) {
                            JSONObject jsonObject = null;
                            try {
                                jsonObject = new JSONObject(result);
                                callbackContext.success(jsonObject);
                            } catch (Exception e) {
                                String errorMessage = "Problem during response parsing | " + String.valueOf(e.hashCode()) + ": " + e.getMessage();
                                callbackContext.error(errorMessage);
                            }
                        }

                        @Override
                        public void onUploadProgress(long bytesWritten, long contentLength, boolean done) {
                        }

                        @Override
                        public void onDownloadProgress(long bytesRead, long contentLength, boolean done) {
                        }
                    });
                } catch (Exception e) {
                    String errorMessage = "Problem during request building | " + String.valueOf(e.hashCode()) + ": " + e.getMessage();
                    callbackContext.error(errorMessage);
                }
            }
        });
    }
    final private void coverageLonLatUriEquipmentReports(final JSONObject params, final CallbackContext callbackContext) {
        if (this.navitiaSdk == null) {
            callbackContext.error("NavitiaSDK is not instanciated");
            return;
        }

        final EquipmentReportsApi.CoverageLonLatUriEquipmentReportsRequestBuilder equipmentReportsRequestBuilder = this.navitiaSdk.equipmentReportsApi.newCoverageLonLatUriEquipmentReportsRequestBuilder();
        cordova.getThreadPool().execute(new Runnable() {
            @Override
            public void run() {
                try {
                    if (params.has("lat") && (params.getString("lat") != null) && (!params.getString("lat").isEmpty()) ) {
                        // Param: lat, Type: BigDecimal
                        equipmentReportsRequestBuilder.withLat(longToBigDecimal(params.getLong("lat")));
                    }
                    if (params.has("lon") && (params.getString("lon") != null) && (!params.getString("lon").isEmpty()) ) {
                        // Param: lon, Type: BigDecimal
                        equipmentReportsRequestBuilder.withLon(longToBigDecimal(params.getLong("lon")));
                    }
                    if (params.has("uri") && (params.getString("uri") != null) && (!params.getString("uri").isEmpty()) ) {
                        // Param: uri, Type: String
                        equipmentReportsRequestBuilder.withUri(stringStraightPass(params.getString("uri")));
                    }
                    if (params.has("depth") && (params.getString("depth") != null) && (!params.getString("depth").isEmpty()) ) {
                        // Param: depth, Type: Integer
                        equipmentReportsRequestBuilder.withDepth(integerStraightPass(params.getInt("depth")));
                    }
                    if (params.has("count") && (params.getString("count") != null) && (!params.getString("count").isEmpty()) ) {
                        // Param: count, Type: Integer
                        equipmentReportsRequestBuilder.withCount(integerStraightPass(params.getInt("count")));
                    }
                    if (params.has("filter") && (params.getString("filter") != null) && (!params.getString("filter").isEmpty()) ) {
                        // Param: filter, Type: String
                        equipmentReportsRequestBuilder.withFilter(stringStraightPass(params.getString("filter")));
                    }
                    if (params.has("startPage") && (params.getString("startPage") != null) && (!params.getString("startPage").isEmpty()) ) {
                        // Param: startPage, Type: Integer
                        equipmentReportsRequestBuilder.withStartPage(integerStraightPass(params.getInt("startPage")));
                    }
                    if (params.has("forbiddenUris") && (params.getString("forbiddenUris") != null) && (!params.getString("forbiddenUris").isEmpty()) ) {
                        // Param: forbiddenUris, Type: List
                        equipmentReportsRequestBuilder.withForbiddenUris(jsonArrayToStringList(params.getJSONArray("forbiddenUris")));
                    }
                    
                    equipmentReportsRequestBuilder.rawGet(new ApiCallback<String>() {
                        @Override
                        public void onFailure(ApiException e, int statusCode, Map<String, List<String>> responseHeaders) {
                            callbackContext.error("Problem during request call | " + e.getMessage());
                        }

                        @Override
                        public void onSuccess(String result, int statusCode, Map<String, List<String>> responseHeaders) {
                            JSONObject jsonObject = null;
                            try {
                                jsonObject = new JSONObject(result);
                                callbackContext.success(jsonObject);
                            } catch (Exception e) {
                                String errorMessage = "Problem during response parsing | " + String.valueOf(e.hashCode()) + ": " + e.getMessage();
                                callbackContext.error(errorMessage);
                            }
                        }

                        @Override
                        public void onUploadProgress(long bytesWritten, long contentLength, boolean done) {
                        }

                        @Override
                        public void onDownloadProgress(long bytesRead, long contentLength, boolean done) {
                        }
                    });
                } catch (Exception e) {
                    String errorMessage = "Problem during request building | " + String.valueOf(e.hashCode()) + ": " + e.getMessage();
                    callbackContext.error(errorMessage);
                }
            }
        });
    }
    final private void coverageRegionEquipmentReports(final JSONObject params, final CallbackContext callbackContext) {
        if (this.navitiaSdk == null) {
            callbackContext.error("NavitiaSDK is not instanciated");
            return;
        }

        final EquipmentReportsApi.CoverageRegionEquipmentReportsRequestBuilder equipmentReportsRequestBuilder = this.navitiaSdk.equipmentReportsApi.newCoverageRegionEquipmentReportsRequestBuilder();
        cordova.getThreadPool().execute(new Runnable() {
            @Override
            public void run() {
                try {
                    if (params.has("region") && (params.getString("region") != null) && (!params.getString("region").isEmpty()) ) {
                        // Param: region, Type: String
                        equipmentReportsRequestBuilder.withRegion(stringStraightPass(params.getString("region")));
                    }
                    if (params.has("depth") && (params.getString("depth") != null) && (!params.getString("depth").isEmpty()) ) {
                        // Param: depth, Type: Integer
                        equipmentReportsRequestBuilder.withDepth(integerStraightPass(params.getInt("depth")));
                    }
                    if (params.has("count") && (params.getString("count") != null) && (!params.getString("count").isEmpty()) ) {
                        // Param: count, Type: Integer
                        equipmentReportsRequestBuilder.withCount(integerStraightPass(params.getInt("count")));
                    }
                    if (params.has("filter") && (params.getString("filter") != null) && (!params.getString("filter").isEmpty()) ) {
                        // Param: filter, Type: String
                        equipmentReportsRequestBuilder.withFilter(stringStraightPass(params.getString("filter")));
                    }
                    if (params.has("startPage") && (params.getString("startPage") != null) && (!params.getString("startPage").isEmpty()) ) {
                        // Param: startPage, Type: Integer
                        equipmentReportsRequestBuilder.withStartPage(integerStraightPass(params.getInt("startPage")));
                    }
                    if (params.has("forbiddenUris") && (params.getString("forbiddenUris") != null) && (!params.getString("forbiddenUris").isEmpty()) ) {
                        // Param: forbiddenUris, Type: List
                        equipmentReportsRequestBuilder.withForbiddenUris(jsonArrayToStringList(params.getJSONArray("forbiddenUris")));
                    }
                    
                    equipmentReportsRequestBuilder.rawGet(new ApiCallback<String>() {
                        @Override
                        public void onFailure(ApiException e, int statusCode, Map<String, List<String>> responseHeaders) {
                            callbackContext.error("Problem during request call | " + e.getMessage());
                        }

                        @Override
                        public void onSuccess(String result, int statusCode, Map<String, List<String>> responseHeaders) {
                            JSONObject jsonObject = null;
                            try {
                                jsonObject = new JSONObject(result);
                                callbackContext.success(jsonObject);
                            } catch (Exception e) {
                                String errorMessage = "Problem during response parsing | " + String.valueOf(e.hashCode()) + ": " + e.getMessage();
                                callbackContext.error(errorMessage);
                            }
                        }

                        @Override
                        public void onUploadProgress(long bytesWritten, long contentLength, boolean done) {
                        }

                        @Override
                        public void onDownloadProgress(long bytesRead, long contentLength, boolean done) {
                        }
                    });
                } catch (Exception e) {
                    String errorMessage = "Problem during request building | " + String.valueOf(e.hashCode()) + ": " + e.getMessage();
                    callbackContext.error(errorMessage);
                }
            }
        });
    }
    final private void coverageRegionUriEquipmentReports(final JSONObject params, final CallbackContext callbackContext) {
        if (this.navitiaSdk == null) {
            callbackContext.error("NavitiaSDK is not instanciated");
            return;
        }

        final EquipmentReportsApi.CoverageRegionUriEquipmentReportsRequestBuilder equipmentReportsRequestBuilder = this.navitiaSdk.equipmentReportsApi.newCoverageRegionUriEquipmentReportsRequestBuilder();
        cordova.getThreadPool().execute(new Runnable() {
            @Override
            public void run() {
                try {
                    if (params.has("region") && (params.getString("region") != null) && (!params.getString("region").isEmpty()) ) {
                        // Param: region, Type: String
                        equipmentReportsRequestBuilder.withRegion(stringStraightPass(params.getString("region")));
                    }
                    if (params.has("uri") && (params.getString("uri") != null) && (!params.getString("uri").isEmpty()) ) {
                        // Param: uri, Type: String
                        equipmentReportsRequestBuilder.withUri(stringStraightPass(params.getString("uri")));
                    }
                    if (params.has("depth") && (params.getString("depth") != null) && (!params.getString("depth").isEmpty()) ) {
                        // Param: depth, Type: Integer
                        equipmentReportsRequestBuilder.withDepth(integerStraightPass(params.getInt("depth")));
                    }
                    if (params.has("count") && (params.getString("count") != null) && (!params.getString("count").isEmpty()) ) {
                        // Param: count, Type: Integer
                        equipmentReportsRequestBuilder.withCount(integerStraightPass(params.getInt("count")));
                    }
                    if (params.has("filter") && (params.getString("filter") != null) && (!params.getString("filter").isEmpty()) ) {
                        // Param: filter, Type: String
                        equipmentReportsRequestBuilder.withFilter(stringStraightPass(params.getString("filter")));
                    }
                    if (params.has("startPage") && (params.getString("startPage") != null) && (!params.getString("startPage").isEmpty()) ) {
                        // Param: startPage, Type: Integer
                        equipmentReportsRequestBuilder.withStartPage(integerStraightPass(params.getInt("startPage")));
                    }
                    if (params.has("forbiddenUris") && (params.getString("forbiddenUris") != null) && (!params.getString("forbiddenUris").isEmpty()) ) {
                        // Param: forbiddenUris, Type: List
                        equipmentReportsRequestBuilder.withForbiddenUris(jsonArrayToStringList(params.getJSONArray("forbiddenUris")));
                    }
                    
                    equipmentReportsRequestBuilder.rawGet(new ApiCallback<String>() {
                        @Override
                        public void onFailure(ApiException e, int statusCode, Map<String, List<String>> responseHeaders) {
                            callbackContext.error("Problem during request call | " + e.getMessage());
                        }

                        @Override
                        public void onSuccess(String result, int statusCode, Map<String, List<String>> responseHeaders) {
                            JSONObject jsonObject = null;
                            try {
                                jsonObject = new JSONObject(result);
                                callbackContext.success(jsonObject);
                            } catch (Exception e) {
                                String errorMessage = "Problem during response parsing | " + String.valueOf(e.hashCode()) + ": " + e.getMessage();
                                callbackContext.error(errorMessage);
                            }
                        }

                        @Override
                        public void onUploadProgress(long bytesWritten, long contentLength, boolean done) {
                        }

                        @Override
                        public void onDownloadProgress(long bytesRead, long contentLength, boolean done) {
                        }
                    });
                } catch (Exception e) {
                    String errorMessage = "Problem during request building | " + String.valueOf(e.hashCode()) + ": " + e.getMessage();
                    callbackContext.error(errorMessage);
                }
            }
        });
    }
    final private void coordLonLatFreefloatingsNearby(final JSONObject params, final CallbackContext callbackContext) {
        if (this.navitiaSdk == null) {
            callbackContext.error("NavitiaSDK is not instanciated");
            return;
        }

        final FreeFloatingsNearbyApi.CoordLonLatFreefloatingsNearbyRequestBuilder freeFloatingsNearbyRequestBuilder = this.navitiaSdk.freeFloatingsNearbyApi.newCoordLonLatFreefloatingsNearbyRequestBuilder();
        cordova.getThreadPool().execute(new Runnable() {
            @Override
            public void run() {
                try {
                    if (params.has("lat") && (params.getString("lat") != null) && (!params.getString("lat").isEmpty()) ) {
                        // Param: lat, Type: BigDecimal
                        freeFloatingsNearbyRequestBuilder.withLat(longToBigDecimal(params.getLong("lat")));
                    }
                    if (params.has("lon") && (params.getString("lon") != null) && (!params.getString("lon").isEmpty()) ) {
                        // Param: lon, Type: BigDecimal
                        freeFloatingsNearbyRequestBuilder.withLon(longToBigDecimal(params.getLong("lon")));
                    }
                    if (params.has("type") && (params.getString("type") != null) && (!params.getString("type").isEmpty()) ) {
                        // Param: type, Type: List
                        freeFloatingsNearbyRequestBuilder.withType(jsonArrayToStringList(params.getJSONArray("type")));
                    }
                    if (params.has("distance") && (params.getString("distance") != null) && (!params.getString("distance").isEmpty()) ) {
                        // Param: distance, Type: Integer
                        freeFloatingsNearbyRequestBuilder.withDistance(integerStraightPass(params.getInt("distance")));
                    }
                    if (params.has("count") && (params.getString("count") != null) && (!params.getString("count").isEmpty()) ) {
                        // Param: count, Type: Integer
                        freeFloatingsNearbyRequestBuilder.withCount(integerStraightPass(params.getInt("count")));
                    }
                    if (params.has("coord") && (params.getString("coord") != null) && (!params.getString("coord").isEmpty()) ) {
                        // Param: coord, Type: String
                        freeFloatingsNearbyRequestBuilder.withCoord(stringStraightPass(params.getString("coord")));
                    }
                    if (params.has("startPage") && (params.getString("startPage") != null) && (!params.getString("startPage").isEmpty()) ) {
                        // Param: startPage, Type: Integer
                        freeFloatingsNearbyRequestBuilder.withStartPage(integerStraightPass(params.getInt("startPage")));
                    }
                    
                    freeFloatingsNearbyRequestBuilder.rawGet(new ApiCallback<String>() {
                        @Override
                        public void onFailure(ApiException e, int statusCode, Map<String, List<String>> responseHeaders) {
                            callbackContext.error("Problem during request call | " + e.getMessage());
                        }

                        @Override
                        public void onSuccess(String result, int statusCode, Map<String, List<String>> responseHeaders) {
                            JSONObject jsonObject = null;
                            try {
                                jsonObject = new JSONObject(result);
                                callbackContext.success(jsonObject);
                            } catch (Exception e) {
                                String errorMessage = "Problem during response parsing | " + String.valueOf(e.hashCode()) + ": " + e.getMessage();
                                callbackContext.error(errorMessage);
                            }
                        }

                        @Override
                        public void onUploadProgress(long bytesWritten, long contentLength, boolean done) {
                        }

                        @Override
                        public void onDownloadProgress(long bytesRead, long contentLength, boolean done) {
                        }
                    });
                } catch (Exception e) {
                    String errorMessage = "Problem during request building | " + String.valueOf(e.hashCode()) + ": " + e.getMessage();
                    callbackContext.error(errorMessage);
                }
            }
        });
    }
    final private void coordsLonLatFreefloatingsNearby(final JSONObject params, final CallbackContext callbackContext) {
        if (this.navitiaSdk == null) {
            callbackContext.error("NavitiaSDK is not instanciated");
            return;
        }

        final FreeFloatingsNearbyApi.CoordsLonLatFreefloatingsNearbyRequestBuilder freeFloatingsNearbyRequestBuilder = this.navitiaSdk.freeFloatingsNearbyApi.newCoordsLonLatFreefloatingsNearbyRequestBuilder();
        cordova.getThreadPool().execute(new Runnable() {
            @Override
            public void run() {
                try {
                    if (params.has("lat") && (params.getString("lat") != null) && (!params.getString("lat").isEmpty()) ) {
                        // Param: lat, Type: BigDecimal
                        freeFloatingsNearbyRequestBuilder.withLat(longToBigDecimal(params.getLong("lat")));
                    }
                    if (params.has("lon") && (params.getString("lon") != null) && (!params.getString("lon").isEmpty()) ) {
                        // Param: lon, Type: BigDecimal
                        freeFloatingsNearbyRequestBuilder.withLon(longToBigDecimal(params.getLong("lon")));
                    }
                    if (params.has("type") && (params.getString("type") != null) && (!params.getString("type").isEmpty()) ) {
                        // Param: type, Type: List
                        freeFloatingsNearbyRequestBuilder.withType(jsonArrayToStringList(params.getJSONArray("type")));
                    }
                    if (params.has("distance") && (params.getString("distance") != null) && (!params.getString("distance").isEmpty()) ) {
                        // Param: distance, Type: Integer
                        freeFloatingsNearbyRequestBuilder.withDistance(integerStraightPass(params.getInt("distance")));
                    }
                    if (params.has("count") && (params.getString("count") != null) && (!params.getString("count").isEmpty()) ) {
                        // Param: count, Type: Integer
                        freeFloatingsNearbyRequestBuilder.withCount(integerStraightPass(params.getInt("count")));
                    }
                    if (params.has("coord") && (params.getString("coord") != null) && (!params.getString("coord").isEmpty()) ) {
                        // Param: coord, Type: String
                        freeFloatingsNearbyRequestBuilder.withCoord(stringStraightPass(params.getString("coord")));
                    }
                    if (params.has("startPage") && (params.getString("startPage") != null) && (!params.getString("startPage").isEmpty()) ) {
                        // Param: startPage, Type: Integer
                        freeFloatingsNearbyRequestBuilder.withStartPage(integerStraightPass(params.getInt("startPage")));
                    }
                    
                    freeFloatingsNearbyRequestBuilder.rawGet(new ApiCallback<String>() {
                        @Override
                        public void onFailure(ApiException e, int statusCode, Map<String, List<String>> responseHeaders) {
                            callbackContext.error("Problem during request call | " + e.getMessage());
                        }

                        @Override
                        public void onSuccess(String result, int statusCode, Map<String, List<String>> responseHeaders) {
                            JSONObject jsonObject = null;
                            try {
                                jsonObject = new JSONObject(result);
                                callbackContext.success(jsonObject);
                            } catch (Exception e) {
                                String errorMessage = "Problem during response parsing | " + String.valueOf(e.hashCode()) + ": " + e.getMessage();
                                callbackContext.error(errorMessage);
                            }
                        }

                        @Override
                        public void onUploadProgress(long bytesWritten, long contentLength, boolean done) {
                        }

                        @Override
                        public void onDownloadProgress(long bytesRead, long contentLength, boolean done) {
                        }
                    });
                } catch (Exception e) {
                    String errorMessage = "Problem during request building | " + String.valueOf(e.hashCode()) + ": " + e.getMessage();
                    callbackContext.error(errorMessage);
                }
            }
        });
    }
    final private void coverageLonLatFreefloatingsNearby(final JSONObject params, final CallbackContext callbackContext) {
        if (this.navitiaSdk == null) {
            callbackContext.error("NavitiaSDK is not instanciated");
            return;
        }

        final FreeFloatingsNearbyApi.CoverageLonLatFreefloatingsNearbyRequestBuilder freeFloatingsNearbyRequestBuilder = this.navitiaSdk.freeFloatingsNearbyApi.newCoverageLonLatFreefloatingsNearbyRequestBuilder();
        cordova.getThreadPool().execute(new Runnable() {
            @Override
            public void run() {
                try {
                    if (params.has("lat") && (params.getString("lat") != null) && (!params.getString("lat").isEmpty()) ) {
                        // Param: lat, Type: BigDecimal
                        freeFloatingsNearbyRequestBuilder.withLat(longToBigDecimal(params.getLong("lat")));
                    }
                    if (params.has("lon") && (params.getString("lon") != null) && (!params.getString("lon").isEmpty()) ) {
                        // Param: lon, Type: BigDecimal
                        freeFloatingsNearbyRequestBuilder.withLon(longToBigDecimal(params.getLong("lon")));
                    }
                    if (params.has("type") && (params.getString("type") != null) && (!params.getString("type").isEmpty()) ) {
                        // Param: type, Type: List
                        freeFloatingsNearbyRequestBuilder.withType(jsonArrayToStringList(params.getJSONArray("type")));
                    }
                    if (params.has("distance") && (params.getString("distance") != null) && (!params.getString("distance").isEmpty()) ) {
                        // Param: distance, Type: Integer
                        freeFloatingsNearbyRequestBuilder.withDistance(integerStraightPass(params.getInt("distance")));
                    }
                    if (params.has("count") && (params.getString("count") != null) && (!params.getString("count").isEmpty()) ) {
                        // Param: count, Type: Integer
                        freeFloatingsNearbyRequestBuilder.withCount(integerStraightPass(params.getInt("count")));
                    }
                    if (params.has("coord") && (params.getString("coord") != null) && (!params.getString("coord").isEmpty()) ) {
                        // Param: coord, Type: String
                        freeFloatingsNearbyRequestBuilder.withCoord(stringStraightPass(params.getString("coord")));
                    }
                    if (params.has("startPage") && (params.getString("startPage") != null) && (!params.getString("startPage").isEmpty()) ) {
                        // Param: startPage, Type: Integer
                        freeFloatingsNearbyRequestBuilder.withStartPage(integerStraightPass(params.getInt("startPage")));
                    }
                    
                    freeFloatingsNearbyRequestBuilder.rawGet(new ApiCallback<String>() {
                        @Override
                        public void onFailure(ApiException e, int statusCode, Map<String, List<String>> responseHeaders) {
                            callbackContext.error("Problem during request call | " + e.getMessage());
                        }

                        @Override
                        public void onSuccess(String result, int statusCode, Map<String, List<String>> responseHeaders) {
                            JSONObject jsonObject = null;
                            try {
                                jsonObject = new JSONObject(result);
                                callbackContext.success(jsonObject);
                            } catch (Exception e) {
                                String errorMessage = "Problem during response parsing | " + String.valueOf(e.hashCode()) + ": " + e.getMessage();
                                callbackContext.error(errorMessage);
                            }
                        }

                        @Override
                        public void onUploadProgress(long bytesWritten, long contentLength, boolean done) {
                        }

                        @Override
                        public void onDownloadProgress(long bytesRead, long contentLength, boolean done) {
                        }
                    });
                } catch (Exception e) {
                    String errorMessage = "Problem during request building | " + String.valueOf(e.hashCode()) + ": " + e.getMessage();
                    callbackContext.error(errorMessage);
                }
            }
        });
    }
    final private void coverageLonLatUriFreefloatingsNearby(final JSONObject params, final CallbackContext callbackContext) {
        if (this.navitiaSdk == null) {
            callbackContext.error("NavitiaSDK is not instanciated");
            return;
        }

        final FreeFloatingsNearbyApi.CoverageLonLatUriFreefloatingsNearbyRequestBuilder freeFloatingsNearbyRequestBuilder = this.navitiaSdk.freeFloatingsNearbyApi.newCoverageLonLatUriFreefloatingsNearbyRequestBuilder();
        cordova.getThreadPool().execute(new Runnable() {
            @Override
            public void run() {
                try {
                    if (params.has("lat") && (params.getString("lat") != null) && (!params.getString("lat").isEmpty()) ) {
                        // Param: lat, Type: BigDecimal
                        freeFloatingsNearbyRequestBuilder.withLat(longToBigDecimal(params.getLong("lat")));
                    }
                    if (params.has("lon") && (params.getString("lon") != null) && (!params.getString("lon").isEmpty()) ) {
                        // Param: lon, Type: BigDecimal
                        freeFloatingsNearbyRequestBuilder.withLon(longToBigDecimal(params.getLong("lon")));
                    }
                    if (params.has("uri") && (params.getString("uri") != null) && (!params.getString("uri").isEmpty()) ) {
                        // Param: uri, Type: String
                        freeFloatingsNearbyRequestBuilder.withUri(stringStraightPass(params.getString("uri")));
                    }
                    if (params.has("type") && (params.getString("type") != null) && (!params.getString("type").isEmpty()) ) {
                        // Param: type, Type: List
                        freeFloatingsNearbyRequestBuilder.withType(jsonArrayToStringList(params.getJSONArray("type")));
                    }
                    if (params.has("distance") && (params.getString("distance") != null) && (!params.getString("distance").isEmpty()) ) {
                        // Param: distance, Type: Integer
                        freeFloatingsNearbyRequestBuilder.withDistance(integerStraightPass(params.getInt("distance")));
                    }
                    if (params.has("count") && (params.getString("count") != null) && (!params.getString("count").isEmpty()) ) {
                        // Param: count, Type: Integer
                        freeFloatingsNearbyRequestBuilder.withCount(integerStraightPass(params.getInt("count")));
                    }
                    if (params.has("coord") && (params.getString("coord") != null) && (!params.getString("coord").isEmpty()) ) {
                        // Param: coord, Type: String
                        freeFloatingsNearbyRequestBuilder.withCoord(stringStraightPass(params.getString("coord")));
                    }
                    if (params.has("startPage") && (params.getString("startPage") != null) && (!params.getString("startPage").isEmpty()) ) {
                        // Param: startPage, Type: Integer
                        freeFloatingsNearbyRequestBuilder.withStartPage(integerStraightPass(params.getInt("startPage")));
                    }
                    
                    freeFloatingsNearbyRequestBuilder.rawGet(new ApiCallback<String>() {
                        @Override
                        public void onFailure(ApiException e, int statusCode, Map<String, List<String>> responseHeaders) {
                            callbackContext.error("Problem during request call | " + e.getMessage());
                        }

                        @Override
                        public void onSuccess(String result, int statusCode, Map<String, List<String>> responseHeaders) {
                            JSONObject jsonObject = null;
                            try {
                                jsonObject = new JSONObject(result);
                                callbackContext.success(jsonObject);
                            } catch (Exception e) {
                                String errorMessage = "Problem during response parsing | " + String.valueOf(e.hashCode()) + ": " + e.getMessage();
                                callbackContext.error(errorMessage);
                            }
                        }

                        @Override
                        public void onUploadProgress(long bytesWritten, long contentLength, boolean done) {
                        }

                        @Override
                        public void onDownloadProgress(long bytesRead, long contentLength, boolean done) {
                        }
                    });
                } catch (Exception e) {
                    String errorMessage = "Problem during request building | " + String.valueOf(e.hashCode()) + ": " + e.getMessage();
                    callbackContext.error(errorMessage);
                }
            }
        });
    }
    final private void coverageRegionFreefloatingsNearby(final JSONObject params, final CallbackContext callbackContext) {
        if (this.navitiaSdk == null) {
            callbackContext.error("NavitiaSDK is not instanciated");
            return;
        }

        final FreeFloatingsNearbyApi.CoverageRegionFreefloatingsNearbyRequestBuilder freeFloatingsNearbyRequestBuilder = this.navitiaSdk.freeFloatingsNearbyApi.newCoverageRegionFreefloatingsNearbyRequestBuilder();
        cordova.getThreadPool().execute(new Runnable() {
            @Override
            public void run() {
                try {
                    if (params.has("region") && (params.getString("region") != null) && (!params.getString("region").isEmpty()) ) {
                        // Param: region, Type: String
                        freeFloatingsNearbyRequestBuilder.withRegion(stringStraightPass(params.getString("region")));
                    }
                    if (params.has("type") && (params.getString("type") != null) && (!params.getString("type").isEmpty()) ) {
                        // Param: type, Type: List
                        freeFloatingsNearbyRequestBuilder.withType(jsonArrayToStringList(params.getJSONArray("type")));
                    }
                    if (params.has("distance") && (params.getString("distance") != null) && (!params.getString("distance").isEmpty()) ) {
                        // Param: distance, Type: Integer
                        freeFloatingsNearbyRequestBuilder.withDistance(integerStraightPass(params.getInt("distance")));
                    }
                    if (params.has("count") && (params.getString("count") != null) && (!params.getString("count").isEmpty()) ) {
                        // Param: count, Type: Integer
                        freeFloatingsNearbyRequestBuilder.withCount(integerStraightPass(params.getInt("count")));
                    }
                    if (params.has("coord") && (params.getString("coord") != null) && (!params.getString("coord").isEmpty()) ) {
                        // Param: coord, Type: String
                        freeFloatingsNearbyRequestBuilder.withCoord(stringStraightPass(params.getString("coord")));
                    }
                    if (params.has("startPage") && (params.getString("startPage") != null) && (!params.getString("startPage").isEmpty()) ) {
                        // Param: startPage, Type: Integer
                        freeFloatingsNearbyRequestBuilder.withStartPage(integerStraightPass(params.getInt("startPage")));
                    }
                    
                    freeFloatingsNearbyRequestBuilder.rawGet(new ApiCallback<String>() {
                        @Override
                        public void onFailure(ApiException e, int statusCode, Map<String, List<String>> responseHeaders) {
                            callbackContext.error("Problem during request call | " + e.getMessage());
                        }

                        @Override
                        public void onSuccess(String result, int statusCode, Map<String, List<String>> responseHeaders) {
                            JSONObject jsonObject = null;
                            try {
                                jsonObject = new JSONObject(result);
                                callbackContext.success(jsonObject);
                            } catch (Exception e) {
                                String errorMessage = "Problem during response parsing | " + String.valueOf(e.hashCode()) + ": " + e.getMessage();
                                callbackContext.error(errorMessage);
                            }
                        }

                        @Override
                        public void onUploadProgress(long bytesWritten, long contentLength, boolean done) {
                        }

                        @Override
                        public void onDownloadProgress(long bytesRead, long contentLength, boolean done) {
                        }
                    });
                } catch (Exception e) {
                    String errorMessage = "Problem during request building | " + String.valueOf(e.hashCode()) + ": " + e.getMessage();
                    callbackContext.error(errorMessage);
                }
            }
        });
    }
    final private void coverageRegionUriFreefloatingsNearby(final JSONObject params, final CallbackContext callbackContext) {
        if (this.navitiaSdk == null) {
            callbackContext.error("NavitiaSDK is not instanciated");
            return;
        }

        final FreeFloatingsNearbyApi.CoverageRegionUriFreefloatingsNearbyRequestBuilder freeFloatingsNearbyRequestBuilder = this.navitiaSdk.freeFloatingsNearbyApi.newCoverageRegionUriFreefloatingsNearbyRequestBuilder();
        cordova.getThreadPool().execute(new Runnable() {
            @Override
            public void run() {
                try {
                    if (params.has("region") && (params.getString("region") != null) && (!params.getString("region").isEmpty()) ) {
                        // Param: region, Type: String
                        freeFloatingsNearbyRequestBuilder.withRegion(stringStraightPass(params.getString("region")));
                    }
                    if (params.has("uri") && (params.getString("uri") != null) && (!params.getString("uri").isEmpty()) ) {
                        // Param: uri, Type: String
                        freeFloatingsNearbyRequestBuilder.withUri(stringStraightPass(params.getString("uri")));
                    }
                    if (params.has("type") && (params.getString("type") != null) && (!params.getString("type").isEmpty()) ) {
                        // Param: type, Type: List
                        freeFloatingsNearbyRequestBuilder.withType(jsonArrayToStringList(params.getJSONArray("type")));
                    }
                    if (params.has("distance") && (params.getString("distance") != null) && (!params.getString("distance").isEmpty()) ) {
                        // Param: distance, Type: Integer
                        freeFloatingsNearbyRequestBuilder.withDistance(integerStraightPass(params.getInt("distance")));
                    }
                    if (params.has("count") && (params.getString("count") != null) && (!params.getString("count").isEmpty()) ) {
                        // Param: count, Type: Integer
                        freeFloatingsNearbyRequestBuilder.withCount(integerStraightPass(params.getInt("count")));
                    }
                    if (params.has("coord") && (params.getString("coord") != null) && (!params.getString("coord").isEmpty()) ) {
                        // Param: coord, Type: String
                        freeFloatingsNearbyRequestBuilder.withCoord(stringStraightPass(params.getString("coord")));
                    }
                    if (params.has("startPage") && (params.getString("startPage") != null) && (!params.getString("startPage").isEmpty()) ) {
                        // Param: startPage, Type: Integer
                        freeFloatingsNearbyRequestBuilder.withStartPage(integerStraightPass(params.getInt("startPage")));
                    }
                    
                    freeFloatingsNearbyRequestBuilder.rawGet(new ApiCallback<String>() {
                        @Override
                        public void onFailure(ApiException e, int statusCode, Map<String, List<String>> responseHeaders) {
                            callbackContext.error("Problem during request call | " + e.getMessage());
                        }

                        @Override
                        public void onSuccess(String result, int statusCode, Map<String, List<String>> responseHeaders) {
                            JSONObject jsonObject = null;
                            try {
                                jsonObject = new JSONObject(result);
                                callbackContext.success(jsonObject);
                            } catch (Exception e) {
                                String errorMessage = "Problem during response parsing | " + String.valueOf(e.hashCode()) + ": " + e.getMessage();
                                callbackContext.error(errorMessage);
                            }
                        }

                        @Override
                        public void onUploadProgress(long bytesWritten, long contentLength, boolean done) {
                        }

                        @Override
                        public void onDownloadProgress(long bytesRead, long contentLength, boolean done) {
                        }
                    });
                } catch (Exception e) {
                    String errorMessage = "Problem during request building | " + String.valueOf(e.hashCode()) + ": " + e.getMessage();
                    callbackContext.error(errorMessage);
                }
            }
        });
    }
    final private void coverageLonLatGeoStatus(final JSONObject params, final CallbackContext callbackContext) {
        if (this.navitiaSdk == null) {
            callbackContext.error("NavitiaSDK is not instanciated");
            return;
        }

        final GeoStatusApi.CoverageLonLatGeoStatusRequestBuilder geoStatusRequestBuilder = this.navitiaSdk.geoStatusApi.newCoverageLonLatGeoStatusRequestBuilder();
        cordova.getThreadPool().execute(new Runnable() {
            @Override
            public void run() {
                try {
                    if (params.has("lat") && (params.getString("lat") != null) && (!params.getString("lat").isEmpty()) ) {
                        // Param: lat, Type: BigDecimal
                        geoStatusRequestBuilder.withLat(longToBigDecimal(params.getLong("lat")));
                    }
                    if (params.has("lon") && (params.getString("lon") != null) && (!params.getString("lon").isEmpty()) ) {
                        // Param: lon, Type: BigDecimal
                        geoStatusRequestBuilder.withLon(longToBigDecimal(params.getLong("lon")));
                    }
                    
                    geoStatusRequestBuilder.rawGet(new ApiCallback<String>() {
                        @Override
                        public void onFailure(ApiException e, int statusCode, Map<String, List<String>> responseHeaders) {
                            callbackContext.error("Problem during request call | " + e.getMessage());
                        }

                        @Override
                        public void onSuccess(String result, int statusCode, Map<String, List<String>> responseHeaders) {
                            JSONObject jsonObject = null;
                            try {
                                jsonObject = new JSONObject(result);
                                callbackContext.success(jsonObject);
                            } catch (Exception e) {
                                String errorMessage = "Problem during response parsing | " + String.valueOf(e.hashCode()) + ": " + e.getMessage();
                                callbackContext.error(errorMessage);
                            }
                        }

                        @Override
                        public void onUploadProgress(long bytesWritten, long contentLength, boolean done) {
                        }

                        @Override
                        public void onDownloadProgress(long bytesRead, long contentLength, boolean done) {
                        }
                    });
                } catch (Exception e) {
                    String errorMessage = "Problem during request building | " + String.valueOf(e.hashCode()) + ": " + e.getMessage();
                    callbackContext.error(errorMessage);
                }
            }
        });
    }
    final private void coverageRegionGeoStatus(final JSONObject params, final CallbackContext callbackContext) {
        if (this.navitiaSdk == null) {
            callbackContext.error("NavitiaSDK is not instanciated");
            return;
        }

        final GeoStatusApi.CoverageRegionGeoStatusRequestBuilder geoStatusRequestBuilder = this.navitiaSdk.geoStatusApi.newCoverageRegionGeoStatusRequestBuilder();
        cordova.getThreadPool().execute(new Runnable() {
            @Override
            public void run() {
                try {
                    if (params.has("region") && (params.getString("region") != null) && (!params.getString("region").isEmpty()) ) {
                        // Param: region, Type: String
                        geoStatusRequestBuilder.withRegion(stringStraightPass(params.getString("region")));
                    }
                    
                    geoStatusRequestBuilder.rawGet(new ApiCallback<String>() {
                        @Override
                        public void onFailure(ApiException e, int statusCode, Map<String, List<String>> responseHeaders) {
                            callbackContext.error("Problem during request call | " + e.getMessage());
                        }

                        @Override
                        public void onSuccess(String result, int statusCode, Map<String, List<String>> responseHeaders) {
                            JSONObject jsonObject = null;
                            try {
                                jsonObject = new JSONObject(result);
                                callbackContext.success(jsonObject);
                            } catch (Exception e) {
                                String errorMessage = "Problem during response parsing | " + String.valueOf(e.hashCode()) + ": " + e.getMessage();
                                callbackContext.error(errorMessage);
                            }
                        }

                        @Override
                        public void onUploadProgress(long bytesWritten, long contentLength, boolean done) {
                        }

                        @Override
                        public void onDownloadProgress(long bytesRead, long contentLength, boolean done) {
                        }
                    });
                } catch (Exception e) {
                    String errorMessage = "Problem during request building | " + String.valueOf(e.hashCode()) + ": " + e.getMessage();
                    callbackContext.error(errorMessage);
                }
            }
        });
    }
    final private void coverageLonLatIsochrones(final JSONObject params, final CallbackContext callbackContext) {
        if (this.navitiaSdk == null) {
            callbackContext.error("NavitiaSDK is not instanciated");
            return;
        }

        final GraphicalIsochroneApi.CoverageLonLatIsochronesRequestBuilder graphicalIsochroneRequestBuilder = this.navitiaSdk.graphicalIsochroneApi.newCoverageLonLatIsochronesRequestBuilder();
        cordova.getThreadPool().execute(new Runnable() {
            @Override
            public void run() {
                try {
                    if (params.has("lat") && (params.getString("lat") != null) && (!params.getString("lat").isEmpty()) ) {
                        // Param: lat, Type: BigDecimal
                        graphicalIsochroneRequestBuilder.withLat(longToBigDecimal(params.getLong("lat")));
                    }
                    if (params.has("lon") && (params.getString("lon") != null) && (!params.getString("lon").isEmpty()) ) {
                        // Param: lon, Type: BigDecimal
                        graphicalIsochroneRequestBuilder.withLon(longToBigDecimal(params.getLong("lon")));
                    }
                    if (params.has("from") && (params.getString("from") != null) && (!params.getString("from").isEmpty()) ) {
                        // Param: from, Type: String
                        graphicalIsochroneRequestBuilder.withFrom(stringStraightPass(params.getString("from")));
                    }
                    if (params.has("to") && (params.getString("to") != null) && (!params.getString("to").isEmpty()) ) {
                        // Param: to, Type: String
                        graphicalIsochroneRequestBuilder.withTo(stringStraightPass(params.getString("to")));
                    }
                    if (params.has("datetime") && (params.getString("datetime") != null) && (!params.getString("datetime").isEmpty()) ) {
                        // Param: datetime, Type: Date
                        graphicalIsochroneRequestBuilder.withDatetime(stringToDateTime(params.getString("datetime")));
                    }
                    if (params.has("datetimeRepresents") && (params.getString("datetimeRepresents") != null) && (!params.getString("datetimeRepresents").isEmpty()) ) {
                        // Param: datetimeRepresents, Type: String
                        graphicalIsochroneRequestBuilder.withDatetimeRepresents(stringStraightPass(params.getString("datetimeRepresents")));
                    }
                    if (params.has("maxNbTransfers") && (params.getString("maxNbTransfers") != null) && (!params.getString("maxNbTransfers").isEmpty()) ) {
                        // Param: maxNbTransfers, Type: Integer
                        graphicalIsochroneRequestBuilder.withMaxNbTransfers(integerStraightPass(params.getInt("maxNbTransfers")));
                    }
                    if (params.has("minNbTransfers") && (params.getString("minNbTransfers") != null) && (!params.getString("minNbTransfers").isEmpty()) ) {
                        // Param: minNbTransfers, Type: Integer
                        graphicalIsochroneRequestBuilder.withMinNbTransfers(integerStraightPass(params.getInt("minNbTransfers")));
                    }
                    if (params.has("firstSectionMode") && (params.getString("firstSectionMode") != null) && (!params.getString("firstSectionMode").isEmpty()) ) {
                        // Param: firstSectionMode, Type: List
                        graphicalIsochroneRequestBuilder.withFirstSectionMode(jsonArrayToStringList(params.getJSONArray("firstSectionMode")));
                    }
                    if (params.has("lastSectionMode") && (params.getString("lastSectionMode") != null) && (!params.getString("lastSectionMode").isEmpty()) ) {
                        // Param: lastSectionMode, Type: List
                        graphicalIsochroneRequestBuilder.withLastSectionMode(jsonArrayToStringList(params.getJSONArray("lastSectionMode")));
                    }
                    if (params.has("maxDurationToPt") && (params.getString("maxDurationToPt") != null) && (!params.getString("maxDurationToPt").isEmpty()) ) {
                        // Param: maxDurationToPt, Type: Integer
                        graphicalIsochroneRequestBuilder.withMaxDurationToPt(integerStraightPass(params.getInt("maxDurationToPt")));
                    }
                    if (params.has("maxWalkingDurationToPt") && (params.getString("maxWalkingDurationToPt") != null) && (!params.getString("maxWalkingDurationToPt").isEmpty()) ) {
                        // Param: maxWalkingDurationToPt, Type: Integer
                        graphicalIsochroneRequestBuilder.withMaxWalkingDurationToPt(integerStraightPass(params.getInt("maxWalkingDurationToPt")));
                    }
                    if (params.has("maxBikeDurationToPt") && (params.getString("maxBikeDurationToPt") != null) && (!params.getString("maxBikeDurationToPt").isEmpty()) ) {
                        // Param: maxBikeDurationToPt, Type: Integer
                        graphicalIsochroneRequestBuilder.withMaxBikeDurationToPt(integerStraightPass(params.getInt("maxBikeDurationToPt")));
                    }
                    if (params.has("maxBssDurationToPt") && (params.getString("maxBssDurationToPt") != null) && (!params.getString("maxBssDurationToPt").isEmpty()) ) {
                        // Param: maxBssDurationToPt, Type: Integer
                        graphicalIsochroneRequestBuilder.withMaxBssDurationToPt(integerStraightPass(params.getInt("maxBssDurationToPt")));
                    }
                    if (params.has("maxCarDurationToPt") && (params.getString("maxCarDurationToPt") != null) && (!params.getString("maxCarDurationToPt").isEmpty()) ) {
                        // Param: maxCarDurationToPt, Type: Integer
                        graphicalIsochroneRequestBuilder.withMaxCarDurationToPt(integerStraightPass(params.getInt("maxCarDurationToPt")));
                    }
                    if (params.has("maxRidesharingDurationToPt") && (params.getString("maxRidesharingDurationToPt") != null) && (!params.getString("maxRidesharingDurationToPt").isEmpty()) ) {
                        // Param: maxRidesharingDurationToPt, Type: Integer
                        graphicalIsochroneRequestBuilder.withMaxRidesharingDurationToPt(integerStraightPass(params.getInt("maxRidesharingDurationToPt")));
                    }
                    if (params.has("maxCarNoParkDurationToPt") && (params.getString("maxCarNoParkDurationToPt") != null) && (!params.getString("maxCarNoParkDurationToPt").isEmpty()) ) {
                        // Param: maxCarNoParkDurationToPt, Type: Integer
                        graphicalIsochroneRequestBuilder.withMaxCarNoParkDurationToPt(integerStraightPass(params.getInt("maxCarNoParkDurationToPt")));
                    }
                    if (params.has("maxTaxiDurationToPt") && (params.getString("maxTaxiDurationToPt") != null) && (!params.getString("maxTaxiDurationToPt").isEmpty()) ) {
                        // Param: maxTaxiDurationToPt, Type: Integer
                        graphicalIsochroneRequestBuilder.withMaxTaxiDurationToPt(integerStraightPass(params.getInt("maxTaxiDurationToPt")));
                    }
                    if (params.has("walkingSpeed") && (params.getString("walkingSpeed") != null) && (!params.getString("walkingSpeed").isEmpty()) ) {
                        // Param: walkingSpeed, Type: Float
                        graphicalIsochroneRequestBuilder.withWalkingSpeed(longToFloat(params.getLong("walkingSpeed")));
                    }
                    if (params.has("bikeSpeed") && (params.getString("bikeSpeed") != null) && (!params.getString("bikeSpeed").isEmpty()) ) {
                        // Param: bikeSpeed, Type: Float
                        graphicalIsochroneRequestBuilder.withBikeSpeed(longToFloat(params.getLong("bikeSpeed")));
                    }
                    if (params.has("bssSpeed") && (params.getString("bssSpeed") != null) && (!params.getString("bssSpeed").isEmpty()) ) {
                        // Param: bssSpeed, Type: Float
                        graphicalIsochroneRequestBuilder.withBssSpeed(longToFloat(params.getLong("bssSpeed")));
                    }
                    if (params.has("carSpeed") && (params.getString("carSpeed") != null) && (!params.getString("carSpeed").isEmpty()) ) {
                        // Param: carSpeed, Type: Float
                        graphicalIsochroneRequestBuilder.withCarSpeed(longToFloat(params.getLong("carSpeed")));
                    }
                    if (params.has("ridesharingSpeed") && (params.getString("ridesharingSpeed") != null) && (!params.getString("ridesharingSpeed").isEmpty()) ) {
                        // Param: ridesharingSpeed, Type: Float
                        graphicalIsochroneRequestBuilder.withRidesharingSpeed(longToFloat(params.getLong("ridesharingSpeed")));
                    }
                    if (params.has("carNoParkSpeed") && (params.getString("carNoParkSpeed") != null) && (!params.getString("carNoParkSpeed").isEmpty()) ) {
                        // Param: carNoParkSpeed, Type: Float
                        graphicalIsochroneRequestBuilder.withCarNoParkSpeed(longToFloat(params.getLong("carNoParkSpeed")));
                    }
                    if (params.has("taxiSpeed") && (params.getString("taxiSpeed") != null) && (!params.getString("taxiSpeed").isEmpty()) ) {
                        // Param: taxiSpeed, Type: Float
                        graphicalIsochroneRequestBuilder.withTaxiSpeed(longToFloat(params.getLong("taxiSpeed")));
                    }
                    if (params.has("forbiddenUris") && (params.getString("forbiddenUris") != null) && (!params.getString("forbiddenUris").isEmpty()) ) {
                        // Param: forbiddenUris, Type: List
                        graphicalIsochroneRequestBuilder.withForbiddenUris(jsonArrayToStringList(params.getJSONArray("forbiddenUris")));
                    }
                    if (params.has("allowedId") && (params.getString("allowedId") != null) && (!params.getString("allowedId").isEmpty()) ) {
                        // Param: allowedId, Type: List
                        graphicalIsochroneRequestBuilder.withAllowedId(jsonArrayToStringList(params.getJSONArray("allowedId")));
                    }
                    if (params.has("disruptionActive") && (params.getString("disruptionActive") != null) && (!params.getString("disruptionActive").isEmpty()) ) {
                        // Param: disruptionActive, Type: Boolean
                        graphicalIsochroneRequestBuilder.withDisruptionActive(booleanStraightPass(params.getBoolean("disruptionActive")));
                    }
                    if (params.has("dataFreshness") && (params.getString("dataFreshness") != null) && (!params.getString("dataFreshness").isEmpty()) ) {
                        // Param: dataFreshness, Type: String
                        graphicalIsochroneRequestBuilder.withDataFreshness(stringStraightPass(params.getString("dataFreshness")));
                    }
                    if (params.has("maxDuration") && (params.getString("maxDuration") != null) && (!params.getString("maxDuration").isEmpty()) ) {
                        // Param: maxDuration, Type: Integer
                        graphicalIsochroneRequestBuilder.withMaxDuration(integerStraightPass(params.getInt("maxDuration")));
                    }
                    if (params.has("wheelchair") && (params.getString("wheelchair") != null) && (!params.getString("wheelchair").isEmpty()) ) {
                        // Param: wheelchair, Type: Boolean
                        graphicalIsochroneRequestBuilder.withWheelchair(booleanStraightPass(params.getBoolean("wheelchair")));
                    }
                    if (params.has("travelerType") && (params.getString("travelerType") != null) && (!params.getString("travelerType").isEmpty()) ) {
                        // Param: travelerType, Type: String
                        graphicalIsochroneRequestBuilder.withTravelerType(stringStraightPass(params.getString("travelerType")));
                    }
                    if (params.has("directPath") && (params.getString("directPath") != null) && (!params.getString("directPath").isEmpty()) ) {
                        // Param: directPath, Type: String
                        graphicalIsochroneRequestBuilder.withDirectPath(stringStraightPass(params.getString("directPath")));
                    }
                    if (params.has("freeRadiusFrom") && (params.getString("freeRadiusFrom") != null) && (!params.getString("freeRadiusFrom").isEmpty()) ) {
                        // Param: freeRadiusFrom, Type: Integer
                        graphicalIsochroneRequestBuilder.withFreeRadiusFrom(integerStraightPass(params.getInt("freeRadiusFrom")));
                    }
                    if (params.has("freeRadiusTo") && (params.getString("freeRadiusTo") != null) && (!params.getString("freeRadiusTo").isEmpty()) ) {
                        // Param: freeRadiusTo, Type: Integer
                        graphicalIsochroneRequestBuilder.withFreeRadiusTo(integerStraightPass(params.getInt("freeRadiusTo")));
                    }
                    if (params.has("directPathMode") && (params.getString("directPathMode") != null) && (!params.getString("directPathMode").isEmpty()) ) {
                        // Param: directPathMode, Type: List
                        graphicalIsochroneRequestBuilder.withDirectPathMode(jsonArrayToStringList(params.getJSONArray("directPathMode")));
                    }
                    if (params.has("partnerServices") && (params.getString("partnerServices") != null) && (!params.getString("partnerServices").isEmpty()) ) {
                        // Param: partnerServices, Type: List
                        graphicalIsochroneRequestBuilder.withPartnerServices(jsonArrayToStringList(params.getJSONArray("partnerServices")));
                    }
                    if (params.has("minDuration") && (params.getString("minDuration") != null) && (!params.getString("minDuration").isEmpty()) ) {
                        // Param: minDuration, Type: Integer
                        graphicalIsochroneRequestBuilder.withMinDuration(integerStraightPass(params.getInt("minDuration")));
                    }
                    if (params.has("boundaryDuration") && (params.getString("boundaryDuration") != null) && (!params.getString("boundaryDuration").isEmpty()) ) {
                        // Param: boundaryDuration, Type: List
                        graphicalIsochroneRequestBuilder.withBoundaryDuration(jsonArrayToIntegerList(params.getJSONArray("boundaryDuration")));
                    }
                    
                    graphicalIsochroneRequestBuilder.rawGet(new ApiCallback<String>() {
                        @Override
                        public void onFailure(ApiException e, int statusCode, Map<String, List<String>> responseHeaders) {
                            callbackContext.error("Problem during request call | " + e.getMessage());
                        }

                        @Override
                        public void onSuccess(String result, int statusCode, Map<String, List<String>> responseHeaders) {
                            JSONObject jsonObject = null;
                            try {
                                jsonObject = new JSONObject(result);
                                callbackContext.success(jsonObject);
                            } catch (Exception e) {
                                String errorMessage = "Problem during response parsing | " + String.valueOf(e.hashCode()) + ": " + e.getMessage();
                                callbackContext.error(errorMessage);
                            }
                        }

                        @Override
                        public void onUploadProgress(long bytesWritten, long contentLength, boolean done) {
                        }

                        @Override
                        public void onDownloadProgress(long bytesRead, long contentLength, boolean done) {
                        }
                    });
                } catch (Exception e) {
                    String errorMessage = "Problem during request building | " + String.valueOf(e.hashCode()) + ": " + e.getMessage();
                    callbackContext.error(errorMessage);
                }
            }
        });
    }
    final private void coverageRegionIsochrones(final JSONObject params, final CallbackContext callbackContext) {
        if (this.navitiaSdk == null) {
            callbackContext.error("NavitiaSDK is not instanciated");
            return;
        }

        final GraphicalIsochroneApi.CoverageRegionIsochronesRequestBuilder graphicalIsochroneRequestBuilder = this.navitiaSdk.graphicalIsochroneApi.newCoverageRegionIsochronesRequestBuilder();
        cordova.getThreadPool().execute(new Runnable() {
            @Override
            public void run() {
                try {
                    if (params.has("region") && (params.getString("region") != null) && (!params.getString("region").isEmpty()) ) {
                        // Param: region, Type: String
                        graphicalIsochroneRequestBuilder.withRegion(stringStraightPass(params.getString("region")));
                    }
                    if (params.has("from") && (params.getString("from") != null) && (!params.getString("from").isEmpty()) ) {
                        // Param: from, Type: String
                        graphicalIsochroneRequestBuilder.withFrom(stringStraightPass(params.getString("from")));
                    }
                    if (params.has("to") && (params.getString("to") != null) && (!params.getString("to").isEmpty()) ) {
                        // Param: to, Type: String
                        graphicalIsochroneRequestBuilder.withTo(stringStraightPass(params.getString("to")));
                    }
                    if (params.has("datetime") && (params.getString("datetime") != null) && (!params.getString("datetime").isEmpty()) ) {
                        // Param: datetime, Type: Date
                        graphicalIsochroneRequestBuilder.withDatetime(stringToDateTime(params.getString("datetime")));
                    }
                    if (params.has("datetimeRepresents") && (params.getString("datetimeRepresents") != null) && (!params.getString("datetimeRepresents").isEmpty()) ) {
                        // Param: datetimeRepresents, Type: String
                        graphicalIsochroneRequestBuilder.withDatetimeRepresents(stringStraightPass(params.getString("datetimeRepresents")));
                    }
                    if (params.has("maxNbTransfers") && (params.getString("maxNbTransfers") != null) && (!params.getString("maxNbTransfers").isEmpty()) ) {
                        // Param: maxNbTransfers, Type: Integer
                        graphicalIsochroneRequestBuilder.withMaxNbTransfers(integerStraightPass(params.getInt("maxNbTransfers")));
                    }
                    if (params.has("minNbTransfers") && (params.getString("minNbTransfers") != null) && (!params.getString("minNbTransfers").isEmpty()) ) {
                        // Param: minNbTransfers, Type: Integer
                        graphicalIsochroneRequestBuilder.withMinNbTransfers(integerStraightPass(params.getInt("minNbTransfers")));
                    }
                    if (params.has("firstSectionMode") && (params.getString("firstSectionMode") != null) && (!params.getString("firstSectionMode").isEmpty()) ) {
                        // Param: firstSectionMode, Type: List
                        graphicalIsochroneRequestBuilder.withFirstSectionMode(jsonArrayToStringList(params.getJSONArray("firstSectionMode")));
                    }
                    if (params.has("lastSectionMode") && (params.getString("lastSectionMode") != null) && (!params.getString("lastSectionMode").isEmpty()) ) {
                        // Param: lastSectionMode, Type: List
                        graphicalIsochroneRequestBuilder.withLastSectionMode(jsonArrayToStringList(params.getJSONArray("lastSectionMode")));
                    }
                    if (params.has("maxDurationToPt") && (params.getString("maxDurationToPt") != null) && (!params.getString("maxDurationToPt").isEmpty()) ) {
                        // Param: maxDurationToPt, Type: Integer
                        graphicalIsochroneRequestBuilder.withMaxDurationToPt(integerStraightPass(params.getInt("maxDurationToPt")));
                    }
                    if (params.has("maxWalkingDurationToPt") && (params.getString("maxWalkingDurationToPt") != null) && (!params.getString("maxWalkingDurationToPt").isEmpty()) ) {
                        // Param: maxWalkingDurationToPt, Type: Integer
                        graphicalIsochroneRequestBuilder.withMaxWalkingDurationToPt(integerStraightPass(params.getInt("maxWalkingDurationToPt")));
                    }
                    if (params.has("maxBikeDurationToPt") && (params.getString("maxBikeDurationToPt") != null) && (!params.getString("maxBikeDurationToPt").isEmpty()) ) {
                        // Param: maxBikeDurationToPt, Type: Integer
                        graphicalIsochroneRequestBuilder.withMaxBikeDurationToPt(integerStraightPass(params.getInt("maxBikeDurationToPt")));
                    }
                    if (params.has("maxBssDurationToPt") && (params.getString("maxBssDurationToPt") != null) && (!params.getString("maxBssDurationToPt").isEmpty()) ) {
                        // Param: maxBssDurationToPt, Type: Integer
                        graphicalIsochroneRequestBuilder.withMaxBssDurationToPt(integerStraightPass(params.getInt("maxBssDurationToPt")));
                    }
                    if (params.has("maxCarDurationToPt") && (params.getString("maxCarDurationToPt") != null) && (!params.getString("maxCarDurationToPt").isEmpty()) ) {
                        // Param: maxCarDurationToPt, Type: Integer
                        graphicalIsochroneRequestBuilder.withMaxCarDurationToPt(integerStraightPass(params.getInt("maxCarDurationToPt")));
                    }
                    if (params.has("maxRidesharingDurationToPt") && (params.getString("maxRidesharingDurationToPt") != null) && (!params.getString("maxRidesharingDurationToPt").isEmpty()) ) {
                        // Param: maxRidesharingDurationToPt, Type: Integer
                        graphicalIsochroneRequestBuilder.withMaxRidesharingDurationToPt(integerStraightPass(params.getInt("maxRidesharingDurationToPt")));
                    }
                    if (params.has("maxCarNoParkDurationToPt") && (params.getString("maxCarNoParkDurationToPt") != null) && (!params.getString("maxCarNoParkDurationToPt").isEmpty()) ) {
                        // Param: maxCarNoParkDurationToPt, Type: Integer
                        graphicalIsochroneRequestBuilder.withMaxCarNoParkDurationToPt(integerStraightPass(params.getInt("maxCarNoParkDurationToPt")));
                    }
                    if (params.has("maxTaxiDurationToPt") && (params.getString("maxTaxiDurationToPt") != null) && (!params.getString("maxTaxiDurationToPt").isEmpty()) ) {
                        // Param: maxTaxiDurationToPt, Type: Integer
                        graphicalIsochroneRequestBuilder.withMaxTaxiDurationToPt(integerStraightPass(params.getInt("maxTaxiDurationToPt")));
                    }
                    if (params.has("walkingSpeed") && (params.getString("walkingSpeed") != null) && (!params.getString("walkingSpeed").isEmpty()) ) {
                        // Param: walkingSpeed, Type: Float
                        graphicalIsochroneRequestBuilder.withWalkingSpeed(longToFloat(params.getLong("walkingSpeed")));
                    }
                    if (params.has("bikeSpeed") && (params.getString("bikeSpeed") != null) && (!params.getString("bikeSpeed").isEmpty()) ) {
                        // Param: bikeSpeed, Type: Float
                        graphicalIsochroneRequestBuilder.withBikeSpeed(longToFloat(params.getLong("bikeSpeed")));
                    }
                    if (params.has("bssSpeed") && (params.getString("bssSpeed") != null) && (!params.getString("bssSpeed").isEmpty()) ) {
                        // Param: bssSpeed, Type: Float
                        graphicalIsochroneRequestBuilder.withBssSpeed(longToFloat(params.getLong("bssSpeed")));
                    }
                    if (params.has("carSpeed") && (params.getString("carSpeed") != null) && (!params.getString("carSpeed").isEmpty()) ) {
                        // Param: carSpeed, Type: Float
                        graphicalIsochroneRequestBuilder.withCarSpeed(longToFloat(params.getLong("carSpeed")));
                    }
                    if (params.has("ridesharingSpeed") && (params.getString("ridesharingSpeed") != null) && (!params.getString("ridesharingSpeed").isEmpty()) ) {
                        // Param: ridesharingSpeed, Type: Float
                        graphicalIsochroneRequestBuilder.withRidesharingSpeed(longToFloat(params.getLong("ridesharingSpeed")));
                    }
                    if (params.has("carNoParkSpeed") && (params.getString("carNoParkSpeed") != null) && (!params.getString("carNoParkSpeed").isEmpty()) ) {
                        // Param: carNoParkSpeed, Type: Float
                        graphicalIsochroneRequestBuilder.withCarNoParkSpeed(longToFloat(params.getLong("carNoParkSpeed")));
                    }
                    if (params.has("taxiSpeed") && (params.getString("taxiSpeed") != null) && (!params.getString("taxiSpeed").isEmpty()) ) {
                        // Param: taxiSpeed, Type: Float
                        graphicalIsochroneRequestBuilder.withTaxiSpeed(longToFloat(params.getLong("taxiSpeed")));
                    }
                    if (params.has("forbiddenUris") && (params.getString("forbiddenUris") != null) && (!params.getString("forbiddenUris").isEmpty()) ) {
                        // Param: forbiddenUris, Type: List
                        graphicalIsochroneRequestBuilder.withForbiddenUris(jsonArrayToStringList(params.getJSONArray("forbiddenUris")));
                    }
                    if (params.has("allowedId") && (params.getString("allowedId") != null) && (!params.getString("allowedId").isEmpty()) ) {
                        // Param: allowedId, Type: List
                        graphicalIsochroneRequestBuilder.withAllowedId(jsonArrayToStringList(params.getJSONArray("allowedId")));
                    }
                    if (params.has("disruptionActive") && (params.getString("disruptionActive") != null) && (!params.getString("disruptionActive").isEmpty()) ) {
                        // Param: disruptionActive, Type: Boolean
                        graphicalIsochroneRequestBuilder.withDisruptionActive(booleanStraightPass(params.getBoolean("disruptionActive")));
                    }
                    if (params.has("dataFreshness") && (params.getString("dataFreshness") != null) && (!params.getString("dataFreshness").isEmpty()) ) {
                        // Param: dataFreshness, Type: String
                        graphicalIsochroneRequestBuilder.withDataFreshness(stringStraightPass(params.getString("dataFreshness")));
                    }
                    if (params.has("maxDuration") && (params.getString("maxDuration") != null) && (!params.getString("maxDuration").isEmpty()) ) {
                        // Param: maxDuration, Type: Integer
                        graphicalIsochroneRequestBuilder.withMaxDuration(integerStraightPass(params.getInt("maxDuration")));
                    }
                    if (params.has("wheelchair") && (params.getString("wheelchair") != null) && (!params.getString("wheelchair").isEmpty()) ) {
                        // Param: wheelchair, Type: Boolean
                        graphicalIsochroneRequestBuilder.withWheelchair(booleanStraightPass(params.getBoolean("wheelchair")));
                    }
                    if (params.has("travelerType") && (params.getString("travelerType") != null) && (!params.getString("travelerType").isEmpty()) ) {
                        // Param: travelerType, Type: String
                        graphicalIsochroneRequestBuilder.withTravelerType(stringStraightPass(params.getString("travelerType")));
                    }
                    if (params.has("directPath") && (params.getString("directPath") != null) && (!params.getString("directPath").isEmpty()) ) {
                        // Param: directPath, Type: String
                        graphicalIsochroneRequestBuilder.withDirectPath(stringStraightPass(params.getString("directPath")));
                    }
                    if (params.has("freeRadiusFrom") && (params.getString("freeRadiusFrom") != null) && (!params.getString("freeRadiusFrom").isEmpty()) ) {
                        // Param: freeRadiusFrom, Type: Integer
                        graphicalIsochroneRequestBuilder.withFreeRadiusFrom(integerStraightPass(params.getInt("freeRadiusFrom")));
                    }
                    if (params.has("freeRadiusTo") && (params.getString("freeRadiusTo") != null) && (!params.getString("freeRadiusTo").isEmpty()) ) {
                        // Param: freeRadiusTo, Type: Integer
                        graphicalIsochroneRequestBuilder.withFreeRadiusTo(integerStraightPass(params.getInt("freeRadiusTo")));
                    }
                    if (params.has("directPathMode") && (params.getString("directPathMode") != null) && (!params.getString("directPathMode").isEmpty()) ) {
                        // Param: directPathMode, Type: List
                        graphicalIsochroneRequestBuilder.withDirectPathMode(jsonArrayToStringList(params.getJSONArray("directPathMode")));
                    }
                    if (params.has("partnerServices") && (params.getString("partnerServices") != null) && (!params.getString("partnerServices").isEmpty()) ) {
                        // Param: partnerServices, Type: List
                        graphicalIsochroneRequestBuilder.withPartnerServices(jsonArrayToStringList(params.getJSONArray("partnerServices")));
                    }
                    if (params.has("minDuration") && (params.getString("minDuration") != null) && (!params.getString("minDuration").isEmpty()) ) {
                        // Param: minDuration, Type: Integer
                        graphicalIsochroneRequestBuilder.withMinDuration(integerStraightPass(params.getInt("minDuration")));
                    }
                    if (params.has("boundaryDuration") && (params.getString("boundaryDuration") != null) && (!params.getString("boundaryDuration").isEmpty()) ) {
                        // Param: boundaryDuration, Type: List
                        graphicalIsochroneRequestBuilder.withBoundaryDuration(jsonArrayToIntegerList(params.getJSONArray("boundaryDuration")));
                    }
                    
                    graphicalIsochroneRequestBuilder.rawGet(new ApiCallback<String>() {
                        @Override
                        public void onFailure(ApiException e, int statusCode, Map<String, List<String>> responseHeaders) {
                            callbackContext.error("Problem during request call | " + e.getMessage());
                        }

                        @Override
                        public void onSuccess(String result, int statusCode, Map<String, List<String>> responseHeaders) {
                            JSONObject jsonObject = null;
                            try {
                                jsonObject = new JSONObject(result);
                                callbackContext.success(jsonObject);
                            } catch (Exception e) {
                                String errorMessage = "Problem during response parsing | " + String.valueOf(e.hashCode()) + ": " + e.getMessage();
                                callbackContext.error(errorMessage);
                            }
                        }

                        @Override
                        public void onUploadProgress(long bytesWritten, long contentLength, boolean done) {
                        }

                        @Override
                        public void onDownloadProgress(long bytesRead, long contentLength, boolean done) {
                        }
                    });
                } catch (Exception e) {
                    String errorMessage = "Problem during request building | " + String.valueOf(e.hashCode()) + ": " + e.getMessage();
                    callbackContext.error(errorMessage);
                }
            }
        });
    }
    final private void coverageLonLatHeatMaps(final JSONObject params, final CallbackContext callbackContext) {
        if (this.navitiaSdk == null) {
            callbackContext.error("NavitiaSDK is not instanciated");
            return;
        }

        final HeatMapApi.CoverageLonLatHeatMapsRequestBuilder heatMapRequestBuilder = this.navitiaSdk.heatMapApi.newCoverageLonLatHeatMapsRequestBuilder();
        cordova.getThreadPool().execute(new Runnable() {
            @Override
            public void run() {
                try {
                    if (params.has("lat") && (params.getString("lat") != null) && (!params.getString("lat").isEmpty()) ) {
                        // Param: lat, Type: BigDecimal
                        heatMapRequestBuilder.withLat(longToBigDecimal(params.getLong("lat")));
                    }
                    if (params.has("lon") && (params.getString("lon") != null) && (!params.getString("lon").isEmpty()) ) {
                        // Param: lon, Type: BigDecimal
                        heatMapRequestBuilder.withLon(longToBigDecimal(params.getLong("lon")));
                    }
                    if (params.has("from") && (params.getString("from") != null) && (!params.getString("from").isEmpty()) ) {
                        // Param: from, Type: String
                        heatMapRequestBuilder.withFrom(stringStraightPass(params.getString("from")));
                    }
                    if (params.has("to") && (params.getString("to") != null) && (!params.getString("to").isEmpty()) ) {
                        // Param: to, Type: String
                        heatMapRequestBuilder.withTo(stringStraightPass(params.getString("to")));
                    }
                    if (params.has("datetime") && (params.getString("datetime") != null) && (!params.getString("datetime").isEmpty()) ) {
                        // Param: datetime, Type: Date
                        heatMapRequestBuilder.withDatetime(stringToDateTime(params.getString("datetime")));
                    }
                    if (params.has("datetimeRepresents") && (params.getString("datetimeRepresents") != null) && (!params.getString("datetimeRepresents").isEmpty()) ) {
                        // Param: datetimeRepresents, Type: String
                        heatMapRequestBuilder.withDatetimeRepresents(stringStraightPass(params.getString("datetimeRepresents")));
                    }
                    if (params.has("maxNbTransfers") && (params.getString("maxNbTransfers") != null) && (!params.getString("maxNbTransfers").isEmpty()) ) {
                        // Param: maxNbTransfers, Type: Integer
                        heatMapRequestBuilder.withMaxNbTransfers(integerStraightPass(params.getInt("maxNbTransfers")));
                    }
                    if (params.has("minNbTransfers") && (params.getString("minNbTransfers") != null) && (!params.getString("minNbTransfers").isEmpty()) ) {
                        // Param: minNbTransfers, Type: Integer
                        heatMapRequestBuilder.withMinNbTransfers(integerStraightPass(params.getInt("minNbTransfers")));
                    }
                    if (params.has("firstSectionMode") && (params.getString("firstSectionMode") != null) && (!params.getString("firstSectionMode").isEmpty()) ) {
                        // Param: firstSectionMode, Type: List
                        heatMapRequestBuilder.withFirstSectionMode(jsonArrayToStringList(params.getJSONArray("firstSectionMode")));
                    }
                    if (params.has("lastSectionMode") && (params.getString("lastSectionMode") != null) && (!params.getString("lastSectionMode").isEmpty()) ) {
                        // Param: lastSectionMode, Type: List
                        heatMapRequestBuilder.withLastSectionMode(jsonArrayToStringList(params.getJSONArray("lastSectionMode")));
                    }
                    if (params.has("maxDurationToPt") && (params.getString("maxDurationToPt") != null) && (!params.getString("maxDurationToPt").isEmpty()) ) {
                        // Param: maxDurationToPt, Type: Integer
                        heatMapRequestBuilder.withMaxDurationToPt(integerStraightPass(params.getInt("maxDurationToPt")));
                    }
                    if (params.has("maxWalkingDurationToPt") && (params.getString("maxWalkingDurationToPt") != null) && (!params.getString("maxWalkingDurationToPt").isEmpty()) ) {
                        // Param: maxWalkingDurationToPt, Type: Integer
                        heatMapRequestBuilder.withMaxWalkingDurationToPt(integerStraightPass(params.getInt("maxWalkingDurationToPt")));
                    }
                    if (params.has("maxBikeDurationToPt") && (params.getString("maxBikeDurationToPt") != null) && (!params.getString("maxBikeDurationToPt").isEmpty()) ) {
                        // Param: maxBikeDurationToPt, Type: Integer
                        heatMapRequestBuilder.withMaxBikeDurationToPt(integerStraightPass(params.getInt("maxBikeDurationToPt")));
                    }
                    if (params.has("maxBssDurationToPt") && (params.getString("maxBssDurationToPt") != null) && (!params.getString("maxBssDurationToPt").isEmpty()) ) {
                        // Param: maxBssDurationToPt, Type: Integer
                        heatMapRequestBuilder.withMaxBssDurationToPt(integerStraightPass(params.getInt("maxBssDurationToPt")));
                    }
                    if (params.has("maxCarDurationToPt") && (params.getString("maxCarDurationToPt") != null) && (!params.getString("maxCarDurationToPt").isEmpty()) ) {
                        // Param: maxCarDurationToPt, Type: Integer
                        heatMapRequestBuilder.withMaxCarDurationToPt(integerStraightPass(params.getInt("maxCarDurationToPt")));
                    }
                    if (params.has("maxRidesharingDurationToPt") && (params.getString("maxRidesharingDurationToPt") != null) && (!params.getString("maxRidesharingDurationToPt").isEmpty()) ) {
                        // Param: maxRidesharingDurationToPt, Type: Integer
                        heatMapRequestBuilder.withMaxRidesharingDurationToPt(integerStraightPass(params.getInt("maxRidesharingDurationToPt")));
                    }
                    if (params.has("maxCarNoParkDurationToPt") && (params.getString("maxCarNoParkDurationToPt") != null) && (!params.getString("maxCarNoParkDurationToPt").isEmpty()) ) {
                        // Param: maxCarNoParkDurationToPt, Type: Integer
                        heatMapRequestBuilder.withMaxCarNoParkDurationToPt(integerStraightPass(params.getInt("maxCarNoParkDurationToPt")));
                    }
                    if (params.has("maxTaxiDurationToPt") && (params.getString("maxTaxiDurationToPt") != null) && (!params.getString("maxTaxiDurationToPt").isEmpty()) ) {
                        // Param: maxTaxiDurationToPt, Type: Integer
                        heatMapRequestBuilder.withMaxTaxiDurationToPt(integerStraightPass(params.getInt("maxTaxiDurationToPt")));
                    }
                    if (params.has("walkingSpeed") && (params.getString("walkingSpeed") != null) && (!params.getString("walkingSpeed").isEmpty()) ) {
                        // Param: walkingSpeed, Type: Float
                        heatMapRequestBuilder.withWalkingSpeed(longToFloat(params.getLong("walkingSpeed")));
                    }
                    if (params.has("bikeSpeed") && (params.getString("bikeSpeed") != null) && (!params.getString("bikeSpeed").isEmpty()) ) {
                        // Param: bikeSpeed, Type: Float
                        heatMapRequestBuilder.withBikeSpeed(longToFloat(params.getLong("bikeSpeed")));
                    }
                    if (params.has("bssSpeed") && (params.getString("bssSpeed") != null) && (!params.getString("bssSpeed").isEmpty()) ) {
                        // Param: bssSpeed, Type: Float
                        heatMapRequestBuilder.withBssSpeed(longToFloat(params.getLong("bssSpeed")));
                    }
                    if (params.has("carSpeed") && (params.getString("carSpeed") != null) && (!params.getString("carSpeed").isEmpty()) ) {
                        // Param: carSpeed, Type: Float
                        heatMapRequestBuilder.withCarSpeed(longToFloat(params.getLong("carSpeed")));
                    }
                    if (params.has("ridesharingSpeed") && (params.getString("ridesharingSpeed") != null) && (!params.getString("ridesharingSpeed").isEmpty()) ) {
                        // Param: ridesharingSpeed, Type: Float
                        heatMapRequestBuilder.withRidesharingSpeed(longToFloat(params.getLong("ridesharingSpeed")));
                    }
                    if (params.has("carNoParkSpeed") && (params.getString("carNoParkSpeed") != null) && (!params.getString("carNoParkSpeed").isEmpty()) ) {
                        // Param: carNoParkSpeed, Type: Float
                        heatMapRequestBuilder.withCarNoParkSpeed(longToFloat(params.getLong("carNoParkSpeed")));
                    }
                    if (params.has("taxiSpeed") && (params.getString("taxiSpeed") != null) && (!params.getString("taxiSpeed").isEmpty()) ) {
                        // Param: taxiSpeed, Type: Float
                        heatMapRequestBuilder.withTaxiSpeed(longToFloat(params.getLong("taxiSpeed")));
                    }
                    if (params.has("forbiddenUris") && (params.getString("forbiddenUris") != null) && (!params.getString("forbiddenUris").isEmpty()) ) {
                        // Param: forbiddenUris, Type: List
                        heatMapRequestBuilder.withForbiddenUris(jsonArrayToStringList(params.getJSONArray("forbiddenUris")));
                    }
                    if (params.has("allowedId") && (params.getString("allowedId") != null) && (!params.getString("allowedId").isEmpty()) ) {
                        // Param: allowedId, Type: List
                        heatMapRequestBuilder.withAllowedId(jsonArrayToStringList(params.getJSONArray("allowedId")));
                    }
                    if (params.has("disruptionActive") && (params.getString("disruptionActive") != null) && (!params.getString("disruptionActive").isEmpty()) ) {
                        // Param: disruptionActive, Type: Boolean
                        heatMapRequestBuilder.withDisruptionActive(booleanStraightPass(params.getBoolean("disruptionActive")));
                    }
                    if (params.has("dataFreshness") && (params.getString("dataFreshness") != null) && (!params.getString("dataFreshness").isEmpty()) ) {
                        // Param: dataFreshness, Type: String
                        heatMapRequestBuilder.withDataFreshness(stringStraightPass(params.getString("dataFreshness")));
                    }
                    if (params.has("maxDuration") && (params.getString("maxDuration") != null) && (!params.getString("maxDuration").isEmpty()) ) {
                        // Param: maxDuration, Type: Integer
                        heatMapRequestBuilder.withMaxDuration(integerStraightPass(params.getInt("maxDuration")));
                    }
                    if (params.has("wheelchair") && (params.getString("wheelchair") != null) && (!params.getString("wheelchair").isEmpty()) ) {
                        // Param: wheelchair, Type: Boolean
                        heatMapRequestBuilder.withWheelchair(booleanStraightPass(params.getBoolean("wheelchair")));
                    }
                    if (params.has("travelerType") && (params.getString("travelerType") != null) && (!params.getString("travelerType").isEmpty()) ) {
                        // Param: travelerType, Type: String
                        heatMapRequestBuilder.withTravelerType(stringStraightPass(params.getString("travelerType")));
                    }
                    if (params.has("directPath") && (params.getString("directPath") != null) && (!params.getString("directPath").isEmpty()) ) {
                        // Param: directPath, Type: String
                        heatMapRequestBuilder.withDirectPath(stringStraightPass(params.getString("directPath")));
                    }
                    if (params.has("freeRadiusFrom") && (params.getString("freeRadiusFrom") != null) && (!params.getString("freeRadiusFrom").isEmpty()) ) {
                        // Param: freeRadiusFrom, Type: Integer
                        heatMapRequestBuilder.withFreeRadiusFrom(integerStraightPass(params.getInt("freeRadiusFrom")));
                    }
                    if (params.has("freeRadiusTo") && (params.getString("freeRadiusTo") != null) && (!params.getString("freeRadiusTo").isEmpty()) ) {
                        // Param: freeRadiusTo, Type: Integer
                        heatMapRequestBuilder.withFreeRadiusTo(integerStraightPass(params.getInt("freeRadiusTo")));
                    }
                    if (params.has("directPathMode") && (params.getString("directPathMode") != null) && (!params.getString("directPathMode").isEmpty()) ) {
                        // Param: directPathMode, Type: List
                        heatMapRequestBuilder.withDirectPathMode(jsonArrayToStringList(params.getJSONArray("directPathMode")));
                    }
                    if (params.has("partnerServices") && (params.getString("partnerServices") != null) && (!params.getString("partnerServices").isEmpty()) ) {
                        // Param: partnerServices, Type: List
                        heatMapRequestBuilder.withPartnerServices(jsonArrayToStringList(params.getJSONArray("partnerServices")));
                    }
                    if (params.has("resolution") && (params.getString("resolution") != null) && (!params.getString("resolution").isEmpty()) ) {
                        // Param: resolution, Type: Integer
                        heatMapRequestBuilder.withResolution(integerStraightPass(params.getInt("resolution")));
                    }
                    
                    heatMapRequestBuilder.rawGet(new ApiCallback<String>() {
                        @Override
                        public void onFailure(ApiException e, int statusCode, Map<String, List<String>> responseHeaders) {
                            callbackContext.error("Problem during request call | " + e.getMessage());
                        }

                        @Override
                        public void onSuccess(String result, int statusCode, Map<String, List<String>> responseHeaders) {
                            JSONObject jsonObject = null;
                            try {
                                jsonObject = new JSONObject(result);
                                callbackContext.success(jsonObject);
                            } catch (Exception e) {
                                String errorMessage = "Problem during response parsing | " + String.valueOf(e.hashCode()) + ": " + e.getMessage();
                                callbackContext.error(errorMessage);
                            }
                        }

                        @Override
                        public void onUploadProgress(long bytesWritten, long contentLength, boolean done) {
                        }

                        @Override
                        public void onDownloadProgress(long bytesRead, long contentLength, boolean done) {
                        }
                    });
                } catch (Exception e) {
                    String errorMessage = "Problem during request building | " + String.valueOf(e.hashCode()) + ": " + e.getMessage();
                    callbackContext.error(errorMessage);
                }
            }
        });
    }
    final private void coverageRegionHeatMaps(final JSONObject params, final CallbackContext callbackContext) {
        if (this.navitiaSdk == null) {
            callbackContext.error("NavitiaSDK is not instanciated");
            return;
        }

        final HeatMapApi.CoverageRegionHeatMapsRequestBuilder heatMapRequestBuilder = this.navitiaSdk.heatMapApi.newCoverageRegionHeatMapsRequestBuilder();
        cordova.getThreadPool().execute(new Runnable() {
            @Override
            public void run() {
                try {
                    if (params.has("region") && (params.getString("region") != null) && (!params.getString("region").isEmpty()) ) {
                        // Param: region, Type: String
                        heatMapRequestBuilder.withRegion(stringStraightPass(params.getString("region")));
                    }
                    if (params.has("from") && (params.getString("from") != null) && (!params.getString("from").isEmpty()) ) {
                        // Param: from, Type: String
                        heatMapRequestBuilder.withFrom(stringStraightPass(params.getString("from")));
                    }
                    if (params.has("to") && (params.getString("to") != null) && (!params.getString("to").isEmpty()) ) {
                        // Param: to, Type: String
                        heatMapRequestBuilder.withTo(stringStraightPass(params.getString("to")));
                    }
                    if (params.has("datetime") && (params.getString("datetime") != null) && (!params.getString("datetime").isEmpty()) ) {
                        // Param: datetime, Type: Date
                        heatMapRequestBuilder.withDatetime(stringToDateTime(params.getString("datetime")));
                    }
                    if (params.has("datetimeRepresents") && (params.getString("datetimeRepresents") != null) && (!params.getString("datetimeRepresents").isEmpty()) ) {
                        // Param: datetimeRepresents, Type: String
                        heatMapRequestBuilder.withDatetimeRepresents(stringStraightPass(params.getString("datetimeRepresents")));
                    }
                    if (params.has("maxNbTransfers") && (params.getString("maxNbTransfers") != null) && (!params.getString("maxNbTransfers").isEmpty()) ) {
                        // Param: maxNbTransfers, Type: Integer
                        heatMapRequestBuilder.withMaxNbTransfers(integerStraightPass(params.getInt("maxNbTransfers")));
                    }
                    if (params.has("minNbTransfers") && (params.getString("minNbTransfers") != null) && (!params.getString("minNbTransfers").isEmpty()) ) {
                        // Param: minNbTransfers, Type: Integer
                        heatMapRequestBuilder.withMinNbTransfers(integerStraightPass(params.getInt("minNbTransfers")));
                    }
                    if (params.has("firstSectionMode") && (params.getString("firstSectionMode") != null) && (!params.getString("firstSectionMode").isEmpty()) ) {
                        // Param: firstSectionMode, Type: List
                        heatMapRequestBuilder.withFirstSectionMode(jsonArrayToStringList(params.getJSONArray("firstSectionMode")));
                    }
                    if (params.has("lastSectionMode") && (params.getString("lastSectionMode") != null) && (!params.getString("lastSectionMode").isEmpty()) ) {
                        // Param: lastSectionMode, Type: List
                        heatMapRequestBuilder.withLastSectionMode(jsonArrayToStringList(params.getJSONArray("lastSectionMode")));
                    }
                    if (params.has("maxDurationToPt") && (params.getString("maxDurationToPt") != null) && (!params.getString("maxDurationToPt").isEmpty()) ) {
                        // Param: maxDurationToPt, Type: Integer
                        heatMapRequestBuilder.withMaxDurationToPt(integerStraightPass(params.getInt("maxDurationToPt")));
                    }
                    if (params.has("maxWalkingDurationToPt") && (params.getString("maxWalkingDurationToPt") != null) && (!params.getString("maxWalkingDurationToPt").isEmpty()) ) {
                        // Param: maxWalkingDurationToPt, Type: Integer
                        heatMapRequestBuilder.withMaxWalkingDurationToPt(integerStraightPass(params.getInt("maxWalkingDurationToPt")));
                    }
                    if (params.has("maxBikeDurationToPt") && (params.getString("maxBikeDurationToPt") != null) && (!params.getString("maxBikeDurationToPt").isEmpty()) ) {
                        // Param: maxBikeDurationToPt, Type: Integer
                        heatMapRequestBuilder.withMaxBikeDurationToPt(integerStraightPass(params.getInt("maxBikeDurationToPt")));
                    }
                    if (params.has("maxBssDurationToPt") && (params.getString("maxBssDurationToPt") != null) && (!params.getString("maxBssDurationToPt").isEmpty()) ) {
                        // Param: maxBssDurationToPt, Type: Integer
                        heatMapRequestBuilder.withMaxBssDurationToPt(integerStraightPass(params.getInt("maxBssDurationToPt")));
                    }
                    if (params.has("maxCarDurationToPt") && (params.getString("maxCarDurationToPt") != null) && (!params.getString("maxCarDurationToPt").isEmpty()) ) {
                        // Param: maxCarDurationToPt, Type: Integer
                        heatMapRequestBuilder.withMaxCarDurationToPt(integerStraightPass(params.getInt("maxCarDurationToPt")));
                    }
                    if (params.has("maxRidesharingDurationToPt") && (params.getString("maxRidesharingDurationToPt") != null) && (!params.getString("maxRidesharingDurationToPt").isEmpty()) ) {
                        // Param: maxRidesharingDurationToPt, Type: Integer
                        heatMapRequestBuilder.withMaxRidesharingDurationToPt(integerStraightPass(params.getInt("maxRidesharingDurationToPt")));
                    }
                    if (params.has("maxCarNoParkDurationToPt") && (params.getString("maxCarNoParkDurationToPt") != null) && (!params.getString("maxCarNoParkDurationToPt").isEmpty()) ) {
                        // Param: maxCarNoParkDurationToPt, Type: Integer
                        heatMapRequestBuilder.withMaxCarNoParkDurationToPt(integerStraightPass(params.getInt("maxCarNoParkDurationToPt")));
                    }
                    if (params.has("maxTaxiDurationToPt") && (params.getString("maxTaxiDurationToPt") != null) && (!params.getString("maxTaxiDurationToPt").isEmpty()) ) {
                        // Param: maxTaxiDurationToPt, Type: Integer
                        heatMapRequestBuilder.withMaxTaxiDurationToPt(integerStraightPass(params.getInt("maxTaxiDurationToPt")));
                    }
                    if (params.has("walkingSpeed") && (params.getString("walkingSpeed") != null) && (!params.getString("walkingSpeed").isEmpty()) ) {
                        // Param: walkingSpeed, Type: Float
                        heatMapRequestBuilder.withWalkingSpeed(longToFloat(params.getLong("walkingSpeed")));
                    }
                    if (params.has("bikeSpeed") && (params.getString("bikeSpeed") != null) && (!params.getString("bikeSpeed").isEmpty()) ) {
                        // Param: bikeSpeed, Type: Float
                        heatMapRequestBuilder.withBikeSpeed(longToFloat(params.getLong("bikeSpeed")));
                    }
                    if (params.has("bssSpeed") && (params.getString("bssSpeed") != null) && (!params.getString("bssSpeed").isEmpty()) ) {
                        // Param: bssSpeed, Type: Float
                        heatMapRequestBuilder.withBssSpeed(longToFloat(params.getLong("bssSpeed")));
                    }
                    if (params.has("carSpeed") && (params.getString("carSpeed") != null) && (!params.getString("carSpeed").isEmpty()) ) {
                        // Param: carSpeed, Type: Float
                        heatMapRequestBuilder.withCarSpeed(longToFloat(params.getLong("carSpeed")));
                    }
                    if (params.has("ridesharingSpeed") && (params.getString("ridesharingSpeed") != null) && (!params.getString("ridesharingSpeed").isEmpty()) ) {
                        // Param: ridesharingSpeed, Type: Float
                        heatMapRequestBuilder.withRidesharingSpeed(longToFloat(params.getLong("ridesharingSpeed")));
                    }
                    if (params.has("carNoParkSpeed") && (params.getString("carNoParkSpeed") != null) && (!params.getString("carNoParkSpeed").isEmpty()) ) {
                        // Param: carNoParkSpeed, Type: Float
                        heatMapRequestBuilder.withCarNoParkSpeed(longToFloat(params.getLong("carNoParkSpeed")));
                    }
                    if (params.has("taxiSpeed") && (params.getString("taxiSpeed") != null) && (!params.getString("taxiSpeed").isEmpty()) ) {
                        // Param: taxiSpeed, Type: Float
                        heatMapRequestBuilder.withTaxiSpeed(longToFloat(params.getLong("taxiSpeed")));
                    }
                    if (params.has("forbiddenUris") && (params.getString("forbiddenUris") != null) && (!params.getString("forbiddenUris").isEmpty()) ) {
                        // Param: forbiddenUris, Type: List
                        heatMapRequestBuilder.withForbiddenUris(jsonArrayToStringList(params.getJSONArray("forbiddenUris")));
                    }
                    if (params.has("allowedId") && (params.getString("allowedId") != null) && (!params.getString("allowedId").isEmpty()) ) {
                        // Param: allowedId, Type: List
                        heatMapRequestBuilder.withAllowedId(jsonArrayToStringList(params.getJSONArray("allowedId")));
                    }
                    if (params.has("disruptionActive") && (params.getString("disruptionActive") != null) && (!params.getString("disruptionActive").isEmpty()) ) {
                        // Param: disruptionActive, Type: Boolean
                        heatMapRequestBuilder.withDisruptionActive(booleanStraightPass(params.getBoolean("disruptionActive")));
                    }
                    if (params.has("dataFreshness") && (params.getString("dataFreshness") != null) && (!params.getString("dataFreshness").isEmpty()) ) {
                        // Param: dataFreshness, Type: String
                        heatMapRequestBuilder.withDataFreshness(stringStraightPass(params.getString("dataFreshness")));
                    }
                    if (params.has("maxDuration") && (params.getString("maxDuration") != null) && (!params.getString("maxDuration").isEmpty()) ) {
                        // Param: maxDuration, Type: Integer
                        heatMapRequestBuilder.withMaxDuration(integerStraightPass(params.getInt("maxDuration")));
                    }
                    if (params.has("wheelchair") && (params.getString("wheelchair") != null) && (!params.getString("wheelchair").isEmpty()) ) {
                        // Param: wheelchair, Type: Boolean
                        heatMapRequestBuilder.withWheelchair(booleanStraightPass(params.getBoolean("wheelchair")));
                    }
                    if (params.has("travelerType") && (params.getString("travelerType") != null) && (!params.getString("travelerType").isEmpty()) ) {
                        // Param: travelerType, Type: String
                        heatMapRequestBuilder.withTravelerType(stringStraightPass(params.getString("travelerType")));
                    }
                    if (params.has("directPath") && (params.getString("directPath") != null) && (!params.getString("directPath").isEmpty()) ) {
                        // Param: directPath, Type: String
                        heatMapRequestBuilder.withDirectPath(stringStraightPass(params.getString("directPath")));
                    }
                    if (params.has("freeRadiusFrom") && (params.getString("freeRadiusFrom") != null) && (!params.getString("freeRadiusFrom").isEmpty()) ) {
                        // Param: freeRadiusFrom, Type: Integer
                        heatMapRequestBuilder.withFreeRadiusFrom(integerStraightPass(params.getInt("freeRadiusFrom")));
                    }
                    if (params.has("freeRadiusTo") && (params.getString("freeRadiusTo") != null) && (!params.getString("freeRadiusTo").isEmpty()) ) {
                        // Param: freeRadiusTo, Type: Integer
                        heatMapRequestBuilder.withFreeRadiusTo(integerStraightPass(params.getInt("freeRadiusTo")));
                    }
                    if (params.has("directPathMode") && (params.getString("directPathMode") != null) && (!params.getString("directPathMode").isEmpty()) ) {
                        // Param: directPathMode, Type: List
                        heatMapRequestBuilder.withDirectPathMode(jsonArrayToStringList(params.getJSONArray("directPathMode")));
                    }
                    if (params.has("partnerServices") && (params.getString("partnerServices") != null) && (!params.getString("partnerServices").isEmpty()) ) {
                        // Param: partnerServices, Type: List
                        heatMapRequestBuilder.withPartnerServices(jsonArrayToStringList(params.getJSONArray("partnerServices")));
                    }
                    if (params.has("resolution") && (params.getString("resolution") != null) && (!params.getString("resolution").isEmpty()) ) {
                        // Param: resolution, Type: Integer
                        heatMapRequestBuilder.withResolution(integerStraightPass(params.getInt("resolution")));
                    }
                    
                    heatMapRequestBuilder.rawGet(new ApiCallback<String>() {
                        @Override
                        public void onFailure(ApiException e, int statusCode, Map<String, List<String>> responseHeaders) {
                            callbackContext.error("Problem during request call | " + e.getMessage());
                        }

                        @Override
                        public void onSuccess(String result, int statusCode, Map<String, List<String>> responseHeaders) {
                            JSONObject jsonObject = null;
                            try {
                                jsonObject = new JSONObject(result);
                                callbackContext.success(jsonObject);
                            } catch (Exception e) {
                                String errorMessage = "Problem during response parsing | " + String.valueOf(e.hashCode()) + ": " + e.getMessage();
                                callbackContext.error(errorMessage);
                            }
                        }

                        @Override
                        public void onUploadProgress(long bytesWritten, long contentLength, boolean done) {
                        }

                        @Override
                        public void onDownloadProgress(long bytesRead, long contentLength, boolean done) {
                        }
                    });
                } catch (Exception e) {
                    String errorMessage = "Problem during request building | " + String.valueOf(e.hashCode()) + ": " + e.getMessage();
                    callbackContext.error(errorMessage);
                }
            }
        });
    }
    final private void coverageLonLatJourneyPatternPoints(final JSONObject params, final CallbackContext callbackContext) {
        if (this.navitiaSdk == null) {
            callbackContext.error("NavitiaSDK is not instanciated");
            return;
        }

        final JourneyPatternPointsApi.CoverageLonLatJourneyPatternPointsRequestBuilder journeyPatternPointsRequestBuilder = this.navitiaSdk.journeyPatternPointsApi.newCoverageLonLatJourneyPatternPointsRequestBuilder();
        cordova.getThreadPool().execute(new Runnable() {
            @Override
            public void run() {
                try {
                    if (params.has("lat") && (params.getString("lat") != null) && (!params.getString("lat").isEmpty()) ) {
                        // Param: lat, Type: BigDecimal
                        journeyPatternPointsRequestBuilder.withLat(longToBigDecimal(params.getLong("lat")));
                    }
                    if (params.has("lon") && (params.getString("lon") != null) && (!params.getString("lon").isEmpty()) ) {
                        // Param: lon, Type: BigDecimal
                        journeyPatternPointsRequestBuilder.withLon(longToBigDecimal(params.getLong("lon")));
                    }
                    if (params.has("startPage") && (params.getString("startPage") != null) && (!params.getString("startPage").isEmpty()) ) {
                        // Param: startPage, Type: Integer
                        journeyPatternPointsRequestBuilder.withStartPage(integerStraightPass(params.getInt("startPage")));
                    }
                    if (params.has("count") && (params.getString("count") != null) && (!params.getString("count").isEmpty()) ) {
                        // Param: count, Type: Integer
                        journeyPatternPointsRequestBuilder.withCount(integerStraightPass(params.getInt("count")));
                    }
                    if (params.has("depth") && (params.getString("depth") != null) && (!params.getString("depth").isEmpty()) ) {
                        // Param: depth, Type: Integer
                        journeyPatternPointsRequestBuilder.withDepth(integerStraightPass(params.getInt("depth")));
                    }
                    if (params.has("forbiddenId") && (params.getString("forbiddenId") != null) && (!params.getString("forbiddenId").isEmpty()) ) {
                        // Param: forbiddenId, Type: List
                        journeyPatternPointsRequestBuilder.withForbiddenId(jsonArrayToStringList(params.getJSONArray("forbiddenId")));
                    }
                    if (params.has("forbiddenUris") && (params.getString("forbiddenUris") != null) && (!params.getString("forbiddenUris").isEmpty()) ) {
                        // Param: forbiddenUris, Type: List
                        journeyPatternPointsRequestBuilder.withForbiddenUris(jsonArrayToStringList(params.getJSONArray("forbiddenUris")));
                    }
                    if (params.has("externalCode") && (params.getString("externalCode") != null) && (!params.getString("externalCode").isEmpty()) ) {
                        // Param: externalCode, Type: String
                        journeyPatternPointsRequestBuilder.withExternalCode(stringStraightPass(params.getString("externalCode")));
                    }
                    if (params.has("headsign") && (params.getString("headsign") != null) && (!params.getString("headsign").isEmpty()) ) {
                        // Param: headsign, Type: String
                        journeyPatternPointsRequestBuilder.withHeadsign(stringStraightPass(params.getString("headsign")));
                    }
                    if (params.has("showCodes") && (params.getString("showCodes") != null) && (!params.getString("showCodes").isEmpty()) ) {
                        // Param: showCodes, Type: Boolean
                        journeyPatternPointsRequestBuilder.withShowCodes(booleanStraightPass(params.getBoolean("showCodes")));
                    }
                    if (params.has("odtLevel") && (params.getString("odtLevel") != null) && (!params.getString("odtLevel").isEmpty()) ) {
                        // Param: odtLevel, Type: String
                        journeyPatternPointsRequestBuilder.withOdtLevel(stringStraightPass(params.getString("odtLevel")));
                    }
                    if (params.has("dataFreshness") && (params.getString("dataFreshness") != null) && (!params.getString("dataFreshness").isEmpty()) ) {
                        // Param: dataFreshness, Type: String
                        journeyPatternPointsRequestBuilder.withDataFreshness(stringStraightPass(params.getString("dataFreshness")));
                    }
                    if (params.has("distance") && (params.getString("distance") != null) && (!params.getString("distance").isEmpty()) ) {
                        // Param: distance, Type: Integer
                        journeyPatternPointsRequestBuilder.withDistance(integerStraightPass(params.getInt("distance")));
                    }
                    if (params.has("since") && (params.getString("since") != null) && (!params.getString("since").isEmpty()) ) {
                        // Param: since, Type: Date
                        journeyPatternPointsRequestBuilder.withSince(stringToDateTime(params.getString("since")));
                    }
                    if (params.has("until") && (params.getString("until") != null) && (!params.getString("until").isEmpty()) ) {
                        // Param: until, Type: Date
                        journeyPatternPointsRequestBuilder.withUntil(stringToDateTime(params.getString("until")));
                    }
                    if (params.has("disableGeojson") && (params.getString("disableGeojson") != null) && (!params.getString("disableGeojson").isEmpty()) ) {
                        // Param: disableGeojson, Type: Boolean
                        journeyPatternPointsRequestBuilder.withDisableGeojson(booleanStraightPass(params.getBoolean("disableGeojson")));
                    }
                    if (params.has("disableDisruption") && (params.getString("disableDisruption") != null) && (!params.getString("disableDisruption").isEmpty()) ) {
                        // Param: disableDisruption, Type: Boolean
                        journeyPatternPointsRequestBuilder.withDisableDisruption(booleanStraightPass(params.getBoolean("disableDisruption")));
                    }
                    if (params.has("filter") && (params.getString("filter") != null) && (!params.getString("filter").isEmpty()) ) {
                        // Param: filter, Type: String
                        journeyPatternPointsRequestBuilder.withFilter(stringStraightPass(params.getString("filter")));
                    }
                    if (params.has("tags") && (params.getString("tags") != null) && (!params.getString("tags").isEmpty()) ) {
                        // Param: tags, Type: List
                        journeyPatternPointsRequestBuilder.withTags(jsonArrayToStringList(params.getJSONArray("tags")));
                    }
                    
                    journeyPatternPointsRequestBuilder.rawGet(new ApiCallback<String>() {
                        @Override
                        public void onFailure(ApiException e, int statusCode, Map<String, List<String>> responseHeaders) {
                            callbackContext.error("Problem during request call | " + e.getMessage());
                        }

                        @Override
                        public void onSuccess(String result, int statusCode, Map<String, List<String>> responseHeaders) {
                            JSONObject jsonObject = null;
                            try {
                                jsonObject = new JSONObject(result);
                                callbackContext.success(jsonObject);
                            } catch (Exception e) {
                                String errorMessage = "Problem during response parsing | " + String.valueOf(e.hashCode()) + ": " + e.getMessage();
                                callbackContext.error(errorMessage);
                            }
                        }

                        @Override
                        public void onUploadProgress(long bytesWritten, long contentLength, boolean done) {
                        }

                        @Override
                        public void onDownloadProgress(long bytesRead, long contentLength, boolean done) {
                        }
                    });
                } catch (Exception e) {
                    String errorMessage = "Problem during request building | " + String.valueOf(e.hashCode()) + ": " + e.getMessage();
                    callbackContext.error(errorMessage);
                }
            }
        });
    }
    final private void coverageLonLatJourneyPatternPointsId(final JSONObject params, final CallbackContext callbackContext) {
        if (this.navitiaSdk == null) {
            callbackContext.error("NavitiaSDK is not instanciated");
            return;
        }

        final JourneyPatternPointsApi.CoverageLonLatJourneyPatternPointsIdRequestBuilder journeyPatternPointsRequestBuilder = this.navitiaSdk.journeyPatternPointsApi.newCoverageLonLatJourneyPatternPointsIdRequestBuilder();
        cordova.getThreadPool().execute(new Runnable() {
            @Override
            public void run() {
                try {
                    if (params.has("lat") && (params.getString("lat") != null) && (!params.getString("lat").isEmpty()) ) {
                        // Param: lat, Type: BigDecimal
                        journeyPatternPointsRequestBuilder.withLat(longToBigDecimal(params.getLong("lat")));
                    }
                    if (params.has("lon") && (params.getString("lon") != null) && (!params.getString("lon").isEmpty()) ) {
                        // Param: lon, Type: BigDecimal
                        journeyPatternPointsRequestBuilder.withLon(longToBigDecimal(params.getLong("lon")));
                    }
                    if (params.has("id") && (params.getString("id") != null) && (!params.getString("id").isEmpty()) ) {
                        // Param: id, Type: String
                        journeyPatternPointsRequestBuilder.withId(stringStraightPass(params.getString("id")));
                    }
                    if (params.has("startPage") && (params.getString("startPage") != null) && (!params.getString("startPage").isEmpty()) ) {
                        // Param: startPage, Type: Integer
                        journeyPatternPointsRequestBuilder.withStartPage(integerStraightPass(params.getInt("startPage")));
                    }
                    if (params.has("count") && (params.getString("count") != null) && (!params.getString("count").isEmpty()) ) {
                        // Param: count, Type: Integer
                        journeyPatternPointsRequestBuilder.withCount(integerStraightPass(params.getInt("count")));
                    }
                    if (params.has("depth") && (params.getString("depth") != null) && (!params.getString("depth").isEmpty()) ) {
                        // Param: depth, Type: Integer
                        journeyPatternPointsRequestBuilder.withDepth(integerStraightPass(params.getInt("depth")));
                    }
                    if (params.has("forbiddenId") && (params.getString("forbiddenId") != null) && (!params.getString("forbiddenId").isEmpty()) ) {
                        // Param: forbiddenId, Type: List
                        journeyPatternPointsRequestBuilder.withForbiddenId(jsonArrayToStringList(params.getJSONArray("forbiddenId")));
                    }
                    if (params.has("forbiddenUris") && (params.getString("forbiddenUris") != null) && (!params.getString("forbiddenUris").isEmpty()) ) {
                        // Param: forbiddenUris, Type: List
                        journeyPatternPointsRequestBuilder.withForbiddenUris(jsonArrayToStringList(params.getJSONArray("forbiddenUris")));
                    }
                    if (params.has("externalCode") && (params.getString("externalCode") != null) && (!params.getString("externalCode").isEmpty()) ) {
                        // Param: externalCode, Type: String
                        journeyPatternPointsRequestBuilder.withExternalCode(stringStraightPass(params.getString("externalCode")));
                    }
                    if (params.has("headsign") && (params.getString("headsign") != null) && (!params.getString("headsign").isEmpty()) ) {
                        // Param: headsign, Type: String
                        journeyPatternPointsRequestBuilder.withHeadsign(stringStraightPass(params.getString("headsign")));
                    }
                    if (params.has("showCodes") && (params.getString("showCodes") != null) && (!params.getString("showCodes").isEmpty()) ) {
                        // Param: showCodes, Type: Boolean
                        journeyPatternPointsRequestBuilder.withShowCodes(booleanStraightPass(params.getBoolean("showCodes")));
                    }
                    if (params.has("odtLevel") && (params.getString("odtLevel") != null) && (!params.getString("odtLevel").isEmpty()) ) {
                        // Param: odtLevel, Type: String
                        journeyPatternPointsRequestBuilder.withOdtLevel(stringStraightPass(params.getString("odtLevel")));
                    }
                    if (params.has("dataFreshness") && (params.getString("dataFreshness") != null) && (!params.getString("dataFreshness").isEmpty()) ) {
                        // Param: dataFreshness, Type: String
                        journeyPatternPointsRequestBuilder.withDataFreshness(stringStraightPass(params.getString("dataFreshness")));
                    }
                    if (params.has("distance") && (params.getString("distance") != null) && (!params.getString("distance").isEmpty()) ) {
                        // Param: distance, Type: Integer
                        journeyPatternPointsRequestBuilder.withDistance(integerStraightPass(params.getInt("distance")));
                    }
                    if (params.has("since") && (params.getString("since") != null) && (!params.getString("since").isEmpty()) ) {
                        // Param: since, Type: Date
                        journeyPatternPointsRequestBuilder.withSince(stringToDateTime(params.getString("since")));
                    }
                    if (params.has("until") && (params.getString("until") != null) && (!params.getString("until").isEmpty()) ) {
                        // Param: until, Type: Date
                        journeyPatternPointsRequestBuilder.withUntil(stringToDateTime(params.getString("until")));
                    }
                    if (params.has("disableGeojson") && (params.getString("disableGeojson") != null) && (!params.getString("disableGeojson").isEmpty()) ) {
                        // Param: disableGeojson, Type: Boolean
                        journeyPatternPointsRequestBuilder.withDisableGeojson(booleanStraightPass(params.getBoolean("disableGeojson")));
                    }
                    if (params.has("disableDisruption") && (params.getString("disableDisruption") != null) && (!params.getString("disableDisruption").isEmpty()) ) {
                        // Param: disableDisruption, Type: Boolean
                        journeyPatternPointsRequestBuilder.withDisableDisruption(booleanStraightPass(params.getBoolean("disableDisruption")));
                    }
                    if (params.has("tags") && (params.getString("tags") != null) && (!params.getString("tags").isEmpty()) ) {
                        // Param: tags, Type: List
                        journeyPatternPointsRequestBuilder.withTags(jsonArrayToStringList(params.getJSONArray("tags")));
                    }
                    
                    journeyPatternPointsRequestBuilder.rawGet(new ApiCallback<String>() {
                        @Override
                        public void onFailure(ApiException e, int statusCode, Map<String, List<String>> responseHeaders) {
                            callbackContext.error("Problem during request call | " + e.getMessage());
                        }

                        @Override
                        public void onSuccess(String result, int statusCode, Map<String, List<String>> responseHeaders) {
                            JSONObject jsonObject = null;
                            try {
                                jsonObject = new JSONObject(result);
                                callbackContext.success(jsonObject);
                            } catch (Exception e) {
                                String errorMessage = "Problem during response parsing | " + String.valueOf(e.hashCode()) + ": " + e.getMessage();
                                callbackContext.error(errorMessage);
                            }
                        }

                        @Override
                        public void onUploadProgress(long bytesWritten, long contentLength, boolean done) {
                        }

                        @Override
                        public void onDownloadProgress(long bytesRead, long contentLength, boolean done) {
                        }
                    });
                } catch (Exception e) {
                    String errorMessage = "Problem during request building | " + String.valueOf(e.hashCode()) + ": " + e.getMessage();
                    callbackContext.error(errorMessage);
                }
            }
        });
    }
    final private void coverageLonLatUriJourneyPatternPoints(final JSONObject params, final CallbackContext callbackContext) {
        if (this.navitiaSdk == null) {
            callbackContext.error("NavitiaSDK is not instanciated");
            return;
        }

        final JourneyPatternPointsApi.CoverageLonLatUriJourneyPatternPointsRequestBuilder journeyPatternPointsRequestBuilder = this.navitiaSdk.journeyPatternPointsApi.newCoverageLonLatUriJourneyPatternPointsRequestBuilder();
        cordova.getThreadPool().execute(new Runnable() {
            @Override
            public void run() {
                try {
                    if (params.has("lat") && (params.getString("lat") != null) && (!params.getString("lat").isEmpty()) ) {
                        // Param: lat, Type: BigDecimal
                        journeyPatternPointsRequestBuilder.withLat(longToBigDecimal(params.getLong("lat")));
                    }
                    if (params.has("lon") && (params.getString("lon") != null) && (!params.getString("lon").isEmpty()) ) {
                        // Param: lon, Type: BigDecimal
                        journeyPatternPointsRequestBuilder.withLon(longToBigDecimal(params.getLong("lon")));
                    }
                    if (params.has("uri") && (params.getString("uri") != null) && (!params.getString("uri").isEmpty()) ) {
                        // Param: uri, Type: String
                        journeyPatternPointsRequestBuilder.withUri(stringStraightPass(params.getString("uri")));
                    }
                    if (params.has("startPage") && (params.getString("startPage") != null) && (!params.getString("startPage").isEmpty()) ) {
                        // Param: startPage, Type: Integer
                        journeyPatternPointsRequestBuilder.withStartPage(integerStraightPass(params.getInt("startPage")));
                    }
                    if (params.has("count") && (params.getString("count") != null) && (!params.getString("count").isEmpty()) ) {
                        // Param: count, Type: Integer
                        journeyPatternPointsRequestBuilder.withCount(integerStraightPass(params.getInt("count")));
                    }
                    if (params.has("depth") && (params.getString("depth") != null) && (!params.getString("depth").isEmpty()) ) {
                        // Param: depth, Type: Integer
                        journeyPatternPointsRequestBuilder.withDepth(integerStraightPass(params.getInt("depth")));
                    }
                    if (params.has("forbiddenId") && (params.getString("forbiddenId") != null) && (!params.getString("forbiddenId").isEmpty()) ) {
                        // Param: forbiddenId, Type: List
                        journeyPatternPointsRequestBuilder.withForbiddenId(jsonArrayToStringList(params.getJSONArray("forbiddenId")));
                    }
                    if (params.has("forbiddenUris") && (params.getString("forbiddenUris") != null) && (!params.getString("forbiddenUris").isEmpty()) ) {
                        // Param: forbiddenUris, Type: List
                        journeyPatternPointsRequestBuilder.withForbiddenUris(jsonArrayToStringList(params.getJSONArray("forbiddenUris")));
                    }
                    if (params.has("externalCode") && (params.getString("externalCode") != null) && (!params.getString("externalCode").isEmpty()) ) {
                        // Param: externalCode, Type: String
                        journeyPatternPointsRequestBuilder.withExternalCode(stringStraightPass(params.getString("externalCode")));
                    }
                    if (params.has("headsign") && (params.getString("headsign") != null) && (!params.getString("headsign").isEmpty()) ) {
                        // Param: headsign, Type: String
                        journeyPatternPointsRequestBuilder.withHeadsign(stringStraightPass(params.getString("headsign")));
                    }
                    if (params.has("showCodes") && (params.getString("showCodes") != null) && (!params.getString("showCodes").isEmpty()) ) {
                        // Param: showCodes, Type: Boolean
                        journeyPatternPointsRequestBuilder.withShowCodes(booleanStraightPass(params.getBoolean("showCodes")));
                    }
                    if (params.has("odtLevel") && (params.getString("odtLevel") != null) && (!params.getString("odtLevel").isEmpty()) ) {
                        // Param: odtLevel, Type: String
                        journeyPatternPointsRequestBuilder.withOdtLevel(stringStraightPass(params.getString("odtLevel")));
                    }
                    if (params.has("dataFreshness") && (params.getString("dataFreshness") != null) && (!params.getString("dataFreshness").isEmpty()) ) {
                        // Param: dataFreshness, Type: String
                        journeyPatternPointsRequestBuilder.withDataFreshness(stringStraightPass(params.getString("dataFreshness")));
                    }
                    if (params.has("distance") && (params.getString("distance") != null) && (!params.getString("distance").isEmpty()) ) {
                        // Param: distance, Type: Integer
                        journeyPatternPointsRequestBuilder.withDistance(integerStraightPass(params.getInt("distance")));
                    }
                    if (params.has("since") && (params.getString("since") != null) && (!params.getString("since").isEmpty()) ) {
                        // Param: since, Type: Date
                        journeyPatternPointsRequestBuilder.withSince(stringToDateTime(params.getString("since")));
                    }
                    if (params.has("until") && (params.getString("until") != null) && (!params.getString("until").isEmpty()) ) {
                        // Param: until, Type: Date
                        journeyPatternPointsRequestBuilder.withUntil(stringToDateTime(params.getString("until")));
                    }
                    if (params.has("disableGeojson") && (params.getString("disableGeojson") != null) && (!params.getString("disableGeojson").isEmpty()) ) {
                        // Param: disableGeojson, Type: Boolean
                        journeyPatternPointsRequestBuilder.withDisableGeojson(booleanStraightPass(params.getBoolean("disableGeojson")));
                    }
                    if (params.has("disableDisruption") && (params.getString("disableDisruption") != null) && (!params.getString("disableDisruption").isEmpty()) ) {
                        // Param: disableDisruption, Type: Boolean
                        journeyPatternPointsRequestBuilder.withDisableDisruption(booleanStraightPass(params.getBoolean("disableDisruption")));
                    }
                    if (params.has("filter") && (params.getString("filter") != null) && (!params.getString("filter").isEmpty()) ) {
                        // Param: filter, Type: String
                        journeyPatternPointsRequestBuilder.withFilter(stringStraightPass(params.getString("filter")));
                    }
                    if (params.has("tags") && (params.getString("tags") != null) && (!params.getString("tags").isEmpty()) ) {
                        // Param: tags, Type: List
                        journeyPatternPointsRequestBuilder.withTags(jsonArrayToStringList(params.getJSONArray("tags")));
                    }
                    
                    journeyPatternPointsRequestBuilder.rawGet(new ApiCallback<String>() {
                        @Override
                        public void onFailure(ApiException e, int statusCode, Map<String, List<String>> responseHeaders) {
                            callbackContext.error("Problem during request call | " + e.getMessage());
                        }

                        @Override
                        public void onSuccess(String result, int statusCode, Map<String, List<String>> responseHeaders) {
                            JSONObject jsonObject = null;
                            try {
                                jsonObject = new JSONObject(result);
                                callbackContext.success(jsonObject);
                            } catch (Exception e) {
                                String errorMessage = "Problem during response parsing | " + String.valueOf(e.hashCode()) + ": " + e.getMessage();
                                callbackContext.error(errorMessage);
                            }
                        }

                        @Override
                        public void onUploadProgress(long bytesWritten, long contentLength, boolean done) {
                        }

                        @Override
                        public void onDownloadProgress(long bytesRead, long contentLength, boolean done) {
                        }
                    });
                } catch (Exception e) {
                    String errorMessage = "Problem during request building | " + String.valueOf(e.hashCode()) + ": " + e.getMessage();
                    callbackContext.error(errorMessage);
                }
            }
        });
    }
    final private void coverageLonLatUriJourneyPatternPointsId(final JSONObject params, final CallbackContext callbackContext) {
        if (this.navitiaSdk == null) {
            callbackContext.error("NavitiaSDK is not instanciated");
            return;
        }

        final JourneyPatternPointsApi.CoverageLonLatUriJourneyPatternPointsIdRequestBuilder journeyPatternPointsRequestBuilder = this.navitiaSdk.journeyPatternPointsApi.newCoverageLonLatUriJourneyPatternPointsIdRequestBuilder();
        cordova.getThreadPool().execute(new Runnable() {
            @Override
            public void run() {
                try {
                    if (params.has("lat") && (params.getString("lat") != null) && (!params.getString("lat").isEmpty()) ) {
                        // Param: lat, Type: BigDecimal
                        journeyPatternPointsRequestBuilder.withLat(longToBigDecimal(params.getLong("lat")));
                    }
                    if (params.has("lon") && (params.getString("lon") != null) && (!params.getString("lon").isEmpty()) ) {
                        // Param: lon, Type: BigDecimal
                        journeyPatternPointsRequestBuilder.withLon(longToBigDecimal(params.getLong("lon")));
                    }
                    if (params.has("uri") && (params.getString("uri") != null) && (!params.getString("uri").isEmpty()) ) {
                        // Param: uri, Type: String
                        journeyPatternPointsRequestBuilder.withUri(stringStraightPass(params.getString("uri")));
                    }
                    if (params.has("id") && (params.getString("id") != null) && (!params.getString("id").isEmpty()) ) {
                        // Param: id, Type: String
                        journeyPatternPointsRequestBuilder.withId(stringStraightPass(params.getString("id")));
                    }
                    if (params.has("startPage") && (params.getString("startPage") != null) && (!params.getString("startPage").isEmpty()) ) {
                        // Param: startPage, Type: Integer
                        journeyPatternPointsRequestBuilder.withStartPage(integerStraightPass(params.getInt("startPage")));
                    }
                    if (params.has("count") && (params.getString("count") != null) && (!params.getString("count").isEmpty()) ) {
                        // Param: count, Type: Integer
                        journeyPatternPointsRequestBuilder.withCount(integerStraightPass(params.getInt("count")));
                    }
                    if (params.has("depth") && (params.getString("depth") != null) && (!params.getString("depth").isEmpty()) ) {
                        // Param: depth, Type: Integer
                        journeyPatternPointsRequestBuilder.withDepth(integerStraightPass(params.getInt("depth")));
                    }
                    if (params.has("forbiddenId") && (params.getString("forbiddenId") != null) && (!params.getString("forbiddenId").isEmpty()) ) {
                        // Param: forbiddenId, Type: List
                        journeyPatternPointsRequestBuilder.withForbiddenId(jsonArrayToStringList(params.getJSONArray("forbiddenId")));
                    }
                    if (params.has("forbiddenUris") && (params.getString("forbiddenUris") != null) && (!params.getString("forbiddenUris").isEmpty()) ) {
                        // Param: forbiddenUris, Type: List
                        journeyPatternPointsRequestBuilder.withForbiddenUris(jsonArrayToStringList(params.getJSONArray("forbiddenUris")));
                    }
                    if (params.has("externalCode") && (params.getString("externalCode") != null) && (!params.getString("externalCode").isEmpty()) ) {
                        // Param: externalCode, Type: String
                        journeyPatternPointsRequestBuilder.withExternalCode(stringStraightPass(params.getString("externalCode")));
                    }
                    if (params.has("headsign") && (params.getString("headsign") != null) && (!params.getString("headsign").isEmpty()) ) {
                        // Param: headsign, Type: String
                        journeyPatternPointsRequestBuilder.withHeadsign(stringStraightPass(params.getString("headsign")));
                    }
                    if (params.has("showCodes") && (params.getString("showCodes") != null) && (!params.getString("showCodes").isEmpty()) ) {
                        // Param: showCodes, Type: Boolean
                        journeyPatternPointsRequestBuilder.withShowCodes(booleanStraightPass(params.getBoolean("showCodes")));
                    }
                    if (params.has("odtLevel") && (params.getString("odtLevel") != null) && (!params.getString("odtLevel").isEmpty()) ) {
                        // Param: odtLevel, Type: String
                        journeyPatternPointsRequestBuilder.withOdtLevel(stringStraightPass(params.getString("odtLevel")));
                    }
                    if (params.has("dataFreshness") && (params.getString("dataFreshness") != null) && (!params.getString("dataFreshness").isEmpty()) ) {
                        // Param: dataFreshness, Type: String
                        journeyPatternPointsRequestBuilder.withDataFreshness(stringStraightPass(params.getString("dataFreshness")));
                    }
                    if (params.has("distance") && (params.getString("distance") != null) && (!params.getString("distance").isEmpty()) ) {
                        // Param: distance, Type: Integer
                        journeyPatternPointsRequestBuilder.withDistance(integerStraightPass(params.getInt("distance")));
                    }
                    if (params.has("since") && (params.getString("since") != null) && (!params.getString("since").isEmpty()) ) {
                        // Param: since, Type: Date
                        journeyPatternPointsRequestBuilder.withSince(stringToDateTime(params.getString("since")));
                    }
                    if (params.has("until") && (params.getString("until") != null) && (!params.getString("until").isEmpty()) ) {
                        // Param: until, Type: Date
                        journeyPatternPointsRequestBuilder.withUntil(stringToDateTime(params.getString("until")));
                    }
                    if (params.has("disableGeojson") && (params.getString("disableGeojson") != null) && (!params.getString("disableGeojson").isEmpty()) ) {
                        // Param: disableGeojson, Type: Boolean
                        journeyPatternPointsRequestBuilder.withDisableGeojson(booleanStraightPass(params.getBoolean("disableGeojson")));
                    }
                    if (params.has("disableDisruption") && (params.getString("disableDisruption") != null) && (!params.getString("disableDisruption").isEmpty()) ) {
                        // Param: disableDisruption, Type: Boolean
                        journeyPatternPointsRequestBuilder.withDisableDisruption(booleanStraightPass(params.getBoolean("disableDisruption")));
                    }
                    if (params.has("tags") && (params.getString("tags") != null) && (!params.getString("tags").isEmpty()) ) {
                        // Param: tags, Type: List
                        journeyPatternPointsRequestBuilder.withTags(jsonArrayToStringList(params.getJSONArray("tags")));
                    }
                    
                    journeyPatternPointsRequestBuilder.rawGet(new ApiCallback<String>() {
                        @Override
                        public void onFailure(ApiException e, int statusCode, Map<String, List<String>> responseHeaders) {
                            callbackContext.error("Problem during request call | " + e.getMessage());
                        }

                        @Override
                        public void onSuccess(String result, int statusCode, Map<String, List<String>> responseHeaders) {
                            JSONObject jsonObject = null;
                            try {
                                jsonObject = new JSONObject(result);
                                callbackContext.success(jsonObject);
                            } catch (Exception e) {
                                String errorMessage = "Problem during response parsing | " + String.valueOf(e.hashCode()) + ": " + e.getMessage();
                                callbackContext.error(errorMessage);
                            }
                        }

                        @Override
                        public void onUploadProgress(long bytesWritten, long contentLength, boolean done) {
                        }

                        @Override
                        public void onDownloadProgress(long bytesRead, long contentLength, boolean done) {
                        }
                    });
                } catch (Exception e) {
                    String errorMessage = "Problem during request building | " + String.valueOf(e.hashCode()) + ": " + e.getMessage();
                    callbackContext.error(errorMessage);
                }
            }
        });
    }
    final private void coverageRegionJourneyPatternPoints(final JSONObject params, final CallbackContext callbackContext) {
        if (this.navitiaSdk == null) {
            callbackContext.error("NavitiaSDK is not instanciated");
            return;
        }

        final JourneyPatternPointsApi.CoverageRegionJourneyPatternPointsRequestBuilder journeyPatternPointsRequestBuilder = this.navitiaSdk.journeyPatternPointsApi.newCoverageRegionJourneyPatternPointsRequestBuilder();
        cordova.getThreadPool().execute(new Runnable() {
            @Override
            public void run() {
                try {
                    if (params.has("region") && (params.getString("region") != null) && (!params.getString("region").isEmpty()) ) {
                        // Param: region, Type: String
                        journeyPatternPointsRequestBuilder.withRegion(stringStraightPass(params.getString("region")));
                    }
                    if (params.has("startPage") && (params.getString("startPage") != null) && (!params.getString("startPage").isEmpty()) ) {
                        // Param: startPage, Type: Integer
                        journeyPatternPointsRequestBuilder.withStartPage(integerStraightPass(params.getInt("startPage")));
                    }
                    if (params.has("count") && (params.getString("count") != null) && (!params.getString("count").isEmpty()) ) {
                        // Param: count, Type: Integer
                        journeyPatternPointsRequestBuilder.withCount(integerStraightPass(params.getInt("count")));
                    }
                    if (params.has("depth") && (params.getString("depth") != null) && (!params.getString("depth").isEmpty()) ) {
                        // Param: depth, Type: Integer
                        journeyPatternPointsRequestBuilder.withDepth(integerStraightPass(params.getInt("depth")));
                    }
                    if (params.has("forbiddenId") && (params.getString("forbiddenId") != null) && (!params.getString("forbiddenId").isEmpty()) ) {
                        // Param: forbiddenId, Type: List
                        journeyPatternPointsRequestBuilder.withForbiddenId(jsonArrayToStringList(params.getJSONArray("forbiddenId")));
                    }
                    if (params.has("forbiddenUris") && (params.getString("forbiddenUris") != null) && (!params.getString("forbiddenUris").isEmpty()) ) {
                        // Param: forbiddenUris, Type: List
                        journeyPatternPointsRequestBuilder.withForbiddenUris(jsonArrayToStringList(params.getJSONArray("forbiddenUris")));
                    }
                    if (params.has("externalCode") && (params.getString("externalCode") != null) && (!params.getString("externalCode").isEmpty()) ) {
                        // Param: externalCode, Type: String
                        journeyPatternPointsRequestBuilder.withExternalCode(stringStraightPass(params.getString("externalCode")));
                    }
                    if (params.has("headsign") && (params.getString("headsign") != null) && (!params.getString("headsign").isEmpty()) ) {
                        // Param: headsign, Type: String
                        journeyPatternPointsRequestBuilder.withHeadsign(stringStraightPass(params.getString("headsign")));
                    }
                    if (params.has("showCodes") && (params.getString("showCodes") != null) && (!params.getString("showCodes").isEmpty()) ) {
                        // Param: showCodes, Type: Boolean
                        journeyPatternPointsRequestBuilder.withShowCodes(booleanStraightPass(params.getBoolean("showCodes")));
                    }
                    if (params.has("odtLevel") && (params.getString("odtLevel") != null) && (!params.getString("odtLevel").isEmpty()) ) {
                        // Param: odtLevel, Type: String
                        journeyPatternPointsRequestBuilder.withOdtLevel(stringStraightPass(params.getString("odtLevel")));
                    }
                    if (params.has("dataFreshness") && (params.getString("dataFreshness") != null) && (!params.getString("dataFreshness").isEmpty()) ) {
                        // Param: dataFreshness, Type: String
                        journeyPatternPointsRequestBuilder.withDataFreshness(stringStraightPass(params.getString("dataFreshness")));
                    }
                    if (params.has("distance") && (params.getString("distance") != null) && (!params.getString("distance").isEmpty()) ) {
                        // Param: distance, Type: Integer
                        journeyPatternPointsRequestBuilder.withDistance(integerStraightPass(params.getInt("distance")));
                    }
                    if (params.has("since") && (params.getString("since") != null) && (!params.getString("since").isEmpty()) ) {
                        // Param: since, Type: Date
                        journeyPatternPointsRequestBuilder.withSince(stringToDateTime(params.getString("since")));
                    }
                    if (params.has("until") && (params.getString("until") != null) && (!params.getString("until").isEmpty()) ) {
                        // Param: until, Type: Date
                        journeyPatternPointsRequestBuilder.withUntil(stringToDateTime(params.getString("until")));
                    }
                    if (params.has("disableGeojson") && (params.getString("disableGeojson") != null) && (!params.getString("disableGeojson").isEmpty()) ) {
                        // Param: disableGeojson, Type: Boolean
                        journeyPatternPointsRequestBuilder.withDisableGeojson(booleanStraightPass(params.getBoolean("disableGeojson")));
                    }
                    if (params.has("disableDisruption") && (params.getString("disableDisruption") != null) && (!params.getString("disableDisruption").isEmpty()) ) {
                        // Param: disableDisruption, Type: Boolean
                        journeyPatternPointsRequestBuilder.withDisableDisruption(booleanStraightPass(params.getBoolean("disableDisruption")));
                    }
                    if (params.has("filter") && (params.getString("filter") != null) && (!params.getString("filter").isEmpty()) ) {
                        // Param: filter, Type: String
                        journeyPatternPointsRequestBuilder.withFilter(stringStraightPass(params.getString("filter")));
                    }
                    if (params.has("tags") && (params.getString("tags") != null) && (!params.getString("tags").isEmpty()) ) {
                        // Param: tags, Type: List
                        journeyPatternPointsRequestBuilder.withTags(jsonArrayToStringList(params.getJSONArray("tags")));
                    }
                    
                    journeyPatternPointsRequestBuilder.rawGet(new ApiCallback<String>() {
                        @Override
                        public void onFailure(ApiException e, int statusCode, Map<String, List<String>> responseHeaders) {
                            callbackContext.error("Problem during request call | " + e.getMessage());
                        }

                        @Override
                        public void onSuccess(String result, int statusCode, Map<String, List<String>> responseHeaders) {
                            JSONObject jsonObject = null;
                            try {
                                jsonObject = new JSONObject(result);
                                callbackContext.success(jsonObject);
                            } catch (Exception e) {
                                String errorMessage = "Problem during response parsing | " + String.valueOf(e.hashCode()) + ": " + e.getMessage();
                                callbackContext.error(errorMessage);
                            }
                        }

                        @Override
                        public void onUploadProgress(long bytesWritten, long contentLength, boolean done) {
                        }

                        @Override
                        public void onDownloadProgress(long bytesRead, long contentLength, boolean done) {
                        }
                    });
                } catch (Exception e) {
                    String errorMessage = "Problem during request building | " + String.valueOf(e.hashCode()) + ": " + e.getMessage();
                    callbackContext.error(errorMessage);
                }
            }
        });
    }
    final private void coverageRegionJourneyPatternPointsId(final JSONObject params, final CallbackContext callbackContext) {
        if (this.navitiaSdk == null) {
            callbackContext.error("NavitiaSDK is not instanciated");
            return;
        }

        final JourneyPatternPointsApi.CoverageRegionJourneyPatternPointsIdRequestBuilder journeyPatternPointsRequestBuilder = this.navitiaSdk.journeyPatternPointsApi.newCoverageRegionJourneyPatternPointsIdRequestBuilder();
        cordova.getThreadPool().execute(new Runnable() {
            @Override
            public void run() {
                try {
                    if (params.has("region") && (params.getString("region") != null) && (!params.getString("region").isEmpty()) ) {
                        // Param: region, Type: String
                        journeyPatternPointsRequestBuilder.withRegion(stringStraightPass(params.getString("region")));
                    }
                    if (params.has("id") && (params.getString("id") != null) && (!params.getString("id").isEmpty()) ) {
                        // Param: id, Type: String
                        journeyPatternPointsRequestBuilder.withId(stringStraightPass(params.getString("id")));
                    }
                    if (params.has("startPage") && (params.getString("startPage") != null) && (!params.getString("startPage").isEmpty()) ) {
                        // Param: startPage, Type: Integer
                        journeyPatternPointsRequestBuilder.withStartPage(integerStraightPass(params.getInt("startPage")));
                    }
                    if (params.has("count") && (params.getString("count") != null) && (!params.getString("count").isEmpty()) ) {
                        // Param: count, Type: Integer
                        journeyPatternPointsRequestBuilder.withCount(integerStraightPass(params.getInt("count")));
                    }
                    if (params.has("depth") && (params.getString("depth") != null) && (!params.getString("depth").isEmpty()) ) {
                        // Param: depth, Type: Integer
                        journeyPatternPointsRequestBuilder.withDepth(integerStraightPass(params.getInt("depth")));
                    }
                    if (params.has("forbiddenId") && (params.getString("forbiddenId") != null) && (!params.getString("forbiddenId").isEmpty()) ) {
                        // Param: forbiddenId, Type: List
                        journeyPatternPointsRequestBuilder.withForbiddenId(jsonArrayToStringList(params.getJSONArray("forbiddenId")));
                    }
                    if (params.has("forbiddenUris") && (params.getString("forbiddenUris") != null) && (!params.getString("forbiddenUris").isEmpty()) ) {
                        // Param: forbiddenUris, Type: List
                        journeyPatternPointsRequestBuilder.withForbiddenUris(jsonArrayToStringList(params.getJSONArray("forbiddenUris")));
                    }
                    if (params.has("externalCode") && (params.getString("externalCode") != null) && (!params.getString("externalCode").isEmpty()) ) {
                        // Param: externalCode, Type: String
                        journeyPatternPointsRequestBuilder.withExternalCode(stringStraightPass(params.getString("externalCode")));
                    }
                    if (params.has("headsign") && (params.getString("headsign") != null) && (!params.getString("headsign").isEmpty()) ) {
                        // Param: headsign, Type: String
                        journeyPatternPointsRequestBuilder.withHeadsign(stringStraightPass(params.getString("headsign")));
                    }
                    if (params.has("showCodes") && (params.getString("showCodes") != null) && (!params.getString("showCodes").isEmpty()) ) {
                        // Param: showCodes, Type: Boolean
                        journeyPatternPointsRequestBuilder.withShowCodes(booleanStraightPass(params.getBoolean("showCodes")));
                    }
                    if (params.has("odtLevel") && (params.getString("odtLevel") != null) && (!params.getString("odtLevel").isEmpty()) ) {
                        // Param: odtLevel, Type: String
                        journeyPatternPointsRequestBuilder.withOdtLevel(stringStraightPass(params.getString("odtLevel")));
                    }
                    if (params.has("dataFreshness") && (params.getString("dataFreshness") != null) && (!params.getString("dataFreshness").isEmpty()) ) {
                        // Param: dataFreshness, Type: String
                        journeyPatternPointsRequestBuilder.withDataFreshness(stringStraightPass(params.getString("dataFreshness")));
                    }
                    if (params.has("distance") && (params.getString("distance") != null) && (!params.getString("distance").isEmpty()) ) {
                        // Param: distance, Type: Integer
                        journeyPatternPointsRequestBuilder.withDistance(integerStraightPass(params.getInt("distance")));
                    }
                    if (params.has("since") && (params.getString("since") != null) && (!params.getString("since").isEmpty()) ) {
                        // Param: since, Type: Date
                        journeyPatternPointsRequestBuilder.withSince(stringToDateTime(params.getString("since")));
                    }
                    if (params.has("until") && (params.getString("until") != null) && (!params.getString("until").isEmpty()) ) {
                        // Param: until, Type: Date
                        journeyPatternPointsRequestBuilder.withUntil(stringToDateTime(params.getString("until")));
                    }
                    if (params.has("disableGeojson") && (params.getString("disableGeojson") != null) && (!params.getString("disableGeojson").isEmpty()) ) {
                        // Param: disableGeojson, Type: Boolean
                        journeyPatternPointsRequestBuilder.withDisableGeojson(booleanStraightPass(params.getBoolean("disableGeojson")));
                    }
                    if (params.has("disableDisruption") && (params.getString("disableDisruption") != null) && (!params.getString("disableDisruption").isEmpty()) ) {
                        // Param: disableDisruption, Type: Boolean
                        journeyPatternPointsRequestBuilder.withDisableDisruption(booleanStraightPass(params.getBoolean("disableDisruption")));
                    }
                    if (params.has("tags") && (params.getString("tags") != null) && (!params.getString("tags").isEmpty()) ) {
                        // Param: tags, Type: List
                        journeyPatternPointsRequestBuilder.withTags(jsonArrayToStringList(params.getJSONArray("tags")));
                    }
                    
                    journeyPatternPointsRequestBuilder.rawGet(new ApiCallback<String>() {
                        @Override
                        public void onFailure(ApiException e, int statusCode, Map<String, List<String>> responseHeaders) {
                            callbackContext.error("Problem during request call | " + e.getMessage());
                        }

                        @Override
                        public void onSuccess(String result, int statusCode, Map<String, List<String>> responseHeaders) {
                            JSONObject jsonObject = null;
                            try {
                                jsonObject = new JSONObject(result);
                                callbackContext.success(jsonObject);
                            } catch (Exception e) {
                                String errorMessage = "Problem during response parsing | " + String.valueOf(e.hashCode()) + ": " + e.getMessage();
                                callbackContext.error(errorMessage);
                            }
                        }

                        @Override
                        public void onUploadProgress(long bytesWritten, long contentLength, boolean done) {
                        }

                        @Override
                        public void onDownloadProgress(long bytesRead, long contentLength, boolean done) {
                        }
                    });
                } catch (Exception e) {
                    String errorMessage = "Problem during request building | " + String.valueOf(e.hashCode()) + ": " + e.getMessage();
                    callbackContext.error(errorMessage);
                }
            }
        });
    }
    final private void coverageRegionUriJourneyPatternPoints(final JSONObject params, final CallbackContext callbackContext) {
        if (this.navitiaSdk == null) {
            callbackContext.error("NavitiaSDK is not instanciated");
            return;
        }

        final JourneyPatternPointsApi.CoverageRegionUriJourneyPatternPointsRequestBuilder journeyPatternPointsRequestBuilder = this.navitiaSdk.journeyPatternPointsApi.newCoverageRegionUriJourneyPatternPointsRequestBuilder();
        cordova.getThreadPool().execute(new Runnable() {
            @Override
            public void run() {
                try {
                    if (params.has("region") && (params.getString("region") != null) && (!params.getString("region").isEmpty()) ) {
                        // Param: region, Type: String
                        journeyPatternPointsRequestBuilder.withRegion(stringStraightPass(params.getString("region")));
                    }
                    if (params.has("uri") && (params.getString("uri") != null) && (!params.getString("uri").isEmpty()) ) {
                        // Param: uri, Type: String
                        journeyPatternPointsRequestBuilder.withUri(stringStraightPass(params.getString("uri")));
                    }
                    if (params.has("startPage") && (params.getString("startPage") != null) && (!params.getString("startPage").isEmpty()) ) {
                        // Param: startPage, Type: Integer
                        journeyPatternPointsRequestBuilder.withStartPage(integerStraightPass(params.getInt("startPage")));
                    }
                    if (params.has("count") && (params.getString("count") != null) && (!params.getString("count").isEmpty()) ) {
                        // Param: count, Type: Integer
                        journeyPatternPointsRequestBuilder.withCount(integerStraightPass(params.getInt("count")));
                    }
                    if (params.has("depth") && (params.getString("depth") != null) && (!params.getString("depth").isEmpty()) ) {
                        // Param: depth, Type: Integer
                        journeyPatternPointsRequestBuilder.withDepth(integerStraightPass(params.getInt("depth")));
                    }
                    if (params.has("forbiddenId") && (params.getString("forbiddenId") != null) && (!params.getString("forbiddenId").isEmpty()) ) {
                        // Param: forbiddenId, Type: List
                        journeyPatternPointsRequestBuilder.withForbiddenId(jsonArrayToStringList(params.getJSONArray("forbiddenId")));
                    }
                    if (params.has("forbiddenUris") && (params.getString("forbiddenUris") != null) && (!params.getString("forbiddenUris").isEmpty()) ) {
                        // Param: forbiddenUris, Type: List
                        journeyPatternPointsRequestBuilder.withForbiddenUris(jsonArrayToStringList(params.getJSONArray("forbiddenUris")));
                    }
                    if (params.has("externalCode") && (params.getString("externalCode") != null) && (!params.getString("externalCode").isEmpty()) ) {
                        // Param: externalCode, Type: String
                        journeyPatternPointsRequestBuilder.withExternalCode(stringStraightPass(params.getString("externalCode")));
                    }
                    if (params.has("headsign") && (params.getString("headsign") != null) && (!params.getString("headsign").isEmpty()) ) {
                        // Param: headsign, Type: String
                        journeyPatternPointsRequestBuilder.withHeadsign(stringStraightPass(params.getString("headsign")));
                    }
                    if (params.has("showCodes") && (params.getString("showCodes") != null) && (!params.getString("showCodes").isEmpty()) ) {
                        // Param: showCodes, Type: Boolean
                        journeyPatternPointsRequestBuilder.withShowCodes(booleanStraightPass(params.getBoolean("showCodes")));
                    }
                    if (params.has("odtLevel") && (params.getString("odtLevel") != null) && (!params.getString("odtLevel").isEmpty()) ) {
                        // Param: odtLevel, Type: String
                        journeyPatternPointsRequestBuilder.withOdtLevel(stringStraightPass(params.getString("odtLevel")));
                    }
                    if (params.has("dataFreshness") && (params.getString("dataFreshness") != null) && (!params.getString("dataFreshness").isEmpty()) ) {
                        // Param: dataFreshness, Type: String
                        journeyPatternPointsRequestBuilder.withDataFreshness(stringStraightPass(params.getString("dataFreshness")));
                    }
                    if (params.has("distance") && (params.getString("distance") != null) && (!params.getString("distance").isEmpty()) ) {
                        // Param: distance, Type: Integer
                        journeyPatternPointsRequestBuilder.withDistance(integerStraightPass(params.getInt("distance")));
                    }
                    if (params.has("since") && (params.getString("since") != null) && (!params.getString("since").isEmpty()) ) {
                        // Param: since, Type: Date
                        journeyPatternPointsRequestBuilder.withSince(stringToDateTime(params.getString("since")));
                    }
                    if (params.has("until") && (params.getString("until") != null) && (!params.getString("until").isEmpty()) ) {
                        // Param: until, Type: Date
                        journeyPatternPointsRequestBuilder.withUntil(stringToDateTime(params.getString("until")));
                    }
                    if (params.has("disableGeojson") && (params.getString("disableGeojson") != null) && (!params.getString("disableGeojson").isEmpty()) ) {
                        // Param: disableGeojson, Type: Boolean
                        journeyPatternPointsRequestBuilder.withDisableGeojson(booleanStraightPass(params.getBoolean("disableGeojson")));
                    }
                    if (params.has("disableDisruption") && (params.getString("disableDisruption") != null) && (!params.getString("disableDisruption").isEmpty()) ) {
                        // Param: disableDisruption, Type: Boolean
                        journeyPatternPointsRequestBuilder.withDisableDisruption(booleanStraightPass(params.getBoolean("disableDisruption")));
                    }
                    if (params.has("filter") && (params.getString("filter") != null) && (!params.getString("filter").isEmpty()) ) {
                        // Param: filter, Type: String
                        journeyPatternPointsRequestBuilder.withFilter(stringStraightPass(params.getString("filter")));
                    }
                    if (params.has("tags") && (params.getString("tags") != null) && (!params.getString("tags").isEmpty()) ) {
                        // Param: tags, Type: List
                        journeyPatternPointsRequestBuilder.withTags(jsonArrayToStringList(params.getJSONArray("tags")));
                    }
                    
                    journeyPatternPointsRequestBuilder.rawGet(new ApiCallback<String>() {
                        @Override
                        public void onFailure(ApiException e, int statusCode, Map<String, List<String>> responseHeaders) {
                            callbackContext.error("Problem during request call | " + e.getMessage());
                        }

                        @Override
                        public void onSuccess(String result, int statusCode, Map<String, List<String>> responseHeaders) {
                            JSONObject jsonObject = null;
                            try {
                                jsonObject = new JSONObject(result);
                                callbackContext.success(jsonObject);
                            } catch (Exception e) {
                                String errorMessage = "Problem during response parsing | " + String.valueOf(e.hashCode()) + ": " + e.getMessage();
                                callbackContext.error(errorMessage);
                            }
                        }

                        @Override
                        public void onUploadProgress(long bytesWritten, long contentLength, boolean done) {
                        }

                        @Override
                        public void onDownloadProgress(long bytesRead, long contentLength, boolean done) {
                        }
                    });
                } catch (Exception e) {
                    String errorMessage = "Problem during request building | " + String.valueOf(e.hashCode()) + ": " + e.getMessage();
                    callbackContext.error(errorMessage);
                }
            }
        });
    }
    final private void coverageRegionUriJourneyPatternPointsId(final JSONObject params, final CallbackContext callbackContext) {
        if (this.navitiaSdk == null) {
            callbackContext.error("NavitiaSDK is not instanciated");
            return;
        }

        final JourneyPatternPointsApi.CoverageRegionUriJourneyPatternPointsIdRequestBuilder journeyPatternPointsRequestBuilder = this.navitiaSdk.journeyPatternPointsApi.newCoverageRegionUriJourneyPatternPointsIdRequestBuilder();
        cordova.getThreadPool().execute(new Runnable() {
            @Override
            public void run() {
                try {
                    if (params.has("region") && (params.getString("region") != null) && (!params.getString("region").isEmpty()) ) {
                        // Param: region, Type: String
                        journeyPatternPointsRequestBuilder.withRegion(stringStraightPass(params.getString("region")));
                    }
                    if (params.has("uri") && (params.getString("uri") != null) && (!params.getString("uri").isEmpty()) ) {
                        // Param: uri, Type: String
                        journeyPatternPointsRequestBuilder.withUri(stringStraightPass(params.getString("uri")));
                    }
                    if (params.has("id") && (params.getString("id") != null) && (!params.getString("id").isEmpty()) ) {
                        // Param: id, Type: String
                        journeyPatternPointsRequestBuilder.withId(stringStraightPass(params.getString("id")));
                    }
                    if (params.has("startPage") && (params.getString("startPage") != null) && (!params.getString("startPage").isEmpty()) ) {
                        // Param: startPage, Type: Integer
                        journeyPatternPointsRequestBuilder.withStartPage(integerStraightPass(params.getInt("startPage")));
                    }
                    if (params.has("count") && (params.getString("count") != null) && (!params.getString("count").isEmpty()) ) {
                        // Param: count, Type: Integer
                        journeyPatternPointsRequestBuilder.withCount(integerStraightPass(params.getInt("count")));
                    }
                    if (params.has("depth") && (params.getString("depth") != null) && (!params.getString("depth").isEmpty()) ) {
                        // Param: depth, Type: Integer
                        journeyPatternPointsRequestBuilder.withDepth(integerStraightPass(params.getInt("depth")));
                    }
                    if (params.has("forbiddenId") && (params.getString("forbiddenId") != null) && (!params.getString("forbiddenId").isEmpty()) ) {
                        // Param: forbiddenId, Type: List
                        journeyPatternPointsRequestBuilder.withForbiddenId(jsonArrayToStringList(params.getJSONArray("forbiddenId")));
                    }
                    if (params.has("forbiddenUris") && (params.getString("forbiddenUris") != null) && (!params.getString("forbiddenUris").isEmpty()) ) {
                        // Param: forbiddenUris, Type: List
                        journeyPatternPointsRequestBuilder.withForbiddenUris(jsonArrayToStringList(params.getJSONArray("forbiddenUris")));
                    }
                    if (params.has("externalCode") && (params.getString("externalCode") != null) && (!params.getString("externalCode").isEmpty()) ) {
                        // Param: externalCode, Type: String
                        journeyPatternPointsRequestBuilder.withExternalCode(stringStraightPass(params.getString("externalCode")));
                    }
                    if (params.has("headsign") && (params.getString("headsign") != null) && (!params.getString("headsign").isEmpty()) ) {
                        // Param: headsign, Type: String
                        journeyPatternPointsRequestBuilder.withHeadsign(stringStraightPass(params.getString("headsign")));
                    }
                    if (params.has("showCodes") && (params.getString("showCodes") != null) && (!params.getString("showCodes").isEmpty()) ) {
                        // Param: showCodes, Type: Boolean
                        journeyPatternPointsRequestBuilder.withShowCodes(booleanStraightPass(params.getBoolean("showCodes")));
                    }
                    if (params.has("odtLevel") && (params.getString("odtLevel") != null) && (!params.getString("odtLevel").isEmpty()) ) {
                        // Param: odtLevel, Type: String
                        journeyPatternPointsRequestBuilder.withOdtLevel(stringStraightPass(params.getString("odtLevel")));
                    }
                    if (params.has("dataFreshness") && (params.getString("dataFreshness") != null) && (!params.getString("dataFreshness").isEmpty()) ) {
                        // Param: dataFreshness, Type: String
                        journeyPatternPointsRequestBuilder.withDataFreshness(stringStraightPass(params.getString("dataFreshness")));
                    }
                    if (params.has("distance") && (params.getString("distance") != null) && (!params.getString("distance").isEmpty()) ) {
                        // Param: distance, Type: Integer
                        journeyPatternPointsRequestBuilder.withDistance(integerStraightPass(params.getInt("distance")));
                    }
                    if (params.has("since") && (params.getString("since") != null) && (!params.getString("since").isEmpty()) ) {
                        // Param: since, Type: Date
                        journeyPatternPointsRequestBuilder.withSince(stringToDateTime(params.getString("since")));
                    }
                    if (params.has("until") && (params.getString("until") != null) && (!params.getString("until").isEmpty()) ) {
                        // Param: until, Type: Date
                        journeyPatternPointsRequestBuilder.withUntil(stringToDateTime(params.getString("until")));
                    }
                    if (params.has("disableGeojson") && (params.getString("disableGeojson") != null) && (!params.getString("disableGeojson").isEmpty()) ) {
                        // Param: disableGeojson, Type: Boolean
                        journeyPatternPointsRequestBuilder.withDisableGeojson(booleanStraightPass(params.getBoolean("disableGeojson")));
                    }
                    if (params.has("disableDisruption") && (params.getString("disableDisruption") != null) && (!params.getString("disableDisruption").isEmpty()) ) {
                        // Param: disableDisruption, Type: Boolean
                        journeyPatternPointsRequestBuilder.withDisableDisruption(booleanStraightPass(params.getBoolean("disableDisruption")));
                    }
                    if (params.has("tags") && (params.getString("tags") != null) && (!params.getString("tags").isEmpty()) ) {
                        // Param: tags, Type: List
                        journeyPatternPointsRequestBuilder.withTags(jsonArrayToStringList(params.getJSONArray("tags")));
                    }
                    
                    journeyPatternPointsRequestBuilder.rawGet(new ApiCallback<String>() {
                        @Override
                        public void onFailure(ApiException e, int statusCode, Map<String, List<String>> responseHeaders) {
                            callbackContext.error("Problem during request call | " + e.getMessage());
                        }

                        @Override
                        public void onSuccess(String result, int statusCode, Map<String, List<String>> responseHeaders) {
                            JSONObject jsonObject = null;
                            try {
                                jsonObject = new JSONObject(result);
                                callbackContext.success(jsonObject);
                            } catch (Exception e) {
                                String errorMessage = "Problem during response parsing | " + String.valueOf(e.hashCode()) + ": " + e.getMessage();
                                callbackContext.error(errorMessage);
                            }
                        }

                        @Override
                        public void onUploadProgress(long bytesWritten, long contentLength, boolean done) {
                        }

                        @Override
                        public void onDownloadProgress(long bytesRead, long contentLength, boolean done) {
                        }
                    });
                } catch (Exception e) {
                    String errorMessage = "Problem during request building | " + String.valueOf(e.hashCode()) + ": " + e.getMessage();
                    callbackContext.error(errorMessage);
                }
            }
        });
    }
    final private void coverageLonLatJourneyPatterns(final JSONObject params, final CallbackContext callbackContext) {
        if (this.navitiaSdk == null) {
            callbackContext.error("NavitiaSDK is not instanciated");
            return;
        }

        final JourneyPatternsApi.CoverageLonLatJourneyPatternsRequestBuilder journeyPatternsRequestBuilder = this.navitiaSdk.journeyPatternsApi.newCoverageLonLatJourneyPatternsRequestBuilder();
        cordova.getThreadPool().execute(new Runnable() {
            @Override
            public void run() {
                try {
                    if (params.has("lat") && (params.getString("lat") != null) && (!params.getString("lat").isEmpty()) ) {
                        // Param: lat, Type: BigDecimal
                        journeyPatternsRequestBuilder.withLat(longToBigDecimal(params.getLong("lat")));
                    }
                    if (params.has("lon") && (params.getString("lon") != null) && (!params.getString("lon").isEmpty()) ) {
                        // Param: lon, Type: BigDecimal
                        journeyPatternsRequestBuilder.withLon(longToBigDecimal(params.getLong("lon")));
                    }
                    if (params.has("startPage") && (params.getString("startPage") != null) && (!params.getString("startPage").isEmpty()) ) {
                        // Param: startPage, Type: Integer
                        journeyPatternsRequestBuilder.withStartPage(integerStraightPass(params.getInt("startPage")));
                    }
                    if (params.has("count") && (params.getString("count") != null) && (!params.getString("count").isEmpty()) ) {
                        // Param: count, Type: Integer
                        journeyPatternsRequestBuilder.withCount(integerStraightPass(params.getInt("count")));
                    }
                    if (params.has("depth") && (params.getString("depth") != null) && (!params.getString("depth").isEmpty()) ) {
                        // Param: depth, Type: Integer
                        journeyPatternsRequestBuilder.withDepth(integerStraightPass(params.getInt("depth")));
                    }
                    if (params.has("forbiddenId") && (params.getString("forbiddenId") != null) && (!params.getString("forbiddenId").isEmpty()) ) {
                        // Param: forbiddenId, Type: List
                        journeyPatternsRequestBuilder.withForbiddenId(jsonArrayToStringList(params.getJSONArray("forbiddenId")));
                    }
                    if (params.has("forbiddenUris") && (params.getString("forbiddenUris") != null) && (!params.getString("forbiddenUris").isEmpty()) ) {
                        // Param: forbiddenUris, Type: List
                        journeyPatternsRequestBuilder.withForbiddenUris(jsonArrayToStringList(params.getJSONArray("forbiddenUris")));
                    }
                    if (params.has("externalCode") && (params.getString("externalCode") != null) && (!params.getString("externalCode").isEmpty()) ) {
                        // Param: externalCode, Type: String
                        journeyPatternsRequestBuilder.withExternalCode(stringStraightPass(params.getString("externalCode")));
                    }
                    if (params.has("headsign") && (params.getString("headsign") != null) && (!params.getString("headsign").isEmpty()) ) {
                        // Param: headsign, Type: String
                        journeyPatternsRequestBuilder.withHeadsign(stringStraightPass(params.getString("headsign")));
                    }
                    if (params.has("showCodes") && (params.getString("showCodes") != null) && (!params.getString("showCodes").isEmpty()) ) {
                        // Param: showCodes, Type: Boolean
                        journeyPatternsRequestBuilder.withShowCodes(booleanStraightPass(params.getBoolean("showCodes")));
                    }
                    if (params.has("odtLevel") && (params.getString("odtLevel") != null) && (!params.getString("odtLevel").isEmpty()) ) {
                        // Param: odtLevel, Type: String
                        journeyPatternsRequestBuilder.withOdtLevel(stringStraightPass(params.getString("odtLevel")));
                    }
                    if (params.has("dataFreshness") && (params.getString("dataFreshness") != null) && (!params.getString("dataFreshness").isEmpty()) ) {
                        // Param: dataFreshness, Type: String
                        journeyPatternsRequestBuilder.withDataFreshness(stringStraightPass(params.getString("dataFreshness")));
                    }
                    if (params.has("distance") && (params.getString("distance") != null) && (!params.getString("distance").isEmpty()) ) {
                        // Param: distance, Type: Integer
                        journeyPatternsRequestBuilder.withDistance(integerStraightPass(params.getInt("distance")));
                    }
                    if (params.has("since") && (params.getString("since") != null) && (!params.getString("since").isEmpty()) ) {
                        // Param: since, Type: Date
                        journeyPatternsRequestBuilder.withSince(stringToDateTime(params.getString("since")));
                    }
                    if (params.has("until") && (params.getString("until") != null) && (!params.getString("until").isEmpty()) ) {
                        // Param: until, Type: Date
                        journeyPatternsRequestBuilder.withUntil(stringToDateTime(params.getString("until")));
                    }
                    if (params.has("disableGeojson") && (params.getString("disableGeojson") != null) && (!params.getString("disableGeojson").isEmpty()) ) {
                        // Param: disableGeojson, Type: Boolean
                        journeyPatternsRequestBuilder.withDisableGeojson(booleanStraightPass(params.getBoolean("disableGeojson")));
                    }
                    if (params.has("disableDisruption") && (params.getString("disableDisruption") != null) && (!params.getString("disableDisruption").isEmpty()) ) {
                        // Param: disableDisruption, Type: Boolean
                        journeyPatternsRequestBuilder.withDisableDisruption(booleanStraightPass(params.getBoolean("disableDisruption")));
                    }
                    if (params.has("filter") && (params.getString("filter") != null) && (!params.getString("filter").isEmpty()) ) {
                        // Param: filter, Type: String
                        journeyPatternsRequestBuilder.withFilter(stringStraightPass(params.getString("filter")));
                    }
                    if (params.has("tags") && (params.getString("tags") != null) && (!params.getString("tags").isEmpty()) ) {
                        // Param: tags, Type: List
                        journeyPatternsRequestBuilder.withTags(jsonArrayToStringList(params.getJSONArray("tags")));
                    }
                    
                    journeyPatternsRequestBuilder.rawGet(new ApiCallback<String>() {
                        @Override
                        public void onFailure(ApiException e, int statusCode, Map<String, List<String>> responseHeaders) {
                            callbackContext.error("Problem during request call | " + e.getMessage());
                        }

                        @Override
                        public void onSuccess(String result, int statusCode, Map<String, List<String>> responseHeaders) {
                            JSONObject jsonObject = null;
                            try {
                                jsonObject = new JSONObject(result);
                                callbackContext.success(jsonObject);
                            } catch (Exception e) {
                                String errorMessage = "Problem during response parsing | " + String.valueOf(e.hashCode()) + ": " + e.getMessage();
                                callbackContext.error(errorMessage);
                            }
                        }

                        @Override
                        public void onUploadProgress(long bytesWritten, long contentLength, boolean done) {
                        }

                        @Override
                        public void onDownloadProgress(long bytesRead, long contentLength, boolean done) {
                        }
                    });
                } catch (Exception e) {
                    String errorMessage = "Problem during request building | " + String.valueOf(e.hashCode()) + ": " + e.getMessage();
                    callbackContext.error(errorMessage);
                }
            }
        });
    }
    final private void coverageLonLatJourneyPatternsId(final JSONObject params, final CallbackContext callbackContext) {
        if (this.navitiaSdk == null) {
            callbackContext.error("NavitiaSDK is not instanciated");
            return;
        }

        final JourneyPatternsApi.CoverageLonLatJourneyPatternsIdRequestBuilder journeyPatternsRequestBuilder = this.navitiaSdk.journeyPatternsApi.newCoverageLonLatJourneyPatternsIdRequestBuilder();
        cordova.getThreadPool().execute(new Runnable() {
            @Override
            public void run() {
                try {
                    if (params.has("lat") && (params.getString("lat") != null) && (!params.getString("lat").isEmpty()) ) {
                        // Param: lat, Type: BigDecimal
                        journeyPatternsRequestBuilder.withLat(longToBigDecimal(params.getLong("lat")));
                    }
                    if (params.has("lon") && (params.getString("lon") != null) && (!params.getString("lon").isEmpty()) ) {
                        // Param: lon, Type: BigDecimal
                        journeyPatternsRequestBuilder.withLon(longToBigDecimal(params.getLong("lon")));
                    }
                    if (params.has("id") && (params.getString("id") != null) && (!params.getString("id").isEmpty()) ) {
                        // Param: id, Type: String
                        journeyPatternsRequestBuilder.withId(stringStraightPass(params.getString("id")));
                    }
                    if (params.has("startPage") && (params.getString("startPage") != null) && (!params.getString("startPage").isEmpty()) ) {
                        // Param: startPage, Type: Integer
                        journeyPatternsRequestBuilder.withStartPage(integerStraightPass(params.getInt("startPage")));
                    }
                    if (params.has("count") && (params.getString("count") != null) && (!params.getString("count").isEmpty()) ) {
                        // Param: count, Type: Integer
                        journeyPatternsRequestBuilder.withCount(integerStraightPass(params.getInt("count")));
                    }
                    if (params.has("depth") && (params.getString("depth") != null) && (!params.getString("depth").isEmpty()) ) {
                        // Param: depth, Type: Integer
                        journeyPatternsRequestBuilder.withDepth(integerStraightPass(params.getInt("depth")));
                    }
                    if (params.has("forbiddenId") && (params.getString("forbiddenId") != null) && (!params.getString("forbiddenId").isEmpty()) ) {
                        // Param: forbiddenId, Type: List
                        journeyPatternsRequestBuilder.withForbiddenId(jsonArrayToStringList(params.getJSONArray("forbiddenId")));
                    }
                    if (params.has("forbiddenUris") && (params.getString("forbiddenUris") != null) && (!params.getString("forbiddenUris").isEmpty()) ) {
                        // Param: forbiddenUris, Type: List
                        journeyPatternsRequestBuilder.withForbiddenUris(jsonArrayToStringList(params.getJSONArray("forbiddenUris")));
                    }
                    if (params.has("externalCode") && (params.getString("externalCode") != null) && (!params.getString("externalCode").isEmpty()) ) {
                        // Param: externalCode, Type: String
                        journeyPatternsRequestBuilder.withExternalCode(stringStraightPass(params.getString("externalCode")));
                    }
                    if (params.has("headsign") && (params.getString("headsign") != null) && (!params.getString("headsign").isEmpty()) ) {
                        // Param: headsign, Type: String
                        journeyPatternsRequestBuilder.withHeadsign(stringStraightPass(params.getString("headsign")));
                    }
                    if (params.has("showCodes") && (params.getString("showCodes") != null) && (!params.getString("showCodes").isEmpty()) ) {
                        // Param: showCodes, Type: Boolean
                        journeyPatternsRequestBuilder.withShowCodes(booleanStraightPass(params.getBoolean("showCodes")));
                    }
                    if (params.has("odtLevel") && (params.getString("odtLevel") != null) && (!params.getString("odtLevel").isEmpty()) ) {
                        // Param: odtLevel, Type: String
                        journeyPatternsRequestBuilder.withOdtLevel(stringStraightPass(params.getString("odtLevel")));
                    }
                    if (params.has("dataFreshness") && (params.getString("dataFreshness") != null) && (!params.getString("dataFreshness").isEmpty()) ) {
                        // Param: dataFreshness, Type: String
                        journeyPatternsRequestBuilder.withDataFreshness(stringStraightPass(params.getString("dataFreshness")));
                    }
                    if (params.has("distance") && (params.getString("distance") != null) && (!params.getString("distance").isEmpty()) ) {
                        // Param: distance, Type: Integer
                        journeyPatternsRequestBuilder.withDistance(integerStraightPass(params.getInt("distance")));
                    }
                    if (params.has("since") && (params.getString("since") != null) && (!params.getString("since").isEmpty()) ) {
                        // Param: since, Type: Date
                        journeyPatternsRequestBuilder.withSince(stringToDateTime(params.getString("since")));
                    }
                    if (params.has("until") && (params.getString("until") != null) && (!params.getString("until").isEmpty()) ) {
                        // Param: until, Type: Date
                        journeyPatternsRequestBuilder.withUntil(stringToDateTime(params.getString("until")));
                    }
                    if (params.has("disableGeojson") && (params.getString("disableGeojson") != null) && (!params.getString("disableGeojson").isEmpty()) ) {
                        // Param: disableGeojson, Type: Boolean
                        journeyPatternsRequestBuilder.withDisableGeojson(booleanStraightPass(params.getBoolean("disableGeojson")));
                    }
                    if (params.has("disableDisruption") && (params.getString("disableDisruption") != null) && (!params.getString("disableDisruption").isEmpty()) ) {
                        // Param: disableDisruption, Type: Boolean
                        journeyPatternsRequestBuilder.withDisableDisruption(booleanStraightPass(params.getBoolean("disableDisruption")));
                    }
                    if (params.has("tags") && (params.getString("tags") != null) && (!params.getString("tags").isEmpty()) ) {
                        // Param: tags, Type: List
                        journeyPatternsRequestBuilder.withTags(jsonArrayToStringList(params.getJSONArray("tags")));
                    }
                    
                    journeyPatternsRequestBuilder.rawGet(new ApiCallback<String>() {
                        @Override
                        public void onFailure(ApiException e, int statusCode, Map<String, List<String>> responseHeaders) {
                            callbackContext.error("Problem during request call | " + e.getMessage());
                        }

                        @Override
                        public void onSuccess(String result, int statusCode, Map<String, List<String>> responseHeaders) {
                            JSONObject jsonObject = null;
                            try {
                                jsonObject = new JSONObject(result);
                                callbackContext.success(jsonObject);
                            } catch (Exception e) {
                                String errorMessage = "Problem during response parsing | " + String.valueOf(e.hashCode()) + ": " + e.getMessage();
                                callbackContext.error(errorMessage);
                            }
                        }

                        @Override
                        public void onUploadProgress(long bytesWritten, long contentLength, boolean done) {
                        }

                        @Override
                        public void onDownloadProgress(long bytesRead, long contentLength, boolean done) {
                        }
                    });
                } catch (Exception e) {
                    String errorMessage = "Problem during request building | " + String.valueOf(e.hashCode()) + ": " + e.getMessage();
                    callbackContext.error(errorMessage);
                }
            }
        });
    }
    final private void coverageLonLatUriJourneyPatterns(final JSONObject params, final CallbackContext callbackContext) {
        if (this.navitiaSdk == null) {
            callbackContext.error("NavitiaSDK is not instanciated");
            return;
        }

        final JourneyPatternsApi.CoverageLonLatUriJourneyPatternsRequestBuilder journeyPatternsRequestBuilder = this.navitiaSdk.journeyPatternsApi.newCoverageLonLatUriJourneyPatternsRequestBuilder();
        cordova.getThreadPool().execute(new Runnable() {
            @Override
            public void run() {
                try {
                    if (params.has("lat") && (params.getString("lat") != null) && (!params.getString("lat").isEmpty()) ) {
                        // Param: lat, Type: BigDecimal
                        journeyPatternsRequestBuilder.withLat(longToBigDecimal(params.getLong("lat")));
                    }
                    if (params.has("lon") && (params.getString("lon") != null) && (!params.getString("lon").isEmpty()) ) {
                        // Param: lon, Type: BigDecimal
                        journeyPatternsRequestBuilder.withLon(longToBigDecimal(params.getLong("lon")));
                    }
                    if (params.has("uri") && (params.getString("uri") != null) && (!params.getString("uri").isEmpty()) ) {
                        // Param: uri, Type: String
                        journeyPatternsRequestBuilder.withUri(stringStraightPass(params.getString("uri")));
                    }
                    if (params.has("startPage") && (params.getString("startPage") != null) && (!params.getString("startPage").isEmpty()) ) {
                        // Param: startPage, Type: Integer
                        journeyPatternsRequestBuilder.withStartPage(integerStraightPass(params.getInt("startPage")));
                    }
                    if (params.has("count") && (params.getString("count") != null) && (!params.getString("count").isEmpty()) ) {
                        // Param: count, Type: Integer
                        journeyPatternsRequestBuilder.withCount(integerStraightPass(params.getInt("count")));
                    }
                    if (params.has("depth") && (params.getString("depth") != null) && (!params.getString("depth").isEmpty()) ) {
                        // Param: depth, Type: Integer
                        journeyPatternsRequestBuilder.withDepth(integerStraightPass(params.getInt("depth")));
                    }
                    if (params.has("forbiddenId") && (params.getString("forbiddenId") != null) && (!params.getString("forbiddenId").isEmpty()) ) {
                        // Param: forbiddenId, Type: List
                        journeyPatternsRequestBuilder.withForbiddenId(jsonArrayToStringList(params.getJSONArray("forbiddenId")));
                    }
                    if (params.has("forbiddenUris") && (params.getString("forbiddenUris") != null) && (!params.getString("forbiddenUris").isEmpty()) ) {
                        // Param: forbiddenUris, Type: List
                        journeyPatternsRequestBuilder.withForbiddenUris(jsonArrayToStringList(params.getJSONArray("forbiddenUris")));
                    }
                    if (params.has("externalCode") && (params.getString("externalCode") != null) && (!params.getString("externalCode").isEmpty()) ) {
                        // Param: externalCode, Type: String
                        journeyPatternsRequestBuilder.withExternalCode(stringStraightPass(params.getString("externalCode")));
                    }
                    if (params.has("headsign") && (params.getString("headsign") != null) && (!params.getString("headsign").isEmpty()) ) {
                        // Param: headsign, Type: String
                        journeyPatternsRequestBuilder.withHeadsign(stringStraightPass(params.getString("headsign")));
                    }
                    if (params.has("showCodes") && (params.getString("showCodes") != null) && (!params.getString("showCodes").isEmpty()) ) {
                        // Param: showCodes, Type: Boolean
                        journeyPatternsRequestBuilder.withShowCodes(booleanStraightPass(params.getBoolean("showCodes")));
                    }
                    if (params.has("odtLevel") && (params.getString("odtLevel") != null) && (!params.getString("odtLevel").isEmpty()) ) {
                        // Param: odtLevel, Type: String
                        journeyPatternsRequestBuilder.withOdtLevel(stringStraightPass(params.getString("odtLevel")));
                    }
                    if (params.has("dataFreshness") && (params.getString("dataFreshness") != null) && (!params.getString("dataFreshness").isEmpty()) ) {
                        // Param: dataFreshness, Type: String
                        journeyPatternsRequestBuilder.withDataFreshness(stringStraightPass(params.getString("dataFreshness")));
                    }
                    if (params.has("distance") && (params.getString("distance") != null) && (!params.getString("distance").isEmpty()) ) {
                        // Param: distance, Type: Integer
                        journeyPatternsRequestBuilder.withDistance(integerStraightPass(params.getInt("distance")));
                    }
                    if (params.has("since") && (params.getString("since") != null) && (!params.getString("since").isEmpty()) ) {
                        // Param: since, Type: Date
                        journeyPatternsRequestBuilder.withSince(stringToDateTime(params.getString("since")));
                    }
                    if (params.has("until") && (params.getString("until") != null) && (!params.getString("until").isEmpty()) ) {
                        // Param: until, Type: Date
                        journeyPatternsRequestBuilder.withUntil(stringToDateTime(params.getString("until")));
                    }
                    if (params.has("disableGeojson") && (params.getString("disableGeojson") != null) && (!params.getString("disableGeojson").isEmpty()) ) {
                        // Param: disableGeojson, Type: Boolean
                        journeyPatternsRequestBuilder.withDisableGeojson(booleanStraightPass(params.getBoolean("disableGeojson")));
                    }
                    if (params.has("disableDisruption") && (params.getString("disableDisruption") != null) && (!params.getString("disableDisruption").isEmpty()) ) {
                        // Param: disableDisruption, Type: Boolean
                        journeyPatternsRequestBuilder.withDisableDisruption(booleanStraightPass(params.getBoolean("disableDisruption")));
                    }
                    if (params.has("filter") && (params.getString("filter") != null) && (!params.getString("filter").isEmpty()) ) {
                        // Param: filter, Type: String
                        journeyPatternsRequestBuilder.withFilter(stringStraightPass(params.getString("filter")));
                    }
                    if (params.has("tags") && (params.getString("tags") != null) && (!params.getString("tags").isEmpty()) ) {
                        // Param: tags, Type: List
                        journeyPatternsRequestBuilder.withTags(jsonArrayToStringList(params.getJSONArray("tags")));
                    }
                    
                    journeyPatternsRequestBuilder.rawGet(new ApiCallback<String>() {
                        @Override
                        public void onFailure(ApiException e, int statusCode, Map<String, List<String>> responseHeaders) {
                            callbackContext.error("Problem during request call | " + e.getMessage());
                        }

                        @Override
                        public void onSuccess(String result, int statusCode, Map<String, List<String>> responseHeaders) {
                            JSONObject jsonObject = null;
                            try {
                                jsonObject = new JSONObject(result);
                                callbackContext.success(jsonObject);
                            } catch (Exception e) {
                                String errorMessage = "Problem during response parsing | " + String.valueOf(e.hashCode()) + ": " + e.getMessage();
                                callbackContext.error(errorMessage);
                            }
                        }

                        @Override
                        public void onUploadProgress(long bytesWritten, long contentLength, boolean done) {
                        }

                        @Override
                        public void onDownloadProgress(long bytesRead, long contentLength, boolean done) {
                        }
                    });
                } catch (Exception e) {
                    String errorMessage = "Problem during request building | " + String.valueOf(e.hashCode()) + ": " + e.getMessage();
                    callbackContext.error(errorMessage);
                }
            }
        });
    }
    final private void coverageLonLatUriJourneyPatternsId(final JSONObject params, final CallbackContext callbackContext) {
        if (this.navitiaSdk == null) {
            callbackContext.error("NavitiaSDK is not instanciated");
            return;
        }

        final JourneyPatternsApi.CoverageLonLatUriJourneyPatternsIdRequestBuilder journeyPatternsRequestBuilder = this.navitiaSdk.journeyPatternsApi.newCoverageLonLatUriJourneyPatternsIdRequestBuilder();
        cordova.getThreadPool().execute(new Runnable() {
            @Override
            public void run() {
                try {
                    if (params.has("lat") && (params.getString("lat") != null) && (!params.getString("lat").isEmpty()) ) {
                        // Param: lat, Type: BigDecimal
                        journeyPatternsRequestBuilder.withLat(longToBigDecimal(params.getLong("lat")));
                    }
                    if (params.has("lon") && (params.getString("lon") != null) && (!params.getString("lon").isEmpty()) ) {
                        // Param: lon, Type: BigDecimal
                        journeyPatternsRequestBuilder.withLon(longToBigDecimal(params.getLong("lon")));
                    }
                    if (params.has("uri") && (params.getString("uri") != null) && (!params.getString("uri").isEmpty()) ) {
                        // Param: uri, Type: String
                        journeyPatternsRequestBuilder.withUri(stringStraightPass(params.getString("uri")));
                    }
                    if (params.has("id") && (params.getString("id") != null) && (!params.getString("id").isEmpty()) ) {
                        // Param: id, Type: String
                        journeyPatternsRequestBuilder.withId(stringStraightPass(params.getString("id")));
                    }
                    if (params.has("startPage") && (params.getString("startPage") != null) && (!params.getString("startPage").isEmpty()) ) {
                        // Param: startPage, Type: Integer
                        journeyPatternsRequestBuilder.withStartPage(integerStraightPass(params.getInt("startPage")));
                    }
                    if (params.has("count") && (params.getString("count") != null) && (!params.getString("count").isEmpty()) ) {
                        // Param: count, Type: Integer
                        journeyPatternsRequestBuilder.withCount(integerStraightPass(params.getInt("count")));
                    }
                    if (params.has("depth") && (params.getString("depth") != null) && (!params.getString("depth").isEmpty()) ) {
                        // Param: depth, Type: Integer
                        journeyPatternsRequestBuilder.withDepth(integerStraightPass(params.getInt("depth")));
                    }
                    if (params.has("forbiddenId") && (params.getString("forbiddenId") != null) && (!params.getString("forbiddenId").isEmpty()) ) {
                        // Param: forbiddenId, Type: List
                        journeyPatternsRequestBuilder.withForbiddenId(jsonArrayToStringList(params.getJSONArray("forbiddenId")));
                    }
                    if (params.has("forbiddenUris") && (params.getString("forbiddenUris") != null) && (!params.getString("forbiddenUris").isEmpty()) ) {
                        // Param: forbiddenUris, Type: List
                        journeyPatternsRequestBuilder.withForbiddenUris(jsonArrayToStringList(params.getJSONArray("forbiddenUris")));
                    }
                    if (params.has("externalCode") && (params.getString("externalCode") != null) && (!params.getString("externalCode").isEmpty()) ) {
                        // Param: externalCode, Type: String
                        journeyPatternsRequestBuilder.withExternalCode(stringStraightPass(params.getString("externalCode")));
                    }
                    if (params.has("headsign") && (params.getString("headsign") != null) && (!params.getString("headsign").isEmpty()) ) {
                        // Param: headsign, Type: String
                        journeyPatternsRequestBuilder.withHeadsign(stringStraightPass(params.getString("headsign")));
                    }
                    if (params.has("showCodes") && (params.getString("showCodes") != null) && (!params.getString("showCodes").isEmpty()) ) {
                        // Param: showCodes, Type: Boolean
                        journeyPatternsRequestBuilder.withShowCodes(booleanStraightPass(params.getBoolean("showCodes")));
                    }
                    if (params.has("odtLevel") && (params.getString("odtLevel") != null) && (!params.getString("odtLevel").isEmpty()) ) {
                        // Param: odtLevel, Type: String
                        journeyPatternsRequestBuilder.withOdtLevel(stringStraightPass(params.getString("odtLevel")));
                    }
                    if (params.has("dataFreshness") && (params.getString("dataFreshness") != null) && (!params.getString("dataFreshness").isEmpty()) ) {
                        // Param: dataFreshness, Type: String
                        journeyPatternsRequestBuilder.withDataFreshness(stringStraightPass(params.getString("dataFreshness")));
                    }
                    if (params.has("distance") && (params.getString("distance") != null) && (!params.getString("distance").isEmpty()) ) {
                        // Param: distance, Type: Integer
                        journeyPatternsRequestBuilder.withDistance(integerStraightPass(params.getInt("distance")));
                    }
                    if (params.has("since") && (params.getString("since") != null) && (!params.getString("since").isEmpty()) ) {
                        // Param: since, Type: Date
                        journeyPatternsRequestBuilder.withSince(stringToDateTime(params.getString("since")));
                    }
                    if (params.has("until") && (params.getString("until") != null) && (!params.getString("until").isEmpty()) ) {
                        // Param: until, Type: Date
                        journeyPatternsRequestBuilder.withUntil(stringToDateTime(params.getString("until")));
                    }
                    if (params.has("disableGeojson") && (params.getString("disableGeojson") != null) && (!params.getString("disableGeojson").isEmpty()) ) {
                        // Param: disableGeojson, Type: Boolean
                        journeyPatternsRequestBuilder.withDisableGeojson(booleanStraightPass(params.getBoolean("disableGeojson")));
                    }
                    if (params.has("disableDisruption") && (params.getString("disableDisruption") != null) && (!params.getString("disableDisruption").isEmpty()) ) {
                        // Param: disableDisruption, Type: Boolean
                        journeyPatternsRequestBuilder.withDisableDisruption(booleanStraightPass(params.getBoolean("disableDisruption")));
                    }
                    if (params.has("tags") && (params.getString("tags") != null) && (!params.getString("tags").isEmpty()) ) {
                        // Param: tags, Type: List
                        journeyPatternsRequestBuilder.withTags(jsonArrayToStringList(params.getJSONArray("tags")));
                    }
                    
                    journeyPatternsRequestBuilder.rawGet(new ApiCallback<String>() {
                        @Override
                        public void onFailure(ApiException e, int statusCode, Map<String, List<String>> responseHeaders) {
                            callbackContext.error("Problem during request call | " + e.getMessage());
                        }

                        @Override
                        public void onSuccess(String result, int statusCode, Map<String, List<String>> responseHeaders) {
                            JSONObject jsonObject = null;
                            try {
                                jsonObject = new JSONObject(result);
                                callbackContext.success(jsonObject);
                            } catch (Exception e) {
                                String errorMessage = "Problem during response parsing | " + String.valueOf(e.hashCode()) + ": " + e.getMessage();
                                callbackContext.error(errorMessage);
                            }
                        }

                        @Override
                        public void onUploadProgress(long bytesWritten, long contentLength, boolean done) {
                        }

                        @Override
                        public void onDownloadProgress(long bytesRead, long contentLength, boolean done) {
                        }
                    });
                } catch (Exception e) {
                    String errorMessage = "Problem during request building | " + String.valueOf(e.hashCode()) + ": " + e.getMessage();
                    callbackContext.error(errorMessage);
                }
            }
        });
    }
    final private void coverageRegionJourneyPatterns(final JSONObject params, final CallbackContext callbackContext) {
        if (this.navitiaSdk == null) {
            callbackContext.error("NavitiaSDK is not instanciated");
            return;
        }

        final JourneyPatternsApi.CoverageRegionJourneyPatternsRequestBuilder journeyPatternsRequestBuilder = this.navitiaSdk.journeyPatternsApi.newCoverageRegionJourneyPatternsRequestBuilder();
        cordova.getThreadPool().execute(new Runnable() {
            @Override
            public void run() {
                try {
                    if (params.has("region") && (params.getString("region") != null) && (!params.getString("region").isEmpty()) ) {
                        // Param: region, Type: String
                        journeyPatternsRequestBuilder.withRegion(stringStraightPass(params.getString("region")));
                    }
                    if (params.has("startPage") && (params.getString("startPage") != null) && (!params.getString("startPage").isEmpty()) ) {
                        // Param: startPage, Type: Integer
                        journeyPatternsRequestBuilder.withStartPage(integerStraightPass(params.getInt("startPage")));
                    }
                    if (params.has("count") && (params.getString("count") != null) && (!params.getString("count").isEmpty()) ) {
                        // Param: count, Type: Integer
                        journeyPatternsRequestBuilder.withCount(integerStraightPass(params.getInt("count")));
                    }
                    if (params.has("depth") && (params.getString("depth") != null) && (!params.getString("depth").isEmpty()) ) {
                        // Param: depth, Type: Integer
                        journeyPatternsRequestBuilder.withDepth(integerStraightPass(params.getInt("depth")));
                    }
                    if (params.has("forbiddenId") && (params.getString("forbiddenId") != null) && (!params.getString("forbiddenId").isEmpty()) ) {
                        // Param: forbiddenId, Type: List
                        journeyPatternsRequestBuilder.withForbiddenId(jsonArrayToStringList(params.getJSONArray("forbiddenId")));
                    }
                    if (params.has("forbiddenUris") && (params.getString("forbiddenUris") != null) && (!params.getString("forbiddenUris").isEmpty()) ) {
                        // Param: forbiddenUris, Type: List
                        journeyPatternsRequestBuilder.withForbiddenUris(jsonArrayToStringList(params.getJSONArray("forbiddenUris")));
                    }
                    if (params.has("externalCode") && (params.getString("externalCode") != null) && (!params.getString("externalCode").isEmpty()) ) {
                        // Param: externalCode, Type: String
                        journeyPatternsRequestBuilder.withExternalCode(stringStraightPass(params.getString("externalCode")));
                    }
                    if (params.has("headsign") && (params.getString("headsign") != null) && (!params.getString("headsign").isEmpty()) ) {
                        // Param: headsign, Type: String
                        journeyPatternsRequestBuilder.withHeadsign(stringStraightPass(params.getString("headsign")));
                    }
                    if (params.has("showCodes") && (params.getString("showCodes") != null) && (!params.getString("showCodes").isEmpty()) ) {
                        // Param: showCodes, Type: Boolean
                        journeyPatternsRequestBuilder.withShowCodes(booleanStraightPass(params.getBoolean("showCodes")));
                    }
                    if (params.has("odtLevel") && (params.getString("odtLevel") != null) && (!params.getString("odtLevel").isEmpty()) ) {
                        // Param: odtLevel, Type: String
                        journeyPatternsRequestBuilder.withOdtLevel(stringStraightPass(params.getString("odtLevel")));
                    }
                    if (params.has("dataFreshness") && (params.getString("dataFreshness") != null) && (!params.getString("dataFreshness").isEmpty()) ) {
                        // Param: dataFreshness, Type: String
                        journeyPatternsRequestBuilder.withDataFreshness(stringStraightPass(params.getString("dataFreshness")));
                    }
                    if (params.has("distance") && (params.getString("distance") != null) && (!params.getString("distance").isEmpty()) ) {
                        // Param: distance, Type: Integer
                        journeyPatternsRequestBuilder.withDistance(integerStraightPass(params.getInt("distance")));
                    }
                    if (params.has("since") && (params.getString("since") != null) && (!params.getString("since").isEmpty()) ) {
                        // Param: since, Type: Date
                        journeyPatternsRequestBuilder.withSince(stringToDateTime(params.getString("since")));
                    }
                    if (params.has("until") && (params.getString("until") != null) && (!params.getString("until").isEmpty()) ) {
                        // Param: until, Type: Date
                        journeyPatternsRequestBuilder.withUntil(stringToDateTime(params.getString("until")));
                    }
                    if (params.has("disableGeojson") && (params.getString("disableGeojson") != null) && (!params.getString("disableGeojson").isEmpty()) ) {
                        // Param: disableGeojson, Type: Boolean
                        journeyPatternsRequestBuilder.withDisableGeojson(booleanStraightPass(params.getBoolean("disableGeojson")));
                    }
                    if (params.has("disableDisruption") && (params.getString("disableDisruption") != null) && (!params.getString("disableDisruption").isEmpty()) ) {
                        // Param: disableDisruption, Type: Boolean
                        journeyPatternsRequestBuilder.withDisableDisruption(booleanStraightPass(params.getBoolean("disableDisruption")));
                    }
                    if (params.has("filter") && (params.getString("filter") != null) && (!params.getString("filter").isEmpty()) ) {
                        // Param: filter, Type: String
                        journeyPatternsRequestBuilder.withFilter(stringStraightPass(params.getString("filter")));
                    }
                    if (params.has("tags") && (params.getString("tags") != null) && (!params.getString("tags").isEmpty()) ) {
                        // Param: tags, Type: List
                        journeyPatternsRequestBuilder.withTags(jsonArrayToStringList(params.getJSONArray("tags")));
                    }
                    
                    journeyPatternsRequestBuilder.rawGet(new ApiCallback<String>() {
                        @Override
                        public void onFailure(ApiException e, int statusCode, Map<String, List<String>> responseHeaders) {
                            callbackContext.error("Problem during request call | " + e.getMessage());
                        }

                        @Override
                        public void onSuccess(String result, int statusCode, Map<String, List<String>> responseHeaders) {
                            JSONObject jsonObject = null;
                            try {
                                jsonObject = new JSONObject(result);
                                callbackContext.success(jsonObject);
                            } catch (Exception e) {
                                String errorMessage = "Problem during response parsing | " + String.valueOf(e.hashCode()) + ": " + e.getMessage();
                                callbackContext.error(errorMessage);
                            }
                        }

                        @Override
                        public void onUploadProgress(long bytesWritten, long contentLength, boolean done) {
                        }

                        @Override
                        public void onDownloadProgress(long bytesRead, long contentLength, boolean done) {
                        }
                    });
                } catch (Exception e) {
                    String errorMessage = "Problem during request building | " + String.valueOf(e.hashCode()) + ": " + e.getMessage();
                    callbackContext.error(errorMessage);
                }
            }
        });
    }
    final private void coverageRegionJourneyPatternsId(final JSONObject params, final CallbackContext callbackContext) {
        if (this.navitiaSdk == null) {
            callbackContext.error("NavitiaSDK is not instanciated");
            return;
        }

        final JourneyPatternsApi.CoverageRegionJourneyPatternsIdRequestBuilder journeyPatternsRequestBuilder = this.navitiaSdk.journeyPatternsApi.newCoverageRegionJourneyPatternsIdRequestBuilder();
        cordova.getThreadPool().execute(new Runnable() {
            @Override
            public void run() {
                try {
                    if (params.has("region") && (params.getString("region") != null) && (!params.getString("region").isEmpty()) ) {
                        // Param: region, Type: String
                        journeyPatternsRequestBuilder.withRegion(stringStraightPass(params.getString("region")));
                    }
                    if (params.has("id") && (params.getString("id") != null) && (!params.getString("id").isEmpty()) ) {
                        // Param: id, Type: String
                        journeyPatternsRequestBuilder.withId(stringStraightPass(params.getString("id")));
                    }
                    if (params.has("startPage") && (params.getString("startPage") != null) && (!params.getString("startPage").isEmpty()) ) {
                        // Param: startPage, Type: Integer
                        journeyPatternsRequestBuilder.withStartPage(integerStraightPass(params.getInt("startPage")));
                    }
                    if (params.has("count") && (params.getString("count") != null) && (!params.getString("count").isEmpty()) ) {
                        // Param: count, Type: Integer
                        journeyPatternsRequestBuilder.withCount(integerStraightPass(params.getInt("count")));
                    }
                    if (params.has("depth") && (params.getString("depth") != null) && (!params.getString("depth").isEmpty()) ) {
                        // Param: depth, Type: Integer
                        journeyPatternsRequestBuilder.withDepth(integerStraightPass(params.getInt("depth")));
                    }
                    if (params.has("forbiddenId") && (params.getString("forbiddenId") != null) && (!params.getString("forbiddenId").isEmpty()) ) {
                        // Param: forbiddenId, Type: List
                        journeyPatternsRequestBuilder.withForbiddenId(jsonArrayToStringList(params.getJSONArray("forbiddenId")));
                    }
                    if (params.has("forbiddenUris") && (params.getString("forbiddenUris") != null) && (!params.getString("forbiddenUris").isEmpty()) ) {
                        // Param: forbiddenUris, Type: List
                        journeyPatternsRequestBuilder.withForbiddenUris(jsonArrayToStringList(params.getJSONArray("forbiddenUris")));
                    }
                    if (params.has("externalCode") && (params.getString("externalCode") != null) && (!params.getString("externalCode").isEmpty()) ) {
                        // Param: externalCode, Type: String
                        journeyPatternsRequestBuilder.withExternalCode(stringStraightPass(params.getString("externalCode")));
                    }
                    if (params.has("headsign") && (params.getString("headsign") != null) && (!params.getString("headsign").isEmpty()) ) {
                        // Param: headsign, Type: String
                        journeyPatternsRequestBuilder.withHeadsign(stringStraightPass(params.getString("headsign")));
                    }
                    if (params.has("showCodes") && (params.getString("showCodes") != null) && (!params.getString("showCodes").isEmpty()) ) {
                        // Param: showCodes, Type: Boolean
                        journeyPatternsRequestBuilder.withShowCodes(booleanStraightPass(params.getBoolean("showCodes")));
                    }
                    if (params.has("odtLevel") && (params.getString("odtLevel") != null) && (!params.getString("odtLevel").isEmpty()) ) {
                        // Param: odtLevel, Type: String
                        journeyPatternsRequestBuilder.withOdtLevel(stringStraightPass(params.getString("odtLevel")));
                    }
                    if (params.has("dataFreshness") && (params.getString("dataFreshness") != null) && (!params.getString("dataFreshness").isEmpty()) ) {
                        // Param: dataFreshness, Type: String
                        journeyPatternsRequestBuilder.withDataFreshness(stringStraightPass(params.getString("dataFreshness")));
                    }
                    if (params.has("distance") && (params.getString("distance") != null) && (!params.getString("distance").isEmpty()) ) {
                        // Param: distance, Type: Integer
                        journeyPatternsRequestBuilder.withDistance(integerStraightPass(params.getInt("distance")));
                    }
                    if (params.has("since") && (params.getString("since") != null) && (!params.getString("since").isEmpty()) ) {
                        // Param: since, Type: Date
                        journeyPatternsRequestBuilder.withSince(stringToDateTime(params.getString("since")));
                    }
                    if (params.has("until") && (params.getString("until") != null) && (!params.getString("until").isEmpty()) ) {
                        // Param: until, Type: Date
                        journeyPatternsRequestBuilder.withUntil(stringToDateTime(params.getString("until")));
                    }
                    if (params.has("disableGeojson") && (params.getString("disableGeojson") != null) && (!params.getString("disableGeojson").isEmpty()) ) {
                        // Param: disableGeojson, Type: Boolean
                        journeyPatternsRequestBuilder.withDisableGeojson(booleanStraightPass(params.getBoolean("disableGeojson")));
                    }
                    if (params.has("disableDisruption") && (params.getString("disableDisruption") != null) && (!params.getString("disableDisruption").isEmpty()) ) {
                        // Param: disableDisruption, Type: Boolean
                        journeyPatternsRequestBuilder.withDisableDisruption(booleanStraightPass(params.getBoolean("disableDisruption")));
                    }
                    if (params.has("tags") && (params.getString("tags") != null) && (!params.getString("tags").isEmpty()) ) {
                        // Param: tags, Type: List
                        journeyPatternsRequestBuilder.withTags(jsonArrayToStringList(params.getJSONArray("tags")));
                    }
                    
                    journeyPatternsRequestBuilder.rawGet(new ApiCallback<String>() {
                        @Override
                        public void onFailure(ApiException e, int statusCode, Map<String, List<String>> responseHeaders) {
                            callbackContext.error("Problem during request call | " + e.getMessage());
                        }

                        @Override
                        public void onSuccess(String result, int statusCode, Map<String, List<String>> responseHeaders) {
                            JSONObject jsonObject = null;
                            try {
                                jsonObject = new JSONObject(result);
                                callbackContext.success(jsonObject);
                            } catch (Exception e) {
                                String errorMessage = "Problem during response parsing | " + String.valueOf(e.hashCode()) + ": " + e.getMessage();
                                callbackContext.error(errorMessage);
                            }
                        }

                        @Override
                        public void onUploadProgress(long bytesWritten, long contentLength, boolean done) {
                        }

                        @Override
                        public void onDownloadProgress(long bytesRead, long contentLength, boolean done) {
                        }
                    });
                } catch (Exception e) {
                    String errorMessage = "Problem during request building | " + String.valueOf(e.hashCode()) + ": " + e.getMessage();
                    callbackContext.error(errorMessage);
                }
            }
        });
    }
    final private void coverageRegionUriJourneyPatterns(final JSONObject params, final CallbackContext callbackContext) {
        if (this.navitiaSdk == null) {
            callbackContext.error("NavitiaSDK is not instanciated");
            return;
        }

        final JourneyPatternsApi.CoverageRegionUriJourneyPatternsRequestBuilder journeyPatternsRequestBuilder = this.navitiaSdk.journeyPatternsApi.newCoverageRegionUriJourneyPatternsRequestBuilder();
        cordova.getThreadPool().execute(new Runnable() {
            @Override
            public void run() {
                try {
                    if (params.has("region") && (params.getString("region") != null) && (!params.getString("region").isEmpty()) ) {
                        // Param: region, Type: String
                        journeyPatternsRequestBuilder.withRegion(stringStraightPass(params.getString("region")));
                    }
                    if (params.has("uri") && (params.getString("uri") != null) && (!params.getString("uri").isEmpty()) ) {
                        // Param: uri, Type: String
                        journeyPatternsRequestBuilder.withUri(stringStraightPass(params.getString("uri")));
                    }
                    if (params.has("startPage") && (params.getString("startPage") != null) && (!params.getString("startPage").isEmpty()) ) {
                        // Param: startPage, Type: Integer
                        journeyPatternsRequestBuilder.withStartPage(integerStraightPass(params.getInt("startPage")));
                    }
                    if (params.has("count") && (params.getString("count") != null) && (!params.getString("count").isEmpty()) ) {
                        // Param: count, Type: Integer
                        journeyPatternsRequestBuilder.withCount(integerStraightPass(params.getInt("count")));
                    }
                    if (params.has("depth") && (params.getString("depth") != null) && (!params.getString("depth").isEmpty()) ) {
                        // Param: depth, Type: Integer
                        journeyPatternsRequestBuilder.withDepth(integerStraightPass(params.getInt("depth")));
                    }
                    if (params.has("forbiddenId") && (params.getString("forbiddenId") != null) && (!params.getString("forbiddenId").isEmpty()) ) {
                        // Param: forbiddenId, Type: List
                        journeyPatternsRequestBuilder.withForbiddenId(jsonArrayToStringList(params.getJSONArray("forbiddenId")));
                    }
                    if (params.has("forbiddenUris") && (params.getString("forbiddenUris") != null) && (!params.getString("forbiddenUris").isEmpty()) ) {
                        // Param: forbiddenUris, Type: List
                        journeyPatternsRequestBuilder.withForbiddenUris(jsonArrayToStringList(params.getJSONArray("forbiddenUris")));
                    }
                    if (params.has("externalCode") && (params.getString("externalCode") != null) && (!params.getString("externalCode").isEmpty()) ) {
                        // Param: externalCode, Type: String
                        journeyPatternsRequestBuilder.withExternalCode(stringStraightPass(params.getString("externalCode")));
                    }
                    if (params.has("headsign") && (params.getString("headsign") != null) && (!params.getString("headsign").isEmpty()) ) {
                        // Param: headsign, Type: String
                        journeyPatternsRequestBuilder.withHeadsign(stringStraightPass(params.getString("headsign")));
                    }
                    if (params.has("showCodes") && (params.getString("showCodes") != null) && (!params.getString("showCodes").isEmpty()) ) {
                        // Param: showCodes, Type: Boolean
                        journeyPatternsRequestBuilder.withShowCodes(booleanStraightPass(params.getBoolean("showCodes")));
                    }
                    if (params.has("odtLevel") && (params.getString("odtLevel") != null) && (!params.getString("odtLevel").isEmpty()) ) {
                        // Param: odtLevel, Type: String
                        journeyPatternsRequestBuilder.withOdtLevel(stringStraightPass(params.getString("odtLevel")));
                    }
                    if (params.has("dataFreshness") && (params.getString("dataFreshness") != null) && (!params.getString("dataFreshness").isEmpty()) ) {
                        // Param: dataFreshness, Type: String
                        journeyPatternsRequestBuilder.withDataFreshness(stringStraightPass(params.getString("dataFreshness")));
                    }
                    if (params.has("distance") && (params.getString("distance") != null) && (!params.getString("distance").isEmpty()) ) {
                        // Param: distance, Type: Integer
                        journeyPatternsRequestBuilder.withDistance(integerStraightPass(params.getInt("distance")));
                    }
                    if (params.has("since") && (params.getString("since") != null) && (!params.getString("since").isEmpty()) ) {
                        // Param: since, Type: Date
                        journeyPatternsRequestBuilder.withSince(stringToDateTime(params.getString("since")));
                    }
                    if (params.has("until") && (params.getString("until") != null) && (!params.getString("until").isEmpty()) ) {
                        // Param: until, Type: Date
                        journeyPatternsRequestBuilder.withUntil(stringToDateTime(params.getString("until")));
                    }
                    if (params.has("disableGeojson") && (params.getString("disableGeojson") != null) && (!params.getString("disableGeojson").isEmpty()) ) {
                        // Param: disableGeojson, Type: Boolean
                        journeyPatternsRequestBuilder.withDisableGeojson(booleanStraightPass(params.getBoolean("disableGeojson")));
                    }
                    if (params.has("disableDisruption") && (params.getString("disableDisruption") != null) && (!params.getString("disableDisruption").isEmpty()) ) {
                        // Param: disableDisruption, Type: Boolean
                        journeyPatternsRequestBuilder.withDisableDisruption(booleanStraightPass(params.getBoolean("disableDisruption")));
                    }
                    if (params.has("filter") && (params.getString("filter") != null) && (!params.getString("filter").isEmpty()) ) {
                        // Param: filter, Type: String
                        journeyPatternsRequestBuilder.withFilter(stringStraightPass(params.getString("filter")));
                    }
                    if (params.has("tags") && (params.getString("tags") != null) && (!params.getString("tags").isEmpty()) ) {
                        // Param: tags, Type: List
                        journeyPatternsRequestBuilder.withTags(jsonArrayToStringList(params.getJSONArray("tags")));
                    }
                    
                    journeyPatternsRequestBuilder.rawGet(new ApiCallback<String>() {
                        @Override
                        public void onFailure(ApiException e, int statusCode, Map<String, List<String>> responseHeaders) {
                            callbackContext.error("Problem during request call | " + e.getMessage());
                        }

                        @Override
                        public void onSuccess(String result, int statusCode, Map<String, List<String>> responseHeaders) {
                            JSONObject jsonObject = null;
                            try {
                                jsonObject = new JSONObject(result);
                                callbackContext.success(jsonObject);
                            } catch (Exception e) {
                                String errorMessage = "Problem during response parsing | " + String.valueOf(e.hashCode()) + ": " + e.getMessage();
                                callbackContext.error(errorMessage);
                            }
                        }

                        @Override
                        public void onUploadProgress(long bytesWritten, long contentLength, boolean done) {
                        }

                        @Override
                        public void onDownloadProgress(long bytesRead, long contentLength, boolean done) {
                        }
                    });
                } catch (Exception e) {
                    String errorMessage = "Problem during request building | " + String.valueOf(e.hashCode()) + ": " + e.getMessage();
                    callbackContext.error(errorMessage);
                }
            }
        });
    }
    final private void coverageRegionUriJourneyPatternsId(final JSONObject params, final CallbackContext callbackContext) {
        if (this.navitiaSdk == null) {
            callbackContext.error("NavitiaSDK is not instanciated");
            return;
        }

        final JourneyPatternsApi.CoverageRegionUriJourneyPatternsIdRequestBuilder journeyPatternsRequestBuilder = this.navitiaSdk.journeyPatternsApi.newCoverageRegionUriJourneyPatternsIdRequestBuilder();
        cordova.getThreadPool().execute(new Runnable() {
            @Override
            public void run() {
                try {
                    if (params.has("region") && (params.getString("region") != null) && (!params.getString("region").isEmpty()) ) {
                        // Param: region, Type: String
                        journeyPatternsRequestBuilder.withRegion(stringStraightPass(params.getString("region")));
                    }
                    if (params.has("uri") && (params.getString("uri") != null) && (!params.getString("uri").isEmpty()) ) {
                        // Param: uri, Type: String
                        journeyPatternsRequestBuilder.withUri(stringStraightPass(params.getString("uri")));
                    }
                    if (params.has("id") && (params.getString("id") != null) && (!params.getString("id").isEmpty()) ) {
                        // Param: id, Type: String
                        journeyPatternsRequestBuilder.withId(stringStraightPass(params.getString("id")));
                    }
                    if (params.has("startPage") && (params.getString("startPage") != null) && (!params.getString("startPage").isEmpty()) ) {
                        // Param: startPage, Type: Integer
                        journeyPatternsRequestBuilder.withStartPage(integerStraightPass(params.getInt("startPage")));
                    }
                    if (params.has("count") && (params.getString("count") != null) && (!params.getString("count").isEmpty()) ) {
                        // Param: count, Type: Integer
                        journeyPatternsRequestBuilder.withCount(integerStraightPass(params.getInt("count")));
                    }
                    if (params.has("depth") && (params.getString("depth") != null) && (!params.getString("depth").isEmpty()) ) {
                        // Param: depth, Type: Integer
                        journeyPatternsRequestBuilder.withDepth(integerStraightPass(params.getInt("depth")));
                    }
                    if (params.has("forbiddenId") && (params.getString("forbiddenId") != null) && (!params.getString("forbiddenId").isEmpty()) ) {
                        // Param: forbiddenId, Type: List
                        journeyPatternsRequestBuilder.withForbiddenId(jsonArrayToStringList(params.getJSONArray("forbiddenId")));
                    }
                    if (params.has("forbiddenUris") && (params.getString("forbiddenUris") != null) && (!params.getString("forbiddenUris").isEmpty()) ) {
                        // Param: forbiddenUris, Type: List
                        journeyPatternsRequestBuilder.withForbiddenUris(jsonArrayToStringList(params.getJSONArray("forbiddenUris")));
                    }
                    if (params.has("externalCode") && (params.getString("externalCode") != null) && (!params.getString("externalCode").isEmpty()) ) {
                        // Param: externalCode, Type: String
                        journeyPatternsRequestBuilder.withExternalCode(stringStraightPass(params.getString("externalCode")));
                    }
                    if (params.has("headsign") && (params.getString("headsign") != null) && (!params.getString("headsign").isEmpty()) ) {
                        // Param: headsign, Type: String
                        journeyPatternsRequestBuilder.withHeadsign(stringStraightPass(params.getString("headsign")));
                    }
                    if (params.has("showCodes") && (params.getString("showCodes") != null) && (!params.getString("showCodes").isEmpty()) ) {
                        // Param: showCodes, Type: Boolean
                        journeyPatternsRequestBuilder.withShowCodes(booleanStraightPass(params.getBoolean("showCodes")));
                    }
                    if (params.has("odtLevel") && (params.getString("odtLevel") != null) && (!params.getString("odtLevel").isEmpty()) ) {
                        // Param: odtLevel, Type: String
                        journeyPatternsRequestBuilder.withOdtLevel(stringStraightPass(params.getString("odtLevel")));
                    }
                    if (params.has("dataFreshness") && (params.getString("dataFreshness") != null) && (!params.getString("dataFreshness").isEmpty()) ) {
                        // Param: dataFreshness, Type: String
                        journeyPatternsRequestBuilder.withDataFreshness(stringStraightPass(params.getString("dataFreshness")));
                    }
                    if (params.has("distance") && (params.getString("distance") != null) && (!params.getString("distance").isEmpty()) ) {
                        // Param: distance, Type: Integer
                        journeyPatternsRequestBuilder.withDistance(integerStraightPass(params.getInt("distance")));
                    }
                    if (params.has("since") && (params.getString("since") != null) && (!params.getString("since").isEmpty()) ) {
                        // Param: since, Type: Date
                        journeyPatternsRequestBuilder.withSince(stringToDateTime(params.getString("since")));
                    }
                    if (params.has("until") && (params.getString("until") != null) && (!params.getString("until").isEmpty()) ) {
                        // Param: until, Type: Date
                        journeyPatternsRequestBuilder.withUntil(stringToDateTime(params.getString("until")));
                    }
                    if (params.has("disableGeojson") && (params.getString("disableGeojson") != null) && (!params.getString("disableGeojson").isEmpty()) ) {
                        // Param: disableGeojson, Type: Boolean
                        journeyPatternsRequestBuilder.withDisableGeojson(booleanStraightPass(params.getBoolean("disableGeojson")));
                    }
                    if (params.has("disableDisruption") && (params.getString("disableDisruption") != null) && (!params.getString("disableDisruption").isEmpty()) ) {
                        // Param: disableDisruption, Type: Boolean
                        journeyPatternsRequestBuilder.withDisableDisruption(booleanStraightPass(params.getBoolean("disableDisruption")));
                    }
                    if (params.has("tags") && (params.getString("tags") != null) && (!params.getString("tags").isEmpty()) ) {
                        // Param: tags, Type: List
                        journeyPatternsRequestBuilder.withTags(jsonArrayToStringList(params.getJSONArray("tags")));
                    }
                    
                    journeyPatternsRequestBuilder.rawGet(new ApiCallback<String>() {
                        @Override
                        public void onFailure(ApiException e, int statusCode, Map<String, List<String>> responseHeaders) {
                            callbackContext.error("Problem during request call | " + e.getMessage());
                        }

                        @Override
                        public void onSuccess(String result, int statusCode, Map<String, List<String>> responseHeaders) {
                            JSONObject jsonObject = null;
                            try {
                                jsonObject = new JSONObject(result);
                                callbackContext.success(jsonObject);
                            } catch (Exception e) {
                                String errorMessage = "Problem during response parsing | " + String.valueOf(e.hashCode()) + ": " + e.getMessage();
                                callbackContext.error(errorMessage);
                            }
                        }

                        @Override
                        public void onUploadProgress(long bytesWritten, long contentLength, boolean done) {
                        }

                        @Override
                        public void onDownloadProgress(long bytesRead, long contentLength, boolean done) {
                        }
                    });
                } catch (Exception e) {
                    String errorMessage = "Problem during request building | " + String.valueOf(e.hashCode()) + ": " + e.getMessage();
                    callbackContext.error(errorMessage);
                }
            }
        });
    }
    final private void coverageLonLatJourneys(final JSONObject params, final CallbackContext callbackContext) {
        if (this.navitiaSdk == null) {
            callbackContext.error("NavitiaSDK is not instanciated");
            return;
        }

        final JourneysApi.CoverageLonLatJourneysRequestBuilder journeysRequestBuilder = this.navitiaSdk.journeysApi.newCoverageLonLatJourneysRequestBuilder();
        cordova.getThreadPool().execute(new Runnable() {
            @Override
            public void run() {
                try {
                    if (params.has("lat") && (params.getString("lat") != null) && (!params.getString("lat").isEmpty()) ) {
                        // Param: lat, Type: BigDecimal
                        journeysRequestBuilder.withLat(longToBigDecimal(params.getLong("lat")));
                    }
                    if (params.has("lon") && (params.getString("lon") != null) && (!params.getString("lon").isEmpty()) ) {
                        // Param: lon, Type: BigDecimal
                        journeysRequestBuilder.withLon(longToBigDecimal(params.getLong("lon")));
                    }
                    if (params.has("from") && (params.getString("from") != null) && (!params.getString("from").isEmpty()) ) {
                        // Param: from, Type: String
                        journeysRequestBuilder.withFrom(stringStraightPass(params.getString("from")));
                    }
                    if (params.has("to") && (params.getString("to") != null) && (!params.getString("to").isEmpty()) ) {
                        // Param: to, Type: String
                        journeysRequestBuilder.withTo(stringStraightPass(params.getString("to")));
                    }
                    if (params.has("datetime") && (params.getString("datetime") != null) && (!params.getString("datetime").isEmpty()) ) {
                        // Param: datetime, Type: Date
                        journeysRequestBuilder.withDatetime(stringToDateTime(params.getString("datetime")));
                    }
                    if (params.has("datetimeRepresents") && (params.getString("datetimeRepresents") != null) && (!params.getString("datetimeRepresents").isEmpty()) ) {
                        // Param: datetimeRepresents, Type: String
                        journeysRequestBuilder.withDatetimeRepresents(stringStraightPass(params.getString("datetimeRepresents")));
                    }
                    if (params.has("maxNbTransfers") && (params.getString("maxNbTransfers") != null) && (!params.getString("maxNbTransfers").isEmpty()) ) {
                        // Param: maxNbTransfers, Type: Integer
                        journeysRequestBuilder.withMaxNbTransfers(integerStraightPass(params.getInt("maxNbTransfers")));
                    }
                    if (params.has("minNbTransfers") && (params.getString("minNbTransfers") != null) && (!params.getString("minNbTransfers").isEmpty()) ) {
                        // Param: minNbTransfers, Type: Integer
                        journeysRequestBuilder.withMinNbTransfers(integerStraightPass(params.getInt("minNbTransfers")));
                    }
                    if (params.has("firstSectionMode") && (params.getString("firstSectionMode") != null) && (!params.getString("firstSectionMode").isEmpty()) ) {
                        // Param: firstSectionMode, Type: List
                        journeysRequestBuilder.withFirstSectionMode(jsonArrayToStringList(params.getJSONArray("firstSectionMode")));
                    }
                    if (params.has("lastSectionMode") && (params.getString("lastSectionMode") != null) && (!params.getString("lastSectionMode").isEmpty()) ) {
                        // Param: lastSectionMode, Type: List
                        journeysRequestBuilder.withLastSectionMode(jsonArrayToStringList(params.getJSONArray("lastSectionMode")));
                    }
                    if (params.has("maxDurationToPt") && (params.getString("maxDurationToPt") != null) && (!params.getString("maxDurationToPt").isEmpty()) ) {
                        // Param: maxDurationToPt, Type: Integer
                        journeysRequestBuilder.withMaxDurationToPt(integerStraightPass(params.getInt("maxDurationToPt")));
                    }
                    if (params.has("maxWalkingDurationToPt") && (params.getString("maxWalkingDurationToPt") != null) && (!params.getString("maxWalkingDurationToPt").isEmpty()) ) {
                        // Param: maxWalkingDurationToPt, Type: Integer
                        journeysRequestBuilder.withMaxWalkingDurationToPt(integerStraightPass(params.getInt("maxWalkingDurationToPt")));
                    }
                    if (params.has("maxBikeDurationToPt") && (params.getString("maxBikeDurationToPt") != null) && (!params.getString("maxBikeDurationToPt").isEmpty()) ) {
                        // Param: maxBikeDurationToPt, Type: Integer
                        journeysRequestBuilder.withMaxBikeDurationToPt(integerStraightPass(params.getInt("maxBikeDurationToPt")));
                    }
                    if (params.has("maxBssDurationToPt") && (params.getString("maxBssDurationToPt") != null) && (!params.getString("maxBssDurationToPt").isEmpty()) ) {
                        // Param: maxBssDurationToPt, Type: Integer
                        journeysRequestBuilder.withMaxBssDurationToPt(integerStraightPass(params.getInt("maxBssDurationToPt")));
                    }
                    if (params.has("maxCarDurationToPt") && (params.getString("maxCarDurationToPt") != null) && (!params.getString("maxCarDurationToPt").isEmpty()) ) {
                        // Param: maxCarDurationToPt, Type: Integer
                        journeysRequestBuilder.withMaxCarDurationToPt(integerStraightPass(params.getInt("maxCarDurationToPt")));
                    }
                    if (params.has("maxRidesharingDurationToPt") && (params.getString("maxRidesharingDurationToPt") != null) && (!params.getString("maxRidesharingDurationToPt").isEmpty()) ) {
                        // Param: maxRidesharingDurationToPt, Type: Integer
                        journeysRequestBuilder.withMaxRidesharingDurationToPt(integerStraightPass(params.getInt("maxRidesharingDurationToPt")));
                    }
                    if (params.has("maxCarNoParkDurationToPt") && (params.getString("maxCarNoParkDurationToPt") != null) && (!params.getString("maxCarNoParkDurationToPt").isEmpty()) ) {
                        // Param: maxCarNoParkDurationToPt, Type: Integer
                        journeysRequestBuilder.withMaxCarNoParkDurationToPt(integerStraightPass(params.getInt("maxCarNoParkDurationToPt")));
                    }
                    if (params.has("maxTaxiDurationToPt") && (params.getString("maxTaxiDurationToPt") != null) && (!params.getString("maxTaxiDurationToPt").isEmpty()) ) {
                        // Param: maxTaxiDurationToPt, Type: Integer
                        journeysRequestBuilder.withMaxTaxiDurationToPt(integerStraightPass(params.getInt("maxTaxiDurationToPt")));
                    }
                    if (params.has("walkingSpeed") && (params.getString("walkingSpeed") != null) && (!params.getString("walkingSpeed").isEmpty()) ) {
                        // Param: walkingSpeed, Type: Float
                        journeysRequestBuilder.withWalkingSpeed(longToFloat(params.getLong("walkingSpeed")));
                    }
                    if (params.has("bikeSpeed") && (params.getString("bikeSpeed") != null) && (!params.getString("bikeSpeed").isEmpty()) ) {
                        // Param: bikeSpeed, Type: Float
                        journeysRequestBuilder.withBikeSpeed(longToFloat(params.getLong("bikeSpeed")));
                    }
                    if (params.has("bssSpeed") && (params.getString("bssSpeed") != null) && (!params.getString("bssSpeed").isEmpty()) ) {
                        // Param: bssSpeed, Type: Float
                        journeysRequestBuilder.withBssSpeed(longToFloat(params.getLong("bssSpeed")));
                    }
                    if (params.has("carSpeed") && (params.getString("carSpeed") != null) && (!params.getString("carSpeed").isEmpty()) ) {
                        // Param: carSpeed, Type: Float
                        journeysRequestBuilder.withCarSpeed(longToFloat(params.getLong("carSpeed")));
                    }
                    if (params.has("ridesharingSpeed") && (params.getString("ridesharingSpeed") != null) && (!params.getString("ridesharingSpeed").isEmpty()) ) {
                        // Param: ridesharingSpeed, Type: Float
                        journeysRequestBuilder.withRidesharingSpeed(longToFloat(params.getLong("ridesharingSpeed")));
                    }
                    if (params.has("carNoParkSpeed") && (params.getString("carNoParkSpeed") != null) && (!params.getString("carNoParkSpeed").isEmpty()) ) {
                        // Param: carNoParkSpeed, Type: Float
                        journeysRequestBuilder.withCarNoParkSpeed(longToFloat(params.getLong("carNoParkSpeed")));
                    }
                    if (params.has("taxiSpeed") && (params.getString("taxiSpeed") != null) && (!params.getString("taxiSpeed").isEmpty()) ) {
                        // Param: taxiSpeed, Type: Float
                        journeysRequestBuilder.withTaxiSpeed(longToFloat(params.getLong("taxiSpeed")));
                    }
                    if (params.has("forbiddenUris") && (params.getString("forbiddenUris") != null) && (!params.getString("forbiddenUris").isEmpty()) ) {
                        // Param: forbiddenUris, Type: List
                        journeysRequestBuilder.withForbiddenUris(jsonArrayToStringList(params.getJSONArray("forbiddenUris")));
                    }
                    if (params.has("allowedId") && (params.getString("allowedId") != null) && (!params.getString("allowedId").isEmpty()) ) {
                        // Param: allowedId, Type: List
                        journeysRequestBuilder.withAllowedId(jsonArrayToStringList(params.getJSONArray("allowedId")));
                    }
                    if (params.has("disruptionActive") && (params.getString("disruptionActive") != null) && (!params.getString("disruptionActive").isEmpty()) ) {
                        // Param: disruptionActive, Type: Boolean
                        journeysRequestBuilder.withDisruptionActive(booleanStraightPass(params.getBoolean("disruptionActive")));
                    }
                    if (params.has("dataFreshness") && (params.getString("dataFreshness") != null) && (!params.getString("dataFreshness").isEmpty()) ) {
                        // Param: dataFreshness, Type: String
                        journeysRequestBuilder.withDataFreshness(stringStraightPass(params.getString("dataFreshness")));
                    }
                    if (params.has("maxDuration") && (params.getString("maxDuration") != null) && (!params.getString("maxDuration").isEmpty()) ) {
                        // Param: maxDuration, Type: Integer
                        journeysRequestBuilder.withMaxDuration(integerStraightPass(params.getInt("maxDuration")));
                    }
                    if (params.has("wheelchair") && (params.getString("wheelchair") != null) && (!params.getString("wheelchair").isEmpty()) ) {
                        // Param: wheelchair, Type: Boolean
                        journeysRequestBuilder.withWheelchair(booleanStraightPass(params.getBoolean("wheelchair")));
                    }
                    if (params.has("travelerType") && (params.getString("travelerType") != null) && (!params.getString("travelerType").isEmpty()) ) {
                        // Param: travelerType, Type: String
                        journeysRequestBuilder.withTravelerType(stringStraightPass(params.getString("travelerType")));
                    }
                    if (params.has("directPath") && (params.getString("directPath") != null) && (!params.getString("directPath").isEmpty()) ) {
                        // Param: directPath, Type: String
                        journeysRequestBuilder.withDirectPath(stringStraightPass(params.getString("directPath")));
                    }
                    if (params.has("freeRadiusFrom") && (params.getString("freeRadiusFrom") != null) && (!params.getString("freeRadiusFrom").isEmpty()) ) {
                        // Param: freeRadiusFrom, Type: Integer
                        journeysRequestBuilder.withFreeRadiusFrom(integerStraightPass(params.getInt("freeRadiusFrom")));
                    }
                    if (params.has("freeRadiusTo") && (params.getString("freeRadiusTo") != null) && (!params.getString("freeRadiusTo").isEmpty()) ) {
                        // Param: freeRadiusTo, Type: Integer
                        journeysRequestBuilder.withFreeRadiusTo(integerStraightPass(params.getInt("freeRadiusTo")));
                    }
                    if (params.has("directPathMode") && (params.getString("directPathMode") != null) && (!params.getString("directPathMode").isEmpty()) ) {
                        // Param: directPathMode, Type: List
                        journeysRequestBuilder.withDirectPathMode(jsonArrayToStringList(params.getJSONArray("directPathMode")));
                    }
                    if (params.has("partnerServices") && (params.getString("partnerServices") != null) && (!params.getString("partnerServices").isEmpty()) ) {
                        // Param: partnerServices, Type: List
                        journeysRequestBuilder.withPartnerServices(jsonArrayToStringList(params.getJSONArray("partnerServices")));
                    }
                    if (params.has("count") && (params.getString("count") != null) && (!params.getString("count").isEmpty()) ) {
                        // Param: count, Type: Integer
                        journeysRequestBuilder.withCount(integerStraightPass(params.getInt("count")));
                    }
                    if (params.has("isJourneySchedules") && (params.getString("isJourneySchedules") != null) && (!params.getString("isJourneySchedules").isEmpty()) ) {
                        // Param: isJourneySchedules, Type: Boolean
                        journeysRequestBuilder.withIsJourneySchedules(booleanStraightPass(params.getBoolean("isJourneySchedules")));
                    }
                    if (params.has("minNbJourneys") && (params.getString("minNbJourneys") != null) && (!params.getString("minNbJourneys").isEmpty()) ) {
                        // Param: minNbJourneys, Type: Integer
                        journeysRequestBuilder.withMinNbJourneys(integerStraightPass(params.getInt("minNbJourneys")));
                    }
                    if (params.has("maxNbJourneys") && (params.getString("maxNbJourneys") != null) && (!params.getString("maxNbJourneys").isEmpty()) ) {
                        // Param: maxNbJourneys, Type: Integer
                        journeysRequestBuilder.withMaxNbJourneys(integerStraightPass(params.getInt("maxNbJourneys")));
                    }
                    if (params.has("bssStands") && (params.getString("bssStands") != null) && (!params.getString("bssStands").isEmpty()) ) {
                        // Param: bssStands, Type: Boolean
                        journeysRequestBuilder.withBssStands(booleanStraightPass(params.getBoolean("bssStands")));
                    }
                    if (params.has("addPoiInfos") && (params.getString("addPoiInfos") != null) && (!params.getString("addPoiInfos").isEmpty()) ) {
                        // Param: addPoiInfos, Type: List
                        journeysRequestBuilder.withAddPoiInfos(jsonArrayToStringList(params.getJSONArray("addPoiInfos")));
                    }
                    if (params.has("timeframeDuration") && (params.getString("timeframeDuration") != null) && (!params.getString("timeframeDuration").isEmpty()) ) {
                        // Param: timeframeDuration, Type: Integer
                        journeysRequestBuilder.withTimeframeDuration(integerStraightPass(params.getInt("timeframeDuration")));
                    }
                    if (params.has("equipmentDetails") && (params.getString("equipmentDetails") != null) && (!params.getString("equipmentDetails").isEmpty()) ) {
                        // Param: equipmentDetails, Type: Boolean
                        journeysRequestBuilder.withEquipmentDetails(booleanStraightPass(params.getBoolean("equipmentDetails")));
                    }
                    if (params.has("maxTaxiDirectPathDuration") && (params.getString("maxTaxiDirectPathDuration") != null) && (!params.getString("maxTaxiDirectPathDuration").isEmpty()) ) {
                        // Param: maxTaxiDirectPathDuration, Type: Integer
                        journeysRequestBuilder.withMaxTaxiDirectPathDuration(integerStraightPass(params.getInt("maxTaxiDirectPathDuration")));
                    }
                    if (params.has("maxWalkingDirectPathDuration") && (params.getString("maxWalkingDirectPathDuration") != null) && (!params.getString("maxWalkingDirectPathDuration").isEmpty()) ) {
                        // Param: maxWalkingDirectPathDuration, Type: Integer
                        journeysRequestBuilder.withMaxWalkingDirectPathDuration(integerStraightPass(params.getInt("maxWalkingDirectPathDuration")));
                    }
                    if (params.has("maxCarNoParkDirectPathDuration") && (params.getString("maxCarNoParkDirectPathDuration") != null) && (!params.getString("maxCarNoParkDirectPathDuration").isEmpty()) ) {
                        // Param: maxCarNoParkDirectPathDuration, Type: Integer
                        journeysRequestBuilder.withMaxCarNoParkDirectPathDuration(integerStraightPass(params.getInt("maxCarNoParkDirectPathDuration")));
                    }
                    if (params.has("maxCarDirectPathDuration") && (params.getString("maxCarDirectPathDuration") != null) && (!params.getString("maxCarDirectPathDuration").isEmpty()) ) {
                        // Param: maxCarDirectPathDuration, Type: Integer
                        journeysRequestBuilder.withMaxCarDirectPathDuration(integerStraightPass(params.getInt("maxCarDirectPathDuration")));
                    }
                    if (params.has("maxRidesharingDirectPathDuration") && (params.getString("maxRidesharingDirectPathDuration") != null) && (!params.getString("maxRidesharingDirectPathDuration").isEmpty()) ) {
                        // Param: maxRidesharingDirectPathDuration, Type: Integer
                        journeysRequestBuilder.withMaxRidesharingDirectPathDuration(integerStraightPass(params.getInt("maxRidesharingDirectPathDuration")));
                    }
                    if (params.has("maxBssDirectPathDuration") && (params.getString("maxBssDirectPathDuration") != null) && (!params.getString("maxBssDirectPathDuration").isEmpty()) ) {
                        // Param: maxBssDirectPathDuration, Type: Integer
                        journeysRequestBuilder.withMaxBssDirectPathDuration(integerStraightPass(params.getInt("maxBssDirectPathDuration")));
                    }
                    if (params.has("maxBikeDirectPathDuration") && (params.getString("maxBikeDirectPathDuration") != null) && (!params.getString("maxBikeDirectPathDuration").isEmpty()) ) {
                        // Param: maxBikeDirectPathDuration, Type: Integer
                        journeysRequestBuilder.withMaxBikeDirectPathDuration(integerStraightPass(params.getInt("maxBikeDirectPathDuration")));
                    }
                    if (params.has("depth") && (params.getString("depth") != null) && (!params.getString("depth").isEmpty()) ) {
                        // Param: depth, Type: Integer
                        journeysRequestBuilder.withDepth(integerStraightPass(params.getInt("depth")));
                    }
                    if (params.has("maxWaitingDuration") && (params.getString("maxWaitingDuration") != null) && (!params.getString("maxWaitingDuration").isEmpty()) ) {
                        // Param: maxWaitingDuration, Type: Integer
                        journeysRequestBuilder.withMaxWaitingDuration(integerStraightPass(params.getInt("maxWaitingDuration")));
                    }
                    
                    journeysRequestBuilder.rawGet(new ApiCallback<String>() {
                        @Override
                        public void onFailure(ApiException e, int statusCode, Map<String, List<String>> responseHeaders) {
                            callbackContext.error("Problem during request call | " + e.getMessage());
                        }

                        @Override
                        public void onSuccess(String result, int statusCode, Map<String, List<String>> responseHeaders) {
                            JSONObject jsonObject = null;
                            try {
                                jsonObject = new JSONObject(result);
                                callbackContext.success(jsonObject);
                            } catch (Exception e) {
                                String errorMessage = "Problem during response parsing | " + String.valueOf(e.hashCode()) + ": " + e.getMessage();
                                callbackContext.error(errorMessage);
                            }
                        }

                        @Override
                        public void onUploadProgress(long bytesWritten, long contentLength, boolean done) {
                        }

                        @Override
                        public void onDownloadProgress(long bytesRead, long contentLength, boolean done) {
                        }
                    });
                } catch (Exception e) {
                    String errorMessage = "Problem during request building | " + String.valueOf(e.hashCode()) + ": " + e.getMessage();
                    callbackContext.error(errorMessage);
                }
            }
        });
    }
    final private void coverageRegionJourneys(final JSONObject params, final CallbackContext callbackContext) {
        if (this.navitiaSdk == null) {
            callbackContext.error("NavitiaSDK is not instanciated");
            return;
        }

        final JourneysApi.CoverageRegionJourneysRequestBuilder journeysRequestBuilder = this.navitiaSdk.journeysApi.newCoverageRegionJourneysRequestBuilder();
        cordova.getThreadPool().execute(new Runnable() {
            @Override
            public void run() {
                try {
                    if (params.has("region") && (params.getString("region") != null) && (!params.getString("region").isEmpty()) ) {
                        // Param: region, Type: String
                        journeysRequestBuilder.withRegion(stringStraightPass(params.getString("region")));
                    }
                    if (params.has("from") && (params.getString("from") != null) && (!params.getString("from").isEmpty()) ) {
                        // Param: from, Type: String
                        journeysRequestBuilder.withFrom(stringStraightPass(params.getString("from")));
                    }
                    if (params.has("to") && (params.getString("to") != null) && (!params.getString("to").isEmpty()) ) {
                        // Param: to, Type: String
                        journeysRequestBuilder.withTo(stringStraightPass(params.getString("to")));
                    }
                    if (params.has("datetime") && (params.getString("datetime") != null) && (!params.getString("datetime").isEmpty()) ) {
                        // Param: datetime, Type: Date
                        journeysRequestBuilder.withDatetime(stringToDateTime(params.getString("datetime")));
                    }
                    if (params.has("datetimeRepresents") && (params.getString("datetimeRepresents") != null) && (!params.getString("datetimeRepresents").isEmpty()) ) {
                        // Param: datetimeRepresents, Type: String
                        journeysRequestBuilder.withDatetimeRepresents(stringStraightPass(params.getString("datetimeRepresents")));
                    }
                    if (params.has("maxNbTransfers") && (params.getString("maxNbTransfers") != null) && (!params.getString("maxNbTransfers").isEmpty()) ) {
                        // Param: maxNbTransfers, Type: Integer
                        journeysRequestBuilder.withMaxNbTransfers(integerStraightPass(params.getInt("maxNbTransfers")));
                    }
                    if (params.has("minNbTransfers") && (params.getString("minNbTransfers") != null) && (!params.getString("minNbTransfers").isEmpty()) ) {
                        // Param: minNbTransfers, Type: Integer
                        journeysRequestBuilder.withMinNbTransfers(integerStraightPass(params.getInt("minNbTransfers")));
                    }
                    if (params.has("firstSectionMode") && (params.getString("firstSectionMode") != null) && (!params.getString("firstSectionMode").isEmpty()) ) {
                        // Param: firstSectionMode, Type: List
                        journeysRequestBuilder.withFirstSectionMode(jsonArrayToStringList(params.getJSONArray("firstSectionMode")));
                    }
                    if (params.has("lastSectionMode") && (params.getString("lastSectionMode") != null) && (!params.getString("lastSectionMode").isEmpty()) ) {
                        // Param: lastSectionMode, Type: List
                        journeysRequestBuilder.withLastSectionMode(jsonArrayToStringList(params.getJSONArray("lastSectionMode")));
                    }
                    if (params.has("maxDurationToPt") && (params.getString("maxDurationToPt") != null) && (!params.getString("maxDurationToPt").isEmpty()) ) {
                        // Param: maxDurationToPt, Type: Integer
                        journeysRequestBuilder.withMaxDurationToPt(integerStraightPass(params.getInt("maxDurationToPt")));
                    }
                    if (params.has("maxWalkingDurationToPt") && (params.getString("maxWalkingDurationToPt") != null) && (!params.getString("maxWalkingDurationToPt").isEmpty()) ) {
                        // Param: maxWalkingDurationToPt, Type: Integer
                        journeysRequestBuilder.withMaxWalkingDurationToPt(integerStraightPass(params.getInt("maxWalkingDurationToPt")));
                    }
                    if (params.has("maxBikeDurationToPt") && (params.getString("maxBikeDurationToPt") != null) && (!params.getString("maxBikeDurationToPt").isEmpty()) ) {
                        // Param: maxBikeDurationToPt, Type: Integer
                        journeysRequestBuilder.withMaxBikeDurationToPt(integerStraightPass(params.getInt("maxBikeDurationToPt")));
                    }
                    if (params.has("maxBssDurationToPt") && (params.getString("maxBssDurationToPt") != null) && (!params.getString("maxBssDurationToPt").isEmpty()) ) {
                        // Param: maxBssDurationToPt, Type: Integer
                        journeysRequestBuilder.withMaxBssDurationToPt(integerStraightPass(params.getInt("maxBssDurationToPt")));
                    }
                    if (params.has("maxCarDurationToPt") && (params.getString("maxCarDurationToPt") != null) && (!params.getString("maxCarDurationToPt").isEmpty()) ) {
                        // Param: maxCarDurationToPt, Type: Integer
                        journeysRequestBuilder.withMaxCarDurationToPt(integerStraightPass(params.getInt("maxCarDurationToPt")));
                    }
                    if (params.has("maxRidesharingDurationToPt") && (params.getString("maxRidesharingDurationToPt") != null) && (!params.getString("maxRidesharingDurationToPt").isEmpty()) ) {
                        // Param: maxRidesharingDurationToPt, Type: Integer
                        journeysRequestBuilder.withMaxRidesharingDurationToPt(integerStraightPass(params.getInt("maxRidesharingDurationToPt")));
                    }
                    if (params.has("maxCarNoParkDurationToPt") && (params.getString("maxCarNoParkDurationToPt") != null) && (!params.getString("maxCarNoParkDurationToPt").isEmpty()) ) {
                        // Param: maxCarNoParkDurationToPt, Type: Integer
                        journeysRequestBuilder.withMaxCarNoParkDurationToPt(integerStraightPass(params.getInt("maxCarNoParkDurationToPt")));
                    }
                    if (params.has("maxTaxiDurationToPt") && (params.getString("maxTaxiDurationToPt") != null) && (!params.getString("maxTaxiDurationToPt").isEmpty()) ) {
                        // Param: maxTaxiDurationToPt, Type: Integer
                        journeysRequestBuilder.withMaxTaxiDurationToPt(integerStraightPass(params.getInt("maxTaxiDurationToPt")));
                    }
                    if (params.has("walkingSpeed") && (params.getString("walkingSpeed") != null) && (!params.getString("walkingSpeed").isEmpty()) ) {
                        // Param: walkingSpeed, Type: Float
                        journeysRequestBuilder.withWalkingSpeed(longToFloat(params.getLong("walkingSpeed")));
                    }
                    if (params.has("bikeSpeed") && (params.getString("bikeSpeed") != null) && (!params.getString("bikeSpeed").isEmpty()) ) {
                        // Param: bikeSpeed, Type: Float
                        journeysRequestBuilder.withBikeSpeed(longToFloat(params.getLong("bikeSpeed")));
                    }
                    if (params.has("bssSpeed") && (params.getString("bssSpeed") != null) && (!params.getString("bssSpeed").isEmpty()) ) {
                        // Param: bssSpeed, Type: Float
                        journeysRequestBuilder.withBssSpeed(longToFloat(params.getLong("bssSpeed")));
                    }
                    if (params.has("carSpeed") && (params.getString("carSpeed") != null) && (!params.getString("carSpeed").isEmpty()) ) {
                        // Param: carSpeed, Type: Float
                        journeysRequestBuilder.withCarSpeed(longToFloat(params.getLong("carSpeed")));
                    }
                    if (params.has("ridesharingSpeed") && (params.getString("ridesharingSpeed") != null) && (!params.getString("ridesharingSpeed").isEmpty()) ) {
                        // Param: ridesharingSpeed, Type: Float
                        journeysRequestBuilder.withRidesharingSpeed(longToFloat(params.getLong("ridesharingSpeed")));
                    }
                    if (params.has("carNoParkSpeed") && (params.getString("carNoParkSpeed") != null) && (!params.getString("carNoParkSpeed").isEmpty()) ) {
                        // Param: carNoParkSpeed, Type: Float
                        journeysRequestBuilder.withCarNoParkSpeed(longToFloat(params.getLong("carNoParkSpeed")));
                    }
                    if (params.has("taxiSpeed") && (params.getString("taxiSpeed") != null) && (!params.getString("taxiSpeed").isEmpty()) ) {
                        // Param: taxiSpeed, Type: Float
                        journeysRequestBuilder.withTaxiSpeed(longToFloat(params.getLong("taxiSpeed")));
                    }
                    if (params.has("forbiddenUris") && (params.getString("forbiddenUris") != null) && (!params.getString("forbiddenUris").isEmpty()) ) {
                        // Param: forbiddenUris, Type: List
                        journeysRequestBuilder.withForbiddenUris(jsonArrayToStringList(params.getJSONArray("forbiddenUris")));
                    }
                    if (params.has("allowedId") && (params.getString("allowedId") != null) && (!params.getString("allowedId").isEmpty()) ) {
                        // Param: allowedId, Type: List
                        journeysRequestBuilder.withAllowedId(jsonArrayToStringList(params.getJSONArray("allowedId")));
                    }
                    if (params.has("disruptionActive") && (params.getString("disruptionActive") != null) && (!params.getString("disruptionActive").isEmpty()) ) {
                        // Param: disruptionActive, Type: Boolean
                        journeysRequestBuilder.withDisruptionActive(booleanStraightPass(params.getBoolean("disruptionActive")));
                    }
                    if (params.has("dataFreshness") && (params.getString("dataFreshness") != null) && (!params.getString("dataFreshness").isEmpty()) ) {
                        // Param: dataFreshness, Type: String
                        journeysRequestBuilder.withDataFreshness(stringStraightPass(params.getString("dataFreshness")));
                    }
                    if (params.has("maxDuration") && (params.getString("maxDuration") != null) && (!params.getString("maxDuration").isEmpty()) ) {
                        // Param: maxDuration, Type: Integer
                        journeysRequestBuilder.withMaxDuration(integerStraightPass(params.getInt("maxDuration")));
                    }
                    if (params.has("wheelchair") && (params.getString("wheelchair") != null) && (!params.getString("wheelchair").isEmpty()) ) {
                        // Param: wheelchair, Type: Boolean
                        journeysRequestBuilder.withWheelchair(booleanStraightPass(params.getBoolean("wheelchair")));
                    }
                    if (params.has("travelerType") && (params.getString("travelerType") != null) && (!params.getString("travelerType").isEmpty()) ) {
                        // Param: travelerType, Type: String
                        journeysRequestBuilder.withTravelerType(stringStraightPass(params.getString("travelerType")));
                    }
                    if (params.has("directPath") && (params.getString("directPath") != null) && (!params.getString("directPath").isEmpty()) ) {
                        // Param: directPath, Type: String
                        journeysRequestBuilder.withDirectPath(stringStraightPass(params.getString("directPath")));
                    }
                    if (params.has("freeRadiusFrom") && (params.getString("freeRadiusFrom") != null) && (!params.getString("freeRadiusFrom").isEmpty()) ) {
                        // Param: freeRadiusFrom, Type: Integer
                        journeysRequestBuilder.withFreeRadiusFrom(integerStraightPass(params.getInt("freeRadiusFrom")));
                    }
                    if (params.has("freeRadiusTo") && (params.getString("freeRadiusTo") != null) && (!params.getString("freeRadiusTo").isEmpty()) ) {
                        // Param: freeRadiusTo, Type: Integer
                        journeysRequestBuilder.withFreeRadiusTo(integerStraightPass(params.getInt("freeRadiusTo")));
                    }
                    if (params.has("directPathMode") && (params.getString("directPathMode") != null) && (!params.getString("directPathMode").isEmpty()) ) {
                        // Param: directPathMode, Type: List
                        journeysRequestBuilder.withDirectPathMode(jsonArrayToStringList(params.getJSONArray("directPathMode")));
                    }
                    if (params.has("partnerServices") && (params.getString("partnerServices") != null) && (!params.getString("partnerServices").isEmpty()) ) {
                        // Param: partnerServices, Type: List
                        journeysRequestBuilder.withPartnerServices(jsonArrayToStringList(params.getJSONArray("partnerServices")));
                    }
                    if (params.has("count") && (params.getString("count") != null) && (!params.getString("count").isEmpty()) ) {
                        // Param: count, Type: Integer
                        journeysRequestBuilder.withCount(integerStraightPass(params.getInt("count")));
                    }
                    if (params.has("isJourneySchedules") && (params.getString("isJourneySchedules") != null) && (!params.getString("isJourneySchedules").isEmpty()) ) {
                        // Param: isJourneySchedules, Type: Boolean
                        journeysRequestBuilder.withIsJourneySchedules(booleanStraightPass(params.getBoolean("isJourneySchedules")));
                    }
                    if (params.has("minNbJourneys") && (params.getString("minNbJourneys") != null) && (!params.getString("minNbJourneys").isEmpty()) ) {
                        // Param: minNbJourneys, Type: Integer
                        journeysRequestBuilder.withMinNbJourneys(integerStraightPass(params.getInt("minNbJourneys")));
                    }
                    if (params.has("maxNbJourneys") && (params.getString("maxNbJourneys") != null) && (!params.getString("maxNbJourneys").isEmpty()) ) {
                        // Param: maxNbJourneys, Type: Integer
                        journeysRequestBuilder.withMaxNbJourneys(integerStraightPass(params.getInt("maxNbJourneys")));
                    }
                    if (params.has("bssStands") && (params.getString("bssStands") != null) && (!params.getString("bssStands").isEmpty()) ) {
                        // Param: bssStands, Type: Boolean
                        journeysRequestBuilder.withBssStands(booleanStraightPass(params.getBoolean("bssStands")));
                    }
                    if (params.has("addPoiInfos") && (params.getString("addPoiInfos") != null) && (!params.getString("addPoiInfos").isEmpty()) ) {
                        // Param: addPoiInfos, Type: List
                        journeysRequestBuilder.withAddPoiInfos(jsonArrayToStringList(params.getJSONArray("addPoiInfos")));
                    }
                    if (params.has("timeframeDuration") && (params.getString("timeframeDuration") != null) && (!params.getString("timeframeDuration").isEmpty()) ) {
                        // Param: timeframeDuration, Type: Integer
                        journeysRequestBuilder.withTimeframeDuration(integerStraightPass(params.getInt("timeframeDuration")));
                    }
                    if (params.has("equipmentDetails") && (params.getString("equipmentDetails") != null) && (!params.getString("equipmentDetails").isEmpty()) ) {
                        // Param: equipmentDetails, Type: Boolean
                        journeysRequestBuilder.withEquipmentDetails(booleanStraightPass(params.getBoolean("equipmentDetails")));
                    }
                    if (params.has("maxTaxiDirectPathDuration") && (params.getString("maxTaxiDirectPathDuration") != null) && (!params.getString("maxTaxiDirectPathDuration").isEmpty()) ) {
                        // Param: maxTaxiDirectPathDuration, Type: Integer
                        journeysRequestBuilder.withMaxTaxiDirectPathDuration(integerStraightPass(params.getInt("maxTaxiDirectPathDuration")));
                    }
                    if (params.has("maxWalkingDirectPathDuration") && (params.getString("maxWalkingDirectPathDuration") != null) && (!params.getString("maxWalkingDirectPathDuration").isEmpty()) ) {
                        // Param: maxWalkingDirectPathDuration, Type: Integer
                        journeysRequestBuilder.withMaxWalkingDirectPathDuration(integerStraightPass(params.getInt("maxWalkingDirectPathDuration")));
                    }
                    if (params.has("maxCarNoParkDirectPathDuration") && (params.getString("maxCarNoParkDirectPathDuration") != null) && (!params.getString("maxCarNoParkDirectPathDuration").isEmpty()) ) {
                        // Param: maxCarNoParkDirectPathDuration, Type: Integer
                        journeysRequestBuilder.withMaxCarNoParkDirectPathDuration(integerStraightPass(params.getInt("maxCarNoParkDirectPathDuration")));
                    }
                    if (params.has("maxCarDirectPathDuration") && (params.getString("maxCarDirectPathDuration") != null) && (!params.getString("maxCarDirectPathDuration").isEmpty()) ) {
                        // Param: maxCarDirectPathDuration, Type: Integer
                        journeysRequestBuilder.withMaxCarDirectPathDuration(integerStraightPass(params.getInt("maxCarDirectPathDuration")));
                    }
                    if (params.has("maxRidesharingDirectPathDuration") && (params.getString("maxRidesharingDirectPathDuration") != null) && (!params.getString("maxRidesharingDirectPathDuration").isEmpty()) ) {
                        // Param: maxRidesharingDirectPathDuration, Type: Integer
                        journeysRequestBuilder.withMaxRidesharingDirectPathDuration(integerStraightPass(params.getInt("maxRidesharingDirectPathDuration")));
                    }
                    if (params.has("maxBssDirectPathDuration") && (params.getString("maxBssDirectPathDuration") != null) && (!params.getString("maxBssDirectPathDuration").isEmpty()) ) {
                        // Param: maxBssDirectPathDuration, Type: Integer
                        journeysRequestBuilder.withMaxBssDirectPathDuration(integerStraightPass(params.getInt("maxBssDirectPathDuration")));
                    }
                    if (params.has("maxBikeDirectPathDuration") && (params.getString("maxBikeDirectPathDuration") != null) && (!params.getString("maxBikeDirectPathDuration").isEmpty()) ) {
                        // Param: maxBikeDirectPathDuration, Type: Integer
                        journeysRequestBuilder.withMaxBikeDirectPathDuration(integerStraightPass(params.getInt("maxBikeDirectPathDuration")));
                    }
                    if (params.has("depth") && (params.getString("depth") != null) && (!params.getString("depth").isEmpty()) ) {
                        // Param: depth, Type: Integer
                        journeysRequestBuilder.withDepth(integerStraightPass(params.getInt("depth")));
                    }
                    if (params.has("maxWaitingDuration") && (params.getString("maxWaitingDuration") != null) && (!params.getString("maxWaitingDuration").isEmpty()) ) {
                        // Param: maxWaitingDuration, Type: Integer
                        journeysRequestBuilder.withMaxWaitingDuration(integerStraightPass(params.getInt("maxWaitingDuration")));
                    }
                    
                    journeysRequestBuilder.rawGet(new ApiCallback<String>() {
                        @Override
                        public void onFailure(ApiException e, int statusCode, Map<String, List<String>> responseHeaders) {
                            callbackContext.error("Problem during request call | " + e.getMessage());
                        }

                        @Override
                        public void onSuccess(String result, int statusCode, Map<String, List<String>> responseHeaders) {
                            JSONObject jsonObject = null;
                            try {
                                jsonObject = new JSONObject(result);
                                callbackContext.success(jsonObject);
                            } catch (Exception e) {
                                String errorMessage = "Problem during response parsing | " + String.valueOf(e.hashCode()) + ": " + e.getMessage();
                                callbackContext.error(errorMessage);
                            }
                        }

                        @Override
                        public void onUploadProgress(long bytesWritten, long contentLength, boolean done) {
                        }

                        @Override
                        public void onDownloadProgress(long bytesRead, long contentLength, boolean done) {
                        }
                    });
                } catch (Exception e) {
                    String errorMessage = "Problem during request building | " + String.valueOf(e.hashCode()) + ": " + e.getMessage();
                    callbackContext.error(errorMessage);
                }
            }
        });
    }
    final private void journeys(final JSONObject params, final CallbackContext callbackContext) {
        if (this.navitiaSdk == null) {
            callbackContext.error("NavitiaSDK is not instanciated");
            return;
        }

        final JourneysApi.JourneysRequestBuilder journeysRequestBuilder = this.navitiaSdk.journeysApi.newJourneysRequestBuilder();
        cordova.getThreadPool().execute(new Runnable() {
            @Override
            public void run() {
                try {
                    if (params.has("from") && (params.getString("from") != null) && (!params.getString("from").isEmpty()) ) {
                        // Param: from, Type: String
                        journeysRequestBuilder.withFrom(stringStraightPass(params.getString("from")));
                    }
                    if (params.has("to") && (params.getString("to") != null) && (!params.getString("to").isEmpty()) ) {
                        // Param: to, Type: String
                        journeysRequestBuilder.withTo(stringStraightPass(params.getString("to")));
                    }
                    if (params.has("datetime") && (params.getString("datetime") != null) && (!params.getString("datetime").isEmpty()) ) {
                        // Param: datetime, Type: Date
                        journeysRequestBuilder.withDatetime(stringToDateTime(params.getString("datetime")));
                    }
                    if (params.has("datetimeRepresents") && (params.getString("datetimeRepresents") != null) && (!params.getString("datetimeRepresents").isEmpty()) ) {
                        // Param: datetimeRepresents, Type: String
                        journeysRequestBuilder.withDatetimeRepresents(stringStraightPass(params.getString("datetimeRepresents")));
                    }
                    if (params.has("maxNbTransfers") && (params.getString("maxNbTransfers") != null) && (!params.getString("maxNbTransfers").isEmpty()) ) {
                        // Param: maxNbTransfers, Type: Integer
                        journeysRequestBuilder.withMaxNbTransfers(integerStraightPass(params.getInt("maxNbTransfers")));
                    }
                    if (params.has("minNbTransfers") && (params.getString("minNbTransfers") != null) && (!params.getString("minNbTransfers").isEmpty()) ) {
                        // Param: minNbTransfers, Type: Integer
                        journeysRequestBuilder.withMinNbTransfers(integerStraightPass(params.getInt("minNbTransfers")));
                    }
                    if (params.has("firstSectionMode") && (params.getString("firstSectionMode") != null) && (!params.getString("firstSectionMode").isEmpty()) ) {
                        // Param: firstSectionMode, Type: List
                        journeysRequestBuilder.withFirstSectionMode(jsonArrayToStringList(params.getJSONArray("firstSectionMode")));
                    }
                    if (params.has("lastSectionMode") && (params.getString("lastSectionMode") != null) && (!params.getString("lastSectionMode").isEmpty()) ) {
                        // Param: lastSectionMode, Type: List
                        journeysRequestBuilder.withLastSectionMode(jsonArrayToStringList(params.getJSONArray("lastSectionMode")));
                    }
                    if (params.has("maxDurationToPt") && (params.getString("maxDurationToPt") != null) && (!params.getString("maxDurationToPt").isEmpty()) ) {
                        // Param: maxDurationToPt, Type: Integer
                        journeysRequestBuilder.withMaxDurationToPt(integerStraightPass(params.getInt("maxDurationToPt")));
                    }
                    if (params.has("maxWalkingDurationToPt") && (params.getString("maxWalkingDurationToPt") != null) && (!params.getString("maxWalkingDurationToPt").isEmpty()) ) {
                        // Param: maxWalkingDurationToPt, Type: Integer
                        journeysRequestBuilder.withMaxWalkingDurationToPt(integerStraightPass(params.getInt("maxWalkingDurationToPt")));
                    }
                    if (params.has("maxBikeDurationToPt") && (params.getString("maxBikeDurationToPt") != null) && (!params.getString("maxBikeDurationToPt").isEmpty()) ) {
                        // Param: maxBikeDurationToPt, Type: Integer
                        journeysRequestBuilder.withMaxBikeDurationToPt(integerStraightPass(params.getInt("maxBikeDurationToPt")));
                    }
                    if (params.has("maxBssDurationToPt") && (params.getString("maxBssDurationToPt") != null) && (!params.getString("maxBssDurationToPt").isEmpty()) ) {
                        // Param: maxBssDurationToPt, Type: Integer
                        journeysRequestBuilder.withMaxBssDurationToPt(integerStraightPass(params.getInt("maxBssDurationToPt")));
                    }
                    if (params.has("maxCarDurationToPt") && (params.getString("maxCarDurationToPt") != null) && (!params.getString("maxCarDurationToPt").isEmpty()) ) {
                        // Param: maxCarDurationToPt, Type: Integer
                        journeysRequestBuilder.withMaxCarDurationToPt(integerStraightPass(params.getInt("maxCarDurationToPt")));
                    }
                    if (params.has("maxRidesharingDurationToPt") && (params.getString("maxRidesharingDurationToPt") != null) && (!params.getString("maxRidesharingDurationToPt").isEmpty()) ) {
                        // Param: maxRidesharingDurationToPt, Type: Integer
                        journeysRequestBuilder.withMaxRidesharingDurationToPt(integerStraightPass(params.getInt("maxRidesharingDurationToPt")));
                    }
                    if (params.has("maxCarNoParkDurationToPt") && (params.getString("maxCarNoParkDurationToPt") != null) && (!params.getString("maxCarNoParkDurationToPt").isEmpty()) ) {
                        // Param: maxCarNoParkDurationToPt, Type: Integer
                        journeysRequestBuilder.withMaxCarNoParkDurationToPt(integerStraightPass(params.getInt("maxCarNoParkDurationToPt")));
                    }
                    if (params.has("maxTaxiDurationToPt") && (params.getString("maxTaxiDurationToPt") != null) && (!params.getString("maxTaxiDurationToPt").isEmpty()) ) {
                        // Param: maxTaxiDurationToPt, Type: Integer
                        journeysRequestBuilder.withMaxTaxiDurationToPt(integerStraightPass(params.getInt("maxTaxiDurationToPt")));
                    }
                    if (params.has("walkingSpeed") && (params.getString("walkingSpeed") != null) && (!params.getString("walkingSpeed").isEmpty()) ) {
                        // Param: walkingSpeed, Type: Float
                        journeysRequestBuilder.withWalkingSpeed(longToFloat(params.getLong("walkingSpeed")));
                    }
                    if (params.has("bikeSpeed") && (params.getString("bikeSpeed") != null) && (!params.getString("bikeSpeed").isEmpty()) ) {
                        // Param: bikeSpeed, Type: Float
                        journeysRequestBuilder.withBikeSpeed(longToFloat(params.getLong("bikeSpeed")));
                    }
                    if (params.has("bssSpeed") && (params.getString("bssSpeed") != null) && (!params.getString("bssSpeed").isEmpty()) ) {
                        // Param: bssSpeed, Type: Float
                        journeysRequestBuilder.withBssSpeed(longToFloat(params.getLong("bssSpeed")));
                    }
                    if (params.has("carSpeed") && (params.getString("carSpeed") != null) && (!params.getString("carSpeed").isEmpty()) ) {
                        // Param: carSpeed, Type: Float
                        journeysRequestBuilder.withCarSpeed(longToFloat(params.getLong("carSpeed")));
                    }
                    if (params.has("ridesharingSpeed") && (params.getString("ridesharingSpeed") != null) && (!params.getString("ridesharingSpeed").isEmpty()) ) {
                        // Param: ridesharingSpeed, Type: Float
                        journeysRequestBuilder.withRidesharingSpeed(longToFloat(params.getLong("ridesharingSpeed")));
                    }
                    if (params.has("carNoParkSpeed") && (params.getString("carNoParkSpeed") != null) && (!params.getString("carNoParkSpeed").isEmpty()) ) {
                        // Param: carNoParkSpeed, Type: Float
                        journeysRequestBuilder.withCarNoParkSpeed(longToFloat(params.getLong("carNoParkSpeed")));
                    }
                    if (params.has("taxiSpeed") && (params.getString("taxiSpeed") != null) && (!params.getString("taxiSpeed").isEmpty()) ) {
                        // Param: taxiSpeed, Type: Float
                        journeysRequestBuilder.withTaxiSpeed(longToFloat(params.getLong("taxiSpeed")));
                    }
                    if (params.has("forbiddenUris") && (params.getString("forbiddenUris") != null) && (!params.getString("forbiddenUris").isEmpty()) ) {
                        // Param: forbiddenUris, Type: List
                        journeysRequestBuilder.withForbiddenUris(jsonArrayToStringList(params.getJSONArray("forbiddenUris")));
                    }
                    if (params.has("allowedId") && (params.getString("allowedId") != null) && (!params.getString("allowedId").isEmpty()) ) {
                        // Param: allowedId, Type: List
                        journeysRequestBuilder.withAllowedId(jsonArrayToStringList(params.getJSONArray("allowedId")));
                    }
                    if (params.has("disruptionActive") && (params.getString("disruptionActive") != null) && (!params.getString("disruptionActive").isEmpty()) ) {
                        // Param: disruptionActive, Type: Boolean
                        journeysRequestBuilder.withDisruptionActive(booleanStraightPass(params.getBoolean("disruptionActive")));
                    }
                    if (params.has("dataFreshness") && (params.getString("dataFreshness") != null) && (!params.getString("dataFreshness").isEmpty()) ) {
                        // Param: dataFreshness, Type: String
                        journeysRequestBuilder.withDataFreshness(stringStraightPass(params.getString("dataFreshness")));
                    }
                    if (params.has("maxDuration") && (params.getString("maxDuration") != null) && (!params.getString("maxDuration").isEmpty()) ) {
                        // Param: maxDuration, Type: Integer
                        journeysRequestBuilder.withMaxDuration(integerStraightPass(params.getInt("maxDuration")));
                    }
                    if (params.has("wheelchair") && (params.getString("wheelchair") != null) && (!params.getString("wheelchair").isEmpty()) ) {
                        // Param: wheelchair, Type: Boolean
                        journeysRequestBuilder.withWheelchair(booleanStraightPass(params.getBoolean("wheelchair")));
                    }
                    if (params.has("travelerType") && (params.getString("travelerType") != null) && (!params.getString("travelerType").isEmpty()) ) {
                        // Param: travelerType, Type: String
                        journeysRequestBuilder.withTravelerType(stringStraightPass(params.getString("travelerType")));
                    }
                    if (params.has("directPath") && (params.getString("directPath") != null) && (!params.getString("directPath").isEmpty()) ) {
                        // Param: directPath, Type: String
                        journeysRequestBuilder.withDirectPath(stringStraightPass(params.getString("directPath")));
                    }
                    if (params.has("freeRadiusFrom") && (params.getString("freeRadiusFrom") != null) && (!params.getString("freeRadiusFrom").isEmpty()) ) {
                        // Param: freeRadiusFrom, Type: Integer
                        journeysRequestBuilder.withFreeRadiusFrom(integerStraightPass(params.getInt("freeRadiusFrom")));
                    }
                    if (params.has("freeRadiusTo") && (params.getString("freeRadiusTo") != null) && (!params.getString("freeRadiusTo").isEmpty()) ) {
                        // Param: freeRadiusTo, Type: Integer
                        journeysRequestBuilder.withFreeRadiusTo(integerStraightPass(params.getInt("freeRadiusTo")));
                    }
                    if (params.has("directPathMode") && (params.getString("directPathMode") != null) && (!params.getString("directPathMode").isEmpty()) ) {
                        // Param: directPathMode, Type: List
                        journeysRequestBuilder.withDirectPathMode(jsonArrayToStringList(params.getJSONArray("directPathMode")));
                    }
                    if (params.has("partnerServices") && (params.getString("partnerServices") != null) && (!params.getString("partnerServices").isEmpty()) ) {
                        // Param: partnerServices, Type: List
                        journeysRequestBuilder.withPartnerServices(jsonArrayToStringList(params.getJSONArray("partnerServices")));
                    }
                    if (params.has("count") && (params.getString("count") != null) && (!params.getString("count").isEmpty()) ) {
                        // Param: count, Type: Integer
                        journeysRequestBuilder.withCount(integerStraightPass(params.getInt("count")));
                    }
                    if (params.has("isJourneySchedules") && (params.getString("isJourneySchedules") != null) && (!params.getString("isJourneySchedules").isEmpty()) ) {
                        // Param: isJourneySchedules, Type: Boolean
                        journeysRequestBuilder.withIsJourneySchedules(booleanStraightPass(params.getBoolean("isJourneySchedules")));
                    }
                    if (params.has("minNbJourneys") && (params.getString("minNbJourneys") != null) && (!params.getString("minNbJourneys").isEmpty()) ) {
                        // Param: minNbJourneys, Type: Integer
                        journeysRequestBuilder.withMinNbJourneys(integerStraightPass(params.getInt("minNbJourneys")));
                    }
                    if (params.has("maxNbJourneys") && (params.getString("maxNbJourneys") != null) && (!params.getString("maxNbJourneys").isEmpty()) ) {
                        // Param: maxNbJourneys, Type: Integer
                        journeysRequestBuilder.withMaxNbJourneys(integerStraightPass(params.getInt("maxNbJourneys")));
                    }
                    if (params.has("bssStands") && (params.getString("bssStands") != null) && (!params.getString("bssStands").isEmpty()) ) {
                        // Param: bssStands, Type: Boolean
                        journeysRequestBuilder.withBssStands(booleanStraightPass(params.getBoolean("bssStands")));
                    }
                    if (params.has("addPoiInfos") && (params.getString("addPoiInfos") != null) && (!params.getString("addPoiInfos").isEmpty()) ) {
                        // Param: addPoiInfos, Type: List
                        journeysRequestBuilder.withAddPoiInfos(jsonArrayToStringList(params.getJSONArray("addPoiInfos")));
                    }
                    if (params.has("timeframeDuration") && (params.getString("timeframeDuration") != null) && (!params.getString("timeframeDuration").isEmpty()) ) {
                        // Param: timeframeDuration, Type: Integer
                        journeysRequestBuilder.withTimeframeDuration(integerStraightPass(params.getInt("timeframeDuration")));
                    }
                    if (params.has("equipmentDetails") && (params.getString("equipmentDetails") != null) && (!params.getString("equipmentDetails").isEmpty()) ) {
                        // Param: equipmentDetails, Type: Boolean
                        journeysRequestBuilder.withEquipmentDetails(booleanStraightPass(params.getBoolean("equipmentDetails")));
                    }
                    if (params.has("maxTaxiDirectPathDuration") && (params.getString("maxTaxiDirectPathDuration") != null) && (!params.getString("maxTaxiDirectPathDuration").isEmpty()) ) {
                        // Param: maxTaxiDirectPathDuration, Type: Integer
                        journeysRequestBuilder.withMaxTaxiDirectPathDuration(integerStraightPass(params.getInt("maxTaxiDirectPathDuration")));
                    }
                    if (params.has("maxWalkingDirectPathDuration") && (params.getString("maxWalkingDirectPathDuration") != null) && (!params.getString("maxWalkingDirectPathDuration").isEmpty()) ) {
                        // Param: maxWalkingDirectPathDuration, Type: Integer
                        journeysRequestBuilder.withMaxWalkingDirectPathDuration(integerStraightPass(params.getInt("maxWalkingDirectPathDuration")));
                    }
                    if (params.has("maxCarNoParkDirectPathDuration") && (params.getString("maxCarNoParkDirectPathDuration") != null) && (!params.getString("maxCarNoParkDirectPathDuration").isEmpty()) ) {
                        // Param: maxCarNoParkDirectPathDuration, Type: Integer
                        journeysRequestBuilder.withMaxCarNoParkDirectPathDuration(integerStraightPass(params.getInt("maxCarNoParkDirectPathDuration")));
                    }
                    if (params.has("maxCarDirectPathDuration") && (params.getString("maxCarDirectPathDuration") != null) && (!params.getString("maxCarDirectPathDuration").isEmpty()) ) {
                        // Param: maxCarDirectPathDuration, Type: Integer
                        journeysRequestBuilder.withMaxCarDirectPathDuration(integerStraightPass(params.getInt("maxCarDirectPathDuration")));
                    }
                    if (params.has("maxRidesharingDirectPathDuration") && (params.getString("maxRidesharingDirectPathDuration") != null) && (!params.getString("maxRidesharingDirectPathDuration").isEmpty()) ) {
                        // Param: maxRidesharingDirectPathDuration, Type: Integer
                        journeysRequestBuilder.withMaxRidesharingDirectPathDuration(integerStraightPass(params.getInt("maxRidesharingDirectPathDuration")));
                    }
                    if (params.has("maxBssDirectPathDuration") && (params.getString("maxBssDirectPathDuration") != null) && (!params.getString("maxBssDirectPathDuration").isEmpty()) ) {
                        // Param: maxBssDirectPathDuration, Type: Integer
                        journeysRequestBuilder.withMaxBssDirectPathDuration(integerStraightPass(params.getInt("maxBssDirectPathDuration")));
                    }
                    if (params.has("maxBikeDirectPathDuration") && (params.getString("maxBikeDirectPathDuration") != null) && (!params.getString("maxBikeDirectPathDuration").isEmpty()) ) {
                        // Param: maxBikeDirectPathDuration, Type: Integer
                        journeysRequestBuilder.withMaxBikeDirectPathDuration(integerStraightPass(params.getInt("maxBikeDirectPathDuration")));
                    }
                    if (params.has("depth") && (params.getString("depth") != null) && (!params.getString("depth").isEmpty()) ) {
                        // Param: depth, Type: Integer
                        journeysRequestBuilder.withDepth(integerStraightPass(params.getInt("depth")));
                    }
                    if (params.has("maxWaitingDuration") && (params.getString("maxWaitingDuration") != null) && (!params.getString("maxWaitingDuration").isEmpty()) ) {
                        // Param: maxWaitingDuration, Type: Integer
                        journeysRequestBuilder.withMaxWaitingDuration(integerStraightPass(params.getInt("maxWaitingDuration")));
                    }
                    
                    journeysRequestBuilder.rawGet(new ApiCallback<String>() {
                        @Override
                        public void onFailure(ApiException e, int statusCode, Map<String, List<String>> responseHeaders) {
                            callbackContext.error("Problem during request call | " + e.getMessage());
                        }

                        @Override
                        public void onSuccess(String result, int statusCode, Map<String, List<String>> responseHeaders) {
                            JSONObject jsonObject = null;
                            try {
                                jsonObject = new JSONObject(result);
                                callbackContext.success(jsonObject);
                            } catch (Exception e) {
                                String errorMessage = "Problem during response parsing | " + String.valueOf(e.hashCode()) + ": " + e.getMessage();
                                callbackContext.error(errorMessage);
                            }
                        }

                        @Override
                        public void onUploadProgress(long bytesWritten, long contentLength, boolean done) {
                        }

                        @Override
                        public void onDownloadProgress(long bytesRead, long contentLength, boolean done) {
                        }
                    });
                } catch (Exception e) {
                    String errorMessage = "Problem during request building | " + String.valueOf(e.hashCode()) + ": " + e.getMessage();
                    callbackContext.error(errorMessage);
                }
            }
        });
    }
    final private void coverageLonLatLineGroups(final JSONObject params, final CallbackContext callbackContext) {
        if (this.navitiaSdk == null) {
            callbackContext.error("NavitiaSDK is not instanciated");
            return;
        }

        final LineGroupsApi.CoverageLonLatLineGroupsRequestBuilder lineGroupsRequestBuilder = this.navitiaSdk.lineGroupsApi.newCoverageLonLatLineGroupsRequestBuilder();
        cordova.getThreadPool().execute(new Runnable() {
            @Override
            public void run() {
                try {
                    if (params.has("lat") && (params.getString("lat") != null) && (!params.getString("lat").isEmpty()) ) {
                        // Param: lat, Type: BigDecimal
                        lineGroupsRequestBuilder.withLat(longToBigDecimal(params.getLong("lat")));
                    }
                    if (params.has("lon") && (params.getString("lon") != null) && (!params.getString("lon").isEmpty()) ) {
                        // Param: lon, Type: BigDecimal
                        lineGroupsRequestBuilder.withLon(longToBigDecimal(params.getLong("lon")));
                    }
                    if (params.has("startPage") && (params.getString("startPage") != null) && (!params.getString("startPage").isEmpty()) ) {
                        // Param: startPage, Type: Integer
                        lineGroupsRequestBuilder.withStartPage(integerStraightPass(params.getInt("startPage")));
                    }
                    if (params.has("count") && (params.getString("count") != null) && (!params.getString("count").isEmpty()) ) {
                        // Param: count, Type: Integer
                        lineGroupsRequestBuilder.withCount(integerStraightPass(params.getInt("count")));
                    }
                    if (params.has("depth") && (params.getString("depth") != null) && (!params.getString("depth").isEmpty()) ) {
                        // Param: depth, Type: Integer
                        lineGroupsRequestBuilder.withDepth(integerStraightPass(params.getInt("depth")));
                    }
                    if (params.has("forbiddenId") && (params.getString("forbiddenId") != null) && (!params.getString("forbiddenId").isEmpty()) ) {
                        // Param: forbiddenId, Type: List
                        lineGroupsRequestBuilder.withForbiddenId(jsonArrayToStringList(params.getJSONArray("forbiddenId")));
                    }
                    if (params.has("forbiddenUris") && (params.getString("forbiddenUris") != null) && (!params.getString("forbiddenUris").isEmpty()) ) {
                        // Param: forbiddenUris, Type: List
                        lineGroupsRequestBuilder.withForbiddenUris(jsonArrayToStringList(params.getJSONArray("forbiddenUris")));
                    }
                    if (params.has("externalCode") && (params.getString("externalCode") != null) && (!params.getString("externalCode").isEmpty()) ) {
                        // Param: externalCode, Type: String
                        lineGroupsRequestBuilder.withExternalCode(stringStraightPass(params.getString("externalCode")));
                    }
                    if (params.has("headsign") && (params.getString("headsign") != null) && (!params.getString("headsign").isEmpty()) ) {
                        // Param: headsign, Type: String
                        lineGroupsRequestBuilder.withHeadsign(stringStraightPass(params.getString("headsign")));
                    }
                    if (params.has("showCodes") && (params.getString("showCodes") != null) && (!params.getString("showCodes").isEmpty()) ) {
                        // Param: showCodes, Type: Boolean
                        lineGroupsRequestBuilder.withShowCodes(booleanStraightPass(params.getBoolean("showCodes")));
                    }
                    if (params.has("odtLevel") && (params.getString("odtLevel") != null) && (!params.getString("odtLevel").isEmpty()) ) {
                        // Param: odtLevel, Type: String
                        lineGroupsRequestBuilder.withOdtLevel(stringStraightPass(params.getString("odtLevel")));
                    }
                    if (params.has("dataFreshness") && (params.getString("dataFreshness") != null) && (!params.getString("dataFreshness").isEmpty()) ) {
                        // Param: dataFreshness, Type: String
                        lineGroupsRequestBuilder.withDataFreshness(stringStraightPass(params.getString("dataFreshness")));
                    }
                    if (params.has("distance") && (params.getString("distance") != null) && (!params.getString("distance").isEmpty()) ) {
                        // Param: distance, Type: Integer
                        lineGroupsRequestBuilder.withDistance(integerStraightPass(params.getInt("distance")));
                    }
                    if (params.has("since") && (params.getString("since") != null) && (!params.getString("since").isEmpty()) ) {
                        // Param: since, Type: Date
                        lineGroupsRequestBuilder.withSince(stringToDateTime(params.getString("since")));
                    }
                    if (params.has("until") && (params.getString("until") != null) && (!params.getString("until").isEmpty()) ) {
                        // Param: until, Type: Date
                        lineGroupsRequestBuilder.withUntil(stringToDateTime(params.getString("until")));
                    }
                    if (params.has("disableGeojson") && (params.getString("disableGeojson") != null) && (!params.getString("disableGeojson").isEmpty()) ) {
                        // Param: disableGeojson, Type: Boolean
                        lineGroupsRequestBuilder.withDisableGeojson(booleanStraightPass(params.getBoolean("disableGeojson")));
                    }
                    if (params.has("disableDisruption") && (params.getString("disableDisruption") != null) && (!params.getString("disableDisruption").isEmpty()) ) {
                        // Param: disableDisruption, Type: Boolean
                        lineGroupsRequestBuilder.withDisableDisruption(booleanStraightPass(params.getBoolean("disableDisruption")));
                    }
                    if (params.has("filter") && (params.getString("filter") != null) && (!params.getString("filter").isEmpty()) ) {
                        // Param: filter, Type: String
                        lineGroupsRequestBuilder.withFilter(stringStraightPass(params.getString("filter")));
                    }
                    if (params.has("tags") && (params.getString("tags") != null) && (!params.getString("tags").isEmpty()) ) {
                        // Param: tags, Type: List
                        lineGroupsRequestBuilder.withTags(jsonArrayToStringList(params.getJSONArray("tags")));
                    }
                    if (params.has("originalId") && (params.getString("originalId") != null) && (!params.getString("originalId").isEmpty()) ) {
                        // Param: originalId, Type: String
                        lineGroupsRequestBuilder.withOriginalId(stringStraightPass(params.getString("originalId")));
                    }
                    
                    lineGroupsRequestBuilder.rawGet(new ApiCallback<String>() {
                        @Override
                        public void onFailure(ApiException e, int statusCode, Map<String, List<String>> responseHeaders) {
                            callbackContext.error("Problem during request call | " + e.getMessage());
                        }

                        @Override
                        public void onSuccess(String result, int statusCode, Map<String, List<String>> responseHeaders) {
                            JSONObject jsonObject = null;
                            try {
                                jsonObject = new JSONObject(result);
                                callbackContext.success(jsonObject);
                            } catch (Exception e) {
                                String errorMessage = "Problem during response parsing | " + String.valueOf(e.hashCode()) + ": " + e.getMessage();
                                callbackContext.error(errorMessage);
                            }
                        }

                        @Override
                        public void onUploadProgress(long bytesWritten, long contentLength, boolean done) {
                        }

                        @Override
                        public void onDownloadProgress(long bytesRead, long contentLength, boolean done) {
                        }
                    });
                } catch (Exception e) {
                    String errorMessage = "Problem during request building | " + String.valueOf(e.hashCode()) + ": " + e.getMessage();
                    callbackContext.error(errorMessage);
                }
            }
        });
    }
    final private void coverageLonLatLineGroupsId(final JSONObject params, final CallbackContext callbackContext) {
        if (this.navitiaSdk == null) {
            callbackContext.error("NavitiaSDK is not instanciated");
            return;
        }

        final LineGroupsApi.CoverageLonLatLineGroupsIdRequestBuilder lineGroupsRequestBuilder = this.navitiaSdk.lineGroupsApi.newCoverageLonLatLineGroupsIdRequestBuilder();
        cordova.getThreadPool().execute(new Runnable() {
            @Override
            public void run() {
                try {
                    if (params.has("lat") && (params.getString("lat") != null) && (!params.getString("lat").isEmpty()) ) {
                        // Param: lat, Type: BigDecimal
                        lineGroupsRequestBuilder.withLat(longToBigDecimal(params.getLong("lat")));
                    }
                    if (params.has("lon") && (params.getString("lon") != null) && (!params.getString("lon").isEmpty()) ) {
                        // Param: lon, Type: BigDecimal
                        lineGroupsRequestBuilder.withLon(longToBigDecimal(params.getLong("lon")));
                    }
                    if (params.has("id") && (params.getString("id") != null) && (!params.getString("id").isEmpty()) ) {
                        // Param: id, Type: String
                        lineGroupsRequestBuilder.withId(stringStraightPass(params.getString("id")));
                    }
                    if (params.has("startPage") && (params.getString("startPage") != null) && (!params.getString("startPage").isEmpty()) ) {
                        // Param: startPage, Type: Integer
                        lineGroupsRequestBuilder.withStartPage(integerStraightPass(params.getInt("startPage")));
                    }
                    if (params.has("count") && (params.getString("count") != null) && (!params.getString("count").isEmpty()) ) {
                        // Param: count, Type: Integer
                        lineGroupsRequestBuilder.withCount(integerStraightPass(params.getInt("count")));
                    }
                    if (params.has("depth") && (params.getString("depth") != null) && (!params.getString("depth").isEmpty()) ) {
                        // Param: depth, Type: Integer
                        lineGroupsRequestBuilder.withDepth(integerStraightPass(params.getInt("depth")));
                    }
                    if (params.has("forbiddenId") && (params.getString("forbiddenId") != null) && (!params.getString("forbiddenId").isEmpty()) ) {
                        // Param: forbiddenId, Type: List
                        lineGroupsRequestBuilder.withForbiddenId(jsonArrayToStringList(params.getJSONArray("forbiddenId")));
                    }
                    if (params.has("forbiddenUris") && (params.getString("forbiddenUris") != null) && (!params.getString("forbiddenUris").isEmpty()) ) {
                        // Param: forbiddenUris, Type: List
                        lineGroupsRequestBuilder.withForbiddenUris(jsonArrayToStringList(params.getJSONArray("forbiddenUris")));
                    }
                    if (params.has("externalCode") && (params.getString("externalCode") != null) && (!params.getString("externalCode").isEmpty()) ) {
                        // Param: externalCode, Type: String
                        lineGroupsRequestBuilder.withExternalCode(stringStraightPass(params.getString("externalCode")));
                    }
                    if (params.has("headsign") && (params.getString("headsign") != null) && (!params.getString("headsign").isEmpty()) ) {
                        // Param: headsign, Type: String
                        lineGroupsRequestBuilder.withHeadsign(stringStraightPass(params.getString("headsign")));
                    }
                    if (params.has("showCodes") && (params.getString("showCodes") != null) && (!params.getString("showCodes").isEmpty()) ) {
                        // Param: showCodes, Type: Boolean
                        lineGroupsRequestBuilder.withShowCodes(booleanStraightPass(params.getBoolean("showCodes")));
                    }
                    if (params.has("odtLevel") && (params.getString("odtLevel") != null) && (!params.getString("odtLevel").isEmpty()) ) {
                        // Param: odtLevel, Type: String
                        lineGroupsRequestBuilder.withOdtLevel(stringStraightPass(params.getString("odtLevel")));
                    }
                    if (params.has("dataFreshness") && (params.getString("dataFreshness") != null) && (!params.getString("dataFreshness").isEmpty()) ) {
                        // Param: dataFreshness, Type: String
                        lineGroupsRequestBuilder.withDataFreshness(stringStraightPass(params.getString("dataFreshness")));
                    }
                    if (params.has("distance") && (params.getString("distance") != null) && (!params.getString("distance").isEmpty()) ) {
                        // Param: distance, Type: Integer
                        lineGroupsRequestBuilder.withDistance(integerStraightPass(params.getInt("distance")));
                    }
                    if (params.has("since") && (params.getString("since") != null) && (!params.getString("since").isEmpty()) ) {
                        // Param: since, Type: Date
                        lineGroupsRequestBuilder.withSince(stringToDateTime(params.getString("since")));
                    }
                    if (params.has("until") && (params.getString("until") != null) && (!params.getString("until").isEmpty()) ) {
                        // Param: until, Type: Date
                        lineGroupsRequestBuilder.withUntil(stringToDateTime(params.getString("until")));
                    }
                    if (params.has("disableGeojson") && (params.getString("disableGeojson") != null) && (!params.getString("disableGeojson").isEmpty()) ) {
                        // Param: disableGeojson, Type: Boolean
                        lineGroupsRequestBuilder.withDisableGeojson(booleanStraightPass(params.getBoolean("disableGeojson")));
                    }
                    if (params.has("disableDisruption") && (params.getString("disableDisruption") != null) && (!params.getString("disableDisruption").isEmpty()) ) {
                        // Param: disableDisruption, Type: Boolean
                        lineGroupsRequestBuilder.withDisableDisruption(booleanStraightPass(params.getBoolean("disableDisruption")));
                    }
                    if (params.has("tags") && (params.getString("tags") != null) && (!params.getString("tags").isEmpty()) ) {
                        // Param: tags, Type: List
                        lineGroupsRequestBuilder.withTags(jsonArrayToStringList(params.getJSONArray("tags")));
                    }
                    if (params.has("originalId") && (params.getString("originalId") != null) && (!params.getString("originalId").isEmpty()) ) {
                        // Param: originalId, Type: String
                        lineGroupsRequestBuilder.withOriginalId(stringStraightPass(params.getString("originalId")));
                    }
                    
                    lineGroupsRequestBuilder.rawGet(new ApiCallback<String>() {
                        @Override
                        public void onFailure(ApiException e, int statusCode, Map<String, List<String>> responseHeaders) {
                            callbackContext.error("Problem during request call | " + e.getMessage());
                        }

                        @Override
                        public void onSuccess(String result, int statusCode, Map<String, List<String>> responseHeaders) {
                            JSONObject jsonObject = null;
                            try {
                                jsonObject = new JSONObject(result);
                                callbackContext.success(jsonObject);
                            } catch (Exception e) {
                                String errorMessage = "Problem during response parsing | " + String.valueOf(e.hashCode()) + ": " + e.getMessage();
                                callbackContext.error(errorMessage);
                            }
                        }

                        @Override
                        public void onUploadProgress(long bytesWritten, long contentLength, boolean done) {
                        }

                        @Override
                        public void onDownloadProgress(long bytesRead, long contentLength, boolean done) {
                        }
                    });
                } catch (Exception e) {
                    String errorMessage = "Problem during request building | " + String.valueOf(e.hashCode()) + ": " + e.getMessage();
                    callbackContext.error(errorMessage);
                }
            }
        });
    }
    final private void coverageLonLatUriLineGroups(final JSONObject params, final CallbackContext callbackContext) {
        if (this.navitiaSdk == null) {
            callbackContext.error("NavitiaSDK is not instanciated");
            return;
        }

        final LineGroupsApi.CoverageLonLatUriLineGroupsRequestBuilder lineGroupsRequestBuilder = this.navitiaSdk.lineGroupsApi.newCoverageLonLatUriLineGroupsRequestBuilder();
        cordova.getThreadPool().execute(new Runnable() {
            @Override
            public void run() {
                try {
                    if (params.has("lat") && (params.getString("lat") != null) && (!params.getString("lat").isEmpty()) ) {
                        // Param: lat, Type: BigDecimal
                        lineGroupsRequestBuilder.withLat(longToBigDecimal(params.getLong("lat")));
                    }
                    if (params.has("lon") && (params.getString("lon") != null) && (!params.getString("lon").isEmpty()) ) {
                        // Param: lon, Type: BigDecimal
                        lineGroupsRequestBuilder.withLon(longToBigDecimal(params.getLong("lon")));
                    }
                    if (params.has("uri") && (params.getString("uri") != null) && (!params.getString("uri").isEmpty()) ) {
                        // Param: uri, Type: String
                        lineGroupsRequestBuilder.withUri(stringStraightPass(params.getString("uri")));
                    }
                    if (params.has("startPage") && (params.getString("startPage") != null) && (!params.getString("startPage").isEmpty()) ) {
                        // Param: startPage, Type: Integer
                        lineGroupsRequestBuilder.withStartPage(integerStraightPass(params.getInt("startPage")));
                    }
                    if (params.has("count") && (params.getString("count") != null) && (!params.getString("count").isEmpty()) ) {
                        // Param: count, Type: Integer
                        lineGroupsRequestBuilder.withCount(integerStraightPass(params.getInt("count")));
                    }
                    if (params.has("depth") && (params.getString("depth") != null) && (!params.getString("depth").isEmpty()) ) {
                        // Param: depth, Type: Integer
                        lineGroupsRequestBuilder.withDepth(integerStraightPass(params.getInt("depth")));
                    }
                    if (params.has("forbiddenId") && (params.getString("forbiddenId") != null) && (!params.getString("forbiddenId").isEmpty()) ) {
                        // Param: forbiddenId, Type: List
                        lineGroupsRequestBuilder.withForbiddenId(jsonArrayToStringList(params.getJSONArray("forbiddenId")));
                    }
                    if (params.has("forbiddenUris") && (params.getString("forbiddenUris") != null) && (!params.getString("forbiddenUris").isEmpty()) ) {
                        // Param: forbiddenUris, Type: List
                        lineGroupsRequestBuilder.withForbiddenUris(jsonArrayToStringList(params.getJSONArray("forbiddenUris")));
                    }
                    if (params.has("externalCode") && (params.getString("externalCode") != null) && (!params.getString("externalCode").isEmpty()) ) {
                        // Param: externalCode, Type: String
                        lineGroupsRequestBuilder.withExternalCode(stringStraightPass(params.getString("externalCode")));
                    }
                    if (params.has("headsign") && (params.getString("headsign") != null) && (!params.getString("headsign").isEmpty()) ) {
                        // Param: headsign, Type: String
                        lineGroupsRequestBuilder.withHeadsign(stringStraightPass(params.getString("headsign")));
                    }
                    if (params.has("showCodes") && (params.getString("showCodes") != null) && (!params.getString("showCodes").isEmpty()) ) {
                        // Param: showCodes, Type: Boolean
                        lineGroupsRequestBuilder.withShowCodes(booleanStraightPass(params.getBoolean("showCodes")));
                    }
                    if (params.has("odtLevel") && (params.getString("odtLevel") != null) && (!params.getString("odtLevel").isEmpty()) ) {
                        // Param: odtLevel, Type: String
                        lineGroupsRequestBuilder.withOdtLevel(stringStraightPass(params.getString("odtLevel")));
                    }
                    if (params.has("dataFreshness") && (params.getString("dataFreshness") != null) && (!params.getString("dataFreshness").isEmpty()) ) {
                        // Param: dataFreshness, Type: String
                        lineGroupsRequestBuilder.withDataFreshness(stringStraightPass(params.getString("dataFreshness")));
                    }
                    if (params.has("distance") && (params.getString("distance") != null) && (!params.getString("distance").isEmpty()) ) {
                        // Param: distance, Type: Integer
                        lineGroupsRequestBuilder.withDistance(integerStraightPass(params.getInt("distance")));
                    }
                    if (params.has("since") && (params.getString("since") != null) && (!params.getString("since").isEmpty()) ) {
                        // Param: since, Type: Date
                        lineGroupsRequestBuilder.withSince(stringToDateTime(params.getString("since")));
                    }
                    if (params.has("until") && (params.getString("until") != null) && (!params.getString("until").isEmpty()) ) {
                        // Param: until, Type: Date
                        lineGroupsRequestBuilder.withUntil(stringToDateTime(params.getString("until")));
                    }
                    if (params.has("disableGeojson") && (params.getString("disableGeojson") != null) && (!params.getString("disableGeojson").isEmpty()) ) {
                        // Param: disableGeojson, Type: Boolean
                        lineGroupsRequestBuilder.withDisableGeojson(booleanStraightPass(params.getBoolean("disableGeojson")));
                    }
                    if (params.has("disableDisruption") && (params.getString("disableDisruption") != null) && (!params.getString("disableDisruption").isEmpty()) ) {
                        // Param: disableDisruption, Type: Boolean
                        lineGroupsRequestBuilder.withDisableDisruption(booleanStraightPass(params.getBoolean("disableDisruption")));
                    }
                    if (params.has("filter") && (params.getString("filter") != null) && (!params.getString("filter").isEmpty()) ) {
                        // Param: filter, Type: String
                        lineGroupsRequestBuilder.withFilter(stringStraightPass(params.getString("filter")));
                    }
                    if (params.has("tags") && (params.getString("tags") != null) && (!params.getString("tags").isEmpty()) ) {
                        // Param: tags, Type: List
                        lineGroupsRequestBuilder.withTags(jsonArrayToStringList(params.getJSONArray("tags")));
                    }
                    if (params.has("originalId") && (params.getString("originalId") != null) && (!params.getString("originalId").isEmpty()) ) {
                        // Param: originalId, Type: String
                        lineGroupsRequestBuilder.withOriginalId(stringStraightPass(params.getString("originalId")));
                    }
                    
                    lineGroupsRequestBuilder.rawGet(new ApiCallback<String>() {
                        @Override
                        public void onFailure(ApiException e, int statusCode, Map<String, List<String>> responseHeaders) {
                            callbackContext.error("Problem during request call | " + e.getMessage());
                        }

                        @Override
                        public void onSuccess(String result, int statusCode, Map<String, List<String>> responseHeaders) {
                            JSONObject jsonObject = null;
                            try {
                                jsonObject = new JSONObject(result);
                                callbackContext.success(jsonObject);
                            } catch (Exception e) {
                                String errorMessage = "Problem during response parsing | " + String.valueOf(e.hashCode()) + ": " + e.getMessage();
                                callbackContext.error(errorMessage);
                            }
                        }

                        @Override
                        public void onUploadProgress(long bytesWritten, long contentLength, boolean done) {
                        }

                        @Override
                        public void onDownloadProgress(long bytesRead, long contentLength, boolean done) {
                        }
                    });
                } catch (Exception e) {
                    String errorMessage = "Problem during request building | " + String.valueOf(e.hashCode()) + ": " + e.getMessage();
                    callbackContext.error(errorMessage);
                }
            }
        });
    }
    final private void coverageLonLatUriLineGroupsId(final JSONObject params, final CallbackContext callbackContext) {
        if (this.navitiaSdk == null) {
            callbackContext.error("NavitiaSDK is not instanciated");
            return;
        }

        final LineGroupsApi.CoverageLonLatUriLineGroupsIdRequestBuilder lineGroupsRequestBuilder = this.navitiaSdk.lineGroupsApi.newCoverageLonLatUriLineGroupsIdRequestBuilder();
        cordova.getThreadPool().execute(new Runnable() {
            @Override
            public void run() {
                try {
                    if (params.has("lat") && (params.getString("lat") != null) && (!params.getString("lat").isEmpty()) ) {
                        // Param: lat, Type: BigDecimal
                        lineGroupsRequestBuilder.withLat(longToBigDecimal(params.getLong("lat")));
                    }
                    if (params.has("lon") && (params.getString("lon") != null) && (!params.getString("lon").isEmpty()) ) {
                        // Param: lon, Type: BigDecimal
                        lineGroupsRequestBuilder.withLon(longToBigDecimal(params.getLong("lon")));
                    }
                    if (params.has("uri") && (params.getString("uri") != null) && (!params.getString("uri").isEmpty()) ) {
                        // Param: uri, Type: String
                        lineGroupsRequestBuilder.withUri(stringStraightPass(params.getString("uri")));
                    }
                    if (params.has("id") && (params.getString("id") != null) && (!params.getString("id").isEmpty()) ) {
                        // Param: id, Type: String
                        lineGroupsRequestBuilder.withId(stringStraightPass(params.getString("id")));
                    }
                    if (params.has("startPage") && (params.getString("startPage") != null) && (!params.getString("startPage").isEmpty()) ) {
                        // Param: startPage, Type: Integer
                        lineGroupsRequestBuilder.withStartPage(integerStraightPass(params.getInt("startPage")));
                    }
                    if (params.has("count") && (params.getString("count") != null) && (!params.getString("count").isEmpty()) ) {
                        // Param: count, Type: Integer
                        lineGroupsRequestBuilder.withCount(integerStraightPass(params.getInt("count")));
                    }
                    if (params.has("depth") && (params.getString("depth") != null) && (!params.getString("depth").isEmpty()) ) {
                        // Param: depth, Type: Integer
                        lineGroupsRequestBuilder.withDepth(integerStraightPass(params.getInt("depth")));
                    }
                    if (params.has("forbiddenId") && (params.getString("forbiddenId") != null) && (!params.getString("forbiddenId").isEmpty()) ) {
                        // Param: forbiddenId, Type: List
                        lineGroupsRequestBuilder.withForbiddenId(jsonArrayToStringList(params.getJSONArray("forbiddenId")));
                    }
                    if (params.has("forbiddenUris") && (params.getString("forbiddenUris") != null) && (!params.getString("forbiddenUris").isEmpty()) ) {
                        // Param: forbiddenUris, Type: List
                        lineGroupsRequestBuilder.withForbiddenUris(jsonArrayToStringList(params.getJSONArray("forbiddenUris")));
                    }
                    if (params.has("externalCode") && (params.getString("externalCode") != null) && (!params.getString("externalCode").isEmpty()) ) {
                        // Param: externalCode, Type: String
                        lineGroupsRequestBuilder.withExternalCode(stringStraightPass(params.getString("externalCode")));
                    }
                    if (params.has("headsign") && (params.getString("headsign") != null) && (!params.getString("headsign").isEmpty()) ) {
                        // Param: headsign, Type: String
                        lineGroupsRequestBuilder.withHeadsign(stringStraightPass(params.getString("headsign")));
                    }
                    if (params.has("showCodes") && (params.getString("showCodes") != null) && (!params.getString("showCodes").isEmpty()) ) {
                        // Param: showCodes, Type: Boolean
                        lineGroupsRequestBuilder.withShowCodes(booleanStraightPass(params.getBoolean("showCodes")));
                    }
                    if (params.has("odtLevel") && (params.getString("odtLevel") != null) && (!params.getString("odtLevel").isEmpty()) ) {
                        // Param: odtLevel, Type: String
                        lineGroupsRequestBuilder.withOdtLevel(stringStraightPass(params.getString("odtLevel")));
                    }
                    if (params.has("dataFreshness") && (params.getString("dataFreshness") != null) && (!params.getString("dataFreshness").isEmpty()) ) {
                        // Param: dataFreshness, Type: String
                        lineGroupsRequestBuilder.withDataFreshness(stringStraightPass(params.getString("dataFreshness")));
                    }
                    if (params.has("distance") && (params.getString("distance") != null) && (!params.getString("distance").isEmpty()) ) {
                        // Param: distance, Type: Integer
                        lineGroupsRequestBuilder.withDistance(integerStraightPass(params.getInt("distance")));
                    }
                    if (params.has("since") && (params.getString("since") != null) && (!params.getString("since").isEmpty()) ) {
                        // Param: since, Type: Date
                        lineGroupsRequestBuilder.withSince(stringToDateTime(params.getString("since")));
                    }
                    if (params.has("until") && (params.getString("until") != null) && (!params.getString("until").isEmpty()) ) {
                        // Param: until, Type: Date
                        lineGroupsRequestBuilder.withUntil(stringToDateTime(params.getString("until")));
                    }
                    if (params.has("disableGeojson") && (params.getString("disableGeojson") != null) && (!params.getString("disableGeojson").isEmpty()) ) {
                        // Param: disableGeojson, Type: Boolean
                        lineGroupsRequestBuilder.withDisableGeojson(booleanStraightPass(params.getBoolean("disableGeojson")));
                    }
                    if (params.has("disableDisruption") && (params.getString("disableDisruption") != null) && (!params.getString("disableDisruption").isEmpty()) ) {
                        // Param: disableDisruption, Type: Boolean
                        lineGroupsRequestBuilder.withDisableDisruption(booleanStraightPass(params.getBoolean("disableDisruption")));
                    }
                    if (params.has("tags") && (params.getString("tags") != null) && (!params.getString("tags").isEmpty()) ) {
                        // Param: tags, Type: List
                        lineGroupsRequestBuilder.withTags(jsonArrayToStringList(params.getJSONArray("tags")));
                    }
                    if (params.has("originalId") && (params.getString("originalId") != null) && (!params.getString("originalId").isEmpty()) ) {
                        // Param: originalId, Type: String
                        lineGroupsRequestBuilder.withOriginalId(stringStraightPass(params.getString("originalId")));
                    }
                    
                    lineGroupsRequestBuilder.rawGet(new ApiCallback<String>() {
                        @Override
                        public void onFailure(ApiException e, int statusCode, Map<String, List<String>> responseHeaders) {
                            callbackContext.error("Problem during request call | " + e.getMessage());
                        }

                        @Override
                        public void onSuccess(String result, int statusCode, Map<String, List<String>> responseHeaders) {
                            JSONObject jsonObject = null;
                            try {
                                jsonObject = new JSONObject(result);
                                callbackContext.success(jsonObject);
                            } catch (Exception e) {
                                String errorMessage = "Problem during response parsing | " + String.valueOf(e.hashCode()) + ": " + e.getMessage();
                                callbackContext.error(errorMessage);
                            }
                        }

                        @Override
                        public void onUploadProgress(long bytesWritten, long contentLength, boolean done) {
                        }

                        @Override
                        public void onDownloadProgress(long bytesRead, long contentLength, boolean done) {
                        }
                    });
                } catch (Exception e) {
                    String errorMessage = "Problem during request building | " + String.valueOf(e.hashCode()) + ": " + e.getMessage();
                    callbackContext.error(errorMessage);
                }
            }
        });
    }
    final private void coverageRegionLineGroups(final JSONObject params, final CallbackContext callbackContext) {
        if (this.navitiaSdk == null) {
            callbackContext.error("NavitiaSDK is not instanciated");
            return;
        }

        final LineGroupsApi.CoverageRegionLineGroupsRequestBuilder lineGroupsRequestBuilder = this.navitiaSdk.lineGroupsApi.newCoverageRegionLineGroupsRequestBuilder();
        cordova.getThreadPool().execute(new Runnable() {
            @Override
            public void run() {
                try {
                    if (params.has("region") && (params.getString("region") != null) && (!params.getString("region").isEmpty()) ) {
                        // Param: region, Type: String
                        lineGroupsRequestBuilder.withRegion(stringStraightPass(params.getString("region")));
                    }
                    if (params.has("startPage") && (params.getString("startPage") != null) && (!params.getString("startPage").isEmpty()) ) {
                        // Param: startPage, Type: Integer
                        lineGroupsRequestBuilder.withStartPage(integerStraightPass(params.getInt("startPage")));
                    }
                    if (params.has("count") && (params.getString("count") != null) && (!params.getString("count").isEmpty()) ) {
                        // Param: count, Type: Integer
                        lineGroupsRequestBuilder.withCount(integerStraightPass(params.getInt("count")));
                    }
                    if (params.has("depth") && (params.getString("depth") != null) && (!params.getString("depth").isEmpty()) ) {
                        // Param: depth, Type: Integer
                        lineGroupsRequestBuilder.withDepth(integerStraightPass(params.getInt("depth")));
                    }
                    if (params.has("forbiddenId") && (params.getString("forbiddenId") != null) && (!params.getString("forbiddenId").isEmpty()) ) {
                        // Param: forbiddenId, Type: List
                        lineGroupsRequestBuilder.withForbiddenId(jsonArrayToStringList(params.getJSONArray("forbiddenId")));
                    }
                    if (params.has("forbiddenUris") && (params.getString("forbiddenUris") != null) && (!params.getString("forbiddenUris").isEmpty()) ) {
                        // Param: forbiddenUris, Type: List
                        lineGroupsRequestBuilder.withForbiddenUris(jsonArrayToStringList(params.getJSONArray("forbiddenUris")));
                    }
                    if (params.has("externalCode") && (params.getString("externalCode") != null) && (!params.getString("externalCode").isEmpty()) ) {
                        // Param: externalCode, Type: String
                        lineGroupsRequestBuilder.withExternalCode(stringStraightPass(params.getString("externalCode")));
                    }
                    if (params.has("headsign") && (params.getString("headsign") != null) && (!params.getString("headsign").isEmpty()) ) {
                        // Param: headsign, Type: String
                        lineGroupsRequestBuilder.withHeadsign(stringStraightPass(params.getString("headsign")));
                    }
                    if (params.has("showCodes") && (params.getString("showCodes") != null) && (!params.getString("showCodes").isEmpty()) ) {
                        // Param: showCodes, Type: Boolean
                        lineGroupsRequestBuilder.withShowCodes(booleanStraightPass(params.getBoolean("showCodes")));
                    }
                    if (params.has("odtLevel") && (params.getString("odtLevel") != null) && (!params.getString("odtLevel").isEmpty()) ) {
                        // Param: odtLevel, Type: String
                        lineGroupsRequestBuilder.withOdtLevel(stringStraightPass(params.getString("odtLevel")));
                    }
                    if (params.has("dataFreshness") && (params.getString("dataFreshness") != null) && (!params.getString("dataFreshness").isEmpty()) ) {
                        // Param: dataFreshness, Type: String
                        lineGroupsRequestBuilder.withDataFreshness(stringStraightPass(params.getString("dataFreshness")));
                    }
                    if (params.has("distance") && (params.getString("distance") != null) && (!params.getString("distance").isEmpty()) ) {
                        // Param: distance, Type: Integer
                        lineGroupsRequestBuilder.withDistance(integerStraightPass(params.getInt("distance")));
                    }
                    if (params.has("since") && (params.getString("since") != null) && (!params.getString("since").isEmpty()) ) {
                        // Param: since, Type: Date
                        lineGroupsRequestBuilder.withSince(stringToDateTime(params.getString("since")));
                    }
                    if (params.has("until") && (params.getString("until") != null) && (!params.getString("until").isEmpty()) ) {
                        // Param: until, Type: Date
                        lineGroupsRequestBuilder.withUntil(stringToDateTime(params.getString("until")));
                    }
                    if (params.has("disableGeojson") && (params.getString("disableGeojson") != null) && (!params.getString("disableGeojson").isEmpty()) ) {
                        // Param: disableGeojson, Type: Boolean
                        lineGroupsRequestBuilder.withDisableGeojson(booleanStraightPass(params.getBoolean("disableGeojson")));
                    }
                    if (params.has("disableDisruption") && (params.getString("disableDisruption") != null) && (!params.getString("disableDisruption").isEmpty()) ) {
                        // Param: disableDisruption, Type: Boolean
                        lineGroupsRequestBuilder.withDisableDisruption(booleanStraightPass(params.getBoolean("disableDisruption")));
                    }
                    if (params.has("filter") && (params.getString("filter") != null) && (!params.getString("filter").isEmpty()) ) {
                        // Param: filter, Type: String
                        lineGroupsRequestBuilder.withFilter(stringStraightPass(params.getString("filter")));
                    }
                    if (params.has("tags") && (params.getString("tags") != null) && (!params.getString("tags").isEmpty()) ) {
                        // Param: tags, Type: List
                        lineGroupsRequestBuilder.withTags(jsonArrayToStringList(params.getJSONArray("tags")));
                    }
                    if (params.has("originalId") && (params.getString("originalId") != null) && (!params.getString("originalId").isEmpty()) ) {
                        // Param: originalId, Type: String
                        lineGroupsRequestBuilder.withOriginalId(stringStraightPass(params.getString("originalId")));
                    }
                    
                    lineGroupsRequestBuilder.rawGet(new ApiCallback<String>() {
                        @Override
                        public void onFailure(ApiException e, int statusCode, Map<String, List<String>> responseHeaders) {
                            callbackContext.error("Problem during request call | " + e.getMessage());
                        }

                        @Override
                        public void onSuccess(String result, int statusCode, Map<String, List<String>> responseHeaders) {
                            JSONObject jsonObject = null;
                            try {
                                jsonObject = new JSONObject(result);
                                callbackContext.success(jsonObject);
                            } catch (Exception e) {
                                String errorMessage = "Problem during response parsing | " + String.valueOf(e.hashCode()) + ": " + e.getMessage();
                                callbackContext.error(errorMessage);
                            }
                        }

                        @Override
                        public void onUploadProgress(long bytesWritten, long contentLength, boolean done) {
                        }

                        @Override
                        public void onDownloadProgress(long bytesRead, long contentLength, boolean done) {
                        }
                    });
                } catch (Exception e) {
                    String errorMessage = "Problem during request building | " + String.valueOf(e.hashCode()) + ": " + e.getMessage();
                    callbackContext.error(errorMessage);
                }
            }
        });
    }
    final private void coverageRegionLineGroupsId(final JSONObject params, final CallbackContext callbackContext) {
        if (this.navitiaSdk == null) {
            callbackContext.error("NavitiaSDK is not instanciated");
            return;
        }

        final LineGroupsApi.CoverageRegionLineGroupsIdRequestBuilder lineGroupsRequestBuilder = this.navitiaSdk.lineGroupsApi.newCoverageRegionLineGroupsIdRequestBuilder();
        cordova.getThreadPool().execute(new Runnable() {
            @Override
            public void run() {
                try {
                    if (params.has("region") && (params.getString("region") != null) && (!params.getString("region").isEmpty()) ) {
                        // Param: region, Type: String
                        lineGroupsRequestBuilder.withRegion(stringStraightPass(params.getString("region")));
                    }
                    if (params.has("id") && (params.getString("id") != null) && (!params.getString("id").isEmpty()) ) {
                        // Param: id, Type: String
                        lineGroupsRequestBuilder.withId(stringStraightPass(params.getString("id")));
                    }
                    if (params.has("startPage") && (params.getString("startPage") != null) && (!params.getString("startPage").isEmpty()) ) {
                        // Param: startPage, Type: Integer
                        lineGroupsRequestBuilder.withStartPage(integerStraightPass(params.getInt("startPage")));
                    }
                    if (params.has("count") && (params.getString("count") != null) && (!params.getString("count").isEmpty()) ) {
                        // Param: count, Type: Integer
                        lineGroupsRequestBuilder.withCount(integerStraightPass(params.getInt("count")));
                    }
                    if (params.has("depth") && (params.getString("depth") != null) && (!params.getString("depth").isEmpty()) ) {
                        // Param: depth, Type: Integer
                        lineGroupsRequestBuilder.withDepth(integerStraightPass(params.getInt("depth")));
                    }
                    if (params.has("forbiddenId") && (params.getString("forbiddenId") != null) && (!params.getString("forbiddenId").isEmpty()) ) {
                        // Param: forbiddenId, Type: List
                        lineGroupsRequestBuilder.withForbiddenId(jsonArrayToStringList(params.getJSONArray("forbiddenId")));
                    }
                    if (params.has("forbiddenUris") && (params.getString("forbiddenUris") != null) && (!params.getString("forbiddenUris").isEmpty()) ) {
                        // Param: forbiddenUris, Type: List
                        lineGroupsRequestBuilder.withForbiddenUris(jsonArrayToStringList(params.getJSONArray("forbiddenUris")));
                    }
                    if (params.has("externalCode") && (params.getString("externalCode") != null) && (!params.getString("externalCode").isEmpty()) ) {
                        // Param: externalCode, Type: String
                        lineGroupsRequestBuilder.withExternalCode(stringStraightPass(params.getString("externalCode")));
                    }
                    if (params.has("headsign") && (params.getString("headsign") != null) && (!params.getString("headsign").isEmpty()) ) {
                        // Param: headsign, Type: String
                        lineGroupsRequestBuilder.withHeadsign(stringStraightPass(params.getString("headsign")));
                    }
                    if (params.has("showCodes") && (params.getString("showCodes") != null) && (!params.getString("showCodes").isEmpty()) ) {
                        // Param: showCodes, Type: Boolean
                        lineGroupsRequestBuilder.withShowCodes(booleanStraightPass(params.getBoolean("showCodes")));
                    }
                    if (params.has("odtLevel") && (params.getString("odtLevel") != null) && (!params.getString("odtLevel").isEmpty()) ) {
                        // Param: odtLevel, Type: String
                        lineGroupsRequestBuilder.withOdtLevel(stringStraightPass(params.getString("odtLevel")));
                    }
                    if (params.has("dataFreshness") && (params.getString("dataFreshness") != null) && (!params.getString("dataFreshness").isEmpty()) ) {
                        // Param: dataFreshness, Type: String
                        lineGroupsRequestBuilder.withDataFreshness(stringStraightPass(params.getString("dataFreshness")));
                    }
                    if (params.has("distance") && (params.getString("distance") != null) && (!params.getString("distance").isEmpty()) ) {
                        // Param: distance, Type: Integer
                        lineGroupsRequestBuilder.withDistance(integerStraightPass(params.getInt("distance")));
                    }
                    if (params.has("since") && (params.getString("since") != null) && (!params.getString("since").isEmpty()) ) {
                        // Param: since, Type: Date
                        lineGroupsRequestBuilder.withSince(stringToDateTime(params.getString("since")));
                    }
                    if (params.has("until") && (params.getString("until") != null) && (!params.getString("until").isEmpty()) ) {
                        // Param: until, Type: Date
                        lineGroupsRequestBuilder.withUntil(stringToDateTime(params.getString("until")));
                    }
                    if (params.has("disableGeojson") && (params.getString("disableGeojson") != null) && (!params.getString("disableGeojson").isEmpty()) ) {
                        // Param: disableGeojson, Type: Boolean
                        lineGroupsRequestBuilder.withDisableGeojson(booleanStraightPass(params.getBoolean("disableGeojson")));
                    }
                    if (params.has("disableDisruption") && (params.getString("disableDisruption") != null) && (!params.getString("disableDisruption").isEmpty()) ) {
                        // Param: disableDisruption, Type: Boolean
                        lineGroupsRequestBuilder.withDisableDisruption(booleanStraightPass(params.getBoolean("disableDisruption")));
                    }
                    if (params.has("tags") && (params.getString("tags") != null) && (!params.getString("tags").isEmpty()) ) {
                        // Param: tags, Type: List
                        lineGroupsRequestBuilder.withTags(jsonArrayToStringList(params.getJSONArray("tags")));
                    }
                    if (params.has("originalId") && (params.getString("originalId") != null) && (!params.getString("originalId").isEmpty()) ) {
                        // Param: originalId, Type: String
                        lineGroupsRequestBuilder.withOriginalId(stringStraightPass(params.getString("originalId")));
                    }
                    
                    lineGroupsRequestBuilder.rawGet(new ApiCallback<String>() {
                        @Override
                        public void onFailure(ApiException e, int statusCode, Map<String, List<String>> responseHeaders) {
                            callbackContext.error("Problem during request call | " + e.getMessage());
                        }

                        @Override
                        public void onSuccess(String result, int statusCode, Map<String, List<String>> responseHeaders) {
                            JSONObject jsonObject = null;
                            try {
                                jsonObject = new JSONObject(result);
                                callbackContext.success(jsonObject);
                            } catch (Exception e) {
                                String errorMessage = "Problem during response parsing | " + String.valueOf(e.hashCode()) + ": " + e.getMessage();
                                callbackContext.error(errorMessage);
                            }
                        }

                        @Override
                        public void onUploadProgress(long bytesWritten, long contentLength, boolean done) {
                        }

                        @Override
                        public void onDownloadProgress(long bytesRead, long contentLength, boolean done) {
                        }
                    });
                } catch (Exception e) {
                    String errorMessage = "Problem during request building | " + String.valueOf(e.hashCode()) + ": " + e.getMessage();
                    callbackContext.error(errorMessage);
                }
            }
        });
    }
    final private void coverageRegionUriLineGroups(final JSONObject params, final CallbackContext callbackContext) {
        if (this.navitiaSdk == null) {
            callbackContext.error("NavitiaSDK is not instanciated");
            return;
        }

        final LineGroupsApi.CoverageRegionUriLineGroupsRequestBuilder lineGroupsRequestBuilder = this.navitiaSdk.lineGroupsApi.newCoverageRegionUriLineGroupsRequestBuilder();
        cordova.getThreadPool().execute(new Runnable() {
            @Override
            public void run() {
                try {
                    if (params.has("region") && (params.getString("region") != null) && (!params.getString("region").isEmpty()) ) {
                        // Param: region, Type: String
                        lineGroupsRequestBuilder.withRegion(stringStraightPass(params.getString("region")));
                    }
                    if (params.has("uri") && (params.getString("uri") != null) && (!params.getString("uri").isEmpty()) ) {
                        // Param: uri, Type: String
                        lineGroupsRequestBuilder.withUri(stringStraightPass(params.getString("uri")));
                    }
                    if (params.has("startPage") && (params.getString("startPage") != null) && (!params.getString("startPage").isEmpty()) ) {
                        // Param: startPage, Type: Integer
                        lineGroupsRequestBuilder.withStartPage(integerStraightPass(params.getInt("startPage")));
                    }
                    if (params.has("count") && (params.getString("count") != null) && (!params.getString("count").isEmpty()) ) {
                        // Param: count, Type: Integer
                        lineGroupsRequestBuilder.withCount(integerStraightPass(params.getInt("count")));
                    }
                    if (params.has("depth") && (params.getString("depth") != null) && (!params.getString("depth").isEmpty()) ) {
                        // Param: depth, Type: Integer
                        lineGroupsRequestBuilder.withDepth(integerStraightPass(params.getInt("depth")));
                    }
                    if (params.has("forbiddenId") && (params.getString("forbiddenId") != null) && (!params.getString("forbiddenId").isEmpty()) ) {
                        // Param: forbiddenId, Type: List
                        lineGroupsRequestBuilder.withForbiddenId(jsonArrayToStringList(params.getJSONArray("forbiddenId")));
                    }
                    if (params.has("forbiddenUris") && (params.getString("forbiddenUris") != null) && (!params.getString("forbiddenUris").isEmpty()) ) {
                        // Param: forbiddenUris, Type: List
                        lineGroupsRequestBuilder.withForbiddenUris(jsonArrayToStringList(params.getJSONArray("forbiddenUris")));
                    }
                    if (params.has("externalCode") && (params.getString("externalCode") != null) && (!params.getString("externalCode").isEmpty()) ) {
                        // Param: externalCode, Type: String
                        lineGroupsRequestBuilder.withExternalCode(stringStraightPass(params.getString("externalCode")));
                    }
                    if (params.has("headsign") && (params.getString("headsign") != null) && (!params.getString("headsign").isEmpty()) ) {
                        // Param: headsign, Type: String
                        lineGroupsRequestBuilder.withHeadsign(stringStraightPass(params.getString("headsign")));
                    }
                    if (params.has("showCodes") && (params.getString("showCodes") != null) && (!params.getString("showCodes").isEmpty()) ) {
                        // Param: showCodes, Type: Boolean
                        lineGroupsRequestBuilder.withShowCodes(booleanStraightPass(params.getBoolean("showCodes")));
                    }
                    if (params.has("odtLevel") && (params.getString("odtLevel") != null) && (!params.getString("odtLevel").isEmpty()) ) {
                        // Param: odtLevel, Type: String
                        lineGroupsRequestBuilder.withOdtLevel(stringStraightPass(params.getString("odtLevel")));
                    }
                    if (params.has("dataFreshness") && (params.getString("dataFreshness") != null) && (!params.getString("dataFreshness").isEmpty()) ) {
                        // Param: dataFreshness, Type: String
                        lineGroupsRequestBuilder.withDataFreshness(stringStraightPass(params.getString("dataFreshness")));
                    }
                    if (params.has("distance") && (params.getString("distance") != null) && (!params.getString("distance").isEmpty()) ) {
                        // Param: distance, Type: Integer
                        lineGroupsRequestBuilder.withDistance(integerStraightPass(params.getInt("distance")));
                    }
                    if (params.has("since") && (params.getString("since") != null) && (!params.getString("since").isEmpty()) ) {
                        // Param: since, Type: Date
                        lineGroupsRequestBuilder.withSince(stringToDateTime(params.getString("since")));
                    }
                    if (params.has("until") && (params.getString("until") != null) && (!params.getString("until").isEmpty()) ) {
                        // Param: until, Type: Date
                        lineGroupsRequestBuilder.withUntil(stringToDateTime(params.getString("until")));
                    }
                    if (params.has("disableGeojson") && (params.getString("disableGeojson") != null) && (!params.getString("disableGeojson").isEmpty()) ) {
                        // Param: disableGeojson, Type: Boolean
                        lineGroupsRequestBuilder.withDisableGeojson(booleanStraightPass(params.getBoolean("disableGeojson")));
                    }
                    if (params.has("disableDisruption") && (params.getString("disableDisruption") != null) && (!params.getString("disableDisruption").isEmpty()) ) {
                        // Param: disableDisruption, Type: Boolean
                        lineGroupsRequestBuilder.withDisableDisruption(booleanStraightPass(params.getBoolean("disableDisruption")));
                    }
                    if (params.has("filter") && (params.getString("filter") != null) && (!params.getString("filter").isEmpty()) ) {
                        // Param: filter, Type: String
                        lineGroupsRequestBuilder.withFilter(stringStraightPass(params.getString("filter")));
                    }
                    if (params.has("tags") && (params.getString("tags") != null) && (!params.getString("tags").isEmpty()) ) {
                        // Param: tags, Type: List
                        lineGroupsRequestBuilder.withTags(jsonArrayToStringList(params.getJSONArray("tags")));
                    }
                    if (params.has("originalId") && (params.getString("originalId") != null) && (!params.getString("originalId").isEmpty()) ) {
                        // Param: originalId, Type: String
                        lineGroupsRequestBuilder.withOriginalId(stringStraightPass(params.getString("originalId")));
                    }
                    
                    lineGroupsRequestBuilder.rawGet(new ApiCallback<String>() {
                        @Override
                        public void onFailure(ApiException e, int statusCode, Map<String, List<String>> responseHeaders) {
                            callbackContext.error("Problem during request call | " + e.getMessage());
                        }

                        @Override
                        public void onSuccess(String result, int statusCode, Map<String, List<String>> responseHeaders) {
                            JSONObject jsonObject = null;
                            try {
                                jsonObject = new JSONObject(result);
                                callbackContext.success(jsonObject);
                            } catch (Exception e) {
                                String errorMessage = "Problem during response parsing | " + String.valueOf(e.hashCode()) + ": " + e.getMessage();
                                callbackContext.error(errorMessage);
                            }
                        }

                        @Override
                        public void onUploadProgress(long bytesWritten, long contentLength, boolean done) {
                        }

                        @Override
                        public void onDownloadProgress(long bytesRead, long contentLength, boolean done) {
                        }
                    });
                } catch (Exception e) {
                    String errorMessage = "Problem during request building | " + String.valueOf(e.hashCode()) + ": " + e.getMessage();
                    callbackContext.error(errorMessage);
                }
            }
        });
    }
    final private void coverageRegionUriLineGroupsId(final JSONObject params, final CallbackContext callbackContext) {
        if (this.navitiaSdk == null) {
            callbackContext.error("NavitiaSDK is not instanciated");
            return;
        }

        final LineGroupsApi.CoverageRegionUriLineGroupsIdRequestBuilder lineGroupsRequestBuilder = this.navitiaSdk.lineGroupsApi.newCoverageRegionUriLineGroupsIdRequestBuilder();
        cordova.getThreadPool().execute(new Runnable() {
            @Override
            public void run() {
                try {
                    if (params.has("region") && (params.getString("region") != null) && (!params.getString("region").isEmpty()) ) {
                        // Param: region, Type: String
                        lineGroupsRequestBuilder.withRegion(stringStraightPass(params.getString("region")));
                    }
                    if (params.has("uri") && (params.getString("uri") != null) && (!params.getString("uri").isEmpty()) ) {
                        // Param: uri, Type: String
                        lineGroupsRequestBuilder.withUri(stringStraightPass(params.getString("uri")));
                    }
                    if (params.has("id") && (params.getString("id") != null) && (!params.getString("id").isEmpty()) ) {
                        // Param: id, Type: String
                        lineGroupsRequestBuilder.withId(stringStraightPass(params.getString("id")));
                    }
                    if (params.has("startPage") && (params.getString("startPage") != null) && (!params.getString("startPage").isEmpty()) ) {
                        // Param: startPage, Type: Integer
                        lineGroupsRequestBuilder.withStartPage(integerStraightPass(params.getInt("startPage")));
                    }
                    if (params.has("count") && (params.getString("count") != null) && (!params.getString("count").isEmpty()) ) {
                        // Param: count, Type: Integer
                        lineGroupsRequestBuilder.withCount(integerStraightPass(params.getInt("count")));
                    }
                    if (params.has("depth") && (params.getString("depth") != null) && (!params.getString("depth").isEmpty()) ) {
                        // Param: depth, Type: Integer
                        lineGroupsRequestBuilder.withDepth(integerStraightPass(params.getInt("depth")));
                    }
                    if (params.has("forbiddenId") && (params.getString("forbiddenId") != null) && (!params.getString("forbiddenId").isEmpty()) ) {
                        // Param: forbiddenId, Type: List
                        lineGroupsRequestBuilder.withForbiddenId(jsonArrayToStringList(params.getJSONArray("forbiddenId")));
                    }
                    if (params.has("forbiddenUris") && (params.getString("forbiddenUris") != null) && (!params.getString("forbiddenUris").isEmpty()) ) {
                        // Param: forbiddenUris, Type: List
                        lineGroupsRequestBuilder.withForbiddenUris(jsonArrayToStringList(params.getJSONArray("forbiddenUris")));
                    }
                    if (params.has("externalCode") && (params.getString("externalCode") != null) && (!params.getString("externalCode").isEmpty()) ) {
                        // Param: externalCode, Type: String
                        lineGroupsRequestBuilder.withExternalCode(stringStraightPass(params.getString("externalCode")));
                    }
                    if (params.has("headsign") && (params.getString("headsign") != null) && (!params.getString("headsign").isEmpty()) ) {
                        // Param: headsign, Type: String
                        lineGroupsRequestBuilder.withHeadsign(stringStraightPass(params.getString("headsign")));
                    }
                    if (params.has("showCodes") && (params.getString("showCodes") != null) && (!params.getString("showCodes").isEmpty()) ) {
                        // Param: showCodes, Type: Boolean
                        lineGroupsRequestBuilder.withShowCodes(booleanStraightPass(params.getBoolean("showCodes")));
                    }
                    if (params.has("odtLevel") && (params.getString("odtLevel") != null) && (!params.getString("odtLevel").isEmpty()) ) {
                        // Param: odtLevel, Type: String
                        lineGroupsRequestBuilder.withOdtLevel(stringStraightPass(params.getString("odtLevel")));
                    }
                    if (params.has("dataFreshness") && (params.getString("dataFreshness") != null) && (!params.getString("dataFreshness").isEmpty()) ) {
                        // Param: dataFreshness, Type: String
                        lineGroupsRequestBuilder.withDataFreshness(stringStraightPass(params.getString("dataFreshness")));
                    }
                    if (params.has("distance") && (params.getString("distance") != null) && (!params.getString("distance").isEmpty()) ) {
                        // Param: distance, Type: Integer
                        lineGroupsRequestBuilder.withDistance(integerStraightPass(params.getInt("distance")));
                    }
                    if (params.has("since") && (params.getString("since") != null) && (!params.getString("since").isEmpty()) ) {
                        // Param: since, Type: Date
                        lineGroupsRequestBuilder.withSince(stringToDateTime(params.getString("since")));
                    }
                    if (params.has("until") && (params.getString("until") != null) && (!params.getString("until").isEmpty()) ) {
                        // Param: until, Type: Date
                        lineGroupsRequestBuilder.withUntil(stringToDateTime(params.getString("until")));
                    }
                    if (params.has("disableGeojson") && (params.getString("disableGeojson") != null) && (!params.getString("disableGeojson").isEmpty()) ) {
                        // Param: disableGeojson, Type: Boolean
                        lineGroupsRequestBuilder.withDisableGeojson(booleanStraightPass(params.getBoolean("disableGeojson")));
                    }
                    if (params.has("disableDisruption") && (params.getString("disableDisruption") != null) && (!params.getString("disableDisruption").isEmpty()) ) {
                        // Param: disableDisruption, Type: Boolean
                        lineGroupsRequestBuilder.withDisableDisruption(booleanStraightPass(params.getBoolean("disableDisruption")));
                    }
                    if (params.has("tags") && (params.getString("tags") != null) && (!params.getString("tags").isEmpty()) ) {
                        // Param: tags, Type: List
                        lineGroupsRequestBuilder.withTags(jsonArrayToStringList(params.getJSONArray("tags")));
                    }
                    if (params.has("originalId") && (params.getString("originalId") != null) && (!params.getString("originalId").isEmpty()) ) {
                        // Param: originalId, Type: String
                        lineGroupsRequestBuilder.withOriginalId(stringStraightPass(params.getString("originalId")));
                    }
                    
                    lineGroupsRequestBuilder.rawGet(new ApiCallback<String>() {
                        @Override
                        public void onFailure(ApiException e, int statusCode, Map<String, List<String>> responseHeaders) {
                            callbackContext.error("Problem during request call | " + e.getMessage());
                        }

                        @Override
                        public void onSuccess(String result, int statusCode, Map<String, List<String>> responseHeaders) {
                            JSONObject jsonObject = null;
                            try {
                                jsonObject = new JSONObject(result);
                                callbackContext.success(jsonObject);
                            } catch (Exception e) {
                                String errorMessage = "Problem during response parsing | " + String.valueOf(e.hashCode()) + ": " + e.getMessage();
                                callbackContext.error(errorMessage);
                            }
                        }

                        @Override
                        public void onUploadProgress(long bytesWritten, long contentLength, boolean done) {
                        }

                        @Override
                        public void onDownloadProgress(long bytesRead, long contentLength, boolean done) {
                        }
                    });
                } catch (Exception e) {
                    String errorMessage = "Problem during request building | " + String.valueOf(e.hashCode()) + ": " + e.getMessage();
                    callbackContext.error(errorMessage);
                }
            }
        });
    }
    final private void lineGroups(final JSONObject params, final CallbackContext callbackContext) {
        if (this.navitiaSdk == null) {
            callbackContext.error("NavitiaSDK is not instanciated");
            return;
        }

        final LineGroupsApi.LineGroupsRequestBuilder lineGroupsRequestBuilder = this.navitiaSdk.lineGroupsApi.newLineGroupsRequestBuilder();
        cordova.getThreadPool().execute(new Runnable() {
            @Override
            public void run() {
                try {
                    if (params.has("externalCode") && (params.getString("externalCode") != null) && (!params.getString("externalCode").isEmpty()) ) {
                        // Param: externalCode, Type: String
                        lineGroupsRequestBuilder.withExternalCode(stringStraightPass(params.getString("externalCode")));
                    }
                    if (params.has("startPage") && (params.getString("startPage") != null) && (!params.getString("startPage").isEmpty()) ) {
                        // Param: startPage, Type: Integer
                        lineGroupsRequestBuilder.withStartPage(integerStraightPass(params.getInt("startPage")));
                    }
                    if (params.has("count") && (params.getString("count") != null) && (!params.getString("count").isEmpty()) ) {
                        // Param: count, Type: Integer
                        lineGroupsRequestBuilder.withCount(integerStraightPass(params.getInt("count")));
                    }
                    if (params.has("depth") && (params.getString("depth") != null) && (!params.getString("depth").isEmpty()) ) {
                        // Param: depth, Type: Integer
                        lineGroupsRequestBuilder.withDepth(integerStraightPass(params.getInt("depth")));
                    }
                    if (params.has("forbiddenId") && (params.getString("forbiddenId") != null) && (!params.getString("forbiddenId").isEmpty()) ) {
                        // Param: forbiddenId, Type: List
                        lineGroupsRequestBuilder.withForbiddenId(jsonArrayToStringList(params.getJSONArray("forbiddenId")));
                    }
                    if (params.has("forbiddenUris") && (params.getString("forbiddenUris") != null) && (!params.getString("forbiddenUris").isEmpty()) ) {
                        // Param: forbiddenUris, Type: List
                        lineGroupsRequestBuilder.withForbiddenUris(jsonArrayToStringList(params.getJSONArray("forbiddenUris")));
                    }
                    if (params.has("headsign") && (params.getString("headsign") != null) && (!params.getString("headsign").isEmpty()) ) {
                        // Param: headsign, Type: String
                        lineGroupsRequestBuilder.withHeadsign(stringStraightPass(params.getString("headsign")));
                    }
                    if (params.has("showCodes") && (params.getString("showCodes") != null) && (!params.getString("showCodes").isEmpty()) ) {
                        // Param: showCodes, Type: Boolean
                        lineGroupsRequestBuilder.withShowCodes(booleanStraightPass(params.getBoolean("showCodes")));
                    }
                    if (params.has("odtLevel") && (params.getString("odtLevel") != null) && (!params.getString("odtLevel").isEmpty()) ) {
                        // Param: odtLevel, Type: String
                        lineGroupsRequestBuilder.withOdtLevel(stringStraightPass(params.getString("odtLevel")));
                    }
                    if (params.has("dataFreshness") && (params.getString("dataFreshness") != null) && (!params.getString("dataFreshness").isEmpty()) ) {
                        // Param: dataFreshness, Type: String
                        lineGroupsRequestBuilder.withDataFreshness(stringStraightPass(params.getString("dataFreshness")));
                    }
                    if (params.has("distance") && (params.getString("distance") != null) && (!params.getString("distance").isEmpty()) ) {
                        // Param: distance, Type: Integer
                        lineGroupsRequestBuilder.withDistance(integerStraightPass(params.getInt("distance")));
                    }
                    if (params.has("since") && (params.getString("since") != null) && (!params.getString("since").isEmpty()) ) {
                        // Param: since, Type: Date
                        lineGroupsRequestBuilder.withSince(stringToDateTime(params.getString("since")));
                    }
                    if (params.has("until") && (params.getString("until") != null) && (!params.getString("until").isEmpty()) ) {
                        // Param: until, Type: Date
                        lineGroupsRequestBuilder.withUntil(stringToDateTime(params.getString("until")));
                    }
                    if (params.has("disableGeojson") && (params.getString("disableGeojson") != null) && (!params.getString("disableGeojson").isEmpty()) ) {
                        // Param: disableGeojson, Type: Boolean
                        lineGroupsRequestBuilder.withDisableGeojson(booleanStraightPass(params.getBoolean("disableGeojson")));
                    }
                    if (params.has("disableDisruption") && (params.getString("disableDisruption") != null) && (!params.getString("disableDisruption").isEmpty()) ) {
                        // Param: disableDisruption, Type: Boolean
                        lineGroupsRequestBuilder.withDisableDisruption(booleanStraightPass(params.getBoolean("disableDisruption")));
                    }
                    if (params.has("filter") && (params.getString("filter") != null) && (!params.getString("filter").isEmpty()) ) {
                        // Param: filter, Type: String
                        lineGroupsRequestBuilder.withFilter(stringStraightPass(params.getString("filter")));
                    }
                    if (params.has("tags") && (params.getString("tags") != null) && (!params.getString("tags").isEmpty()) ) {
                        // Param: tags, Type: List
                        lineGroupsRequestBuilder.withTags(jsonArrayToStringList(params.getJSONArray("tags")));
                    }
                    if (params.has("originalId") && (params.getString("originalId") != null) && (!params.getString("originalId").isEmpty()) ) {
                        // Param: originalId, Type: String
                        lineGroupsRequestBuilder.withOriginalId(stringStraightPass(params.getString("originalId")));
                    }
                    
                    lineGroupsRequestBuilder.rawGet(new ApiCallback<String>() {
                        @Override
                        public void onFailure(ApiException e, int statusCode, Map<String, List<String>> responseHeaders) {
                            callbackContext.error("Problem during request call | " + e.getMessage());
                        }

                        @Override
                        public void onSuccess(String result, int statusCode, Map<String, List<String>> responseHeaders) {
                            JSONObject jsonObject = null;
                            try {
                                jsonObject = new JSONObject(result);
                                callbackContext.success(jsonObject);
                            } catch (Exception e) {
                                String errorMessage = "Problem during response parsing | " + String.valueOf(e.hashCode()) + ": " + e.getMessage();
                                callbackContext.error(errorMessage);
                            }
                        }

                        @Override
                        public void onUploadProgress(long bytesWritten, long contentLength, boolean done) {
                        }

                        @Override
                        public void onDownloadProgress(long bytesRead, long contentLength, boolean done) {
                        }
                    });
                } catch (Exception e) {
                    String errorMessage = "Problem during request building | " + String.valueOf(e.hashCode()) + ": " + e.getMessage();
                    callbackContext.error(errorMessage);
                }
            }
        });
    }
    final private void coverageLonLatLineReports(final JSONObject params, final CallbackContext callbackContext) {
        if (this.navitiaSdk == null) {
            callbackContext.error("NavitiaSDK is not instanciated");
            return;
        }

        final LineReportsApi.CoverageLonLatLineReportsRequestBuilder lineReportsRequestBuilder = this.navitiaSdk.lineReportsApi.newCoverageLonLatLineReportsRequestBuilder();
        cordova.getThreadPool().execute(new Runnable() {
            @Override
            public void run() {
                try {
                    if (params.has("lat") && (params.getString("lat") != null) && (!params.getString("lat").isEmpty()) ) {
                        // Param: lat, Type: BigDecimal
                        lineReportsRequestBuilder.withLat(longToBigDecimal(params.getLong("lat")));
                    }
                    if (params.has("lon") && (params.getString("lon") != null) && (!params.getString("lon").isEmpty()) ) {
                        // Param: lon, Type: BigDecimal
                        lineReportsRequestBuilder.withLon(longToBigDecimal(params.getLong("lon")));
                    }
                    if (params.has("depth") && (params.getString("depth") != null) && (!params.getString("depth").isEmpty()) ) {
                        // Param: depth, Type: Integer
                        lineReportsRequestBuilder.withDepth(integerStraightPass(params.getInt("depth")));
                    }
                    if (params.has("count") && (params.getString("count") != null) && (!params.getString("count").isEmpty()) ) {
                        // Param: count, Type: Integer
                        lineReportsRequestBuilder.withCount(integerStraightPass(params.getInt("count")));
                    }
                    if (params.has("startPage") && (params.getString("startPage") != null) && (!params.getString("startPage").isEmpty()) ) {
                        // Param: startPage, Type: Integer
                        lineReportsRequestBuilder.withStartPage(integerStraightPass(params.getInt("startPage")));
                    }
                    if (params.has("forbiddenUris") && (params.getString("forbiddenUris") != null) && (!params.getString("forbiddenUris").isEmpty()) ) {
                        // Param: forbiddenUris, Type: List
                        lineReportsRequestBuilder.withForbiddenUris(jsonArrayToStringList(params.getJSONArray("forbiddenUris")));
                    }
                    if (params.has("disableGeojson") && (params.getString("disableGeojson") != null) && (!params.getString("disableGeojson").isEmpty()) ) {
                        // Param: disableGeojson, Type: Boolean
                        lineReportsRequestBuilder.withDisableGeojson(booleanStraightPass(params.getBoolean("disableGeojson")));
                    }
                    if (params.has("since") && (params.getString("since") != null) && (!params.getString("since").isEmpty()) ) {
                        // Param: since, Type: Date
                        lineReportsRequestBuilder.withSince(stringToDateTime(params.getString("since")));
                    }
                    if (params.has("until") && (params.getString("until") != null) && (!params.getString("until").isEmpty()) ) {
                        // Param: until, Type: Date
                        lineReportsRequestBuilder.withUntil(stringToDateTime(params.getString("until")));
                    }
                    if (params.has("filterStatus") && (params.getString("filterStatus") != null) && (!params.getString("filterStatus").isEmpty()) ) {
                        // Param: filterStatus, Type: List
                        lineReportsRequestBuilder.withFilterStatus(jsonArrayToStringList(params.getJSONArray("filterStatus")));
                    }
                    
                    lineReportsRequestBuilder.rawGet(new ApiCallback<String>() {
                        @Override
                        public void onFailure(ApiException e, int statusCode, Map<String, List<String>> responseHeaders) {
                            callbackContext.error("Problem during request call | " + e.getMessage());
                        }

                        @Override
                        public void onSuccess(String result, int statusCode, Map<String, List<String>> responseHeaders) {
                            JSONObject jsonObject = null;
                            try {
                                jsonObject = new JSONObject(result);
                                callbackContext.success(jsonObject);
                            } catch (Exception e) {
                                String errorMessage = "Problem during response parsing | " + String.valueOf(e.hashCode()) + ": " + e.getMessage();
                                callbackContext.error(errorMessage);
                            }
                        }

                        @Override
                        public void onUploadProgress(long bytesWritten, long contentLength, boolean done) {
                        }

                        @Override
                        public void onDownloadProgress(long bytesRead, long contentLength, boolean done) {
                        }
                    });
                } catch (Exception e) {
                    String errorMessage = "Problem during request building | " + String.valueOf(e.hashCode()) + ": " + e.getMessage();
                    callbackContext.error(errorMessage);
                }
            }
        });
    }
    final private void coverageLonLatUriLineReports(final JSONObject params, final CallbackContext callbackContext) {
        if (this.navitiaSdk == null) {
            callbackContext.error("NavitiaSDK is not instanciated");
            return;
        }

        final LineReportsApi.CoverageLonLatUriLineReportsRequestBuilder lineReportsRequestBuilder = this.navitiaSdk.lineReportsApi.newCoverageLonLatUriLineReportsRequestBuilder();
        cordova.getThreadPool().execute(new Runnable() {
            @Override
            public void run() {
                try {
                    if (params.has("lat") && (params.getString("lat") != null) && (!params.getString("lat").isEmpty()) ) {
                        // Param: lat, Type: BigDecimal
                        lineReportsRequestBuilder.withLat(longToBigDecimal(params.getLong("lat")));
                    }
                    if (params.has("lon") && (params.getString("lon") != null) && (!params.getString("lon").isEmpty()) ) {
                        // Param: lon, Type: BigDecimal
                        lineReportsRequestBuilder.withLon(longToBigDecimal(params.getLong("lon")));
                    }
                    if (params.has("uri") && (params.getString("uri") != null) && (!params.getString("uri").isEmpty()) ) {
                        // Param: uri, Type: String
                        lineReportsRequestBuilder.withUri(stringStraightPass(params.getString("uri")));
                    }
                    if (params.has("depth") && (params.getString("depth") != null) && (!params.getString("depth").isEmpty()) ) {
                        // Param: depth, Type: Integer
                        lineReportsRequestBuilder.withDepth(integerStraightPass(params.getInt("depth")));
                    }
                    if (params.has("count") && (params.getString("count") != null) && (!params.getString("count").isEmpty()) ) {
                        // Param: count, Type: Integer
                        lineReportsRequestBuilder.withCount(integerStraightPass(params.getInt("count")));
                    }
                    if (params.has("startPage") && (params.getString("startPage") != null) && (!params.getString("startPage").isEmpty()) ) {
                        // Param: startPage, Type: Integer
                        lineReportsRequestBuilder.withStartPage(integerStraightPass(params.getInt("startPage")));
                    }
                    if (params.has("forbiddenUris") && (params.getString("forbiddenUris") != null) && (!params.getString("forbiddenUris").isEmpty()) ) {
                        // Param: forbiddenUris, Type: List
                        lineReportsRequestBuilder.withForbiddenUris(jsonArrayToStringList(params.getJSONArray("forbiddenUris")));
                    }
                    if (params.has("disableGeojson") && (params.getString("disableGeojson") != null) && (!params.getString("disableGeojson").isEmpty()) ) {
                        // Param: disableGeojson, Type: Boolean
                        lineReportsRequestBuilder.withDisableGeojson(booleanStraightPass(params.getBoolean("disableGeojson")));
                    }
                    if (params.has("since") && (params.getString("since") != null) && (!params.getString("since").isEmpty()) ) {
                        // Param: since, Type: Date
                        lineReportsRequestBuilder.withSince(stringToDateTime(params.getString("since")));
                    }
                    if (params.has("until") && (params.getString("until") != null) && (!params.getString("until").isEmpty()) ) {
                        // Param: until, Type: Date
                        lineReportsRequestBuilder.withUntil(stringToDateTime(params.getString("until")));
                    }
                    if (params.has("filterStatus") && (params.getString("filterStatus") != null) && (!params.getString("filterStatus").isEmpty()) ) {
                        // Param: filterStatus, Type: List
                        lineReportsRequestBuilder.withFilterStatus(jsonArrayToStringList(params.getJSONArray("filterStatus")));
                    }
                    
                    lineReportsRequestBuilder.rawGet(new ApiCallback<String>() {
                        @Override
                        public void onFailure(ApiException e, int statusCode, Map<String, List<String>> responseHeaders) {
                            callbackContext.error("Problem during request call | " + e.getMessage());
                        }

                        @Override
                        public void onSuccess(String result, int statusCode, Map<String, List<String>> responseHeaders) {
                            JSONObject jsonObject = null;
                            try {
                                jsonObject = new JSONObject(result);
                                callbackContext.success(jsonObject);
                            } catch (Exception e) {
                                String errorMessage = "Problem during response parsing | " + String.valueOf(e.hashCode()) + ": " + e.getMessage();
                                callbackContext.error(errorMessage);
                            }
                        }

                        @Override
                        public void onUploadProgress(long bytesWritten, long contentLength, boolean done) {
                        }

                        @Override
                        public void onDownloadProgress(long bytesRead, long contentLength, boolean done) {
                        }
                    });
                } catch (Exception e) {
                    String errorMessage = "Problem during request building | " + String.valueOf(e.hashCode()) + ": " + e.getMessage();
                    callbackContext.error(errorMessage);
                }
            }
        });
    }
    final private void coverageRegionLineReports(final JSONObject params, final CallbackContext callbackContext) {
        if (this.navitiaSdk == null) {
            callbackContext.error("NavitiaSDK is not instanciated");
            return;
        }

        final LineReportsApi.CoverageRegionLineReportsRequestBuilder lineReportsRequestBuilder = this.navitiaSdk.lineReportsApi.newCoverageRegionLineReportsRequestBuilder();
        cordova.getThreadPool().execute(new Runnable() {
            @Override
            public void run() {
                try {
                    if (params.has("region") && (params.getString("region") != null) && (!params.getString("region").isEmpty()) ) {
                        // Param: region, Type: String
                        lineReportsRequestBuilder.withRegion(stringStraightPass(params.getString("region")));
                    }
                    if (params.has("depth") && (params.getString("depth") != null) && (!params.getString("depth").isEmpty()) ) {
                        // Param: depth, Type: Integer
                        lineReportsRequestBuilder.withDepth(integerStraightPass(params.getInt("depth")));
                    }
                    if (params.has("count") && (params.getString("count") != null) && (!params.getString("count").isEmpty()) ) {
                        // Param: count, Type: Integer
                        lineReportsRequestBuilder.withCount(integerStraightPass(params.getInt("count")));
                    }
                    if (params.has("startPage") && (params.getString("startPage") != null) && (!params.getString("startPage").isEmpty()) ) {
                        // Param: startPage, Type: Integer
                        lineReportsRequestBuilder.withStartPage(integerStraightPass(params.getInt("startPage")));
                    }
                    if (params.has("forbiddenUris") && (params.getString("forbiddenUris") != null) && (!params.getString("forbiddenUris").isEmpty()) ) {
                        // Param: forbiddenUris, Type: List
                        lineReportsRequestBuilder.withForbiddenUris(jsonArrayToStringList(params.getJSONArray("forbiddenUris")));
                    }
                    if (params.has("disableGeojson") && (params.getString("disableGeojson") != null) && (!params.getString("disableGeojson").isEmpty()) ) {
                        // Param: disableGeojson, Type: Boolean
                        lineReportsRequestBuilder.withDisableGeojson(booleanStraightPass(params.getBoolean("disableGeojson")));
                    }
                    if (params.has("since") && (params.getString("since") != null) && (!params.getString("since").isEmpty()) ) {
                        // Param: since, Type: Date
                        lineReportsRequestBuilder.withSince(stringToDateTime(params.getString("since")));
                    }
                    if (params.has("until") && (params.getString("until") != null) && (!params.getString("until").isEmpty()) ) {
                        // Param: until, Type: Date
                        lineReportsRequestBuilder.withUntil(stringToDateTime(params.getString("until")));
                    }
                    if (params.has("filterStatus") && (params.getString("filterStatus") != null) && (!params.getString("filterStatus").isEmpty()) ) {
                        // Param: filterStatus, Type: List
                        lineReportsRequestBuilder.withFilterStatus(jsonArrayToStringList(params.getJSONArray("filterStatus")));
                    }
                    
                    lineReportsRequestBuilder.rawGet(new ApiCallback<String>() {
                        @Override
                        public void onFailure(ApiException e, int statusCode, Map<String, List<String>> responseHeaders) {
                            callbackContext.error("Problem during request call | " + e.getMessage());
                        }

                        @Override
                        public void onSuccess(String result, int statusCode, Map<String, List<String>> responseHeaders) {
                            JSONObject jsonObject = null;
                            try {
                                jsonObject = new JSONObject(result);
                                callbackContext.success(jsonObject);
                            } catch (Exception e) {
                                String errorMessage = "Problem during response parsing | " + String.valueOf(e.hashCode()) + ": " + e.getMessage();
                                callbackContext.error(errorMessage);
                            }
                        }

                        @Override
                        public void onUploadProgress(long bytesWritten, long contentLength, boolean done) {
                        }

                        @Override
                        public void onDownloadProgress(long bytesRead, long contentLength, boolean done) {
                        }
                    });
                } catch (Exception e) {
                    String errorMessage = "Problem during request building | " + String.valueOf(e.hashCode()) + ": " + e.getMessage();
                    callbackContext.error(errorMessage);
                }
            }
        });
    }
    final private void coverageRegionUriLineReports(final JSONObject params, final CallbackContext callbackContext) {
        if (this.navitiaSdk == null) {
            callbackContext.error("NavitiaSDK is not instanciated");
            return;
        }

        final LineReportsApi.CoverageRegionUriLineReportsRequestBuilder lineReportsRequestBuilder = this.navitiaSdk.lineReportsApi.newCoverageRegionUriLineReportsRequestBuilder();
        cordova.getThreadPool().execute(new Runnable() {
            @Override
            public void run() {
                try {
                    if (params.has("region") && (params.getString("region") != null) && (!params.getString("region").isEmpty()) ) {
                        // Param: region, Type: String
                        lineReportsRequestBuilder.withRegion(stringStraightPass(params.getString("region")));
                    }
                    if (params.has("uri") && (params.getString("uri") != null) && (!params.getString("uri").isEmpty()) ) {
                        // Param: uri, Type: String
                        lineReportsRequestBuilder.withUri(stringStraightPass(params.getString("uri")));
                    }
                    if (params.has("depth") && (params.getString("depth") != null) && (!params.getString("depth").isEmpty()) ) {
                        // Param: depth, Type: Integer
                        lineReportsRequestBuilder.withDepth(integerStraightPass(params.getInt("depth")));
                    }
                    if (params.has("count") && (params.getString("count") != null) && (!params.getString("count").isEmpty()) ) {
                        // Param: count, Type: Integer
                        lineReportsRequestBuilder.withCount(integerStraightPass(params.getInt("count")));
                    }
                    if (params.has("startPage") && (params.getString("startPage") != null) && (!params.getString("startPage").isEmpty()) ) {
                        // Param: startPage, Type: Integer
                        lineReportsRequestBuilder.withStartPage(integerStraightPass(params.getInt("startPage")));
                    }
                    if (params.has("forbiddenUris") && (params.getString("forbiddenUris") != null) && (!params.getString("forbiddenUris").isEmpty()) ) {
                        // Param: forbiddenUris, Type: List
                        lineReportsRequestBuilder.withForbiddenUris(jsonArrayToStringList(params.getJSONArray("forbiddenUris")));
                    }
                    if (params.has("disableGeojson") && (params.getString("disableGeojson") != null) && (!params.getString("disableGeojson").isEmpty()) ) {
                        // Param: disableGeojson, Type: Boolean
                        lineReportsRequestBuilder.withDisableGeojson(booleanStraightPass(params.getBoolean("disableGeojson")));
                    }
                    if (params.has("since") && (params.getString("since") != null) && (!params.getString("since").isEmpty()) ) {
                        // Param: since, Type: Date
                        lineReportsRequestBuilder.withSince(stringToDateTime(params.getString("since")));
                    }
                    if (params.has("until") && (params.getString("until") != null) && (!params.getString("until").isEmpty()) ) {
                        // Param: until, Type: Date
                        lineReportsRequestBuilder.withUntil(stringToDateTime(params.getString("until")));
                    }
                    if (params.has("filterStatus") && (params.getString("filterStatus") != null) && (!params.getString("filterStatus").isEmpty()) ) {
                        // Param: filterStatus, Type: List
                        lineReportsRequestBuilder.withFilterStatus(jsonArrayToStringList(params.getJSONArray("filterStatus")));
                    }
                    
                    lineReportsRequestBuilder.rawGet(new ApiCallback<String>() {
                        @Override
                        public void onFailure(ApiException e, int statusCode, Map<String, List<String>> responseHeaders) {
                            callbackContext.error("Problem during request call | " + e.getMessage());
                        }

                        @Override
                        public void onSuccess(String result, int statusCode, Map<String, List<String>> responseHeaders) {
                            JSONObject jsonObject = null;
                            try {
                                jsonObject = new JSONObject(result);
                                callbackContext.success(jsonObject);
                            } catch (Exception e) {
                                String errorMessage = "Problem during response parsing | " + String.valueOf(e.hashCode()) + ": " + e.getMessage();
                                callbackContext.error(errorMessage);
                            }
                        }

                        @Override
                        public void onUploadProgress(long bytesWritten, long contentLength, boolean done) {
                        }

                        @Override
                        public void onDownloadProgress(long bytesRead, long contentLength, boolean done) {
                        }
                    });
                } catch (Exception e) {
                    String errorMessage = "Problem during request building | " + String.valueOf(e.hashCode()) + ": " + e.getMessage();
                    callbackContext.error(errorMessage);
                }
            }
        });
    }
    final private void coverageLonLatLines(final JSONObject params, final CallbackContext callbackContext) {
        if (this.navitiaSdk == null) {
            callbackContext.error("NavitiaSDK is not instanciated");
            return;
        }

        final LinesApi.CoverageLonLatLinesRequestBuilder linesRequestBuilder = this.navitiaSdk.linesApi.newCoverageLonLatLinesRequestBuilder();
        cordova.getThreadPool().execute(new Runnable() {
            @Override
            public void run() {
                try {
                    if (params.has("lat") && (params.getString("lat") != null) && (!params.getString("lat").isEmpty()) ) {
                        // Param: lat, Type: BigDecimal
                        linesRequestBuilder.withLat(longToBigDecimal(params.getLong("lat")));
                    }
                    if (params.has("lon") && (params.getString("lon") != null) && (!params.getString("lon").isEmpty()) ) {
                        // Param: lon, Type: BigDecimal
                        linesRequestBuilder.withLon(longToBigDecimal(params.getLong("lon")));
                    }
                    if (params.has("startPage") && (params.getString("startPage") != null) && (!params.getString("startPage").isEmpty()) ) {
                        // Param: startPage, Type: Integer
                        linesRequestBuilder.withStartPage(integerStraightPass(params.getInt("startPage")));
                    }
                    if (params.has("count") && (params.getString("count") != null) && (!params.getString("count").isEmpty()) ) {
                        // Param: count, Type: Integer
                        linesRequestBuilder.withCount(integerStraightPass(params.getInt("count")));
                    }
                    if (params.has("depth") && (params.getString("depth") != null) && (!params.getString("depth").isEmpty()) ) {
                        // Param: depth, Type: Integer
                        linesRequestBuilder.withDepth(integerStraightPass(params.getInt("depth")));
                    }
                    if (params.has("forbiddenId") && (params.getString("forbiddenId") != null) && (!params.getString("forbiddenId").isEmpty()) ) {
                        // Param: forbiddenId, Type: List
                        linesRequestBuilder.withForbiddenId(jsonArrayToStringList(params.getJSONArray("forbiddenId")));
                    }
                    if (params.has("forbiddenUris") && (params.getString("forbiddenUris") != null) && (!params.getString("forbiddenUris").isEmpty()) ) {
                        // Param: forbiddenUris, Type: List
                        linesRequestBuilder.withForbiddenUris(jsonArrayToStringList(params.getJSONArray("forbiddenUris")));
                    }
                    if (params.has("externalCode") && (params.getString("externalCode") != null) && (!params.getString("externalCode").isEmpty()) ) {
                        // Param: externalCode, Type: String
                        linesRequestBuilder.withExternalCode(stringStraightPass(params.getString("externalCode")));
                    }
                    if (params.has("headsign") && (params.getString("headsign") != null) && (!params.getString("headsign").isEmpty()) ) {
                        // Param: headsign, Type: String
                        linesRequestBuilder.withHeadsign(stringStraightPass(params.getString("headsign")));
                    }
                    if (params.has("showCodes") && (params.getString("showCodes") != null) && (!params.getString("showCodes").isEmpty()) ) {
                        // Param: showCodes, Type: Boolean
                        linesRequestBuilder.withShowCodes(booleanStraightPass(params.getBoolean("showCodes")));
                    }
                    if (params.has("odtLevel") && (params.getString("odtLevel") != null) && (!params.getString("odtLevel").isEmpty()) ) {
                        // Param: odtLevel, Type: String
                        linesRequestBuilder.withOdtLevel(stringStraightPass(params.getString("odtLevel")));
                    }
                    if (params.has("dataFreshness") && (params.getString("dataFreshness") != null) && (!params.getString("dataFreshness").isEmpty()) ) {
                        // Param: dataFreshness, Type: String
                        linesRequestBuilder.withDataFreshness(stringStraightPass(params.getString("dataFreshness")));
                    }
                    if (params.has("distance") && (params.getString("distance") != null) && (!params.getString("distance").isEmpty()) ) {
                        // Param: distance, Type: Integer
                        linesRequestBuilder.withDistance(integerStraightPass(params.getInt("distance")));
                    }
                    if (params.has("since") && (params.getString("since") != null) && (!params.getString("since").isEmpty()) ) {
                        // Param: since, Type: Date
                        linesRequestBuilder.withSince(stringToDateTime(params.getString("since")));
                    }
                    if (params.has("until") && (params.getString("until") != null) && (!params.getString("until").isEmpty()) ) {
                        // Param: until, Type: Date
                        linesRequestBuilder.withUntil(stringToDateTime(params.getString("until")));
                    }
                    if (params.has("disableGeojson") && (params.getString("disableGeojson") != null) && (!params.getString("disableGeojson").isEmpty()) ) {
                        // Param: disableGeojson, Type: Boolean
                        linesRequestBuilder.withDisableGeojson(booleanStraightPass(params.getBoolean("disableGeojson")));
                    }
                    if (params.has("disableDisruption") && (params.getString("disableDisruption") != null) && (!params.getString("disableDisruption").isEmpty()) ) {
                        // Param: disableDisruption, Type: Boolean
                        linesRequestBuilder.withDisableDisruption(booleanStraightPass(params.getBoolean("disableDisruption")));
                    }
                    if (params.has("filter") && (params.getString("filter") != null) && (!params.getString("filter").isEmpty()) ) {
                        // Param: filter, Type: String
                        linesRequestBuilder.withFilter(stringStraightPass(params.getString("filter")));
                    }
                    if (params.has("tags") && (params.getString("tags") != null) && (!params.getString("tags").isEmpty()) ) {
                        // Param: tags, Type: List
                        linesRequestBuilder.withTags(jsonArrayToStringList(params.getJSONArray("tags")));
                    }
                    if (params.has("originalId") && (params.getString("originalId") != null) && (!params.getString("originalId").isEmpty()) ) {
                        // Param: originalId, Type: String
                        linesRequestBuilder.withOriginalId(stringStraightPass(params.getString("originalId")));
                    }
                    
                    linesRequestBuilder.rawGet(new ApiCallback<String>() {
                        @Override
                        public void onFailure(ApiException e, int statusCode, Map<String, List<String>> responseHeaders) {
                            callbackContext.error("Problem during request call | " + e.getMessage());
                        }

                        @Override
                        public void onSuccess(String result, int statusCode, Map<String, List<String>> responseHeaders) {
                            JSONObject jsonObject = null;
                            try {
                                jsonObject = new JSONObject(result);
                                callbackContext.success(jsonObject);
                            } catch (Exception e) {
                                String errorMessage = "Problem during response parsing | " + String.valueOf(e.hashCode()) + ": " + e.getMessage();
                                callbackContext.error(errorMessage);
                            }
                        }

                        @Override
                        public void onUploadProgress(long bytesWritten, long contentLength, boolean done) {
                        }

                        @Override
                        public void onDownloadProgress(long bytesRead, long contentLength, boolean done) {
                        }
                    });
                } catch (Exception e) {
                    String errorMessage = "Problem during request building | " + String.valueOf(e.hashCode()) + ": " + e.getMessage();
                    callbackContext.error(errorMessage);
                }
            }
        });
    }
    final private void coverageLonLatLinesId(final JSONObject params, final CallbackContext callbackContext) {
        if (this.navitiaSdk == null) {
            callbackContext.error("NavitiaSDK is not instanciated");
            return;
        }

        final LinesApi.CoverageLonLatLinesIdRequestBuilder linesRequestBuilder = this.navitiaSdk.linesApi.newCoverageLonLatLinesIdRequestBuilder();
        cordova.getThreadPool().execute(new Runnable() {
            @Override
            public void run() {
                try {
                    if (params.has("lat") && (params.getString("lat") != null) && (!params.getString("lat").isEmpty()) ) {
                        // Param: lat, Type: BigDecimal
                        linesRequestBuilder.withLat(longToBigDecimal(params.getLong("lat")));
                    }
                    if (params.has("lon") && (params.getString("lon") != null) && (!params.getString("lon").isEmpty()) ) {
                        // Param: lon, Type: BigDecimal
                        linesRequestBuilder.withLon(longToBigDecimal(params.getLong("lon")));
                    }
                    if (params.has("id") && (params.getString("id") != null) && (!params.getString("id").isEmpty()) ) {
                        // Param: id, Type: String
                        linesRequestBuilder.withId(stringStraightPass(params.getString("id")));
                    }
                    if (params.has("startPage") && (params.getString("startPage") != null) && (!params.getString("startPage").isEmpty()) ) {
                        // Param: startPage, Type: Integer
                        linesRequestBuilder.withStartPage(integerStraightPass(params.getInt("startPage")));
                    }
                    if (params.has("count") && (params.getString("count") != null) && (!params.getString("count").isEmpty()) ) {
                        // Param: count, Type: Integer
                        linesRequestBuilder.withCount(integerStraightPass(params.getInt("count")));
                    }
                    if (params.has("depth") && (params.getString("depth") != null) && (!params.getString("depth").isEmpty()) ) {
                        // Param: depth, Type: Integer
                        linesRequestBuilder.withDepth(integerStraightPass(params.getInt("depth")));
                    }
                    if (params.has("forbiddenId") && (params.getString("forbiddenId") != null) && (!params.getString("forbiddenId").isEmpty()) ) {
                        // Param: forbiddenId, Type: List
                        linesRequestBuilder.withForbiddenId(jsonArrayToStringList(params.getJSONArray("forbiddenId")));
                    }
                    if (params.has("forbiddenUris") && (params.getString("forbiddenUris") != null) && (!params.getString("forbiddenUris").isEmpty()) ) {
                        // Param: forbiddenUris, Type: List
                        linesRequestBuilder.withForbiddenUris(jsonArrayToStringList(params.getJSONArray("forbiddenUris")));
                    }
                    if (params.has("externalCode") && (params.getString("externalCode") != null) && (!params.getString("externalCode").isEmpty()) ) {
                        // Param: externalCode, Type: String
                        linesRequestBuilder.withExternalCode(stringStraightPass(params.getString("externalCode")));
                    }
                    if (params.has("headsign") && (params.getString("headsign") != null) && (!params.getString("headsign").isEmpty()) ) {
                        // Param: headsign, Type: String
                        linesRequestBuilder.withHeadsign(stringStraightPass(params.getString("headsign")));
                    }
                    if (params.has("showCodes") && (params.getString("showCodes") != null) && (!params.getString("showCodes").isEmpty()) ) {
                        // Param: showCodes, Type: Boolean
                        linesRequestBuilder.withShowCodes(booleanStraightPass(params.getBoolean("showCodes")));
                    }
                    if (params.has("odtLevel") && (params.getString("odtLevel") != null) && (!params.getString("odtLevel").isEmpty()) ) {
                        // Param: odtLevel, Type: String
                        linesRequestBuilder.withOdtLevel(stringStraightPass(params.getString("odtLevel")));
                    }
                    if (params.has("dataFreshness") && (params.getString("dataFreshness") != null) && (!params.getString("dataFreshness").isEmpty()) ) {
                        // Param: dataFreshness, Type: String
                        linesRequestBuilder.withDataFreshness(stringStraightPass(params.getString("dataFreshness")));
                    }
                    if (params.has("distance") && (params.getString("distance") != null) && (!params.getString("distance").isEmpty()) ) {
                        // Param: distance, Type: Integer
                        linesRequestBuilder.withDistance(integerStraightPass(params.getInt("distance")));
                    }
                    if (params.has("since") && (params.getString("since") != null) && (!params.getString("since").isEmpty()) ) {
                        // Param: since, Type: Date
                        linesRequestBuilder.withSince(stringToDateTime(params.getString("since")));
                    }
                    if (params.has("until") && (params.getString("until") != null) && (!params.getString("until").isEmpty()) ) {
                        // Param: until, Type: Date
                        linesRequestBuilder.withUntil(stringToDateTime(params.getString("until")));
                    }
                    if (params.has("disableGeojson") && (params.getString("disableGeojson") != null) && (!params.getString("disableGeojson").isEmpty()) ) {
                        // Param: disableGeojson, Type: Boolean
                        linesRequestBuilder.withDisableGeojson(booleanStraightPass(params.getBoolean("disableGeojson")));
                    }
                    if (params.has("disableDisruption") && (params.getString("disableDisruption") != null) && (!params.getString("disableDisruption").isEmpty()) ) {
                        // Param: disableDisruption, Type: Boolean
                        linesRequestBuilder.withDisableDisruption(booleanStraightPass(params.getBoolean("disableDisruption")));
                    }
                    if (params.has("tags") && (params.getString("tags") != null) && (!params.getString("tags").isEmpty()) ) {
                        // Param: tags, Type: List
                        linesRequestBuilder.withTags(jsonArrayToStringList(params.getJSONArray("tags")));
                    }
                    if (params.has("originalId") && (params.getString("originalId") != null) && (!params.getString("originalId").isEmpty()) ) {
                        // Param: originalId, Type: String
                        linesRequestBuilder.withOriginalId(stringStraightPass(params.getString("originalId")));
                    }
                    
                    linesRequestBuilder.rawGet(new ApiCallback<String>() {
                        @Override
                        public void onFailure(ApiException e, int statusCode, Map<String, List<String>> responseHeaders) {
                            callbackContext.error("Problem during request call | " + e.getMessage());
                        }

                        @Override
                        public void onSuccess(String result, int statusCode, Map<String, List<String>> responseHeaders) {
                            JSONObject jsonObject = null;
                            try {
                                jsonObject = new JSONObject(result);
                                callbackContext.success(jsonObject);
                            } catch (Exception e) {
                                String errorMessage = "Problem during response parsing | " + String.valueOf(e.hashCode()) + ": " + e.getMessage();
                                callbackContext.error(errorMessage);
                            }
                        }

                        @Override
                        public void onUploadProgress(long bytesWritten, long contentLength, boolean done) {
                        }

                        @Override
                        public void onDownloadProgress(long bytesRead, long contentLength, boolean done) {
                        }
                    });
                } catch (Exception e) {
                    String errorMessage = "Problem during request building | " + String.valueOf(e.hashCode()) + ": " + e.getMessage();
                    callbackContext.error(errorMessage);
                }
            }
        });
    }
    final private void coverageLonLatUriLines(final JSONObject params, final CallbackContext callbackContext) {
        if (this.navitiaSdk == null) {
            callbackContext.error("NavitiaSDK is not instanciated");
            return;
        }

        final LinesApi.CoverageLonLatUriLinesRequestBuilder linesRequestBuilder = this.navitiaSdk.linesApi.newCoverageLonLatUriLinesRequestBuilder();
        cordova.getThreadPool().execute(new Runnable() {
            @Override
            public void run() {
                try {
                    if (params.has("lat") && (params.getString("lat") != null) && (!params.getString("lat").isEmpty()) ) {
                        // Param: lat, Type: BigDecimal
                        linesRequestBuilder.withLat(longToBigDecimal(params.getLong("lat")));
                    }
                    if (params.has("lon") && (params.getString("lon") != null) && (!params.getString("lon").isEmpty()) ) {
                        // Param: lon, Type: BigDecimal
                        linesRequestBuilder.withLon(longToBigDecimal(params.getLong("lon")));
                    }
                    if (params.has("uri") && (params.getString("uri") != null) && (!params.getString("uri").isEmpty()) ) {
                        // Param: uri, Type: String
                        linesRequestBuilder.withUri(stringStraightPass(params.getString("uri")));
                    }
                    if (params.has("startPage") && (params.getString("startPage") != null) && (!params.getString("startPage").isEmpty()) ) {
                        // Param: startPage, Type: Integer
                        linesRequestBuilder.withStartPage(integerStraightPass(params.getInt("startPage")));
                    }
                    if (params.has("count") && (params.getString("count") != null) && (!params.getString("count").isEmpty()) ) {
                        // Param: count, Type: Integer
                        linesRequestBuilder.withCount(integerStraightPass(params.getInt("count")));
                    }
                    if (params.has("depth") && (params.getString("depth") != null) && (!params.getString("depth").isEmpty()) ) {
                        // Param: depth, Type: Integer
                        linesRequestBuilder.withDepth(integerStraightPass(params.getInt("depth")));
                    }
                    if (params.has("forbiddenId") && (params.getString("forbiddenId") != null) && (!params.getString("forbiddenId").isEmpty()) ) {
                        // Param: forbiddenId, Type: List
                        linesRequestBuilder.withForbiddenId(jsonArrayToStringList(params.getJSONArray("forbiddenId")));
                    }
                    if (params.has("forbiddenUris") && (params.getString("forbiddenUris") != null) && (!params.getString("forbiddenUris").isEmpty()) ) {
                        // Param: forbiddenUris, Type: List
                        linesRequestBuilder.withForbiddenUris(jsonArrayToStringList(params.getJSONArray("forbiddenUris")));
                    }
                    if (params.has("externalCode") && (params.getString("externalCode") != null) && (!params.getString("externalCode").isEmpty()) ) {
                        // Param: externalCode, Type: String
                        linesRequestBuilder.withExternalCode(stringStraightPass(params.getString("externalCode")));
                    }
                    if (params.has("headsign") && (params.getString("headsign") != null) && (!params.getString("headsign").isEmpty()) ) {
                        // Param: headsign, Type: String
                        linesRequestBuilder.withHeadsign(stringStraightPass(params.getString("headsign")));
                    }
                    if (params.has("showCodes") && (params.getString("showCodes") != null) && (!params.getString("showCodes").isEmpty()) ) {
                        // Param: showCodes, Type: Boolean
                        linesRequestBuilder.withShowCodes(booleanStraightPass(params.getBoolean("showCodes")));
                    }
                    if (params.has("odtLevel") && (params.getString("odtLevel") != null) && (!params.getString("odtLevel").isEmpty()) ) {
                        // Param: odtLevel, Type: String
                        linesRequestBuilder.withOdtLevel(stringStraightPass(params.getString("odtLevel")));
                    }
                    if (params.has("dataFreshness") && (params.getString("dataFreshness") != null) && (!params.getString("dataFreshness").isEmpty()) ) {
                        // Param: dataFreshness, Type: String
                        linesRequestBuilder.withDataFreshness(stringStraightPass(params.getString("dataFreshness")));
                    }
                    if (params.has("distance") && (params.getString("distance") != null) && (!params.getString("distance").isEmpty()) ) {
                        // Param: distance, Type: Integer
                        linesRequestBuilder.withDistance(integerStraightPass(params.getInt("distance")));
                    }
                    if (params.has("since") && (params.getString("since") != null) && (!params.getString("since").isEmpty()) ) {
                        // Param: since, Type: Date
                        linesRequestBuilder.withSince(stringToDateTime(params.getString("since")));
                    }
                    if (params.has("until") && (params.getString("until") != null) && (!params.getString("until").isEmpty()) ) {
                        // Param: until, Type: Date
                        linesRequestBuilder.withUntil(stringToDateTime(params.getString("until")));
                    }
                    if (params.has("disableGeojson") && (params.getString("disableGeojson") != null) && (!params.getString("disableGeojson").isEmpty()) ) {
                        // Param: disableGeojson, Type: Boolean
                        linesRequestBuilder.withDisableGeojson(booleanStraightPass(params.getBoolean("disableGeojson")));
                    }
                    if (params.has("disableDisruption") && (params.getString("disableDisruption") != null) && (!params.getString("disableDisruption").isEmpty()) ) {
                        // Param: disableDisruption, Type: Boolean
                        linesRequestBuilder.withDisableDisruption(booleanStraightPass(params.getBoolean("disableDisruption")));
                    }
                    if (params.has("filter") && (params.getString("filter") != null) && (!params.getString("filter").isEmpty()) ) {
                        // Param: filter, Type: String
                        linesRequestBuilder.withFilter(stringStraightPass(params.getString("filter")));
                    }
                    if (params.has("tags") && (params.getString("tags") != null) && (!params.getString("tags").isEmpty()) ) {
                        // Param: tags, Type: List
                        linesRequestBuilder.withTags(jsonArrayToStringList(params.getJSONArray("tags")));
                    }
                    if (params.has("originalId") && (params.getString("originalId") != null) && (!params.getString("originalId").isEmpty()) ) {
                        // Param: originalId, Type: String
                        linesRequestBuilder.withOriginalId(stringStraightPass(params.getString("originalId")));
                    }
                    
                    linesRequestBuilder.rawGet(new ApiCallback<String>() {
                        @Override
                        public void onFailure(ApiException e, int statusCode, Map<String, List<String>> responseHeaders) {
                            callbackContext.error("Problem during request call | " + e.getMessage());
                        }

                        @Override
                        public void onSuccess(String result, int statusCode, Map<String, List<String>> responseHeaders) {
                            JSONObject jsonObject = null;
                            try {
                                jsonObject = new JSONObject(result);
                                callbackContext.success(jsonObject);
                            } catch (Exception e) {
                                String errorMessage = "Problem during response parsing | " + String.valueOf(e.hashCode()) + ": " + e.getMessage();
                                callbackContext.error(errorMessage);
                            }
                        }

                        @Override
                        public void onUploadProgress(long bytesWritten, long contentLength, boolean done) {
                        }

                        @Override
                        public void onDownloadProgress(long bytesRead, long contentLength, boolean done) {
                        }
                    });
                } catch (Exception e) {
                    String errorMessage = "Problem during request building | " + String.valueOf(e.hashCode()) + ": " + e.getMessage();
                    callbackContext.error(errorMessage);
                }
            }
        });
    }
    final private void coverageLonLatUriLinesId(final JSONObject params, final CallbackContext callbackContext) {
        if (this.navitiaSdk == null) {
            callbackContext.error("NavitiaSDK is not instanciated");
            return;
        }

        final LinesApi.CoverageLonLatUriLinesIdRequestBuilder linesRequestBuilder = this.navitiaSdk.linesApi.newCoverageLonLatUriLinesIdRequestBuilder();
        cordova.getThreadPool().execute(new Runnable() {
            @Override
            public void run() {
                try {
                    if (params.has("lat") && (params.getString("lat") != null) && (!params.getString("lat").isEmpty()) ) {
                        // Param: lat, Type: BigDecimal
                        linesRequestBuilder.withLat(longToBigDecimal(params.getLong("lat")));
                    }
                    if (params.has("lon") && (params.getString("lon") != null) && (!params.getString("lon").isEmpty()) ) {
                        // Param: lon, Type: BigDecimal
                        linesRequestBuilder.withLon(longToBigDecimal(params.getLong("lon")));
                    }
                    if (params.has("uri") && (params.getString("uri") != null) && (!params.getString("uri").isEmpty()) ) {
                        // Param: uri, Type: String
                        linesRequestBuilder.withUri(stringStraightPass(params.getString("uri")));
                    }
                    if (params.has("id") && (params.getString("id") != null) && (!params.getString("id").isEmpty()) ) {
                        // Param: id, Type: String
                        linesRequestBuilder.withId(stringStraightPass(params.getString("id")));
                    }
                    if (params.has("startPage") && (params.getString("startPage") != null) && (!params.getString("startPage").isEmpty()) ) {
                        // Param: startPage, Type: Integer
                        linesRequestBuilder.withStartPage(integerStraightPass(params.getInt("startPage")));
                    }
                    if (params.has("count") && (params.getString("count") != null) && (!params.getString("count").isEmpty()) ) {
                        // Param: count, Type: Integer
                        linesRequestBuilder.withCount(integerStraightPass(params.getInt("count")));
                    }
                    if (params.has("depth") && (params.getString("depth") != null) && (!params.getString("depth").isEmpty()) ) {
                        // Param: depth, Type: Integer
                        linesRequestBuilder.withDepth(integerStraightPass(params.getInt("depth")));
                    }
                    if (params.has("forbiddenId") && (params.getString("forbiddenId") != null) && (!params.getString("forbiddenId").isEmpty()) ) {
                        // Param: forbiddenId, Type: List
                        linesRequestBuilder.withForbiddenId(jsonArrayToStringList(params.getJSONArray("forbiddenId")));
                    }
                    if (params.has("forbiddenUris") && (params.getString("forbiddenUris") != null) && (!params.getString("forbiddenUris").isEmpty()) ) {
                        // Param: forbiddenUris, Type: List
                        linesRequestBuilder.withForbiddenUris(jsonArrayToStringList(params.getJSONArray("forbiddenUris")));
                    }
                    if (params.has("externalCode") && (params.getString("externalCode") != null) && (!params.getString("externalCode").isEmpty()) ) {
                        // Param: externalCode, Type: String
                        linesRequestBuilder.withExternalCode(stringStraightPass(params.getString("externalCode")));
                    }
                    if (params.has("headsign") && (params.getString("headsign") != null) && (!params.getString("headsign").isEmpty()) ) {
                        // Param: headsign, Type: String
                        linesRequestBuilder.withHeadsign(stringStraightPass(params.getString("headsign")));
                    }
                    if (params.has("showCodes") && (params.getString("showCodes") != null) && (!params.getString("showCodes").isEmpty()) ) {
                        // Param: showCodes, Type: Boolean
                        linesRequestBuilder.withShowCodes(booleanStraightPass(params.getBoolean("showCodes")));
                    }
                    if (params.has("odtLevel") && (params.getString("odtLevel") != null) && (!params.getString("odtLevel").isEmpty()) ) {
                        // Param: odtLevel, Type: String
                        linesRequestBuilder.withOdtLevel(stringStraightPass(params.getString("odtLevel")));
                    }
                    if (params.has("dataFreshness") && (params.getString("dataFreshness") != null) && (!params.getString("dataFreshness").isEmpty()) ) {
                        // Param: dataFreshness, Type: String
                        linesRequestBuilder.withDataFreshness(stringStraightPass(params.getString("dataFreshness")));
                    }
                    if (params.has("distance") && (params.getString("distance") != null) && (!params.getString("distance").isEmpty()) ) {
                        // Param: distance, Type: Integer
                        linesRequestBuilder.withDistance(integerStraightPass(params.getInt("distance")));
                    }
                    if (params.has("since") && (params.getString("since") != null) && (!params.getString("since").isEmpty()) ) {
                        // Param: since, Type: Date
                        linesRequestBuilder.withSince(stringToDateTime(params.getString("since")));
                    }
                    if (params.has("until") && (params.getString("until") != null) && (!params.getString("until").isEmpty()) ) {
                        // Param: until, Type: Date
                        linesRequestBuilder.withUntil(stringToDateTime(params.getString("until")));
                    }
                    if (params.has("disableGeojson") && (params.getString("disableGeojson") != null) && (!params.getString("disableGeojson").isEmpty()) ) {
                        // Param: disableGeojson, Type: Boolean
                        linesRequestBuilder.withDisableGeojson(booleanStraightPass(params.getBoolean("disableGeojson")));
                    }
                    if (params.has("disableDisruption") && (params.getString("disableDisruption") != null) && (!params.getString("disableDisruption").isEmpty()) ) {
                        // Param: disableDisruption, Type: Boolean
                        linesRequestBuilder.withDisableDisruption(booleanStraightPass(params.getBoolean("disableDisruption")));
                    }
                    if (params.has("tags") && (params.getString("tags") != null) && (!params.getString("tags").isEmpty()) ) {
                        // Param: tags, Type: List
                        linesRequestBuilder.withTags(jsonArrayToStringList(params.getJSONArray("tags")));
                    }
                    if (params.has("originalId") && (params.getString("originalId") != null) && (!params.getString("originalId").isEmpty()) ) {
                        // Param: originalId, Type: String
                        linesRequestBuilder.withOriginalId(stringStraightPass(params.getString("originalId")));
                    }
                    
                    linesRequestBuilder.rawGet(new ApiCallback<String>() {
                        @Override
                        public void onFailure(ApiException e, int statusCode, Map<String, List<String>> responseHeaders) {
                            callbackContext.error("Problem during request call | " + e.getMessage());
                        }

                        @Override
                        public void onSuccess(String result, int statusCode, Map<String, List<String>> responseHeaders) {
                            JSONObject jsonObject = null;
                            try {
                                jsonObject = new JSONObject(result);
                                callbackContext.success(jsonObject);
                            } catch (Exception e) {
                                String errorMessage = "Problem during response parsing | " + String.valueOf(e.hashCode()) + ": " + e.getMessage();
                                callbackContext.error(errorMessage);
                            }
                        }

                        @Override
                        public void onUploadProgress(long bytesWritten, long contentLength, boolean done) {
                        }

                        @Override
                        public void onDownloadProgress(long bytesRead, long contentLength, boolean done) {
                        }
                    });
                } catch (Exception e) {
                    String errorMessage = "Problem during request building | " + String.valueOf(e.hashCode()) + ": " + e.getMessage();
                    callbackContext.error(errorMessage);
                }
            }
        });
    }
    final private void coverageRegionLines(final JSONObject params, final CallbackContext callbackContext) {
        if (this.navitiaSdk == null) {
            callbackContext.error("NavitiaSDK is not instanciated");
            return;
        }

        final LinesApi.CoverageRegionLinesRequestBuilder linesRequestBuilder = this.navitiaSdk.linesApi.newCoverageRegionLinesRequestBuilder();
        cordova.getThreadPool().execute(new Runnable() {
            @Override
            public void run() {
                try {
                    if (params.has("region") && (params.getString("region") != null) && (!params.getString("region").isEmpty()) ) {
                        // Param: region, Type: String
                        linesRequestBuilder.withRegion(stringStraightPass(params.getString("region")));
                    }
                    if (params.has("startPage") && (params.getString("startPage") != null) && (!params.getString("startPage").isEmpty()) ) {
                        // Param: startPage, Type: Integer
                        linesRequestBuilder.withStartPage(integerStraightPass(params.getInt("startPage")));
                    }
                    if (params.has("count") && (params.getString("count") != null) && (!params.getString("count").isEmpty()) ) {
                        // Param: count, Type: Integer
                        linesRequestBuilder.withCount(integerStraightPass(params.getInt("count")));
                    }
                    if (params.has("depth") && (params.getString("depth") != null) && (!params.getString("depth").isEmpty()) ) {
                        // Param: depth, Type: Integer
                        linesRequestBuilder.withDepth(integerStraightPass(params.getInt("depth")));
                    }
                    if (params.has("forbiddenId") && (params.getString("forbiddenId") != null) && (!params.getString("forbiddenId").isEmpty()) ) {
                        // Param: forbiddenId, Type: List
                        linesRequestBuilder.withForbiddenId(jsonArrayToStringList(params.getJSONArray("forbiddenId")));
                    }
                    if (params.has("forbiddenUris") && (params.getString("forbiddenUris") != null) && (!params.getString("forbiddenUris").isEmpty()) ) {
                        // Param: forbiddenUris, Type: List
                        linesRequestBuilder.withForbiddenUris(jsonArrayToStringList(params.getJSONArray("forbiddenUris")));
                    }
                    if (params.has("externalCode") && (params.getString("externalCode") != null) && (!params.getString("externalCode").isEmpty()) ) {
                        // Param: externalCode, Type: String
                        linesRequestBuilder.withExternalCode(stringStraightPass(params.getString("externalCode")));
                    }
                    if (params.has("headsign") && (params.getString("headsign") != null) && (!params.getString("headsign").isEmpty()) ) {
                        // Param: headsign, Type: String
                        linesRequestBuilder.withHeadsign(stringStraightPass(params.getString("headsign")));
                    }
                    if (params.has("showCodes") && (params.getString("showCodes") != null) && (!params.getString("showCodes").isEmpty()) ) {
                        // Param: showCodes, Type: Boolean
                        linesRequestBuilder.withShowCodes(booleanStraightPass(params.getBoolean("showCodes")));
                    }
                    if (params.has("odtLevel") && (params.getString("odtLevel") != null) && (!params.getString("odtLevel").isEmpty()) ) {
                        // Param: odtLevel, Type: String
                        linesRequestBuilder.withOdtLevel(stringStraightPass(params.getString("odtLevel")));
                    }
                    if (params.has("dataFreshness") && (params.getString("dataFreshness") != null) && (!params.getString("dataFreshness").isEmpty()) ) {
                        // Param: dataFreshness, Type: String
                        linesRequestBuilder.withDataFreshness(stringStraightPass(params.getString("dataFreshness")));
                    }
                    if (params.has("distance") && (params.getString("distance") != null) && (!params.getString("distance").isEmpty()) ) {
                        // Param: distance, Type: Integer
                        linesRequestBuilder.withDistance(integerStraightPass(params.getInt("distance")));
                    }
                    if (params.has("since") && (params.getString("since") != null) && (!params.getString("since").isEmpty()) ) {
                        // Param: since, Type: Date
                        linesRequestBuilder.withSince(stringToDateTime(params.getString("since")));
                    }
                    if (params.has("until") && (params.getString("until") != null) && (!params.getString("until").isEmpty()) ) {
                        // Param: until, Type: Date
                        linesRequestBuilder.withUntil(stringToDateTime(params.getString("until")));
                    }
                    if (params.has("disableGeojson") && (params.getString("disableGeojson") != null) && (!params.getString("disableGeojson").isEmpty()) ) {
                        // Param: disableGeojson, Type: Boolean
                        linesRequestBuilder.withDisableGeojson(booleanStraightPass(params.getBoolean("disableGeojson")));
                    }
                    if (params.has("disableDisruption") && (params.getString("disableDisruption") != null) && (!params.getString("disableDisruption").isEmpty()) ) {
                        // Param: disableDisruption, Type: Boolean
                        linesRequestBuilder.withDisableDisruption(booleanStraightPass(params.getBoolean("disableDisruption")));
                    }
                    if (params.has("filter") && (params.getString("filter") != null) && (!params.getString("filter").isEmpty()) ) {
                        // Param: filter, Type: String
                        linesRequestBuilder.withFilter(stringStraightPass(params.getString("filter")));
                    }
                    if (params.has("tags") && (params.getString("tags") != null) && (!params.getString("tags").isEmpty()) ) {
                        // Param: tags, Type: List
                        linesRequestBuilder.withTags(jsonArrayToStringList(params.getJSONArray("tags")));
                    }
                    if (params.has("originalId") && (params.getString("originalId") != null) && (!params.getString("originalId").isEmpty()) ) {
                        // Param: originalId, Type: String
                        linesRequestBuilder.withOriginalId(stringStraightPass(params.getString("originalId")));
                    }
                    
                    linesRequestBuilder.rawGet(new ApiCallback<String>() {
                        @Override
                        public void onFailure(ApiException e, int statusCode, Map<String, List<String>> responseHeaders) {
                            callbackContext.error("Problem during request call | " + e.getMessage());
                        }

                        @Override
                        public void onSuccess(String result, int statusCode, Map<String, List<String>> responseHeaders) {
                            JSONObject jsonObject = null;
                            try {
                                jsonObject = new JSONObject(result);
                                callbackContext.success(jsonObject);
                            } catch (Exception e) {
                                String errorMessage = "Problem during response parsing | " + String.valueOf(e.hashCode()) + ": " + e.getMessage();
                                callbackContext.error(errorMessage);
                            }
                        }

                        @Override
                        public void onUploadProgress(long bytesWritten, long contentLength, boolean done) {
                        }

                        @Override
                        public void onDownloadProgress(long bytesRead, long contentLength, boolean done) {
                        }
                    });
                } catch (Exception e) {
                    String errorMessage = "Problem during request building | " + String.valueOf(e.hashCode()) + ": " + e.getMessage();
                    callbackContext.error(errorMessage);
                }
            }
        });
    }
    final private void coverageRegionLinesId(final JSONObject params, final CallbackContext callbackContext) {
        if (this.navitiaSdk == null) {
            callbackContext.error("NavitiaSDK is not instanciated");
            return;
        }

        final LinesApi.CoverageRegionLinesIdRequestBuilder linesRequestBuilder = this.navitiaSdk.linesApi.newCoverageRegionLinesIdRequestBuilder();
        cordova.getThreadPool().execute(new Runnable() {
            @Override
            public void run() {
                try {
                    if (params.has("region") && (params.getString("region") != null) && (!params.getString("region").isEmpty()) ) {
                        // Param: region, Type: String
                        linesRequestBuilder.withRegion(stringStraightPass(params.getString("region")));
                    }
                    if (params.has("id") && (params.getString("id") != null) && (!params.getString("id").isEmpty()) ) {
                        // Param: id, Type: String
                        linesRequestBuilder.withId(stringStraightPass(params.getString("id")));
                    }
                    if (params.has("startPage") && (params.getString("startPage") != null) && (!params.getString("startPage").isEmpty()) ) {
                        // Param: startPage, Type: Integer
                        linesRequestBuilder.withStartPage(integerStraightPass(params.getInt("startPage")));
                    }
                    if (params.has("count") && (params.getString("count") != null) && (!params.getString("count").isEmpty()) ) {
                        // Param: count, Type: Integer
                        linesRequestBuilder.withCount(integerStraightPass(params.getInt("count")));
                    }
                    if (params.has("depth") && (params.getString("depth") != null) && (!params.getString("depth").isEmpty()) ) {
                        // Param: depth, Type: Integer
                        linesRequestBuilder.withDepth(integerStraightPass(params.getInt("depth")));
                    }
                    if (params.has("forbiddenId") && (params.getString("forbiddenId") != null) && (!params.getString("forbiddenId").isEmpty()) ) {
                        // Param: forbiddenId, Type: List
                        linesRequestBuilder.withForbiddenId(jsonArrayToStringList(params.getJSONArray("forbiddenId")));
                    }
                    if (params.has("forbiddenUris") && (params.getString("forbiddenUris") != null) && (!params.getString("forbiddenUris").isEmpty()) ) {
                        // Param: forbiddenUris, Type: List
                        linesRequestBuilder.withForbiddenUris(jsonArrayToStringList(params.getJSONArray("forbiddenUris")));
                    }
                    if (params.has("externalCode") && (params.getString("externalCode") != null) && (!params.getString("externalCode").isEmpty()) ) {
                        // Param: externalCode, Type: String
                        linesRequestBuilder.withExternalCode(stringStraightPass(params.getString("externalCode")));
                    }
                    if (params.has("headsign") && (params.getString("headsign") != null) && (!params.getString("headsign").isEmpty()) ) {
                        // Param: headsign, Type: String
                        linesRequestBuilder.withHeadsign(stringStraightPass(params.getString("headsign")));
                    }
                    if (params.has("showCodes") && (params.getString("showCodes") != null) && (!params.getString("showCodes").isEmpty()) ) {
                        // Param: showCodes, Type: Boolean
                        linesRequestBuilder.withShowCodes(booleanStraightPass(params.getBoolean("showCodes")));
                    }
                    if (params.has("odtLevel") && (params.getString("odtLevel") != null) && (!params.getString("odtLevel").isEmpty()) ) {
                        // Param: odtLevel, Type: String
                        linesRequestBuilder.withOdtLevel(stringStraightPass(params.getString("odtLevel")));
                    }
                    if (params.has("dataFreshness") && (params.getString("dataFreshness") != null) && (!params.getString("dataFreshness").isEmpty()) ) {
                        // Param: dataFreshness, Type: String
                        linesRequestBuilder.withDataFreshness(stringStraightPass(params.getString("dataFreshness")));
                    }
                    if (params.has("distance") && (params.getString("distance") != null) && (!params.getString("distance").isEmpty()) ) {
                        // Param: distance, Type: Integer
                        linesRequestBuilder.withDistance(integerStraightPass(params.getInt("distance")));
                    }
                    if (params.has("since") && (params.getString("since") != null) && (!params.getString("since").isEmpty()) ) {
                        // Param: since, Type: Date
                        linesRequestBuilder.withSince(stringToDateTime(params.getString("since")));
                    }
                    if (params.has("until") && (params.getString("until") != null) && (!params.getString("until").isEmpty()) ) {
                        // Param: until, Type: Date
                        linesRequestBuilder.withUntil(stringToDateTime(params.getString("until")));
                    }
                    if (params.has("disableGeojson") && (params.getString("disableGeojson") != null) && (!params.getString("disableGeojson").isEmpty()) ) {
                        // Param: disableGeojson, Type: Boolean
                        linesRequestBuilder.withDisableGeojson(booleanStraightPass(params.getBoolean("disableGeojson")));
                    }
                    if (params.has("disableDisruption") && (params.getString("disableDisruption") != null) && (!params.getString("disableDisruption").isEmpty()) ) {
                        // Param: disableDisruption, Type: Boolean
                        linesRequestBuilder.withDisableDisruption(booleanStraightPass(params.getBoolean("disableDisruption")));
                    }
                    if (params.has("tags") && (params.getString("tags") != null) && (!params.getString("tags").isEmpty()) ) {
                        // Param: tags, Type: List
                        linesRequestBuilder.withTags(jsonArrayToStringList(params.getJSONArray("tags")));
                    }
                    if (params.has("originalId") && (params.getString("originalId") != null) && (!params.getString("originalId").isEmpty()) ) {
                        // Param: originalId, Type: String
                        linesRequestBuilder.withOriginalId(stringStraightPass(params.getString("originalId")));
                    }
                    
                    linesRequestBuilder.rawGet(new ApiCallback<String>() {
                        @Override
                        public void onFailure(ApiException e, int statusCode, Map<String, List<String>> responseHeaders) {
                            callbackContext.error("Problem during request call | " + e.getMessage());
                        }

                        @Override
                        public void onSuccess(String result, int statusCode, Map<String, List<String>> responseHeaders) {
                            JSONObject jsonObject = null;
                            try {
                                jsonObject = new JSONObject(result);
                                callbackContext.success(jsonObject);
                            } catch (Exception e) {
                                String errorMessage = "Problem during response parsing | " + String.valueOf(e.hashCode()) + ": " + e.getMessage();
                                callbackContext.error(errorMessage);
                            }
                        }

                        @Override
                        public void onUploadProgress(long bytesWritten, long contentLength, boolean done) {
                        }

                        @Override
                        public void onDownloadProgress(long bytesRead, long contentLength, boolean done) {
                        }
                    });
                } catch (Exception e) {
                    String errorMessage = "Problem during request building | " + String.valueOf(e.hashCode()) + ": " + e.getMessage();
                    callbackContext.error(errorMessage);
                }
            }
        });
    }
    final private void coverageRegionUriLines(final JSONObject params, final CallbackContext callbackContext) {
        if (this.navitiaSdk == null) {
            callbackContext.error("NavitiaSDK is not instanciated");
            return;
        }

        final LinesApi.CoverageRegionUriLinesRequestBuilder linesRequestBuilder = this.navitiaSdk.linesApi.newCoverageRegionUriLinesRequestBuilder();
        cordova.getThreadPool().execute(new Runnable() {
            @Override
            public void run() {
                try {
                    if (params.has("region") && (params.getString("region") != null) && (!params.getString("region").isEmpty()) ) {
                        // Param: region, Type: String
                        linesRequestBuilder.withRegion(stringStraightPass(params.getString("region")));
                    }
                    if (params.has("uri") && (params.getString("uri") != null) && (!params.getString("uri").isEmpty()) ) {
                        // Param: uri, Type: String
                        linesRequestBuilder.withUri(stringStraightPass(params.getString("uri")));
                    }
                    if (params.has("startPage") && (params.getString("startPage") != null) && (!params.getString("startPage").isEmpty()) ) {
                        // Param: startPage, Type: Integer
                        linesRequestBuilder.withStartPage(integerStraightPass(params.getInt("startPage")));
                    }
                    if (params.has("count") && (params.getString("count") != null) && (!params.getString("count").isEmpty()) ) {
                        // Param: count, Type: Integer
                        linesRequestBuilder.withCount(integerStraightPass(params.getInt("count")));
                    }
                    if (params.has("depth") && (params.getString("depth") != null) && (!params.getString("depth").isEmpty()) ) {
                        // Param: depth, Type: Integer
                        linesRequestBuilder.withDepth(integerStraightPass(params.getInt("depth")));
                    }
                    if (params.has("forbiddenId") && (params.getString("forbiddenId") != null) && (!params.getString("forbiddenId").isEmpty()) ) {
                        // Param: forbiddenId, Type: List
                        linesRequestBuilder.withForbiddenId(jsonArrayToStringList(params.getJSONArray("forbiddenId")));
                    }
                    if (params.has("forbiddenUris") && (params.getString("forbiddenUris") != null) && (!params.getString("forbiddenUris").isEmpty()) ) {
                        // Param: forbiddenUris, Type: List
                        linesRequestBuilder.withForbiddenUris(jsonArrayToStringList(params.getJSONArray("forbiddenUris")));
                    }
                    if (params.has("externalCode") && (params.getString("externalCode") != null) && (!params.getString("externalCode").isEmpty()) ) {
                        // Param: externalCode, Type: String
                        linesRequestBuilder.withExternalCode(stringStraightPass(params.getString("externalCode")));
                    }
                    if (params.has("headsign") && (params.getString("headsign") != null) && (!params.getString("headsign").isEmpty()) ) {
                        // Param: headsign, Type: String
                        linesRequestBuilder.withHeadsign(stringStraightPass(params.getString("headsign")));
                    }
                    if (params.has("showCodes") && (params.getString("showCodes") != null) && (!params.getString("showCodes").isEmpty()) ) {
                        // Param: showCodes, Type: Boolean
                        linesRequestBuilder.withShowCodes(booleanStraightPass(params.getBoolean("showCodes")));
                    }
                    if (params.has("odtLevel") && (params.getString("odtLevel") != null) && (!params.getString("odtLevel").isEmpty()) ) {
                        // Param: odtLevel, Type: String
                        linesRequestBuilder.withOdtLevel(stringStraightPass(params.getString("odtLevel")));
                    }
                    if (params.has("dataFreshness") && (params.getString("dataFreshness") != null) && (!params.getString("dataFreshness").isEmpty()) ) {
                        // Param: dataFreshness, Type: String
                        linesRequestBuilder.withDataFreshness(stringStraightPass(params.getString("dataFreshness")));
                    }
                    if (params.has("distance") && (params.getString("distance") != null) && (!params.getString("distance").isEmpty()) ) {
                        // Param: distance, Type: Integer
                        linesRequestBuilder.withDistance(integerStraightPass(params.getInt("distance")));
                    }
                    if (params.has("since") && (params.getString("since") != null) && (!params.getString("since").isEmpty()) ) {
                        // Param: since, Type: Date
                        linesRequestBuilder.withSince(stringToDateTime(params.getString("since")));
                    }
                    if (params.has("until") && (params.getString("until") != null) && (!params.getString("until").isEmpty()) ) {
                        // Param: until, Type: Date
                        linesRequestBuilder.withUntil(stringToDateTime(params.getString("until")));
                    }
                    if (params.has("disableGeojson") && (params.getString("disableGeojson") != null) && (!params.getString("disableGeojson").isEmpty()) ) {
                        // Param: disableGeojson, Type: Boolean
                        linesRequestBuilder.withDisableGeojson(booleanStraightPass(params.getBoolean("disableGeojson")));
                    }
                    if (params.has("disableDisruption") && (params.getString("disableDisruption") != null) && (!params.getString("disableDisruption").isEmpty()) ) {
                        // Param: disableDisruption, Type: Boolean
                        linesRequestBuilder.withDisableDisruption(booleanStraightPass(params.getBoolean("disableDisruption")));
                    }
                    if (params.has("filter") && (params.getString("filter") != null) && (!params.getString("filter").isEmpty()) ) {
                        // Param: filter, Type: String
                        linesRequestBuilder.withFilter(stringStraightPass(params.getString("filter")));
                    }
                    if (params.has("tags") && (params.getString("tags") != null) && (!params.getString("tags").isEmpty()) ) {
                        // Param: tags, Type: List
                        linesRequestBuilder.withTags(jsonArrayToStringList(params.getJSONArray("tags")));
                    }
                    if (params.has("originalId") && (params.getString("originalId") != null) && (!params.getString("originalId").isEmpty()) ) {
                        // Param: originalId, Type: String
                        linesRequestBuilder.withOriginalId(stringStraightPass(params.getString("originalId")));
                    }
                    
                    linesRequestBuilder.rawGet(new ApiCallback<String>() {
                        @Override
                        public void onFailure(ApiException e, int statusCode, Map<String, List<String>> responseHeaders) {
                            callbackContext.error("Problem during request call | " + e.getMessage());
                        }

                        @Override
                        public void onSuccess(String result, int statusCode, Map<String, List<String>> responseHeaders) {
                            JSONObject jsonObject = null;
                            try {
                                jsonObject = new JSONObject(result);
                                callbackContext.success(jsonObject);
                            } catch (Exception e) {
                                String errorMessage = "Problem during response parsing | " + String.valueOf(e.hashCode()) + ": " + e.getMessage();
                                callbackContext.error(errorMessage);
                            }
                        }

                        @Override
                        public void onUploadProgress(long bytesWritten, long contentLength, boolean done) {
                        }

                        @Override
                        public void onDownloadProgress(long bytesRead, long contentLength, boolean done) {
                        }
                    });
                } catch (Exception e) {
                    String errorMessage = "Problem during request building | " + String.valueOf(e.hashCode()) + ": " + e.getMessage();
                    callbackContext.error(errorMessage);
                }
            }
        });
    }
    final private void coverageRegionUriLinesId(final JSONObject params, final CallbackContext callbackContext) {
        if (this.navitiaSdk == null) {
            callbackContext.error("NavitiaSDK is not instanciated");
            return;
        }

        final LinesApi.CoverageRegionUriLinesIdRequestBuilder linesRequestBuilder = this.navitiaSdk.linesApi.newCoverageRegionUriLinesIdRequestBuilder();
        cordova.getThreadPool().execute(new Runnable() {
            @Override
            public void run() {
                try {
                    if (params.has("region") && (params.getString("region") != null) && (!params.getString("region").isEmpty()) ) {
                        // Param: region, Type: String
                        linesRequestBuilder.withRegion(stringStraightPass(params.getString("region")));
                    }
                    if (params.has("uri") && (params.getString("uri") != null) && (!params.getString("uri").isEmpty()) ) {
                        // Param: uri, Type: String
                        linesRequestBuilder.withUri(stringStraightPass(params.getString("uri")));
                    }
                    if (params.has("id") && (params.getString("id") != null) && (!params.getString("id").isEmpty()) ) {
                        // Param: id, Type: String
                        linesRequestBuilder.withId(stringStraightPass(params.getString("id")));
                    }
                    if (params.has("startPage") && (params.getString("startPage") != null) && (!params.getString("startPage").isEmpty()) ) {
                        // Param: startPage, Type: Integer
                        linesRequestBuilder.withStartPage(integerStraightPass(params.getInt("startPage")));
                    }
                    if (params.has("count") && (params.getString("count") != null) && (!params.getString("count").isEmpty()) ) {
                        // Param: count, Type: Integer
                        linesRequestBuilder.withCount(integerStraightPass(params.getInt("count")));
                    }
                    if (params.has("depth") && (params.getString("depth") != null) && (!params.getString("depth").isEmpty()) ) {
                        // Param: depth, Type: Integer
                        linesRequestBuilder.withDepth(integerStraightPass(params.getInt("depth")));
                    }
                    if (params.has("forbiddenId") && (params.getString("forbiddenId") != null) && (!params.getString("forbiddenId").isEmpty()) ) {
                        // Param: forbiddenId, Type: List
                        linesRequestBuilder.withForbiddenId(jsonArrayToStringList(params.getJSONArray("forbiddenId")));
                    }
                    if (params.has("forbiddenUris") && (params.getString("forbiddenUris") != null) && (!params.getString("forbiddenUris").isEmpty()) ) {
                        // Param: forbiddenUris, Type: List
                        linesRequestBuilder.withForbiddenUris(jsonArrayToStringList(params.getJSONArray("forbiddenUris")));
                    }
                    if (params.has("externalCode") && (params.getString("externalCode") != null) && (!params.getString("externalCode").isEmpty()) ) {
                        // Param: externalCode, Type: String
                        linesRequestBuilder.withExternalCode(stringStraightPass(params.getString("externalCode")));
                    }
                    if (params.has("headsign") && (params.getString("headsign") != null) && (!params.getString("headsign").isEmpty()) ) {
                        // Param: headsign, Type: String
                        linesRequestBuilder.withHeadsign(stringStraightPass(params.getString("headsign")));
                    }
                    if (params.has("showCodes") && (params.getString("showCodes") != null) && (!params.getString("showCodes").isEmpty()) ) {
                        // Param: showCodes, Type: Boolean
                        linesRequestBuilder.withShowCodes(booleanStraightPass(params.getBoolean("showCodes")));
                    }
                    if (params.has("odtLevel") && (params.getString("odtLevel") != null) && (!params.getString("odtLevel").isEmpty()) ) {
                        // Param: odtLevel, Type: String
                        linesRequestBuilder.withOdtLevel(stringStraightPass(params.getString("odtLevel")));
                    }
                    if (params.has("dataFreshness") && (params.getString("dataFreshness") != null) && (!params.getString("dataFreshness").isEmpty()) ) {
                        // Param: dataFreshness, Type: String
                        linesRequestBuilder.withDataFreshness(stringStraightPass(params.getString("dataFreshness")));
                    }
                    if (params.has("distance") && (params.getString("distance") != null) && (!params.getString("distance").isEmpty()) ) {
                        // Param: distance, Type: Integer
                        linesRequestBuilder.withDistance(integerStraightPass(params.getInt("distance")));
                    }
                    if (params.has("since") && (params.getString("since") != null) && (!params.getString("since").isEmpty()) ) {
                        // Param: since, Type: Date
                        linesRequestBuilder.withSince(stringToDateTime(params.getString("since")));
                    }
                    if (params.has("until") && (params.getString("until") != null) && (!params.getString("until").isEmpty()) ) {
                        // Param: until, Type: Date
                        linesRequestBuilder.withUntil(stringToDateTime(params.getString("until")));
                    }
                    if (params.has("disableGeojson") && (params.getString("disableGeojson") != null) && (!params.getString("disableGeojson").isEmpty()) ) {
                        // Param: disableGeojson, Type: Boolean
                        linesRequestBuilder.withDisableGeojson(booleanStraightPass(params.getBoolean("disableGeojson")));
                    }
                    if (params.has("disableDisruption") && (params.getString("disableDisruption") != null) && (!params.getString("disableDisruption").isEmpty()) ) {
                        // Param: disableDisruption, Type: Boolean
                        linesRequestBuilder.withDisableDisruption(booleanStraightPass(params.getBoolean("disableDisruption")));
                    }
                    if (params.has("tags") && (params.getString("tags") != null) && (!params.getString("tags").isEmpty()) ) {
                        // Param: tags, Type: List
                        linesRequestBuilder.withTags(jsonArrayToStringList(params.getJSONArray("tags")));
                    }
                    if (params.has("originalId") && (params.getString("originalId") != null) && (!params.getString("originalId").isEmpty()) ) {
                        // Param: originalId, Type: String
                        linesRequestBuilder.withOriginalId(stringStraightPass(params.getString("originalId")));
                    }
                    
                    linesRequestBuilder.rawGet(new ApiCallback<String>() {
                        @Override
                        public void onFailure(ApiException e, int statusCode, Map<String, List<String>> responseHeaders) {
                            callbackContext.error("Problem during request call | " + e.getMessage());
                        }

                        @Override
                        public void onSuccess(String result, int statusCode, Map<String, List<String>> responseHeaders) {
                            JSONObject jsonObject = null;
                            try {
                                jsonObject = new JSONObject(result);
                                callbackContext.success(jsonObject);
                            } catch (Exception e) {
                                String errorMessage = "Problem during response parsing | " + String.valueOf(e.hashCode()) + ": " + e.getMessage();
                                callbackContext.error(errorMessage);
                            }
                        }

                        @Override
                        public void onUploadProgress(long bytesWritten, long contentLength, boolean done) {
                        }

                        @Override
                        public void onDownloadProgress(long bytesRead, long contentLength, boolean done) {
                        }
                    });
                } catch (Exception e) {
                    String errorMessage = "Problem during request building | " + String.valueOf(e.hashCode()) + ": " + e.getMessage();
                    callbackContext.error(errorMessage);
                }
            }
        });
    }
    final private void lines(final JSONObject params, final CallbackContext callbackContext) {
        if (this.navitiaSdk == null) {
            callbackContext.error("NavitiaSDK is not instanciated");
            return;
        }

        final LinesApi.LinesRequestBuilder linesRequestBuilder = this.navitiaSdk.linesApi.newLinesRequestBuilder();
        cordova.getThreadPool().execute(new Runnable() {
            @Override
            public void run() {
                try {
                    if (params.has("externalCode") && (params.getString("externalCode") != null) && (!params.getString("externalCode").isEmpty()) ) {
                        // Param: externalCode, Type: String
                        linesRequestBuilder.withExternalCode(stringStraightPass(params.getString("externalCode")));
                    }
                    if (params.has("startPage") && (params.getString("startPage") != null) && (!params.getString("startPage").isEmpty()) ) {
                        // Param: startPage, Type: Integer
                        linesRequestBuilder.withStartPage(integerStraightPass(params.getInt("startPage")));
                    }
                    if (params.has("count") && (params.getString("count") != null) && (!params.getString("count").isEmpty()) ) {
                        // Param: count, Type: Integer
                        linesRequestBuilder.withCount(integerStraightPass(params.getInt("count")));
                    }
                    if (params.has("depth") && (params.getString("depth") != null) && (!params.getString("depth").isEmpty()) ) {
                        // Param: depth, Type: Integer
                        linesRequestBuilder.withDepth(integerStraightPass(params.getInt("depth")));
                    }
                    if (params.has("forbiddenId") && (params.getString("forbiddenId") != null) && (!params.getString("forbiddenId").isEmpty()) ) {
                        // Param: forbiddenId, Type: List
                        linesRequestBuilder.withForbiddenId(jsonArrayToStringList(params.getJSONArray("forbiddenId")));
                    }
                    if (params.has("forbiddenUris") && (params.getString("forbiddenUris") != null) && (!params.getString("forbiddenUris").isEmpty()) ) {
                        // Param: forbiddenUris, Type: List
                        linesRequestBuilder.withForbiddenUris(jsonArrayToStringList(params.getJSONArray("forbiddenUris")));
                    }
                    if (params.has("headsign") && (params.getString("headsign") != null) && (!params.getString("headsign").isEmpty()) ) {
                        // Param: headsign, Type: String
                        linesRequestBuilder.withHeadsign(stringStraightPass(params.getString("headsign")));
                    }
                    if (params.has("showCodes") && (params.getString("showCodes") != null) && (!params.getString("showCodes").isEmpty()) ) {
                        // Param: showCodes, Type: Boolean
                        linesRequestBuilder.withShowCodes(booleanStraightPass(params.getBoolean("showCodes")));
                    }
                    if (params.has("odtLevel") && (params.getString("odtLevel") != null) && (!params.getString("odtLevel").isEmpty()) ) {
                        // Param: odtLevel, Type: String
                        linesRequestBuilder.withOdtLevel(stringStraightPass(params.getString("odtLevel")));
                    }
                    if (params.has("dataFreshness") && (params.getString("dataFreshness") != null) && (!params.getString("dataFreshness").isEmpty()) ) {
                        // Param: dataFreshness, Type: String
                        linesRequestBuilder.withDataFreshness(stringStraightPass(params.getString("dataFreshness")));
                    }
                    if (params.has("distance") && (params.getString("distance") != null) && (!params.getString("distance").isEmpty()) ) {
                        // Param: distance, Type: Integer
                        linesRequestBuilder.withDistance(integerStraightPass(params.getInt("distance")));
                    }
                    if (params.has("since") && (params.getString("since") != null) && (!params.getString("since").isEmpty()) ) {
                        // Param: since, Type: Date
                        linesRequestBuilder.withSince(stringToDateTime(params.getString("since")));
                    }
                    if (params.has("until") && (params.getString("until") != null) && (!params.getString("until").isEmpty()) ) {
                        // Param: until, Type: Date
                        linesRequestBuilder.withUntil(stringToDateTime(params.getString("until")));
                    }
                    if (params.has("disableGeojson") && (params.getString("disableGeojson") != null) && (!params.getString("disableGeojson").isEmpty()) ) {
                        // Param: disableGeojson, Type: Boolean
                        linesRequestBuilder.withDisableGeojson(booleanStraightPass(params.getBoolean("disableGeojson")));
                    }
                    if (params.has("disableDisruption") && (params.getString("disableDisruption") != null) && (!params.getString("disableDisruption").isEmpty()) ) {
                        // Param: disableDisruption, Type: Boolean
                        linesRequestBuilder.withDisableDisruption(booleanStraightPass(params.getBoolean("disableDisruption")));
                    }
                    if (params.has("filter") && (params.getString("filter") != null) && (!params.getString("filter").isEmpty()) ) {
                        // Param: filter, Type: String
                        linesRequestBuilder.withFilter(stringStraightPass(params.getString("filter")));
                    }
                    if (params.has("tags") && (params.getString("tags") != null) && (!params.getString("tags").isEmpty()) ) {
                        // Param: tags, Type: List
                        linesRequestBuilder.withTags(jsonArrayToStringList(params.getJSONArray("tags")));
                    }
                    if (params.has("originalId") && (params.getString("originalId") != null) && (!params.getString("originalId").isEmpty()) ) {
                        // Param: originalId, Type: String
                        linesRequestBuilder.withOriginalId(stringStraightPass(params.getString("originalId")));
                    }
                    
                    linesRequestBuilder.rawGet(new ApiCallback<String>() {
                        @Override
                        public void onFailure(ApiException e, int statusCode, Map<String, List<String>> responseHeaders) {
                            callbackContext.error("Problem during request call | " + e.getMessage());
                        }

                        @Override
                        public void onSuccess(String result, int statusCode, Map<String, List<String>> responseHeaders) {
                            JSONObject jsonObject = null;
                            try {
                                jsonObject = new JSONObject(result);
                                callbackContext.success(jsonObject);
                            } catch (Exception e) {
                                String errorMessage = "Problem during response parsing | " + String.valueOf(e.hashCode()) + ": " + e.getMessage();
                                callbackContext.error(errorMessage);
                            }
                        }

                        @Override
                        public void onUploadProgress(long bytesWritten, long contentLength, boolean done) {
                        }

                        @Override
                        public void onDownloadProgress(long bytesRead, long contentLength, boolean done) {
                        }
                    });
                } catch (Exception e) {
                    String errorMessage = "Problem during request building | " + String.valueOf(e.hashCode()) + ": " + e.getMessage();
                    callbackContext.error(errorMessage);
                }
            }
        });
    }
    final private void coverageLonLatNetworks(final JSONObject params, final CallbackContext callbackContext) {
        if (this.navitiaSdk == null) {
            callbackContext.error("NavitiaSDK is not instanciated");
            return;
        }

        final NetworksApi.CoverageLonLatNetworksRequestBuilder networksRequestBuilder = this.navitiaSdk.networksApi.newCoverageLonLatNetworksRequestBuilder();
        cordova.getThreadPool().execute(new Runnable() {
            @Override
            public void run() {
                try {
                    if (params.has("lat") && (params.getString("lat") != null) && (!params.getString("lat").isEmpty()) ) {
                        // Param: lat, Type: BigDecimal
                        networksRequestBuilder.withLat(longToBigDecimal(params.getLong("lat")));
                    }
                    if (params.has("lon") && (params.getString("lon") != null) && (!params.getString("lon").isEmpty()) ) {
                        // Param: lon, Type: BigDecimal
                        networksRequestBuilder.withLon(longToBigDecimal(params.getLong("lon")));
                    }
                    if (params.has("startPage") && (params.getString("startPage") != null) && (!params.getString("startPage").isEmpty()) ) {
                        // Param: startPage, Type: Integer
                        networksRequestBuilder.withStartPage(integerStraightPass(params.getInt("startPage")));
                    }
                    if (params.has("count") && (params.getString("count") != null) && (!params.getString("count").isEmpty()) ) {
                        // Param: count, Type: Integer
                        networksRequestBuilder.withCount(integerStraightPass(params.getInt("count")));
                    }
                    if (params.has("depth") && (params.getString("depth") != null) && (!params.getString("depth").isEmpty()) ) {
                        // Param: depth, Type: Integer
                        networksRequestBuilder.withDepth(integerStraightPass(params.getInt("depth")));
                    }
                    if (params.has("forbiddenId") && (params.getString("forbiddenId") != null) && (!params.getString("forbiddenId").isEmpty()) ) {
                        // Param: forbiddenId, Type: List
                        networksRequestBuilder.withForbiddenId(jsonArrayToStringList(params.getJSONArray("forbiddenId")));
                    }
                    if (params.has("forbiddenUris") && (params.getString("forbiddenUris") != null) && (!params.getString("forbiddenUris").isEmpty()) ) {
                        // Param: forbiddenUris, Type: List
                        networksRequestBuilder.withForbiddenUris(jsonArrayToStringList(params.getJSONArray("forbiddenUris")));
                    }
                    if (params.has("externalCode") && (params.getString("externalCode") != null) && (!params.getString("externalCode").isEmpty()) ) {
                        // Param: externalCode, Type: String
                        networksRequestBuilder.withExternalCode(stringStraightPass(params.getString("externalCode")));
                    }
                    if (params.has("headsign") && (params.getString("headsign") != null) && (!params.getString("headsign").isEmpty()) ) {
                        // Param: headsign, Type: String
                        networksRequestBuilder.withHeadsign(stringStraightPass(params.getString("headsign")));
                    }
                    if (params.has("showCodes") && (params.getString("showCodes") != null) && (!params.getString("showCodes").isEmpty()) ) {
                        // Param: showCodes, Type: Boolean
                        networksRequestBuilder.withShowCodes(booleanStraightPass(params.getBoolean("showCodes")));
                    }
                    if (params.has("odtLevel") && (params.getString("odtLevel") != null) && (!params.getString("odtLevel").isEmpty()) ) {
                        // Param: odtLevel, Type: String
                        networksRequestBuilder.withOdtLevel(stringStraightPass(params.getString("odtLevel")));
                    }
                    if (params.has("dataFreshness") && (params.getString("dataFreshness") != null) && (!params.getString("dataFreshness").isEmpty()) ) {
                        // Param: dataFreshness, Type: String
                        networksRequestBuilder.withDataFreshness(stringStraightPass(params.getString("dataFreshness")));
                    }
                    if (params.has("distance") && (params.getString("distance") != null) && (!params.getString("distance").isEmpty()) ) {
                        // Param: distance, Type: Integer
                        networksRequestBuilder.withDistance(integerStraightPass(params.getInt("distance")));
                    }
                    if (params.has("since") && (params.getString("since") != null) && (!params.getString("since").isEmpty()) ) {
                        // Param: since, Type: Date
                        networksRequestBuilder.withSince(stringToDateTime(params.getString("since")));
                    }
                    if (params.has("until") && (params.getString("until") != null) && (!params.getString("until").isEmpty()) ) {
                        // Param: until, Type: Date
                        networksRequestBuilder.withUntil(stringToDateTime(params.getString("until")));
                    }
                    if (params.has("disableGeojson") && (params.getString("disableGeojson") != null) && (!params.getString("disableGeojson").isEmpty()) ) {
                        // Param: disableGeojson, Type: Boolean
                        networksRequestBuilder.withDisableGeojson(booleanStraightPass(params.getBoolean("disableGeojson")));
                    }
                    if (params.has("disableDisruption") && (params.getString("disableDisruption") != null) && (!params.getString("disableDisruption").isEmpty()) ) {
                        // Param: disableDisruption, Type: Boolean
                        networksRequestBuilder.withDisableDisruption(booleanStraightPass(params.getBoolean("disableDisruption")));
                    }
                    if (params.has("filter") && (params.getString("filter") != null) && (!params.getString("filter").isEmpty()) ) {
                        // Param: filter, Type: String
                        networksRequestBuilder.withFilter(stringStraightPass(params.getString("filter")));
                    }
                    if (params.has("tags") && (params.getString("tags") != null) && (!params.getString("tags").isEmpty()) ) {
                        // Param: tags, Type: List
                        networksRequestBuilder.withTags(jsonArrayToStringList(params.getJSONArray("tags")));
                    }
                    if (params.has("originalId") && (params.getString("originalId") != null) && (!params.getString("originalId").isEmpty()) ) {
                        // Param: originalId, Type: String
                        networksRequestBuilder.withOriginalId(stringStraightPass(params.getString("originalId")));
                    }
                    
                    networksRequestBuilder.rawGet(new ApiCallback<String>() {
                        @Override
                        public void onFailure(ApiException e, int statusCode, Map<String, List<String>> responseHeaders) {
                            callbackContext.error("Problem during request call | " + e.getMessage());
                        }

                        @Override
                        public void onSuccess(String result, int statusCode, Map<String, List<String>> responseHeaders) {
                            JSONObject jsonObject = null;
                            try {
                                jsonObject = new JSONObject(result);
                                callbackContext.success(jsonObject);
                            } catch (Exception e) {
                                String errorMessage = "Problem during response parsing | " + String.valueOf(e.hashCode()) + ": " + e.getMessage();
                                callbackContext.error(errorMessage);
                            }
                        }

                        @Override
                        public void onUploadProgress(long bytesWritten, long contentLength, boolean done) {
                        }

                        @Override
                        public void onDownloadProgress(long bytesRead, long contentLength, boolean done) {
                        }
                    });
                } catch (Exception e) {
                    String errorMessage = "Problem during request building | " + String.valueOf(e.hashCode()) + ": " + e.getMessage();
                    callbackContext.error(errorMessage);
                }
            }
        });
    }
    final private void coverageLonLatNetworksId(final JSONObject params, final CallbackContext callbackContext) {
        if (this.navitiaSdk == null) {
            callbackContext.error("NavitiaSDK is not instanciated");
            return;
        }

        final NetworksApi.CoverageLonLatNetworksIdRequestBuilder networksRequestBuilder = this.navitiaSdk.networksApi.newCoverageLonLatNetworksIdRequestBuilder();
        cordova.getThreadPool().execute(new Runnable() {
            @Override
            public void run() {
                try {
                    if (params.has("lat") && (params.getString("lat") != null) && (!params.getString("lat").isEmpty()) ) {
                        // Param: lat, Type: BigDecimal
                        networksRequestBuilder.withLat(longToBigDecimal(params.getLong("lat")));
                    }
                    if (params.has("lon") && (params.getString("lon") != null) && (!params.getString("lon").isEmpty()) ) {
                        // Param: lon, Type: BigDecimal
                        networksRequestBuilder.withLon(longToBigDecimal(params.getLong("lon")));
                    }
                    if (params.has("id") && (params.getString("id") != null) && (!params.getString("id").isEmpty()) ) {
                        // Param: id, Type: String
                        networksRequestBuilder.withId(stringStraightPass(params.getString("id")));
                    }
                    if (params.has("startPage") && (params.getString("startPage") != null) && (!params.getString("startPage").isEmpty()) ) {
                        // Param: startPage, Type: Integer
                        networksRequestBuilder.withStartPage(integerStraightPass(params.getInt("startPage")));
                    }
                    if (params.has("count") && (params.getString("count") != null) && (!params.getString("count").isEmpty()) ) {
                        // Param: count, Type: Integer
                        networksRequestBuilder.withCount(integerStraightPass(params.getInt("count")));
                    }
                    if (params.has("depth") && (params.getString("depth") != null) && (!params.getString("depth").isEmpty()) ) {
                        // Param: depth, Type: Integer
                        networksRequestBuilder.withDepth(integerStraightPass(params.getInt("depth")));
                    }
                    if (params.has("forbiddenId") && (params.getString("forbiddenId") != null) && (!params.getString("forbiddenId").isEmpty()) ) {
                        // Param: forbiddenId, Type: List
                        networksRequestBuilder.withForbiddenId(jsonArrayToStringList(params.getJSONArray("forbiddenId")));
                    }
                    if (params.has("forbiddenUris") && (params.getString("forbiddenUris") != null) && (!params.getString("forbiddenUris").isEmpty()) ) {
                        // Param: forbiddenUris, Type: List
                        networksRequestBuilder.withForbiddenUris(jsonArrayToStringList(params.getJSONArray("forbiddenUris")));
                    }
                    if (params.has("externalCode") && (params.getString("externalCode") != null) && (!params.getString("externalCode").isEmpty()) ) {
                        // Param: externalCode, Type: String
                        networksRequestBuilder.withExternalCode(stringStraightPass(params.getString("externalCode")));
                    }
                    if (params.has("headsign") && (params.getString("headsign") != null) && (!params.getString("headsign").isEmpty()) ) {
                        // Param: headsign, Type: String
                        networksRequestBuilder.withHeadsign(stringStraightPass(params.getString("headsign")));
                    }
                    if (params.has("showCodes") && (params.getString("showCodes") != null) && (!params.getString("showCodes").isEmpty()) ) {
                        // Param: showCodes, Type: Boolean
                        networksRequestBuilder.withShowCodes(booleanStraightPass(params.getBoolean("showCodes")));
                    }
                    if (params.has("odtLevel") && (params.getString("odtLevel") != null) && (!params.getString("odtLevel").isEmpty()) ) {
                        // Param: odtLevel, Type: String
                        networksRequestBuilder.withOdtLevel(stringStraightPass(params.getString("odtLevel")));
                    }
                    if (params.has("dataFreshness") && (params.getString("dataFreshness") != null) && (!params.getString("dataFreshness").isEmpty()) ) {
                        // Param: dataFreshness, Type: String
                        networksRequestBuilder.withDataFreshness(stringStraightPass(params.getString("dataFreshness")));
                    }
                    if (params.has("distance") && (params.getString("distance") != null) && (!params.getString("distance").isEmpty()) ) {
                        // Param: distance, Type: Integer
                        networksRequestBuilder.withDistance(integerStraightPass(params.getInt("distance")));
                    }
                    if (params.has("since") && (params.getString("since") != null) && (!params.getString("since").isEmpty()) ) {
                        // Param: since, Type: Date
                        networksRequestBuilder.withSince(stringToDateTime(params.getString("since")));
                    }
                    if (params.has("until") && (params.getString("until") != null) && (!params.getString("until").isEmpty()) ) {
                        // Param: until, Type: Date
                        networksRequestBuilder.withUntil(stringToDateTime(params.getString("until")));
                    }
                    if (params.has("disableGeojson") && (params.getString("disableGeojson") != null) && (!params.getString("disableGeojson").isEmpty()) ) {
                        // Param: disableGeojson, Type: Boolean
                        networksRequestBuilder.withDisableGeojson(booleanStraightPass(params.getBoolean("disableGeojson")));
                    }
                    if (params.has("disableDisruption") && (params.getString("disableDisruption") != null) && (!params.getString("disableDisruption").isEmpty()) ) {
                        // Param: disableDisruption, Type: Boolean
                        networksRequestBuilder.withDisableDisruption(booleanStraightPass(params.getBoolean("disableDisruption")));
                    }
                    if (params.has("tags") && (params.getString("tags") != null) && (!params.getString("tags").isEmpty()) ) {
                        // Param: tags, Type: List
                        networksRequestBuilder.withTags(jsonArrayToStringList(params.getJSONArray("tags")));
                    }
                    if (params.has("originalId") && (params.getString("originalId") != null) && (!params.getString("originalId").isEmpty()) ) {
                        // Param: originalId, Type: String
                        networksRequestBuilder.withOriginalId(stringStraightPass(params.getString("originalId")));
                    }
                    
                    networksRequestBuilder.rawGet(new ApiCallback<String>() {
                        @Override
                        public void onFailure(ApiException e, int statusCode, Map<String, List<String>> responseHeaders) {
                            callbackContext.error("Problem during request call | " + e.getMessage());
                        }

                        @Override
                        public void onSuccess(String result, int statusCode, Map<String, List<String>> responseHeaders) {
                            JSONObject jsonObject = null;
                            try {
                                jsonObject = new JSONObject(result);
                                callbackContext.success(jsonObject);
                            } catch (Exception e) {
                                String errorMessage = "Problem during response parsing | " + String.valueOf(e.hashCode()) + ": " + e.getMessage();
                                callbackContext.error(errorMessage);
                            }
                        }

                        @Override
                        public void onUploadProgress(long bytesWritten, long contentLength, boolean done) {
                        }

                        @Override
                        public void onDownloadProgress(long bytesRead, long contentLength, boolean done) {
                        }
                    });
                } catch (Exception e) {
                    String errorMessage = "Problem during request building | " + String.valueOf(e.hashCode()) + ": " + e.getMessage();
                    callbackContext.error(errorMessage);
                }
            }
        });
    }
    final private void coverageLonLatUriNetworks(final JSONObject params, final CallbackContext callbackContext) {
        if (this.navitiaSdk == null) {
            callbackContext.error("NavitiaSDK is not instanciated");
            return;
        }

        final NetworksApi.CoverageLonLatUriNetworksRequestBuilder networksRequestBuilder = this.navitiaSdk.networksApi.newCoverageLonLatUriNetworksRequestBuilder();
        cordova.getThreadPool().execute(new Runnable() {
            @Override
            public void run() {
                try {
                    if (params.has("lat") && (params.getString("lat") != null) && (!params.getString("lat").isEmpty()) ) {
                        // Param: lat, Type: BigDecimal
                        networksRequestBuilder.withLat(longToBigDecimal(params.getLong("lat")));
                    }
                    if (params.has("lon") && (params.getString("lon") != null) && (!params.getString("lon").isEmpty()) ) {
                        // Param: lon, Type: BigDecimal
                        networksRequestBuilder.withLon(longToBigDecimal(params.getLong("lon")));
                    }
                    if (params.has("uri") && (params.getString("uri") != null) && (!params.getString("uri").isEmpty()) ) {
                        // Param: uri, Type: String
                        networksRequestBuilder.withUri(stringStraightPass(params.getString("uri")));
                    }
                    if (params.has("startPage") && (params.getString("startPage") != null) && (!params.getString("startPage").isEmpty()) ) {
                        // Param: startPage, Type: Integer
                        networksRequestBuilder.withStartPage(integerStraightPass(params.getInt("startPage")));
                    }
                    if (params.has("count") && (params.getString("count") != null) && (!params.getString("count").isEmpty()) ) {
                        // Param: count, Type: Integer
                        networksRequestBuilder.withCount(integerStraightPass(params.getInt("count")));
                    }
                    if (params.has("depth") && (params.getString("depth") != null) && (!params.getString("depth").isEmpty()) ) {
                        // Param: depth, Type: Integer
                        networksRequestBuilder.withDepth(integerStraightPass(params.getInt("depth")));
                    }
                    if (params.has("forbiddenId") && (params.getString("forbiddenId") != null) && (!params.getString("forbiddenId").isEmpty()) ) {
                        // Param: forbiddenId, Type: List
                        networksRequestBuilder.withForbiddenId(jsonArrayToStringList(params.getJSONArray("forbiddenId")));
                    }
                    if (params.has("forbiddenUris") && (params.getString("forbiddenUris") != null) && (!params.getString("forbiddenUris").isEmpty()) ) {
                        // Param: forbiddenUris, Type: List
                        networksRequestBuilder.withForbiddenUris(jsonArrayToStringList(params.getJSONArray("forbiddenUris")));
                    }
                    if (params.has("externalCode") && (params.getString("externalCode") != null) && (!params.getString("externalCode").isEmpty()) ) {
                        // Param: externalCode, Type: String
                        networksRequestBuilder.withExternalCode(stringStraightPass(params.getString("externalCode")));
                    }
                    if (params.has("headsign") && (params.getString("headsign") != null) && (!params.getString("headsign").isEmpty()) ) {
                        // Param: headsign, Type: String
                        networksRequestBuilder.withHeadsign(stringStraightPass(params.getString("headsign")));
                    }
                    if (params.has("showCodes") && (params.getString("showCodes") != null) && (!params.getString("showCodes").isEmpty()) ) {
                        // Param: showCodes, Type: Boolean
                        networksRequestBuilder.withShowCodes(booleanStraightPass(params.getBoolean("showCodes")));
                    }
                    if (params.has("odtLevel") && (params.getString("odtLevel") != null) && (!params.getString("odtLevel").isEmpty()) ) {
                        // Param: odtLevel, Type: String
                        networksRequestBuilder.withOdtLevel(stringStraightPass(params.getString("odtLevel")));
                    }
                    if (params.has("dataFreshness") && (params.getString("dataFreshness") != null) && (!params.getString("dataFreshness").isEmpty()) ) {
                        // Param: dataFreshness, Type: String
                        networksRequestBuilder.withDataFreshness(stringStraightPass(params.getString("dataFreshness")));
                    }
                    if (params.has("distance") && (params.getString("distance") != null) && (!params.getString("distance").isEmpty()) ) {
                        // Param: distance, Type: Integer
                        networksRequestBuilder.withDistance(integerStraightPass(params.getInt("distance")));
                    }
                    if (params.has("since") && (params.getString("since") != null) && (!params.getString("since").isEmpty()) ) {
                        // Param: since, Type: Date
                        networksRequestBuilder.withSince(stringToDateTime(params.getString("since")));
                    }
                    if (params.has("until") && (params.getString("until") != null) && (!params.getString("until").isEmpty()) ) {
                        // Param: until, Type: Date
                        networksRequestBuilder.withUntil(stringToDateTime(params.getString("until")));
                    }
                    if (params.has("disableGeojson") && (params.getString("disableGeojson") != null) && (!params.getString("disableGeojson").isEmpty()) ) {
                        // Param: disableGeojson, Type: Boolean
                        networksRequestBuilder.withDisableGeojson(booleanStraightPass(params.getBoolean("disableGeojson")));
                    }
                    if (params.has("disableDisruption") && (params.getString("disableDisruption") != null) && (!params.getString("disableDisruption").isEmpty()) ) {
                        // Param: disableDisruption, Type: Boolean
                        networksRequestBuilder.withDisableDisruption(booleanStraightPass(params.getBoolean("disableDisruption")));
                    }
                    if (params.has("filter") && (params.getString("filter") != null) && (!params.getString("filter").isEmpty()) ) {
                        // Param: filter, Type: String
                        networksRequestBuilder.withFilter(stringStraightPass(params.getString("filter")));
                    }
                    if (params.has("tags") && (params.getString("tags") != null) && (!params.getString("tags").isEmpty()) ) {
                        // Param: tags, Type: List
                        networksRequestBuilder.withTags(jsonArrayToStringList(params.getJSONArray("tags")));
                    }
                    if (params.has("originalId") && (params.getString("originalId") != null) && (!params.getString("originalId").isEmpty()) ) {
                        // Param: originalId, Type: String
                        networksRequestBuilder.withOriginalId(stringStraightPass(params.getString("originalId")));
                    }
                    
                    networksRequestBuilder.rawGet(new ApiCallback<String>() {
                        @Override
                        public void onFailure(ApiException e, int statusCode, Map<String, List<String>> responseHeaders) {
                            callbackContext.error("Problem during request call | " + e.getMessage());
                        }

                        @Override
                        public void onSuccess(String result, int statusCode, Map<String, List<String>> responseHeaders) {
                            JSONObject jsonObject = null;
                            try {
                                jsonObject = new JSONObject(result);
                                callbackContext.success(jsonObject);
                            } catch (Exception e) {
                                String errorMessage = "Problem during response parsing | " + String.valueOf(e.hashCode()) + ": " + e.getMessage();
                                callbackContext.error(errorMessage);
                            }
                        }

                        @Override
                        public void onUploadProgress(long bytesWritten, long contentLength, boolean done) {
                        }

                        @Override
                        public void onDownloadProgress(long bytesRead, long contentLength, boolean done) {
                        }
                    });
                } catch (Exception e) {
                    String errorMessage = "Problem during request building | " + String.valueOf(e.hashCode()) + ": " + e.getMessage();
                    callbackContext.error(errorMessage);
                }
            }
        });
    }
    final private void coverageLonLatUriNetworksId(final JSONObject params, final CallbackContext callbackContext) {
        if (this.navitiaSdk == null) {
            callbackContext.error("NavitiaSDK is not instanciated");
            return;
        }

        final NetworksApi.CoverageLonLatUriNetworksIdRequestBuilder networksRequestBuilder = this.navitiaSdk.networksApi.newCoverageLonLatUriNetworksIdRequestBuilder();
        cordova.getThreadPool().execute(new Runnable() {
            @Override
            public void run() {
                try {
                    if (params.has("lat") && (params.getString("lat") != null) && (!params.getString("lat").isEmpty()) ) {
                        // Param: lat, Type: BigDecimal
                        networksRequestBuilder.withLat(longToBigDecimal(params.getLong("lat")));
                    }
                    if (params.has("lon") && (params.getString("lon") != null) && (!params.getString("lon").isEmpty()) ) {
                        // Param: lon, Type: BigDecimal
                        networksRequestBuilder.withLon(longToBigDecimal(params.getLong("lon")));
                    }
                    if (params.has("uri") && (params.getString("uri") != null) && (!params.getString("uri").isEmpty()) ) {
                        // Param: uri, Type: String
                        networksRequestBuilder.withUri(stringStraightPass(params.getString("uri")));
                    }
                    if (params.has("id") && (params.getString("id") != null) && (!params.getString("id").isEmpty()) ) {
                        // Param: id, Type: String
                        networksRequestBuilder.withId(stringStraightPass(params.getString("id")));
                    }
                    if (params.has("startPage") && (params.getString("startPage") != null) && (!params.getString("startPage").isEmpty()) ) {
                        // Param: startPage, Type: Integer
                        networksRequestBuilder.withStartPage(integerStraightPass(params.getInt("startPage")));
                    }
                    if (params.has("count") && (params.getString("count") != null) && (!params.getString("count").isEmpty()) ) {
                        // Param: count, Type: Integer
                        networksRequestBuilder.withCount(integerStraightPass(params.getInt("count")));
                    }
                    if (params.has("depth") && (params.getString("depth") != null) && (!params.getString("depth").isEmpty()) ) {
                        // Param: depth, Type: Integer
                        networksRequestBuilder.withDepth(integerStraightPass(params.getInt("depth")));
                    }
                    if (params.has("forbiddenId") && (params.getString("forbiddenId") != null) && (!params.getString("forbiddenId").isEmpty()) ) {
                        // Param: forbiddenId, Type: List
                        networksRequestBuilder.withForbiddenId(jsonArrayToStringList(params.getJSONArray("forbiddenId")));
                    }
                    if (params.has("forbiddenUris") && (params.getString("forbiddenUris") != null) && (!params.getString("forbiddenUris").isEmpty()) ) {
                        // Param: forbiddenUris, Type: List
                        networksRequestBuilder.withForbiddenUris(jsonArrayToStringList(params.getJSONArray("forbiddenUris")));
                    }
                    if (params.has("externalCode") && (params.getString("externalCode") != null) && (!params.getString("externalCode").isEmpty()) ) {
                        // Param: externalCode, Type: String
                        networksRequestBuilder.withExternalCode(stringStraightPass(params.getString("externalCode")));
                    }
                    if (params.has("headsign") && (params.getString("headsign") != null) && (!params.getString("headsign").isEmpty()) ) {
                        // Param: headsign, Type: String
                        networksRequestBuilder.withHeadsign(stringStraightPass(params.getString("headsign")));
                    }
                    if (params.has("showCodes") && (params.getString("showCodes") != null) && (!params.getString("showCodes").isEmpty()) ) {
                        // Param: showCodes, Type: Boolean
                        networksRequestBuilder.withShowCodes(booleanStraightPass(params.getBoolean("showCodes")));
                    }
                    if (params.has("odtLevel") && (params.getString("odtLevel") != null) && (!params.getString("odtLevel").isEmpty()) ) {
                        // Param: odtLevel, Type: String
                        networksRequestBuilder.withOdtLevel(stringStraightPass(params.getString("odtLevel")));
                    }
                    if (params.has("dataFreshness") && (params.getString("dataFreshness") != null) && (!params.getString("dataFreshness").isEmpty()) ) {
                        // Param: dataFreshness, Type: String
                        networksRequestBuilder.withDataFreshness(stringStraightPass(params.getString("dataFreshness")));
                    }
                    if (params.has("distance") && (params.getString("distance") != null) && (!params.getString("distance").isEmpty()) ) {
                        // Param: distance, Type: Integer
                        networksRequestBuilder.withDistance(integerStraightPass(params.getInt("distance")));
                    }
                    if (params.has("since") && (params.getString("since") != null) && (!params.getString("since").isEmpty()) ) {
                        // Param: since, Type: Date
                        networksRequestBuilder.withSince(stringToDateTime(params.getString("since")));
                    }
                    if (params.has("until") && (params.getString("until") != null) && (!params.getString("until").isEmpty()) ) {
                        // Param: until, Type: Date
                        networksRequestBuilder.withUntil(stringToDateTime(params.getString("until")));
                    }
                    if (params.has("disableGeojson") && (params.getString("disableGeojson") != null) && (!params.getString("disableGeojson").isEmpty()) ) {
                        // Param: disableGeojson, Type: Boolean
                        networksRequestBuilder.withDisableGeojson(booleanStraightPass(params.getBoolean("disableGeojson")));
                    }
                    if (params.has("disableDisruption") && (params.getString("disableDisruption") != null) && (!params.getString("disableDisruption").isEmpty()) ) {
                        // Param: disableDisruption, Type: Boolean
                        networksRequestBuilder.withDisableDisruption(booleanStraightPass(params.getBoolean("disableDisruption")));
                    }
                    if (params.has("tags") && (params.getString("tags") != null) && (!params.getString("tags").isEmpty()) ) {
                        // Param: tags, Type: List
                        networksRequestBuilder.withTags(jsonArrayToStringList(params.getJSONArray("tags")));
                    }
                    if (params.has("originalId") && (params.getString("originalId") != null) && (!params.getString("originalId").isEmpty()) ) {
                        // Param: originalId, Type: String
                        networksRequestBuilder.withOriginalId(stringStraightPass(params.getString("originalId")));
                    }
                    
                    networksRequestBuilder.rawGet(new ApiCallback<String>() {
                        @Override
                        public void onFailure(ApiException e, int statusCode, Map<String, List<String>> responseHeaders) {
                            callbackContext.error("Problem during request call | " + e.getMessage());
                        }

                        @Override
                        public void onSuccess(String result, int statusCode, Map<String, List<String>> responseHeaders) {
                            JSONObject jsonObject = null;
                            try {
                                jsonObject = new JSONObject(result);
                                callbackContext.success(jsonObject);
                            } catch (Exception e) {
                                String errorMessage = "Problem during response parsing | " + String.valueOf(e.hashCode()) + ": " + e.getMessage();
                                callbackContext.error(errorMessage);
                            }
                        }

                        @Override
                        public void onUploadProgress(long bytesWritten, long contentLength, boolean done) {
                        }

                        @Override
                        public void onDownloadProgress(long bytesRead, long contentLength, boolean done) {
                        }
                    });
                } catch (Exception e) {
                    String errorMessage = "Problem during request building | " + String.valueOf(e.hashCode()) + ": " + e.getMessage();
                    callbackContext.error(errorMessage);
                }
            }
        });
    }
    final private void coverageRegionNetworks(final JSONObject params, final CallbackContext callbackContext) {
        if (this.navitiaSdk == null) {
            callbackContext.error("NavitiaSDK is not instanciated");
            return;
        }

        final NetworksApi.CoverageRegionNetworksRequestBuilder networksRequestBuilder = this.navitiaSdk.networksApi.newCoverageRegionNetworksRequestBuilder();
        cordova.getThreadPool().execute(new Runnable() {
            @Override
            public void run() {
                try {
                    if (params.has("region") && (params.getString("region") != null) && (!params.getString("region").isEmpty()) ) {
                        // Param: region, Type: String
                        networksRequestBuilder.withRegion(stringStraightPass(params.getString("region")));
                    }
                    if (params.has("startPage") && (params.getString("startPage") != null) && (!params.getString("startPage").isEmpty()) ) {
                        // Param: startPage, Type: Integer
                        networksRequestBuilder.withStartPage(integerStraightPass(params.getInt("startPage")));
                    }
                    if (params.has("count") && (params.getString("count") != null) && (!params.getString("count").isEmpty()) ) {
                        // Param: count, Type: Integer
                        networksRequestBuilder.withCount(integerStraightPass(params.getInt("count")));
                    }
                    if (params.has("depth") && (params.getString("depth") != null) && (!params.getString("depth").isEmpty()) ) {
                        // Param: depth, Type: Integer
                        networksRequestBuilder.withDepth(integerStraightPass(params.getInt("depth")));
                    }
                    if (params.has("forbiddenId") && (params.getString("forbiddenId") != null) && (!params.getString("forbiddenId").isEmpty()) ) {
                        // Param: forbiddenId, Type: List
                        networksRequestBuilder.withForbiddenId(jsonArrayToStringList(params.getJSONArray("forbiddenId")));
                    }
                    if (params.has("forbiddenUris") && (params.getString("forbiddenUris") != null) && (!params.getString("forbiddenUris").isEmpty()) ) {
                        // Param: forbiddenUris, Type: List
                        networksRequestBuilder.withForbiddenUris(jsonArrayToStringList(params.getJSONArray("forbiddenUris")));
                    }
                    if (params.has("externalCode") && (params.getString("externalCode") != null) && (!params.getString("externalCode").isEmpty()) ) {
                        // Param: externalCode, Type: String
                        networksRequestBuilder.withExternalCode(stringStraightPass(params.getString("externalCode")));
                    }
                    if (params.has("headsign") && (params.getString("headsign") != null) && (!params.getString("headsign").isEmpty()) ) {
                        // Param: headsign, Type: String
                        networksRequestBuilder.withHeadsign(stringStraightPass(params.getString("headsign")));
                    }
                    if (params.has("showCodes") && (params.getString("showCodes") != null) && (!params.getString("showCodes").isEmpty()) ) {
                        // Param: showCodes, Type: Boolean
                        networksRequestBuilder.withShowCodes(booleanStraightPass(params.getBoolean("showCodes")));
                    }
                    if (params.has("odtLevel") && (params.getString("odtLevel") != null) && (!params.getString("odtLevel").isEmpty()) ) {
                        // Param: odtLevel, Type: String
                        networksRequestBuilder.withOdtLevel(stringStraightPass(params.getString("odtLevel")));
                    }
                    if (params.has("dataFreshness") && (params.getString("dataFreshness") != null) && (!params.getString("dataFreshness").isEmpty()) ) {
                        // Param: dataFreshness, Type: String
                        networksRequestBuilder.withDataFreshness(stringStraightPass(params.getString("dataFreshness")));
                    }
                    if (params.has("distance") && (params.getString("distance") != null) && (!params.getString("distance").isEmpty()) ) {
                        // Param: distance, Type: Integer
                        networksRequestBuilder.withDistance(integerStraightPass(params.getInt("distance")));
                    }
                    if (params.has("since") && (params.getString("since") != null) && (!params.getString("since").isEmpty()) ) {
                        // Param: since, Type: Date
                        networksRequestBuilder.withSince(stringToDateTime(params.getString("since")));
                    }
                    if (params.has("until") && (params.getString("until") != null) && (!params.getString("until").isEmpty()) ) {
                        // Param: until, Type: Date
                        networksRequestBuilder.withUntil(stringToDateTime(params.getString("until")));
                    }
                    if (params.has("disableGeojson") && (params.getString("disableGeojson") != null) && (!params.getString("disableGeojson").isEmpty()) ) {
                        // Param: disableGeojson, Type: Boolean
                        networksRequestBuilder.withDisableGeojson(booleanStraightPass(params.getBoolean("disableGeojson")));
                    }
                    if (params.has("disableDisruption") && (params.getString("disableDisruption") != null) && (!params.getString("disableDisruption").isEmpty()) ) {
                        // Param: disableDisruption, Type: Boolean
                        networksRequestBuilder.withDisableDisruption(booleanStraightPass(params.getBoolean("disableDisruption")));
                    }
                    if (params.has("filter") && (params.getString("filter") != null) && (!params.getString("filter").isEmpty()) ) {
                        // Param: filter, Type: String
                        networksRequestBuilder.withFilter(stringStraightPass(params.getString("filter")));
                    }
                    if (params.has("tags") && (params.getString("tags") != null) && (!params.getString("tags").isEmpty()) ) {
                        // Param: tags, Type: List
                        networksRequestBuilder.withTags(jsonArrayToStringList(params.getJSONArray("tags")));
                    }
                    if (params.has("originalId") && (params.getString("originalId") != null) && (!params.getString("originalId").isEmpty()) ) {
                        // Param: originalId, Type: String
                        networksRequestBuilder.withOriginalId(stringStraightPass(params.getString("originalId")));
                    }
                    
                    networksRequestBuilder.rawGet(new ApiCallback<String>() {
                        @Override
                        public void onFailure(ApiException e, int statusCode, Map<String, List<String>> responseHeaders) {
                            callbackContext.error("Problem during request call | " + e.getMessage());
                        }

                        @Override
                        public void onSuccess(String result, int statusCode, Map<String, List<String>> responseHeaders) {
                            JSONObject jsonObject = null;
                            try {
                                jsonObject = new JSONObject(result);
                                callbackContext.success(jsonObject);
                            } catch (Exception e) {
                                String errorMessage = "Problem during response parsing | " + String.valueOf(e.hashCode()) + ": " + e.getMessage();
                                callbackContext.error(errorMessage);
                            }
                        }

                        @Override
                        public void onUploadProgress(long bytesWritten, long contentLength, boolean done) {
                        }

                        @Override
                        public void onDownloadProgress(long bytesRead, long contentLength, boolean done) {
                        }
                    });
                } catch (Exception e) {
                    String errorMessage = "Problem during request building | " + String.valueOf(e.hashCode()) + ": " + e.getMessage();
                    callbackContext.error(errorMessage);
                }
            }
        });
    }
    final private void coverageRegionNetworksId(final JSONObject params, final CallbackContext callbackContext) {
        if (this.navitiaSdk == null) {
            callbackContext.error("NavitiaSDK is not instanciated");
            return;
        }

        final NetworksApi.CoverageRegionNetworksIdRequestBuilder networksRequestBuilder = this.navitiaSdk.networksApi.newCoverageRegionNetworksIdRequestBuilder();
        cordova.getThreadPool().execute(new Runnable() {
            @Override
            public void run() {
                try {
                    if (params.has("region") && (params.getString("region") != null) && (!params.getString("region").isEmpty()) ) {
                        // Param: region, Type: String
                        networksRequestBuilder.withRegion(stringStraightPass(params.getString("region")));
                    }
                    if (params.has("id") && (params.getString("id") != null) && (!params.getString("id").isEmpty()) ) {
                        // Param: id, Type: String
                        networksRequestBuilder.withId(stringStraightPass(params.getString("id")));
                    }
                    if (params.has("startPage") && (params.getString("startPage") != null) && (!params.getString("startPage").isEmpty()) ) {
                        // Param: startPage, Type: Integer
                        networksRequestBuilder.withStartPage(integerStraightPass(params.getInt("startPage")));
                    }
                    if (params.has("count") && (params.getString("count") != null) && (!params.getString("count").isEmpty()) ) {
                        // Param: count, Type: Integer
                        networksRequestBuilder.withCount(integerStraightPass(params.getInt("count")));
                    }
                    if (params.has("depth") && (params.getString("depth") != null) && (!params.getString("depth").isEmpty()) ) {
                        // Param: depth, Type: Integer
                        networksRequestBuilder.withDepth(integerStraightPass(params.getInt("depth")));
                    }
                    if (params.has("forbiddenId") && (params.getString("forbiddenId") != null) && (!params.getString("forbiddenId").isEmpty()) ) {
                        // Param: forbiddenId, Type: List
                        networksRequestBuilder.withForbiddenId(jsonArrayToStringList(params.getJSONArray("forbiddenId")));
                    }
                    if (params.has("forbiddenUris") && (params.getString("forbiddenUris") != null) && (!params.getString("forbiddenUris").isEmpty()) ) {
                        // Param: forbiddenUris, Type: List
                        networksRequestBuilder.withForbiddenUris(jsonArrayToStringList(params.getJSONArray("forbiddenUris")));
                    }
                    if (params.has("externalCode") && (params.getString("externalCode") != null) && (!params.getString("externalCode").isEmpty()) ) {
                        // Param: externalCode, Type: String
                        networksRequestBuilder.withExternalCode(stringStraightPass(params.getString("externalCode")));
                    }
                    if (params.has("headsign") && (params.getString("headsign") != null) && (!params.getString("headsign").isEmpty()) ) {
                        // Param: headsign, Type: String
                        networksRequestBuilder.withHeadsign(stringStraightPass(params.getString("headsign")));
                    }
                    if (params.has("showCodes") && (params.getString("showCodes") != null) && (!params.getString("showCodes").isEmpty()) ) {
                        // Param: showCodes, Type: Boolean
                        networksRequestBuilder.withShowCodes(booleanStraightPass(params.getBoolean("showCodes")));
                    }
                    if (params.has("odtLevel") && (params.getString("odtLevel") != null) && (!params.getString("odtLevel").isEmpty()) ) {
                        // Param: odtLevel, Type: String
                        networksRequestBuilder.withOdtLevel(stringStraightPass(params.getString("odtLevel")));
                    }
                    if (params.has("dataFreshness") && (params.getString("dataFreshness") != null) && (!params.getString("dataFreshness").isEmpty()) ) {
                        // Param: dataFreshness, Type: String
                        networksRequestBuilder.withDataFreshness(stringStraightPass(params.getString("dataFreshness")));
                    }
                    if (params.has("distance") && (params.getString("distance") != null) && (!params.getString("distance").isEmpty()) ) {
                        // Param: distance, Type: Integer
                        networksRequestBuilder.withDistance(integerStraightPass(params.getInt("distance")));
                    }
                    if (params.has("since") && (params.getString("since") != null) && (!params.getString("since").isEmpty()) ) {
                        // Param: since, Type: Date
                        networksRequestBuilder.withSince(stringToDateTime(params.getString("since")));
                    }
                    if (params.has("until") && (params.getString("until") != null) && (!params.getString("until").isEmpty()) ) {
                        // Param: until, Type: Date
                        networksRequestBuilder.withUntil(stringToDateTime(params.getString("until")));
                    }
                    if (params.has("disableGeojson") && (params.getString("disableGeojson") != null) && (!params.getString("disableGeojson").isEmpty()) ) {
                        // Param: disableGeojson, Type: Boolean
                        networksRequestBuilder.withDisableGeojson(booleanStraightPass(params.getBoolean("disableGeojson")));
                    }
                    if (params.has("disableDisruption") && (params.getString("disableDisruption") != null) && (!params.getString("disableDisruption").isEmpty()) ) {
                        // Param: disableDisruption, Type: Boolean
                        networksRequestBuilder.withDisableDisruption(booleanStraightPass(params.getBoolean("disableDisruption")));
                    }
                    if (params.has("tags") && (params.getString("tags") != null) && (!params.getString("tags").isEmpty()) ) {
                        // Param: tags, Type: List
                        networksRequestBuilder.withTags(jsonArrayToStringList(params.getJSONArray("tags")));
                    }
                    if (params.has("originalId") && (params.getString("originalId") != null) && (!params.getString("originalId").isEmpty()) ) {
                        // Param: originalId, Type: String
                        networksRequestBuilder.withOriginalId(stringStraightPass(params.getString("originalId")));
                    }
                    
                    networksRequestBuilder.rawGet(new ApiCallback<String>() {
                        @Override
                        public void onFailure(ApiException e, int statusCode, Map<String, List<String>> responseHeaders) {
                            callbackContext.error("Problem during request call | " + e.getMessage());
                        }

                        @Override
                        public void onSuccess(String result, int statusCode, Map<String, List<String>> responseHeaders) {
                            JSONObject jsonObject = null;
                            try {
                                jsonObject = new JSONObject(result);
                                callbackContext.success(jsonObject);
                            } catch (Exception e) {
                                String errorMessage = "Problem during response parsing | " + String.valueOf(e.hashCode()) + ": " + e.getMessage();
                                callbackContext.error(errorMessage);
                            }
                        }

                        @Override
                        public void onUploadProgress(long bytesWritten, long contentLength, boolean done) {
                        }

                        @Override
                        public void onDownloadProgress(long bytesRead, long contentLength, boolean done) {
                        }
                    });
                } catch (Exception e) {
                    String errorMessage = "Problem during request building | " + String.valueOf(e.hashCode()) + ": " + e.getMessage();
                    callbackContext.error(errorMessage);
                }
            }
        });
    }
    final private void coverageRegionUriNetworks(final JSONObject params, final CallbackContext callbackContext) {
        if (this.navitiaSdk == null) {
            callbackContext.error("NavitiaSDK is not instanciated");
            return;
        }

        final NetworksApi.CoverageRegionUriNetworksRequestBuilder networksRequestBuilder = this.navitiaSdk.networksApi.newCoverageRegionUriNetworksRequestBuilder();
        cordova.getThreadPool().execute(new Runnable() {
            @Override
            public void run() {
                try {
                    if (params.has("region") && (params.getString("region") != null) && (!params.getString("region").isEmpty()) ) {
                        // Param: region, Type: String
                        networksRequestBuilder.withRegion(stringStraightPass(params.getString("region")));
                    }
                    if (params.has("uri") && (params.getString("uri") != null) && (!params.getString("uri").isEmpty()) ) {
                        // Param: uri, Type: String
                        networksRequestBuilder.withUri(stringStraightPass(params.getString("uri")));
                    }
                    if (params.has("startPage") && (params.getString("startPage") != null) && (!params.getString("startPage").isEmpty()) ) {
                        // Param: startPage, Type: Integer
                        networksRequestBuilder.withStartPage(integerStraightPass(params.getInt("startPage")));
                    }
                    if (params.has("count") && (params.getString("count") != null) && (!params.getString("count").isEmpty()) ) {
                        // Param: count, Type: Integer
                        networksRequestBuilder.withCount(integerStraightPass(params.getInt("count")));
                    }
                    if (params.has("depth") && (params.getString("depth") != null) && (!params.getString("depth").isEmpty()) ) {
                        // Param: depth, Type: Integer
                        networksRequestBuilder.withDepth(integerStraightPass(params.getInt("depth")));
                    }
                    if (params.has("forbiddenId") && (params.getString("forbiddenId") != null) && (!params.getString("forbiddenId").isEmpty()) ) {
                        // Param: forbiddenId, Type: List
                        networksRequestBuilder.withForbiddenId(jsonArrayToStringList(params.getJSONArray("forbiddenId")));
                    }
                    if (params.has("forbiddenUris") && (params.getString("forbiddenUris") != null) && (!params.getString("forbiddenUris").isEmpty()) ) {
                        // Param: forbiddenUris, Type: List
                        networksRequestBuilder.withForbiddenUris(jsonArrayToStringList(params.getJSONArray("forbiddenUris")));
                    }
                    if (params.has("externalCode") && (params.getString("externalCode") != null) && (!params.getString("externalCode").isEmpty()) ) {
                        // Param: externalCode, Type: String
                        networksRequestBuilder.withExternalCode(stringStraightPass(params.getString("externalCode")));
                    }
                    if (params.has("headsign") && (params.getString("headsign") != null) && (!params.getString("headsign").isEmpty()) ) {
                        // Param: headsign, Type: String
                        networksRequestBuilder.withHeadsign(stringStraightPass(params.getString("headsign")));
                    }
                    if (params.has("showCodes") && (params.getString("showCodes") != null) && (!params.getString("showCodes").isEmpty()) ) {
                        // Param: showCodes, Type: Boolean
                        networksRequestBuilder.withShowCodes(booleanStraightPass(params.getBoolean("showCodes")));
                    }
                    if (params.has("odtLevel") && (params.getString("odtLevel") != null) && (!params.getString("odtLevel").isEmpty()) ) {
                        // Param: odtLevel, Type: String
                        networksRequestBuilder.withOdtLevel(stringStraightPass(params.getString("odtLevel")));
                    }
                    if (params.has("dataFreshness") && (params.getString("dataFreshness") != null) && (!params.getString("dataFreshness").isEmpty()) ) {
                        // Param: dataFreshness, Type: String
                        networksRequestBuilder.withDataFreshness(stringStraightPass(params.getString("dataFreshness")));
                    }
                    if (params.has("distance") && (params.getString("distance") != null) && (!params.getString("distance").isEmpty()) ) {
                        // Param: distance, Type: Integer
                        networksRequestBuilder.withDistance(integerStraightPass(params.getInt("distance")));
                    }
                    if (params.has("since") && (params.getString("since") != null) && (!params.getString("since").isEmpty()) ) {
                        // Param: since, Type: Date
                        networksRequestBuilder.withSince(stringToDateTime(params.getString("since")));
                    }
                    if (params.has("until") && (params.getString("until") != null) && (!params.getString("until").isEmpty()) ) {
                        // Param: until, Type: Date
                        networksRequestBuilder.withUntil(stringToDateTime(params.getString("until")));
                    }
                    if (params.has("disableGeojson") && (params.getString("disableGeojson") != null) && (!params.getString("disableGeojson").isEmpty()) ) {
                        // Param: disableGeojson, Type: Boolean
                        networksRequestBuilder.withDisableGeojson(booleanStraightPass(params.getBoolean("disableGeojson")));
                    }
                    if (params.has("disableDisruption") && (params.getString("disableDisruption") != null) && (!params.getString("disableDisruption").isEmpty()) ) {
                        // Param: disableDisruption, Type: Boolean
                        networksRequestBuilder.withDisableDisruption(booleanStraightPass(params.getBoolean("disableDisruption")));
                    }
                    if (params.has("filter") && (params.getString("filter") != null) && (!params.getString("filter").isEmpty()) ) {
                        // Param: filter, Type: String
                        networksRequestBuilder.withFilter(stringStraightPass(params.getString("filter")));
                    }
                    if (params.has("tags") && (params.getString("tags") != null) && (!params.getString("tags").isEmpty()) ) {
                        // Param: tags, Type: List
                        networksRequestBuilder.withTags(jsonArrayToStringList(params.getJSONArray("tags")));
                    }
                    if (params.has("originalId") && (params.getString("originalId") != null) && (!params.getString("originalId").isEmpty()) ) {
                        // Param: originalId, Type: String
                        networksRequestBuilder.withOriginalId(stringStraightPass(params.getString("originalId")));
                    }
                    
                    networksRequestBuilder.rawGet(new ApiCallback<String>() {
                        @Override
                        public void onFailure(ApiException e, int statusCode, Map<String, List<String>> responseHeaders) {
                            callbackContext.error("Problem during request call | " + e.getMessage());
                        }

                        @Override
                        public void onSuccess(String result, int statusCode, Map<String, List<String>> responseHeaders) {
                            JSONObject jsonObject = null;
                            try {
                                jsonObject = new JSONObject(result);
                                callbackContext.success(jsonObject);
                            } catch (Exception e) {
                                String errorMessage = "Problem during response parsing | " + String.valueOf(e.hashCode()) + ": " + e.getMessage();
                                callbackContext.error(errorMessage);
                            }
                        }

                        @Override
                        public void onUploadProgress(long bytesWritten, long contentLength, boolean done) {
                        }

                        @Override
                        public void onDownloadProgress(long bytesRead, long contentLength, boolean done) {
                        }
                    });
                } catch (Exception e) {
                    String errorMessage = "Problem during request building | " + String.valueOf(e.hashCode()) + ": " + e.getMessage();
                    callbackContext.error(errorMessage);
                }
            }
        });
    }
    final private void coverageRegionUriNetworksId(final JSONObject params, final CallbackContext callbackContext) {
        if (this.navitiaSdk == null) {
            callbackContext.error("NavitiaSDK is not instanciated");
            return;
        }

        final NetworksApi.CoverageRegionUriNetworksIdRequestBuilder networksRequestBuilder = this.navitiaSdk.networksApi.newCoverageRegionUriNetworksIdRequestBuilder();
        cordova.getThreadPool().execute(new Runnable() {
            @Override
            public void run() {
                try {
                    if (params.has("region") && (params.getString("region") != null) && (!params.getString("region").isEmpty()) ) {
                        // Param: region, Type: String
                        networksRequestBuilder.withRegion(stringStraightPass(params.getString("region")));
                    }
                    if (params.has("uri") && (params.getString("uri") != null) && (!params.getString("uri").isEmpty()) ) {
                        // Param: uri, Type: String
                        networksRequestBuilder.withUri(stringStraightPass(params.getString("uri")));
                    }
                    if (params.has("id") && (params.getString("id") != null) && (!params.getString("id").isEmpty()) ) {
                        // Param: id, Type: String
                        networksRequestBuilder.withId(stringStraightPass(params.getString("id")));
                    }
                    if (params.has("startPage") && (params.getString("startPage") != null) && (!params.getString("startPage").isEmpty()) ) {
                        // Param: startPage, Type: Integer
                        networksRequestBuilder.withStartPage(integerStraightPass(params.getInt("startPage")));
                    }
                    if (params.has("count") && (params.getString("count") != null) && (!params.getString("count").isEmpty()) ) {
                        // Param: count, Type: Integer
                        networksRequestBuilder.withCount(integerStraightPass(params.getInt("count")));
                    }
                    if (params.has("depth") && (params.getString("depth") != null) && (!params.getString("depth").isEmpty()) ) {
                        // Param: depth, Type: Integer
                        networksRequestBuilder.withDepth(integerStraightPass(params.getInt("depth")));
                    }
                    if (params.has("forbiddenId") && (params.getString("forbiddenId") != null) && (!params.getString("forbiddenId").isEmpty()) ) {
                        // Param: forbiddenId, Type: List
                        networksRequestBuilder.withForbiddenId(jsonArrayToStringList(params.getJSONArray("forbiddenId")));
                    }
                    if (params.has("forbiddenUris") && (params.getString("forbiddenUris") != null) && (!params.getString("forbiddenUris").isEmpty()) ) {
                        // Param: forbiddenUris, Type: List
                        networksRequestBuilder.withForbiddenUris(jsonArrayToStringList(params.getJSONArray("forbiddenUris")));
                    }
                    if (params.has("externalCode") && (params.getString("externalCode") != null) && (!params.getString("externalCode").isEmpty()) ) {
                        // Param: externalCode, Type: String
                        networksRequestBuilder.withExternalCode(stringStraightPass(params.getString("externalCode")));
                    }
                    if (params.has("headsign") && (params.getString("headsign") != null) && (!params.getString("headsign").isEmpty()) ) {
                        // Param: headsign, Type: String
                        networksRequestBuilder.withHeadsign(stringStraightPass(params.getString("headsign")));
                    }
                    if (params.has("showCodes") && (params.getString("showCodes") != null) && (!params.getString("showCodes").isEmpty()) ) {
                        // Param: showCodes, Type: Boolean
                        networksRequestBuilder.withShowCodes(booleanStraightPass(params.getBoolean("showCodes")));
                    }
                    if (params.has("odtLevel") && (params.getString("odtLevel") != null) && (!params.getString("odtLevel").isEmpty()) ) {
                        // Param: odtLevel, Type: String
                        networksRequestBuilder.withOdtLevel(stringStraightPass(params.getString("odtLevel")));
                    }
                    if (params.has("dataFreshness") && (params.getString("dataFreshness") != null) && (!params.getString("dataFreshness").isEmpty()) ) {
                        // Param: dataFreshness, Type: String
                        networksRequestBuilder.withDataFreshness(stringStraightPass(params.getString("dataFreshness")));
                    }
                    if (params.has("distance") && (params.getString("distance") != null) && (!params.getString("distance").isEmpty()) ) {
                        // Param: distance, Type: Integer
                        networksRequestBuilder.withDistance(integerStraightPass(params.getInt("distance")));
                    }
                    if (params.has("since") && (params.getString("since") != null) && (!params.getString("since").isEmpty()) ) {
                        // Param: since, Type: Date
                        networksRequestBuilder.withSince(stringToDateTime(params.getString("since")));
                    }
                    if (params.has("until") && (params.getString("until") != null) && (!params.getString("until").isEmpty()) ) {
                        // Param: until, Type: Date
                        networksRequestBuilder.withUntil(stringToDateTime(params.getString("until")));
                    }
                    if (params.has("disableGeojson") && (params.getString("disableGeojson") != null) && (!params.getString("disableGeojson").isEmpty()) ) {
                        // Param: disableGeojson, Type: Boolean
                        networksRequestBuilder.withDisableGeojson(booleanStraightPass(params.getBoolean("disableGeojson")));
                    }
                    if (params.has("disableDisruption") && (params.getString("disableDisruption") != null) && (!params.getString("disableDisruption").isEmpty()) ) {
                        // Param: disableDisruption, Type: Boolean
                        networksRequestBuilder.withDisableDisruption(booleanStraightPass(params.getBoolean("disableDisruption")));
                    }
                    if (params.has("tags") && (params.getString("tags") != null) && (!params.getString("tags").isEmpty()) ) {
                        // Param: tags, Type: List
                        networksRequestBuilder.withTags(jsonArrayToStringList(params.getJSONArray("tags")));
                    }
                    if (params.has("originalId") && (params.getString("originalId") != null) && (!params.getString("originalId").isEmpty()) ) {
                        // Param: originalId, Type: String
                        networksRequestBuilder.withOriginalId(stringStraightPass(params.getString("originalId")));
                    }
                    
                    networksRequestBuilder.rawGet(new ApiCallback<String>() {
                        @Override
                        public void onFailure(ApiException e, int statusCode, Map<String, List<String>> responseHeaders) {
                            callbackContext.error("Problem during request call | " + e.getMessage());
                        }

                        @Override
                        public void onSuccess(String result, int statusCode, Map<String, List<String>> responseHeaders) {
                            JSONObject jsonObject = null;
                            try {
                                jsonObject = new JSONObject(result);
                                callbackContext.success(jsonObject);
                            } catch (Exception e) {
                                String errorMessage = "Problem during response parsing | " + String.valueOf(e.hashCode()) + ": " + e.getMessage();
                                callbackContext.error(errorMessage);
                            }
                        }

                        @Override
                        public void onUploadProgress(long bytesWritten, long contentLength, boolean done) {
                        }

                        @Override
                        public void onDownloadProgress(long bytesRead, long contentLength, boolean done) {
                        }
                    });
                } catch (Exception e) {
                    String errorMessage = "Problem during request building | " + String.valueOf(e.hashCode()) + ": " + e.getMessage();
                    callbackContext.error(errorMessage);
                }
            }
        });
    }
    final private void networks(final JSONObject params, final CallbackContext callbackContext) {
        if (this.navitiaSdk == null) {
            callbackContext.error("NavitiaSDK is not instanciated");
            return;
        }

        final NetworksApi.NetworksRequestBuilder networksRequestBuilder = this.navitiaSdk.networksApi.newNetworksRequestBuilder();
        cordova.getThreadPool().execute(new Runnable() {
            @Override
            public void run() {
                try {
                    if (params.has("externalCode") && (params.getString("externalCode") != null) && (!params.getString("externalCode").isEmpty()) ) {
                        // Param: externalCode, Type: String
                        networksRequestBuilder.withExternalCode(stringStraightPass(params.getString("externalCode")));
                    }
                    if (params.has("startPage") && (params.getString("startPage") != null) && (!params.getString("startPage").isEmpty()) ) {
                        // Param: startPage, Type: Integer
                        networksRequestBuilder.withStartPage(integerStraightPass(params.getInt("startPage")));
                    }
                    if (params.has("count") && (params.getString("count") != null) && (!params.getString("count").isEmpty()) ) {
                        // Param: count, Type: Integer
                        networksRequestBuilder.withCount(integerStraightPass(params.getInt("count")));
                    }
                    if (params.has("depth") && (params.getString("depth") != null) && (!params.getString("depth").isEmpty()) ) {
                        // Param: depth, Type: Integer
                        networksRequestBuilder.withDepth(integerStraightPass(params.getInt("depth")));
                    }
                    if (params.has("forbiddenId") && (params.getString("forbiddenId") != null) && (!params.getString("forbiddenId").isEmpty()) ) {
                        // Param: forbiddenId, Type: List
                        networksRequestBuilder.withForbiddenId(jsonArrayToStringList(params.getJSONArray("forbiddenId")));
                    }
                    if (params.has("forbiddenUris") && (params.getString("forbiddenUris") != null) && (!params.getString("forbiddenUris").isEmpty()) ) {
                        // Param: forbiddenUris, Type: List
                        networksRequestBuilder.withForbiddenUris(jsonArrayToStringList(params.getJSONArray("forbiddenUris")));
                    }
                    if (params.has("headsign") && (params.getString("headsign") != null) && (!params.getString("headsign").isEmpty()) ) {
                        // Param: headsign, Type: String
                        networksRequestBuilder.withHeadsign(stringStraightPass(params.getString("headsign")));
                    }
                    if (params.has("showCodes") && (params.getString("showCodes") != null) && (!params.getString("showCodes").isEmpty()) ) {
                        // Param: showCodes, Type: Boolean
                        networksRequestBuilder.withShowCodes(booleanStraightPass(params.getBoolean("showCodes")));
                    }
                    if (params.has("odtLevel") && (params.getString("odtLevel") != null) && (!params.getString("odtLevel").isEmpty()) ) {
                        // Param: odtLevel, Type: String
                        networksRequestBuilder.withOdtLevel(stringStraightPass(params.getString("odtLevel")));
                    }
                    if (params.has("dataFreshness") && (params.getString("dataFreshness") != null) && (!params.getString("dataFreshness").isEmpty()) ) {
                        // Param: dataFreshness, Type: String
                        networksRequestBuilder.withDataFreshness(stringStraightPass(params.getString("dataFreshness")));
                    }
                    if (params.has("distance") && (params.getString("distance") != null) && (!params.getString("distance").isEmpty()) ) {
                        // Param: distance, Type: Integer
                        networksRequestBuilder.withDistance(integerStraightPass(params.getInt("distance")));
                    }
                    if (params.has("since") && (params.getString("since") != null) && (!params.getString("since").isEmpty()) ) {
                        // Param: since, Type: Date
                        networksRequestBuilder.withSince(stringToDateTime(params.getString("since")));
                    }
                    if (params.has("until") && (params.getString("until") != null) && (!params.getString("until").isEmpty()) ) {
                        // Param: until, Type: Date
                        networksRequestBuilder.withUntil(stringToDateTime(params.getString("until")));
                    }
                    if (params.has("disableGeojson") && (params.getString("disableGeojson") != null) && (!params.getString("disableGeojson").isEmpty()) ) {
                        // Param: disableGeojson, Type: Boolean
                        networksRequestBuilder.withDisableGeojson(booleanStraightPass(params.getBoolean("disableGeojson")));
                    }
                    if (params.has("disableDisruption") && (params.getString("disableDisruption") != null) && (!params.getString("disableDisruption").isEmpty()) ) {
                        // Param: disableDisruption, Type: Boolean
                        networksRequestBuilder.withDisableDisruption(booleanStraightPass(params.getBoolean("disableDisruption")));
                    }
                    if (params.has("filter") && (params.getString("filter") != null) && (!params.getString("filter").isEmpty()) ) {
                        // Param: filter, Type: String
                        networksRequestBuilder.withFilter(stringStraightPass(params.getString("filter")));
                    }
                    if (params.has("tags") && (params.getString("tags") != null) && (!params.getString("tags").isEmpty()) ) {
                        // Param: tags, Type: List
                        networksRequestBuilder.withTags(jsonArrayToStringList(params.getJSONArray("tags")));
                    }
                    if (params.has("originalId") && (params.getString("originalId") != null) && (!params.getString("originalId").isEmpty()) ) {
                        // Param: originalId, Type: String
                        networksRequestBuilder.withOriginalId(stringStraightPass(params.getString("originalId")));
                    }
                    
                    networksRequestBuilder.rawGet(new ApiCallback<String>() {
                        @Override
                        public void onFailure(ApiException e, int statusCode, Map<String, List<String>> responseHeaders) {
                            callbackContext.error("Problem during request call | " + e.getMessage());
                        }

                        @Override
                        public void onSuccess(String result, int statusCode, Map<String, List<String>> responseHeaders) {
                            JSONObject jsonObject = null;
                            try {
                                jsonObject = new JSONObject(result);
                                callbackContext.success(jsonObject);
                            } catch (Exception e) {
                                String errorMessage = "Problem during response parsing | " + String.valueOf(e.hashCode()) + ": " + e.getMessage();
                                callbackContext.error(errorMessage);
                            }
                        }

                        @Override
                        public void onUploadProgress(long bytesWritten, long contentLength, boolean done) {
                        }

                        @Override
                        public void onDownloadProgress(long bytesRead, long contentLength, boolean done) {
                        }
                    });
                } catch (Exception e) {
                    String errorMessage = "Problem during request building | " + String.valueOf(e.hashCode()) + ": " + e.getMessage();
                    callbackContext.error(errorMessage);
                }
            }
        });
    }
    final private void coverageLonLatArrivals(final JSONObject params, final CallbackContext callbackContext) {
        if (this.navitiaSdk == null) {
            callbackContext.error("NavitiaSDK is not instanciated");
            return;
        }

        final NextArrivalsApi.CoverageLonLatArrivalsRequestBuilder nextArrivalsRequestBuilder = this.navitiaSdk.nextArrivalsApi.newCoverageLonLatArrivalsRequestBuilder();
        cordova.getThreadPool().execute(new Runnable() {
            @Override
            public void run() {
                try {
                    if (params.has("lat") && (params.getString("lat") != null) && (!params.getString("lat").isEmpty()) ) {
                        // Param: lat, Type: BigDecimal
                        nextArrivalsRequestBuilder.withLat(longToBigDecimal(params.getLong("lat")));
                    }
                    if (params.has("lon") && (params.getString("lon") != null) && (!params.getString("lon").isEmpty()) ) {
                        // Param: lon, Type: BigDecimal
                        nextArrivalsRequestBuilder.withLon(longToBigDecimal(params.getLong("lon")));
                    }
                    if (params.has("filter") && (params.getString("filter") != null) && (!params.getString("filter").isEmpty()) ) {
                        // Param: filter, Type: String
                        nextArrivalsRequestBuilder.withFilter(stringStraightPass(params.getString("filter")));
                    }
                    if (params.has("fromDatetime") && (params.getString("fromDatetime") != null) && (!params.getString("fromDatetime").isEmpty()) ) {
                        // Param: fromDatetime, Type: Date
                        nextArrivalsRequestBuilder.withFromDatetime(stringToDateTime(params.getString("fromDatetime")));
                    }
                    if (params.has("untilDatetime") && (params.getString("untilDatetime") != null) && (!params.getString("untilDatetime").isEmpty()) ) {
                        // Param: untilDatetime, Type: Date
                        nextArrivalsRequestBuilder.withUntilDatetime(stringToDateTime(params.getString("untilDatetime")));
                    }
                    if (params.has("duration") && (params.getString("duration") != null) && (!params.getString("duration").isEmpty()) ) {
                        // Param: duration, Type: Integer
                        nextArrivalsRequestBuilder.withDuration(integerStraightPass(params.getInt("duration")));
                    }
                    if (params.has("depth") && (params.getString("depth") != null) && (!params.getString("depth").isEmpty()) ) {
                        // Param: depth, Type: Integer
                        nextArrivalsRequestBuilder.withDepth(integerStraightPass(params.getInt("depth")));
                    }
                    if (params.has("count") && (params.getString("count") != null) && (!params.getString("count").isEmpty()) ) {
                        // Param: count, Type: Integer
                        nextArrivalsRequestBuilder.withCount(integerStraightPass(params.getInt("count")));
                    }
                    if (params.has("startPage") && (params.getString("startPage") != null) && (!params.getString("startPage").isEmpty()) ) {
                        // Param: startPage, Type: Integer
                        nextArrivalsRequestBuilder.withStartPage(integerStraightPass(params.getInt("startPage")));
                    }
                    if (params.has("maxDateTimes") && (params.getString("maxDateTimes") != null) && (!params.getString("maxDateTimes").isEmpty()) ) {
                        // Param: maxDateTimes, Type: Integer
                        nextArrivalsRequestBuilder.withMaxDateTimes(integerStraightPass(params.getInt("maxDateTimes")));
                    }
                    if (params.has("forbiddenId") && (params.getString("forbiddenId") != null) && (!params.getString("forbiddenId").isEmpty()) ) {
                        // Param: forbiddenId, Type: List
                        nextArrivalsRequestBuilder.withForbiddenId(jsonArrayToStringList(params.getJSONArray("forbiddenId")));
                    }
                    if (params.has("forbiddenUris") && (params.getString("forbiddenUris") != null) && (!params.getString("forbiddenUris").isEmpty()) ) {
                        // Param: forbiddenUris, Type: List
                        nextArrivalsRequestBuilder.withForbiddenUris(jsonArrayToStringList(params.getJSONArray("forbiddenUris")));
                    }
                    if (params.has("calendar") && (params.getString("calendar") != null) && (!params.getString("calendar").isEmpty()) ) {
                        // Param: calendar, Type: String
                        nextArrivalsRequestBuilder.withCalendar(stringStraightPass(params.getString("calendar")));
                    }
                    if (params.has("distance") && (params.getString("distance") != null) && (!params.getString("distance").isEmpty()) ) {
                        // Param: distance, Type: Integer
                        nextArrivalsRequestBuilder.withDistance(integerStraightPass(params.getInt("distance")));
                    }
                    if (params.has("showCodes") && (params.getString("showCodes") != null) && (!params.getString("showCodes").isEmpty()) ) {
                        // Param: showCodes, Type: Boolean
                        nextArrivalsRequestBuilder.withShowCodes(booleanStraightPass(params.getBoolean("showCodes")));
                    }
                    if (params.has("dataFreshness") && (params.getString("dataFreshness") != null) && (!params.getString("dataFreshness").isEmpty()) ) {
                        // Param: dataFreshness, Type: String
                        nextArrivalsRequestBuilder.withDataFreshness(stringStraightPass(params.getString("dataFreshness")));
                    }
                    if (params.has("itemsPerSchedule") && (params.getString("itemsPerSchedule") != null) && (!params.getString("itemsPerSchedule").isEmpty()) ) {
                        // Param: itemsPerSchedule, Type: Integer
                        nextArrivalsRequestBuilder.withItemsPerSchedule(integerStraightPass(params.getInt("itemsPerSchedule")));
                    }
                    if (params.has("disableGeojson") && (params.getString("disableGeojson") != null) && (!params.getString("disableGeojson").isEmpty()) ) {
                        // Param: disableGeojson, Type: Boolean
                        nextArrivalsRequestBuilder.withDisableGeojson(booleanStraightPass(params.getBoolean("disableGeojson")));
                    }
                    if (params.has("directionType") && (params.getString("directionType") != null) && (!params.getString("directionType").isEmpty()) ) {
                        // Param: directionType, Type: String
                        nextArrivalsRequestBuilder.withDirectionType(stringStraightPass(params.getString("directionType")));
                    }
                    
                    nextArrivalsRequestBuilder.rawGet(new ApiCallback<String>() {
                        @Override
                        public void onFailure(ApiException e, int statusCode, Map<String, List<String>> responseHeaders) {
                            callbackContext.error("Problem during request call | " + e.getMessage());
                        }

                        @Override
                        public void onSuccess(String result, int statusCode, Map<String, List<String>> responseHeaders) {
                            JSONObject jsonObject = null;
                            try {
                                jsonObject = new JSONObject(result);
                                callbackContext.success(jsonObject);
                            } catch (Exception e) {
                                String errorMessage = "Problem during response parsing | " + String.valueOf(e.hashCode()) + ": " + e.getMessage();
                                callbackContext.error(errorMessage);
                            }
                        }

                        @Override
                        public void onUploadProgress(long bytesWritten, long contentLength, boolean done) {
                        }

                        @Override
                        public void onDownloadProgress(long bytesRead, long contentLength, boolean done) {
                        }
                    });
                } catch (Exception e) {
                    String errorMessage = "Problem during request building | " + String.valueOf(e.hashCode()) + ": " + e.getMessage();
                    callbackContext.error(errorMessage);
                }
            }
        });
    }
    final private void coverageLonLatUriArrivals(final JSONObject params, final CallbackContext callbackContext) {
        if (this.navitiaSdk == null) {
            callbackContext.error("NavitiaSDK is not instanciated");
            return;
        }

        final NextArrivalsApi.CoverageLonLatUriArrivalsRequestBuilder nextArrivalsRequestBuilder = this.navitiaSdk.nextArrivalsApi.newCoverageLonLatUriArrivalsRequestBuilder();
        cordova.getThreadPool().execute(new Runnable() {
            @Override
            public void run() {
                try {
                    if (params.has("lat") && (params.getString("lat") != null) && (!params.getString("lat").isEmpty()) ) {
                        // Param: lat, Type: BigDecimal
                        nextArrivalsRequestBuilder.withLat(longToBigDecimal(params.getLong("lat")));
                    }
                    if (params.has("lon") && (params.getString("lon") != null) && (!params.getString("lon").isEmpty()) ) {
                        // Param: lon, Type: BigDecimal
                        nextArrivalsRequestBuilder.withLon(longToBigDecimal(params.getLong("lon")));
                    }
                    if (params.has("uri") && (params.getString("uri") != null) && (!params.getString("uri").isEmpty()) ) {
                        // Param: uri, Type: String
                        nextArrivalsRequestBuilder.withUri(stringStraightPass(params.getString("uri")));
                    }
                    if (params.has("filter") && (params.getString("filter") != null) && (!params.getString("filter").isEmpty()) ) {
                        // Param: filter, Type: String
                        nextArrivalsRequestBuilder.withFilter(stringStraightPass(params.getString("filter")));
                    }
                    if (params.has("fromDatetime") && (params.getString("fromDatetime") != null) && (!params.getString("fromDatetime").isEmpty()) ) {
                        // Param: fromDatetime, Type: Date
                        nextArrivalsRequestBuilder.withFromDatetime(stringToDateTime(params.getString("fromDatetime")));
                    }
                    if (params.has("untilDatetime") && (params.getString("untilDatetime") != null) && (!params.getString("untilDatetime").isEmpty()) ) {
                        // Param: untilDatetime, Type: Date
                        nextArrivalsRequestBuilder.withUntilDatetime(stringToDateTime(params.getString("untilDatetime")));
                    }
                    if (params.has("duration") && (params.getString("duration") != null) && (!params.getString("duration").isEmpty()) ) {
                        // Param: duration, Type: Integer
                        nextArrivalsRequestBuilder.withDuration(integerStraightPass(params.getInt("duration")));
                    }
                    if (params.has("depth") && (params.getString("depth") != null) && (!params.getString("depth").isEmpty()) ) {
                        // Param: depth, Type: Integer
                        nextArrivalsRequestBuilder.withDepth(integerStraightPass(params.getInt("depth")));
                    }
                    if (params.has("count") && (params.getString("count") != null) && (!params.getString("count").isEmpty()) ) {
                        // Param: count, Type: Integer
                        nextArrivalsRequestBuilder.withCount(integerStraightPass(params.getInt("count")));
                    }
                    if (params.has("startPage") && (params.getString("startPage") != null) && (!params.getString("startPage").isEmpty()) ) {
                        // Param: startPage, Type: Integer
                        nextArrivalsRequestBuilder.withStartPage(integerStraightPass(params.getInt("startPage")));
                    }
                    if (params.has("maxDateTimes") && (params.getString("maxDateTimes") != null) && (!params.getString("maxDateTimes").isEmpty()) ) {
                        // Param: maxDateTimes, Type: Integer
                        nextArrivalsRequestBuilder.withMaxDateTimes(integerStraightPass(params.getInt("maxDateTimes")));
                    }
                    if (params.has("forbiddenId") && (params.getString("forbiddenId") != null) && (!params.getString("forbiddenId").isEmpty()) ) {
                        // Param: forbiddenId, Type: List
                        nextArrivalsRequestBuilder.withForbiddenId(jsonArrayToStringList(params.getJSONArray("forbiddenId")));
                    }
                    if (params.has("forbiddenUris") && (params.getString("forbiddenUris") != null) && (!params.getString("forbiddenUris").isEmpty()) ) {
                        // Param: forbiddenUris, Type: List
                        nextArrivalsRequestBuilder.withForbiddenUris(jsonArrayToStringList(params.getJSONArray("forbiddenUris")));
                    }
                    if (params.has("calendar") && (params.getString("calendar") != null) && (!params.getString("calendar").isEmpty()) ) {
                        // Param: calendar, Type: String
                        nextArrivalsRequestBuilder.withCalendar(stringStraightPass(params.getString("calendar")));
                    }
                    if (params.has("distance") && (params.getString("distance") != null) && (!params.getString("distance").isEmpty()) ) {
                        // Param: distance, Type: Integer
                        nextArrivalsRequestBuilder.withDistance(integerStraightPass(params.getInt("distance")));
                    }
                    if (params.has("showCodes") && (params.getString("showCodes") != null) && (!params.getString("showCodes").isEmpty()) ) {
                        // Param: showCodes, Type: Boolean
                        nextArrivalsRequestBuilder.withShowCodes(booleanStraightPass(params.getBoolean("showCodes")));
                    }
                    if (params.has("dataFreshness") && (params.getString("dataFreshness") != null) && (!params.getString("dataFreshness").isEmpty()) ) {
                        // Param: dataFreshness, Type: String
                        nextArrivalsRequestBuilder.withDataFreshness(stringStraightPass(params.getString("dataFreshness")));
                    }
                    if (params.has("itemsPerSchedule") && (params.getString("itemsPerSchedule") != null) && (!params.getString("itemsPerSchedule").isEmpty()) ) {
                        // Param: itemsPerSchedule, Type: Integer
                        nextArrivalsRequestBuilder.withItemsPerSchedule(integerStraightPass(params.getInt("itemsPerSchedule")));
                    }
                    if (params.has("disableGeojson") && (params.getString("disableGeojson") != null) && (!params.getString("disableGeojson").isEmpty()) ) {
                        // Param: disableGeojson, Type: Boolean
                        nextArrivalsRequestBuilder.withDisableGeojson(booleanStraightPass(params.getBoolean("disableGeojson")));
                    }
                    if (params.has("directionType") && (params.getString("directionType") != null) && (!params.getString("directionType").isEmpty()) ) {
                        // Param: directionType, Type: String
                        nextArrivalsRequestBuilder.withDirectionType(stringStraightPass(params.getString("directionType")));
                    }
                    
                    nextArrivalsRequestBuilder.rawGet(new ApiCallback<String>() {
                        @Override
                        public void onFailure(ApiException e, int statusCode, Map<String, List<String>> responseHeaders) {
                            callbackContext.error("Problem during request call | " + e.getMessage());
                        }

                        @Override
                        public void onSuccess(String result, int statusCode, Map<String, List<String>> responseHeaders) {
                            JSONObject jsonObject = null;
                            try {
                                jsonObject = new JSONObject(result);
                                callbackContext.success(jsonObject);
                            } catch (Exception e) {
                                String errorMessage = "Problem during response parsing | " + String.valueOf(e.hashCode()) + ": " + e.getMessage();
                                callbackContext.error(errorMessage);
                            }
                        }

                        @Override
                        public void onUploadProgress(long bytesWritten, long contentLength, boolean done) {
                        }

                        @Override
                        public void onDownloadProgress(long bytesRead, long contentLength, boolean done) {
                        }
                    });
                } catch (Exception e) {
                    String errorMessage = "Problem during request building | " + String.valueOf(e.hashCode()) + ": " + e.getMessage();
                    callbackContext.error(errorMessage);
                }
            }
        });
    }
    final private void coverageRegionArrivals(final JSONObject params, final CallbackContext callbackContext) {
        if (this.navitiaSdk == null) {
            callbackContext.error("NavitiaSDK is not instanciated");
            return;
        }

        final NextArrivalsApi.CoverageRegionArrivalsRequestBuilder nextArrivalsRequestBuilder = this.navitiaSdk.nextArrivalsApi.newCoverageRegionArrivalsRequestBuilder();
        cordova.getThreadPool().execute(new Runnable() {
            @Override
            public void run() {
                try {
                    if (params.has("region") && (params.getString("region") != null) && (!params.getString("region").isEmpty()) ) {
                        // Param: region, Type: String
                        nextArrivalsRequestBuilder.withRegion(stringStraightPass(params.getString("region")));
                    }
                    if (params.has("filter") && (params.getString("filter") != null) && (!params.getString("filter").isEmpty()) ) {
                        // Param: filter, Type: String
                        nextArrivalsRequestBuilder.withFilter(stringStraightPass(params.getString("filter")));
                    }
                    if (params.has("fromDatetime") && (params.getString("fromDatetime") != null) && (!params.getString("fromDatetime").isEmpty()) ) {
                        // Param: fromDatetime, Type: Date
                        nextArrivalsRequestBuilder.withFromDatetime(stringToDateTime(params.getString("fromDatetime")));
                    }
                    if (params.has("untilDatetime") && (params.getString("untilDatetime") != null) && (!params.getString("untilDatetime").isEmpty()) ) {
                        // Param: untilDatetime, Type: Date
                        nextArrivalsRequestBuilder.withUntilDatetime(stringToDateTime(params.getString("untilDatetime")));
                    }
                    if (params.has("duration") && (params.getString("duration") != null) && (!params.getString("duration").isEmpty()) ) {
                        // Param: duration, Type: Integer
                        nextArrivalsRequestBuilder.withDuration(integerStraightPass(params.getInt("duration")));
                    }
                    if (params.has("depth") && (params.getString("depth") != null) && (!params.getString("depth").isEmpty()) ) {
                        // Param: depth, Type: Integer
                        nextArrivalsRequestBuilder.withDepth(integerStraightPass(params.getInt("depth")));
                    }
                    if (params.has("count") && (params.getString("count") != null) && (!params.getString("count").isEmpty()) ) {
                        // Param: count, Type: Integer
                        nextArrivalsRequestBuilder.withCount(integerStraightPass(params.getInt("count")));
                    }
                    if (params.has("startPage") && (params.getString("startPage") != null) && (!params.getString("startPage").isEmpty()) ) {
                        // Param: startPage, Type: Integer
                        nextArrivalsRequestBuilder.withStartPage(integerStraightPass(params.getInt("startPage")));
                    }
                    if (params.has("maxDateTimes") && (params.getString("maxDateTimes") != null) && (!params.getString("maxDateTimes").isEmpty()) ) {
                        // Param: maxDateTimes, Type: Integer
                        nextArrivalsRequestBuilder.withMaxDateTimes(integerStraightPass(params.getInt("maxDateTimes")));
                    }
                    if (params.has("forbiddenId") && (params.getString("forbiddenId") != null) && (!params.getString("forbiddenId").isEmpty()) ) {
                        // Param: forbiddenId, Type: List
                        nextArrivalsRequestBuilder.withForbiddenId(jsonArrayToStringList(params.getJSONArray("forbiddenId")));
                    }
                    if (params.has("forbiddenUris") && (params.getString("forbiddenUris") != null) && (!params.getString("forbiddenUris").isEmpty()) ) {
                        // Param: forbiddenUris, Type: List
                        nextArrivalsRequestBuilder.withForbiddenUris(jsonArrayToStringList(params.getJSONArray("forbiddenUris")));
                    }
                    if (params.has("calendar") && (params.getString("calendar") != null) && (!params.getString("calendar").isEmpty()) ) {
                        // Param: calendar, Type: String
                        nextArrivalsRequestBuilder.withCalendar(stringStraightPass(params.getString("calendar")));
                    }
                    if (params.has("distance") && (params.getString("distance") != null) && (!params.getString("distance").isEmpty()) ) {
                        // Param: distance, Type: Integer
                        nextArrivalsRequestBuilder.withDistance(integerStraightPass(params.getInt("distance")));
                    }
                    if (params.has("showCodes") && (params.getString("showCodes") != null) && (!params.getString("showCodes").isEmpty()) ) {
                        // Param: showCodes, Type: Boolean
                        nextArrivalsRequestBuilder.withShowCodes(booleanStraightPass(params.getBoolean("showCodes")));
                    }
                    if (params.has("dataFreshness") && (params.getString("dataFreshness") != null) && (!params.getString("dataFreshness").isEmpty()) ) {
                        // Param: dataFreshness, Type: String
                        nextArrivalsRequestBuilder.withDataFreshness(stringStraightPass(params.getString("dataFreshness")));
                    }
                    if (params.has("itemsPerSchedule") && (params.getString("itemsPerSchedule") != null) && (!params.getString("itemsPerSchedule").isEmpty()) ) {
                        // Param: itemsPerSchedule, Type: Integer
                        nextArrivalsRequestBuilder.withItemsPerSchedule(integerStraightPass(params.getInt("itemsPerSchedule")));
                    }
                    if (params.has("disableGeojson") && (params.getString("disableGeojson") != null) && (!params.getString("disableGeojson").isEmpty()) ) {
                        // Param: disableGeojson, Type: Boolean
                        nextArrivalsRequestBuilder.withDisableGeojson(booleanStraightPass(params.getBoolean("disableGeojson")));
                    }
                    if (params.has("directionType") && (params.getString("directionType") != null) && (!params.getString("directionType").isEmpty()) ) {
                        // Param: directionType, Type: String
                        nextArrivalsRequestBuilder.withDirectionType(stringStraightPass(params.getString("directionType")));
                    }
                    
                    nextArrivalsRequestBuilder.rawGet(new ApiCallback<String>() {
                        @Override
                        public void onFailure(ApiException e, int statusCode, Map<String, List<String>> responseHeaders) {
                            callbackContext.error("Problem during request call | " + e.getMessage());
                        }

                        @Override
                        public void onSuccess(String result, int statusCode, Map<String, List<String>> responseHeaders) {
                            JSONObject jsonObject = null;
                            try {
                                jsonObject = new JSONObject(result);
                                callbackContext.success(jsonObject);
                            } catch (Exception e) {
                                String errorMessage = "Problem during response parsing | " + String.valueOf(e.hashCode()) + ": " + e.getMessage();
                                callbackContext.error(errorMessage);
                            }
                        }

                        @Override
                        public void onUploadProgress(long bytesWritten, long contentLength, boolean done) {
                        }

                        @Override
                        public void onDownloadProgress(long bytesRead, long contentLength, boolean done) {
                        }
                    });
                } catch (Exception e) {
                    String errorMessage = "Problem during request building | " + String.valueOf(e.hashCode()) + ": " + e.getMessage();
                    callbackContext.error(errorMessage);
                }
            }
        });
    }
    final private void coverageRegionUriArrivals(final JSONObject params, final CallbackContext callbackContext) {
        if (this.navitiaSdk == null) {
            callbackContext.error("NavitiaSDK is not instanciated");
            return;
        }

        final NextArrivalsApi.CoverageRegionUriArrivalsRequestBuilder nextArrivalsRequestBuilder = this.navitiaSdk.nextArrivalsApi.newCoverageRegionUriArrivalsRequestBuilder();
        cordova.getThreadPool().execute(new Runnable() {
            @Override
            public void run() {
                try {
                    if (params.has("region") && (params.getString("region") != null) && (!params.getString("region").isEmpty()) ) {
                        // Param: region, Type: String
                        nextArrivalsRequestBuilder.withRegion(stringStraightPass(params.getString("region")));
                    }
                    if (params.has("uri") && (params.getString("uri") != null) && (!params.getString("uri").isEmpty()) ) {
                        // Param: uri, Type: String
                        nextArrivalsRequestBuilder.withUri(stringStraightPass(params.getString("uri")));
                    }
                    if (params.has("filter") && (params.getString("filter") != null) && (!params.getString("filter").isEmpty()) ) {
                        // Param: filter, Type: String
                        nextArrivalsRequestBuilder.withFilter(stringStraightPass(params.getString("filter")));
                    }
                    if (params.has("fromDatetime") && (params.getString("fromDatetime") != null) && (!params.getString("fromDatetime").isEmpty()) ) {
                        // Param: fromDatetime, Type: Date
                        nextArrivalsRequestBuilder.withFromDatetime(stringToDateTime(params.getString("fromDatetime")));
                    }
                    if (params.has("untilDatetime") && (params.getString("untilDatetime") != null) && (!params.getString("untilDatetime").isEmpty()) ) {
                        // Param: untilDatetime, Type: Date
                        nextArrivalsRequestBuilder.withUntilDatetime(stringToDateTime(params.getString("untilDatetime")));
                    }
                    if (params.has("duration") && (params.getString("duration") != null) && (!params.getString("duration").isEmpty()) ) {
                        // Param: duration, Type: Integer
                        nextArrivalsRequestBuilder.withDuration(integerStraightPass(params.getInt("duration")));
                    }
                    if (params.has("depth") && (params.getString("depth") != null) && (!params.getString("depth").isEmpty()) ) {
                        // Param: depth, Type: Integer
                        nextArrivalsRequestBuilder.withDepth(integerStraightPass(params.getInt("depth")));
                    }
                    if (params.has("count") && (params.getString("count") != null) && (!params.getString("count").isEmpty()) ) {
                        // Param: count, Type: Integer
                        nextArrivalsRequestBuilder.withCount(integerStraightPass(params.getInt("count")));
                    }
                    if (params.has("startPage") && (params.getString("startPage") != null) && (!params.getString("startPage").isEmpty()) ) {
                        // Param: startPage, Type: Integer
                        nextArrivalsRequestBuilder.withStartPage(integerStraightPass(params.getInt("startPage")));
                    }
                    if (params.has("maxDateTimes") && (params.getString("maxDateTimes") != null) && (!params.getString("maxDateTimes").isEmpty()) ) {
                        // Param: maxDateTimes, Type: Integer
                        nextArrivalsRequestBuilder.withMaxDateTimes(integerStraightPass(params.getInt("maxDateTimes")));
                    }
                    if (params.has("forbiddenId") && (params.getString("forbiddenId") != null) && (!params.getString("forbiddenId").isEmpty()) ) {
                        // Param: forbiddenId, Type: List
                        nextArrivalsRequestBuilder.withForbiddenId(jsonArrayToStringList(params.getJSONArray("forbiddenId")));
                    }
                    if (params.has("forbiddenUris") && (params.getString("forbiddenUris") != null) && (!params.getString("forbiddenUris").isEmpty()) ) {
                        // Param: forbiddenUris, Type: List
                        nextArrivalsRequestBuilder.withForbiddenUris(jsonArrayToStringList(params.getJSONArray("forbiddenUris")));
                    }
                    if (params.has("calendar") && (params.getString("calendar") != null) && (!params.getString("calendar").isEmpty()) ) {
                        // Param: calendar, Type: String
                        nextArrivalsRequestBuilder.withCalendar(stringStraightPass(params.getString("calendar")));
                    }
                    if (params.has("distance") && (params.getString("distance") != null) && (!params.getString("distance").isEmpty()) ) {
                        // Param: distance, Type: Integer
                        nextArrivalsRequestBuilder.withDistance(integerStraightPass(params.getInt("distance")));
                    }
                    if (params.has("showCodes") && (params.getString("showCodes") != null) && (!params.getString("showCodes").isEmpty()) ) {
                        // Param: showCodes, Type: Boolean
                        nextArrivalsRequestBuilder.withShowCodes(booleanStraightPass(params.getBoolean("showCodes")));
                    }
                    if (params.has("dataFreshness") && (params.getString("dataFreshness") != null) && (!params.getString("dataFreshness").isEmpty()) ) {
                        // Param: dataFreshness, Type: String
                        nextArrivalsRequestBuilder.withDataFreshness(stringStraightPass(params.getString("dataFreshness")));
                    }
                    if (params.has("itemsPerSchedule") && (params.getString("itemsPerSchedule") != null) && (!params.getString("itemsPerSchedule").isEmpty()) ) {
                        // Param: itemsPerSchedule, Type: Integer
                        nextArrivalsRequestBuilder.withItemsPerSchedule(integerStraightPass(params.getInt("itemsPerSchedule")));
                    }
                    if (params.has("disableGeojson") && (params.getString("disableGeojson") != null) && (!params.getString("disableGeojson").isEmpty()) ) {
                        // Param: disableGeojson, Type: Boolean
                        nextArrivalsRequestBuilder.withDisableGeojson(booleanStraightPass(params.getBoolean("disableGeojson")));
                    }
                    if (params.has("directionType") && (params.getString("directionType") != null) && (!params.getString("directionType").isEmpty()) ) {
                        // Param: directionType, Type: String
                        nextArrivalsRequestBuilder.withDirectionType(stringStraightPass(params.getString("directionType")));
                    }
                    
                    nextArrivalsRequestBuilder.rawGet(new ApiCallback<String>() {
                        @Override
                        public void onFailure(ApiException e, int statusCode, Map<String, List<String>> responseHeaders) {
                            callbackContext.error("Problem during request call | " + e.getMessage());
                        }

                        @Override
                        public void onSuccess(String result, int statusCode, Map<String, List<String>> responseHeaders) {
                            JSONObject jsonObject = null;
                            try {
                                jsonObject = new JSONObject(result);
                                callbackContext.success(jsonObject);
                            } catch (Exception e) {
                                String errorMessage = "Problem during response parsing | " + String.valueOf(e.hashCode()) + ": " + e.getMessage();
                                callbackContext.error(errorMessage);
                            }
                        }

                        @Override
                        public void onUploadProgress(long bytesWritten, long contentLength, boolean done) {
                        }

                        @Override
                        public void onDownloadProgress(long bytesRead, long contentLength, boolean done) {
                        }
                    });
                } catch (Exception e) {
                    String errorMessage = "Problem during request building | " + String.valueOf(e.hashCode()) + ": " + e.getMessage();
                    callbackContext.error(errorMessage);
                }
            }
        });
    }
    final private void coverageLonLatDepartures(final JSONObject params, final CallbackContext callbackContext) {
        if (this.navitiaSdk == null) {
            callbackContext.error("NavitiaSDK is not instanciated");
            return;
        }

        final NextDeparturesApi.CoverageLonLatDeparturesRequestBuilder nextDeparturesRequestBuilder = this.navitiaSdk.nextDeparturesApi.newCoverageLonLatDeparturesRequestBuilder();
        cordova.getThreadPool().execute(new Runnable() {
            @Override
            public void run() {
                try {
                    if (params.has("lat") && (params.getString("lat") != null) && (!params.getString("lat").isEmpty()) ) {
                        // Param: lat, Type: BigDecimal
                        nextDeparturesRequestBuilder.withLat(longToBigDecimal(params.getLong("lat")));
                    }
                    if (params.has("lon") && (params.getString("lon") != null) && (!params.getString("lon").isEmpty()) ) {
                        // Param: lon, Type: BigDecimal
                        nextDeparturesRequestBuilder.withLon(longToBigDecimal(params.getLong("lon")));
                    }
                    if (params.has("filter") && (params.getString("filter") != null) && (!params.getString("filter").isEmpty()) ) {
                        // Param: filter, Type: String
                        nextDeparturesRequestBuilder.withFilter(stringStraightPass(params.getString("filter")));
                    }
                    if (params.has("fromDatetime") && (params.getString("fromDatetime") != null) && (!params.getString("fromDatetime").isEmpty()) ) {
                        // Param: fromDatetime, Type: Date
                        nextDeparturesRequestBuilder.withFromDatetime(stringToDateTime(params.getString("fromDatetime")));
                    }
                    if (params.has("untilDatetime") && (params.getString("untilDatetime") != null) && (!params.getString("untilDatetime").isEmpty()) ) {
                        // Param: untilDatetime, Type: Date
                        nextDeparturesRequestBuilder.withUntilDatetime(stringToDateTime(params.getString("untilDatetime")));
                    }
                    if (params.has("duration") && (params.getString("duration") != null) && (!params.getString("duration").isEmpty()) ) {
                        // Param: duration, Type: Integer
                        nextDeparturesRequestBuilder.withDuration(integerStraightPass(params.getInt("duration")));
                    }
                    if (params.has("depth") && (params.getString("depth") != null) && (!params.getString("depth").isEmpty()) ) {
                        // Param: depth, Type: Integer
                        nextDeparturesRequestBuilder.withDepth(integerStraightPass(params.getInt("depth")));
                    }
                    if (params.has("count") && (params.getString("count") != null) && (!params.getString("count").isEmpty()) ) {
                        // Param: count, Type: Integer
                        nextDeparturesRequestBuilder.withCount(integerStraightPass(params.getInt("count")));
                    }
                    if (params.has("startPage") && (params.getString("startPage") != null) && (!params.getString("startPage").isEmpty()) ) {
                        // Param: startPage, Type: Integer
                        nextDeparturesRequestBuilder.withStartPage(integerStraightPass(params.getInt("startPage")));
                    }
                    if (params.has("maxDateTimes") && (params.getString("maxDateTimes") != null) && (!params.getString("maxDateTimes").isEmpty()) ) {
                        // Param: maxDateTimes, Type: Integer
                        nextDeparturesRequestBuilder.withMaxDateTimes(integerStraightPass(params.getInt("maxDateTimes")));
                    }
                    if (params.has("forbiddenId") && (params.getString("forbiddenId") != null) && (!params.getString("forbiddenId").isEmpty()) ) {
                        // Param: forbiddenId, Type: List
                        nextDeparturesRequestBuilder.withForbiddenId(jsonArrayToStringList(params.getJSONArray("forbiddenId")));
                    }
                    if (params.has("forbiddenUris") && (params.getString("forbiddenUris") != null) && (!params.getString("forbiddenUris").isEmpty()) ) {
                        // Param: forbiddenUris, Type: List
                        nextDeparturesRequestBuilder.withForbiddenUris(jsonArrayToStringList(params.getJSONArray("forbiddenUris")));
                    }
                    if (params.has("calendar") && (params.getString("calendar") != null) && (!params.getString("calendar").isEmpty()) ) {
                        // Param: calendar, Type: String
                        nextDeparturesRequestBuilder.withCalendar(stringStraightPass(params.getString("calendar")));
                    }
                    if (params.has("distance") && (params.getString("distance") != null) && (!params.getString("distance").isEmpty()) ) {
                        // Param: distance, Type: Integer
                        nextDeparturesRequestBuilder.withDistance(integerStraightPass(params.getInt("distance")));
                    }
                    if (params.has("showCodes") && (params.getString("showCodes") != null) && (!params.getString("showCodes").isEmpty()) ) {
                        // Param: showCodes, Type: Boolean
                        nextDeparturesRequestBuilder.withShowCodes(booleanStraightPass(params.getBoolean("showCodes")));
                    }
                    if (params.has("dataFreshness") && (params.getString("dataFreshness") != null) && (!params.getString("dataFreshness").isEmpty()) ) {
                        // Param: dataFreshness, Type: String
                        nextDeparturesRequestBuilder.withDataFreshness(stringStraightPass(params.getString("dataFreshness")));
                    }
                    if (params.has("itemsPerSchedule") && (params.getString("itemsPerSchedule") != null) && (!params.getString("itemsPerSchedule").isEmpty()) ) {
                        // Param: itemsPerSchedule, Type: Integer
                        nextDeparturesRequestBuilder.withItemsPerSchedule(integerStraightPass(params.getInt("itemsPerSchedule")));
                    }
                    if (params.has("disableGeojson") && (params.getString("disableGeojson") != null) && (!params.getString("disableGeojson").isEmpty()) ) {
                        // Param: disableGeojson, Type: Boolean
                        nextDeparturesRequestBuilder.withDisableGeojson(booleanStraightPass(params.getBoolean("disableGeojson")));
                    }
                    if (params.has("directionType") && (params.getString("directionType") != null) && (!params.getString("directionType").isEmpty()) ) {
                        // Param: directionType, Type: String
                        nextDeparturesRequestBuilder.withDirectionType(stringStraightPass(params.getString("directionType")));
                    }
                    
                    nextDeparturesRequestBuilder.rawGet(new ApiCallback<String>() {
                        @Override
                        public void onFailure(ApiException e, int statusCode, Map<String, List<String>> responseHeaders) {
                            callbackContext.error("Problem during request call | " + e.getMessage());
                        }

                        @Override
                        public void onSuccess(String result, int statusCode, Map<String, List<String>> responseHeaders) {
                            JSONObject jsonObject = null;
                            try {
                                jsonObject = new JSONObject(result);
                                callbackContext.success(jsonObject);
                            } catch (Exception e) {
                                String errorMessage = "Problem during response parsing | " + String.valueOf(e.hashCode()) + ": " + e.getMessage();
                                callbackContext.error(errorMessage);
                            }
                        }

                        @Override
                        public void onUploadProgress(long bytesWritten, long contentLength, boolean done) {
                        }

                        @Override
                        public void onDownloadProgress(long bytesRead, long contentLength, boolean done) {
                        }
                    });
                } catch (Exception e) {
                    String errorMessage = "Problem during request building | " + String.valueOf(e.hashCode()) + ": " + e.getMessage();
                    callbackContext.error(errorMessage);
                }
            }
        });
    }
    final private void coverageLonLatUriDepartures(final JSONObject params, final CallbackContext callbackContext) {
        if (this.navitiaSdk == null) {
            callbackContext.error("NavitiaSDK is not instanciated");
            return;
        }

        final NextDeparturesApi.CoverageLonLatUriDeparturesRequestBuilder nextDeparturesRequestBuilder = this.navitiaSdk.nextDeparturesApi.newCoverageLonLatUriDeparturesRequestBuilder();
        cordova.getThreadPool().execute(new Runnable() {
            @Override
            public void run() {
                try {
                    if (params.has("lat") && (params.getString("lat") != null) && (!params.getString("lat").isEmpty()) ) {
                        // Param: lat, Type: BigDecimal
                        nextDeparturesRequestBuilder.withLat(longToBigDecimal(params.getLong("lat")));
                    }
                    if (params.has("lon") && (params.getString("lon") != null) && (!params.getString("lon").isEmpty()) ) {
                        // Param: lon, Type: BigDecimal
                        nextDeparturesRequestBuilder.withLon(longToBigDecimal(params.getLong("lon")));
                    }
                    if (params.has("uri") && (params.getString("uri") != null) && (!params.getString("uri").isEmpty()) ) {
                        // Param: uri, Type: String
                        nextDeparturesRequestBuilder.withUri(stringStraightPass(params.getString("uri")));
                    }
                    if (params.has("filter") && (params.getString("filter") != null) && (!params.getString("filter").isEmpty()) ) {
                        // Param: filter, Type: String
                        nextDeparturesRequestBuilder.withFilter(stringStraightPass(params.getString("filter")));
                    }
                    if (params.has("fromDatetime") && (params.getString("fromDatetime") != null) && (!params.getString("fromDatetime").isEmpty()) ) {
                        // Param: fromDatetime, Type: Date
                        nextDeparturesRequestBuilder.withFromDatetime(stringToDateTime(params.getString("fromDatetime")));
                    }
                    if (params.has("untilDatetime") && (params.getString("untilDatetime") != null) && (!params.getString("untilDatetime").isEmpty()) ) {
                        // Param: untilDatetime, Type: Date
                        nextDeparturesRequestBuilder.withUntilDatetime(stringToDateTime(params.getString("untilDatetime")));
                    }
                    if (params.has("duration") && (params.getString("duration") != null) && (!params.getString("duration").isEmpty()) ) {
                        // Param: duration, Type: Integer
                        nextDeparturesRequestBuilder.withDuration(integerStraightPass(params.getInt("duration")));
                    }
                    if (params.has("depth") && (params.getString("depth") != null) && (!params.getString("depth").isEmpty()) ) {
                        // Param: depth, Type: Integer
                        nextDeparturesRequestBuilder.withDepth(integerStraightPass(params.getInt("depth")));
                    }
                    if (params.has("count") && (params.getString("count") != null) && (!params.getString("count").isEmpty()) ) {
                        // Param: count, Type: Integer
                        nextDeparturesRequestBuilder.withCount(integerStraightPass(params.getInt("count")));
                    }
                    if (params.has("startPage") && (params.getString("startPage") != null) && (!params.getString("startPage").isEmpty()) ) {
                        // Param: startPage, Type: Integer
                        nextDeparturesRequestBuilder.withStartPage(integerStraightPass(params.getInt("startPage")));
                    }
                    if (params.has("maxDateTimes") && (params.getString("maxDateTimes") != null) && (!params.getString("maxDateTimes").isEmpty()) ) {
                        // Param: maxDateTimes, Type: Integer
                        nextDeparturesRequestBuilder.withMaxDateTimes(integerStraightPass(params.getInt("maxDateTimes")));
                    }
                    if (params.has("forbiddenId") && (params.getString("forbiddenId") != null) && (!params.getString("forbiddenId").isEmpty()) ) {
                        // Param: forbiddenId, Type: List
                        nextDeparturesRequestBuilder.withForbiddenId(jsonArrayToStringList(params.getJSONArray("forbiddenId")));
                    }
                    if (params.has("forbiddenUris") && (params.getString("forbiddenUris") != null) && (!params.getString("forbiddenUris").isEmpty()) ) {
                        // Param: forbiddenUris, Type: List
                        nextDeparturesRequestBuilder.withForbiddenUris(jsonArrayToStringList(params.getJSONArray("forbiddenUris")));
                    }
                    if (params.has("calendar") && (params.getString("calendar") != null) && (!params.getString("calendar").isEmpty()) ) {
                        // Param: calendar, Type: String
                        nextDeparturesRequestBuilder.withCalendar(stringStraightPass(params.getString("calendar")));
                    }
                    if (params.has("distance") && (params.getString("distance") != null) && (!params.getString("distance").isEmpty()) ) {
                        // Param: distance, Type: Integer
                        nextDeparturesRequestBuilder.withDistance(integerStraightPass(params.getInt("distance")));
                    }
                    if (params.has("showCodes") && (params.getString("showCodes") != null) && (!params.getString("showCodes").isEmpty()) ) {
                        // Param: showCodes, Type: Boolean
                        nextDeparturesRequestBuilder.withShowCodes(booleanStraightPass(params.getBoolean("showCodes")));
                    }
                    if (params.has("dataFreshness") && (params.getString("dataFreshness") != null) && (!params.getString("dataFreshness").isEmpty()) ) {
                        // Param: dataFreshness, Type: String
                        nextDeparturesRequestBuilder.withDataFreshness(stringStraightPass(params.getString("dataFreshness")));
                    }
                    if (params.has("itemsPerSchedule") && (params.getString("itemsPerSchedule") != null) && (!params.getString("itemsPerSchedule").isEmpty()) ) {
                        // Param: itemsPerSchedule, Type: Integer
                        nextDeparturesRequestBuilder.withItemsPerSchedule(integerStraightPass(params.getInt("itemsPerSchedule")));
                    }
                    if (params.has("disableGeojson") && (params.getString("disableGeojson") != null) && (!params.getString("disableGeojson").isEmpty()) ) {
                        // Param: disableGeojson, Type: Boolean
                        nextDeparturesRequestBuilder.withDisableGeojson(booleanStraightPass(params.getBoolean("disableGeojson")));
                    }
                    if (params.has("directionType") && (params.getString("directionType") != null) && (!params.getString("directionType").isEmpty()) ) {
                        // Param: directionType, Type: String
                        nextDeparturesRequestBuilder.withDirectionType(stringStraightPass(params.getString("directionType")));
                    }
                    
                    nextDeparturesRequestBuilder.rawGet(new ApiCallback<String>() {
                        @Override
                        public void onFailure(ApiException e, int statusCode, Map<String, List<String>> responseHeaders) {
                            callbackContext.error("Problem during request call | " + e.getMessage());
                        }

                        @Override
                        public void onSuccess(String result, int statusCode, Map<String, List<String>> responseHeaders) {
                            JSONObject jsonObject = null;
                            try {
                                jsonObject = new JSONObject(result);
                                callbackContext.success(jsonObject);
                            } catch (Exception e) {
                                String errorMessage = "Problem during response parsing | " + String.valueOf(e.hashCode()) + ": " + e.getMessage();
                                callbackContext.error(errorMessage);
                            }
                        }

                        @Override
                        public void onUploadProgress(long bytesWritten, long contentLength, boolean done) {
                        }

                        @Override
                        public void onDownloadProgress(long bytesRead, long contentLength, boolean done) {
                        }
                    });
                } catch (Exception e) {
                    String errorMessage = "Problem during request building | " + String.valueOf(e.hashCode()) + ": " + e.getMessage();
                    callbackContext.error(errorMessage);
                }
            }
        });
    }
    final private void coverageRegionDepartures(final JSONObject params, final CallbackContext callbackContext) {
        if (this.navitiaSdk == null) {
            callbackContext.error("NavitiaSDK is not instanciated");
            return;
        }

        final NextDeparturesApi.CoverageRegionDeparturesRequestBuilder nextDeparturesRequestBuilder = this.navitiaSdk.nextDeparturesApi.newCoverageRegionDeparturesRequestBuilder();
        cordova.getThreadPool().execute(new Runnable() {
            @Override
            public void run() {
                try {
                    if (params.has("region") && (params.getString("region") != null) && (!params.getString("region").isEmpty()) ) {
                        // Param: region, Type: String
                        nextDeparturesRequestBuilder.withRegion(stringStraightPass(params.getString("region")));
                    }
                    if (params.has("filter") && (params.getString("filter") != null) && (!params.getString("filter").isEmpty()) ) {
                        // Param: filter, Type: String
                        nextDeparturesRequestBuilder.withFilter(stringStraightPass(params.getString("filter")));
                    }
                    if (params.has("fromDatetime") && (params.getString("fromDatetime") != null) && (!params.getString("fromDatetime").isEmpty()) ) {
                        // Param: fromDatetime, Type: Date
                        nextDeparturesRequestBuilder.withFromDatetime(stringToDateTime(params.getString("fromDatetime")));
                    }
                    if (params.has("untilDatetime") && (params.getString("untilDatetime") != null) && (!params.getString("untilDatetime").isEmpty()) ) {
                        // Param: untilDatetime, Type: Date
                        nextDeparturesRequestBuilder.withUntilDatetime(stringToDateTime(params.getString("untilDatetime")));
                    }
                    if (params.has("duration") && (params.getString("duration") != null) && (!params.getString("duration").isEmpty()) ) {
                        // Param: duration, Type: Integer
                        nextDeparturesRequestBuilder.withDuration(integerStraightPass(params.getInt("duration")));
                    }
                    if (params.has("depth") && (params.getString("depth") != null) && (!params.getString("depth").isEmpty()) ) {
                        // Param: depth, Type: Integer
                        nextDeparturesRequestBuilder.withDepth(integerStraightPass(params.getInt("depth")));
                    }
                    if (params.has("count") && (params.getString("count") != null) && (!params.getString("count").isEmpty()) ) {
                        // Param: count, Type: Integer
                        nextDeparturesRequestBuilder.withCount(integerStraightPass(params.getInt("count")));
                    }
                    if (params.has("startPage") && (params.getString("startPage") != null) && (!params.getString("startPage").isEmpty()) ) {
                        // Param: startPage, Type: Integer
                        nextDeparturesRequestBuilder.withStartPage(integerStraightPass(params.getInt("startPage")));
                    }
                    if (params.has("maxDateTimes") && (params.getString("maxDateTimes") != null) && (!params.getString("maxDateTimes").isEmpty()) ) {
                        // Param: maxDateTimes, Type: Integer
                        nextDeparturesRequestBuilder.withMaxDateTimes(integerStraightPass(params.getInt("maxDateTimes")));
                    }
                    if (params.has("forbiddenId") && (params.getString("forbiddenId") != null) && (!params.getString("forbiddenId").isEmpty()) ) {
                        // Param: forbiddenId, Type: List
                        nextDeparturesRequestBuilder.withForbiddenId(jsonArrayToStringList(params.getJSONArray("forbiddenId")));
                    }
                    if (params.has("forbiddenUris") && (params.getString("forbiddenUris") != null) && (!params.getString("forbiddenUris").isEmpty()) ) {
                        // Param: forbiddenUris, Type: List
                        nextDeparturesRequestBuilder.withForbiddenUris(jsonArrayToStringList(params.getJSONArray("forbiddenUris")));
                    }
                    if (params.has("calendar") && (params.getString("calendar") != null) && (!params.getString("calendar").isEmpty()) ) {
                        // Param: calendar, Type: String
                        nextDeparturesRequestBuilder.withCalendar(stringStraightPass(params.getString("calendar")));
                    }
                    if (params.has("distance") && (params.getString("distance") != null) && (!params.getString("distance").isEmpty()) ) {
                        // Param: distance, Type: Integer
                        nextDeparturesRequestBuilder.withDistance(integerStraightPass(params.getInt("distance")));
                    }
                    if (params.has("showCodes") && (params.getString("showCodes") != null) && (!params.getString("showCodes").isEmpty()) ) {
                        // Param: showCodes, Type: Boolean
                        nextDeparturesRequestBuilder.withShowCodes(booleanStraightPass(params.getBoolean("showCodes")));
                    }
                    if (params.has("dataFreshness") && (params.getString("dataFreshness") != null) && (!params.getString("dataFreshness").isEmpty()) ) {
                        // Param: dataFreshness, Type: String
                        nextDeparturesRequestBuilder.withDataFreshness(stringStraightPass(params.getString("dataFreshness")));
                    }
                    if (params.has("itemsPerSchedule") && (params.getString("itemsPerSchedule") != null) && (!params.getString("itemsPerSchedule").isEmpty()) ) {
                        // Param: itemsPerSchedule, Type: Integer
                        nextDeparturesRequestBuilder.withItemsPerSchedule(integerStraightPass(params.getInt("itemsPerSchedule")));
                    }
                    if (params.has("disableGeojson") && (params.getString("disableGeojson") != null) && (!params.getString("disableGeojson").isEmpty()) ) {
                        // Param: disableGeojson, Type: Boolean
                        nextDeparturesRequestBuilder.withDisableGeojson(booleanStraightPass(params.getBoolean("disableGeojson")));
                    }
                    if (params.has("directionType") && (params.getString("directionType") != null) && (!params.getString("directionType").isEmpty()) ) {
                        // Param: directionType, Type: String
                        nextDeparturesRequestBuilder.withDirectionType(stringStraightPass(params.getString("directionType")));
                    }
                    
                    nextDeparturesRequestBuilder.rawGet(new ApiCallback<String>() {
                        @Override
                        public void onFailure(ApiException e, int statusCode, Map<String, List<String>> responseHeaders) {
                            callbackContext.error("Problem during request call | " + e.getMessage());
                        }

                        @Override
                        public void onSuccess(String result, int statusCode, Map<String, List<String>> responseHeaders) {
                            JSONObject jsonObject = null;
                            try {
                                jsonObject = new JSONObject(result);
                                callbackContext.success(jsonObject);
                            } catch (Exception e) {
                                String errorMessage = "Problem during response parsing | " + String.valueOf(e.hashCode()) + ": " + e.getMessage();
                                callbackContext.error(errorMessage);
                            }
                        }

                        @Override
                        public void onUploadProgress(long bytesWritten, long contentLength, boolean done) {
                        }

                        @Override
                        public void onDownloadProgress(long bytesRead, long contentLength, boolean done) {
                        }
                    });
                } catch (Exception e) {
                    String errorMessage = "Problem during request building | " + String.valueOf(e.hashCode()) + ": " + e.getMessage();
                    callbackContext.error(errorMessage);
                }
            }
        });
    }
    final private void coverageRegionUriDepartures(final JSONObject params, final CallbackContext callbackContext) {
        if (this.navitiaSdk == null) {
            callbackContext.error("NavitiaSDK is not instanciated");
            return;
        }

        final NextDeparturesApi.CoverageRegionUriDeparturesRequestBuilder nextDeparturesRequestBuilder = this.navitiaSdk.nextDeparturesApi.newCoverageRegionUriDeparturesRequestBuilder();
        cordova.getThreadPool().execute(new Runnable() {
            @Override
            public void run() {
                try {
                    if (params.has("region") && (params.getString("region") != null) && (!params.getString("region").isEmpty()) ) {
                        // Param: region, Type: String
                        nextDeparturesRequestBuilder.withRegion(stringStraightPass(params.getString("region")));
                    }
                    if (params.has("uri") && (params.getString("uri") != null) && (!params.getString("uri").isEmpty()) ) {
                        // Param: uri, Type: String
                        nextDeparturesRequestBuilder.withUri(stringStraightPass(params.getString("uri")));
                    }
                    if (params.has("filter") && (params.getString("filter") != null) && (!params.getString("filter").isEmpty()) ) {
                        // Param: filter, Type: String
                        nextDeparturesRequestBuilder.withFilter(stringStraightPass(params.getString("filter")));
                    }
                    if (params.has("fromDatetime") && (params.getString("fromDatetime") != null) && (!params.getString("fromDatetime").isEmpty()) ) {
                        // Param: fromDatetime, Type: Date
                        nextDeparturesRequestBuilder.withFromDatetime(stringToDateTime(params.getString("fromDatetime")));
                    }
                    if (params.has("untilDatetime") && (params.getString("untilDatetime") != null) && (!params.getString("untilDatetime").isEmpty()) ) {
                        // Param: untilDatetime, Type: Date
                        nextDeparturesRequestBuilder.withUntilDatetime(stringToDateTime(params.getString("untilDatetime")));
                    }
                    if (params.has("duration") && (params.getString("duration") != null) && (!params.getString("duration").isEmpty()) ) {
                        // Param: duration, Type: Integer
                        nextDeparturesRequestBuilder.withDuration(integerStraightPass(params.getInt("duration")));
                    }
                    if (params.has("depth") && (params.getString("depth") != null) && (!params.getString("depth").isEmpty()) ) {
                        // Param: depth, Type: Integer
                        nextDeparturesRequestBuilder.withDepth(integerStraightPass(params.getInt("depth")));
                    }
                    if (params.has("count") && (params.getString("count") != null) && (!params.getString("count").isEmpty()) ) {
                        // Param: count, Type: Integer
                        nextDeparturesRequestBuilder.withCount(integerStraightPass(params.getInt("count")));
                    }
                    if (params.has("startPage") && (params.getString("startPage") != null) && (!params.getString("startPage").isEmpty()) ) {
                        // Param: startPage, Type: Integer
                        nextDeparturesRequestBuilder.withStartPage(integerStraightPass(params.getInt("startPage")));
                    }
                    if (params.has("maxDateTimes") && (params.getString("maxDateTimes") != null) && (!params.getString("maxDateTimes").isEmpty()) ) {
                        // Param: maxDateTimes, Type: Integer
                        nextDeparturesRequestBuilder.withMaxDateTimes(integerStraightPass(params.getInt("maxDateTimes")));
                    }
                    if (params.has("forbiddenId") && (params.getString("forbiddenId") != null) && (!params.getString("forbiddenId").isEmpty()) ) {
                        // Param: forbiddenId, Type: List
                        nextDeparturesRequestBuilder.withForbiddenId(jsonArrayToStringList(params.getJSONArray("forbiddenId")));
                    }
                    if (params.has("forbiddenUris") && (params.getString("forbiddenUris") != null) && (!params.getString("forbiddenUris").isEmpty()) ) {
                        // Param: forbiddenUris, Type: List
                        nextDeparturesRequestBuilder.withForbiddenUris(jsonArrayToStringList(params.getJSONArray("forbiddenUris")));
                    }
                    if (params.has("calendar") && (params.getString("calendar") != null) && (!params.getString("calendar").isEmpty()) ) {
                        // Param: calendar, Type: String
                        nextDeparturesRequestBuilder.withCalendar(stringStraightPass(params.getString("calendar")));
                    }
                    if (params.has("distance") && (params.getString("distance") != null) && (!params.getString("distance").isEmpty()) ) {
                        // Param: distance, Type: Integer
                        nextDeparturesRequestBuilder.withDistance(integerStraightPass(params.getInt("distance")));
                    }
                    if (params.has("showCodes") && (params.getString("showCodes") != null) && (!params.getString("showCodes").isEmpty()) ) {
                        // Param: showCodes, Type: Boolean
                        nextDeparturesRequestBuilder.withShowCodes(booleanStraightPass(params.getBoolean("showCodes")));
                    }
                    if (params.has("dataFreshness") && (params.getString("dataFreshness") != null) && (!params.getString("dataFreshness").isEmpty()) ) {
                        // Param: dataFreshness, Type: String
                        nextDeparturesRequestBuilder.withDataFreshness(stringStraightPass(params.getString("dataFreshness")));
                    }
                    if (params.has("itemsPerSchedule") && (params.getString("itemsPerSchedule") != null) && (!params.getString("itemsPerSchedule").isEmpty()) ) {
                        // Param: itemsPerSchedule, Type: Integer
                        nextDeparturesRequestBuilder.withItemsPerSchedule(integerStraightPass(params.getInt("itemsPerSchedule")));
                    }
                    if (params.has("disableGeojson") && (params.getString("disableGeojson") != null) && (!params.getString("disableGeojson").isEmpty()) ) {
                        // Param: disableGeojson, Type: Boolean
                        nextDeparturesRequestBuilder.withDisableGeojson(booleanStraightPass(params.getBoolean("disableGeojson")));
                    }
                    if (params.has("directionType") && (params.getString("directionType") != null) && (!params.getString("directionType").isEmpty()) ) {
                        // Param: directionType, Type: String
                        nextDeparturesRequestBuilder.withDirectionType(stringStraightPass(params.getString("directionType")));
                    }
                    
                    nextDeparturesRequestBuilder.rawGet(new ApiCallback<String>() {
                        @Override
                        public void onFailure(ApiException e, int statusCode, Map<String, List<String>> responseHeaders) {
                            callbackContext.error("Problem during request call | " + e.getMessage());
                        }

                        @Override
                        public void onSuccess(String result, int statusCode, Map<String, List<String>> responseHeaders) {
                            JSONObject jsonObject = null;
                            try {
                                jsonObject = new JSONObject(result);
                                callbackContext.success(jsonObject);
                            } catch (Exception e) {
                                String errorMessage = "Problem during response parsing | " + String.valueOf(e.hashCode()) + ": " + e.getMessage();
                                callbackContext.error(errorMessage);
                            }
                        }

                        @Override
                        public void onUploadProgress(long bytesWritten, long contentLength, boolean done) {
                        }

                        @Override
                        public void onDownloadProgress(long bytesRead, long contentLength, boolean done) {
                        }
                    });
                } catch (Exception e) {
                    String errorMessage = "Problem during request building | " + String.valueOf(e.hashCode()) + ": " + e.getMessage();
                    callbackContext.error(errorMessage);
                }
            }
        });
    }
    final private void coverageLonLatPhysicalModes(final JSONObject params, final CallbackContext callbackContext) {
        if (this.navitiaSdk == null) {
            callbackContext.error("NavitiaSDK is not instanciated");
            return;
        }

        final PhysicalModesApi.CoverageLonLatPhysicalModesRequestBuilder physicalModesRequestBuilder = this.navitiaSdk.physicalModesApi.newCoverageLonLatPhysicalModesRequestBuilder();
        cordova.getThreadPool().execute(new Runnable() {
            @Override
            public void run() {
                try {
                    if (params.has("lat") && (params.getString("lat") != null) && (!params.getString("lat").isEmpty()) ) {
                        // Param: lat, Type: BigDecimal
                        physicalModesRequestBuilder.withLat(longToBigDecimal(params.getLong("lat")));
                    }
                    if (params.has("lon") && (params.getString("lon") != null) && (!params.getString("lon").isEmpty()) ) {
                        // Param: lon, Type: BigDecimal
                        physicalModesRequestBuilder.withLon(longToBigDecimal(params.getLong("lon")));
                    }
                    if (params.has("startPage") && (params.getString("startPage") != null) && (!params.getString("startPage").isEmpty()) ) {
                        // Param: startPage, Type: Integer
                        physicalModesRequestBuilder.withStartPage(integerStraightPass(params.getInt("startPage")));
                    }
                    if (params.has("count") && (params.getString("count") != null) && (!params.getString("count").isEmpty()) ) {
                        // Param: count, Type: Integer
                        physicalModesRequestBuilder.withCount(integerStraightPass(params.getInt("count")));
                    }
                    if (params.has("depth") && (params.getString("depth") != null) && (!params.getString("depth").isEmpty()) ) {
                        // Param: depth, Type: Integer
                        physicalModesRequestBuilder.withDepth(integerStraightPass(params.getInt("depth")));
                    }
                    if (params.has("forbiddenId") && (params.getString("forbiddenId") != null) && (!params.getString("forbiddenId").isEmpty()) ) {
                        // Param: forbiddenId, Type: List
                        physicalModesRequestBuilder.withForbiddenId(jsonArrayToStringList(params.getJSONArray("forbiddenId")));
                    }
                    if (params.has("forbiddenUris") && (params.getString("forbiddenUris") != null) && (!params.getString("forbiddenUris").isEmpty()) ) {
                        // Param: forbiddenUris, Type: List
                        physicalModesRequestBuilder.withForbiddenUris(jsonArrayToStringList(params.getJSONArray("forbiddenUris")));
                    }
                    if (params.has("externalCode") && (params.getString("externalCode") != null) && (!params.getString("externalCode").isEmpty()) ) {
                        // Param: externalCode, Type: String
                        physicalModesRequestBuilder.withExternalCode(stringStraightPass(params.getString("externalCode")));
                    }
                    if (params.has("headsign") && (params.getString("headsign") != null) && (!params.getString("headsign").isEmpty()) ) {
                        // Param: headsign, Type: String
                        physicalModesRequestBuilder.withHeadsign(stringStraightPass(params.getString("headsign")));
                    }
                    if (params.has("showCodes") && (params.getString("showCodes") != null) && (!params.getString("showCodes").isEmpty()) ) {
                        // Param: showCodes, Type: Boolean
                        physicalModesRequestBuilder.withShowCodes(booleanStraightPass(params.getBoolean("showCodes")));
                    }
                    if (params.has("odtLevel") && (params.getString("odtLevel") != null) && (!params.getString("odtLevel").isEmpty()) ) {
                        // Param: odtLevel, Type: String
                        physicalModesRequestBuilder.withOdtLevel(stringStraightPass(params.getString("odtLevel")));
                    }
                    if (params.has("dataFreshness") && (params.getString("dataFreshness") != null) && (!params.getString("dataFreshness").isEmpty()) ) {
                        // Param: dataFreshness, Type: String
                        physicalModesRequestBuilder.withDataFreshness(stringStraightPass(params.getString("dataFreshness")));
                    }
                    if (params.has("distance") && (params.getString("distance") != null) && (!params.getString("distance").isEmpty()) ) {
                        // Param: distance, Type: Integer
                        physicalModesRequestBuilder.withDistance(integerStraightPass(params.getInt("distance")));
                    }
                    if (params.has("since") && (params.getString("since") != null) && (!params.getString("since").isEmpty()) ) {
                        // Param: since, Type: Date
                        physicalModesRequestBuilder.withSince(stringToDateTime(params.getString("since")));
                    }
                    if (params.has("until") && (params.getString("until") != null) && (!params.getString("until").isEmpty()) ) {
                        // Param: until, Type: Date
                        physicalModesRequestBuilder.withUntil(stringToDateTime(params.getString("until")));
                    }
                    if (params.has("disableGeojson") && (params.getString("disableGeojson") != null) && (!params.getString("disableGeojson").isEmpty()) ) {
                        // Param: disableGeojson, Type: Boolean
                        physicalModesRequestBuilder.withDisableGeojson(booleanStraightPass(params.getBoolean("disableGeojson")));
                    }
                    if (params.has("disableDisruption") && (params.getString("disableDisruption") != null) && (!params.getString("disableDisruption").isEmpty()) ) {
                        // Param: disableDisruption, Type: Boolean
                        physicalModesRequestBuilder.withDisableDisruption(booleanStraightPass(params.getBoolean("disableDisruption")));
                    }
                    if (params.has("filter") && (params.getString("filter") != null) && (!params.getString("filter").isEmpty()) ) {
                        // Param: filter, Type: String
                        physicalModesRequestBuilder.withFilter(stringStraightPass(params.getString("filter")));
                    }
                    if (params.has("tags") && (params.getString("tags") != null) && (!params.getString("tags").isEmpty()) ) {
                        // Param: tags, Type: List
                        physicalModesRequestBuilder.withTags(jsonArrayToStringList(params.getJSONArray("tags")));
                    }
                    
                    physicalModesRequestBuilder.rawGet(new ApiCallback<String>() {
                        @Override
                        public void onFailure(ApiException e, int statusCode, Map<String, List<String>> responseHeaders) {
                            callbackContext.error("Problem during request call | " + e.getMessage());
                        }

                        @Override
                        public void onSuccess(String result, int statusCode, Map<String, List<String>> responseHeaders) {
                            JSONObject jsonObject = null;
                            try {
                                jsonObject = new JSONObject(result);
                                callbackContext.success(jsonObject);
                            } catch (Exception e) {
                                String errorMessage = "Problem during response parsing | " + String.valueOf(e.hashCode()) + ": " + e.getMessage();
                                callbackContext.error(errorMessage);
                            }
                        }

                        @Override
                        public void onUploadProgress(long bytesWritten, long contentLength, boolean done) {
                        }

                        @Override
                        public void onDownloadProgress(long bytesRead, long contentLength, boolean done) {
                        }
                    });
                } catch (Exception e) {
                    String errorMessage = "Problem during request building | " + String.valueOf(e.hashCode()) + ": " + e.getMessage();
                    callbackContext.error(errorMessage);
                }
            }
        });
    }
    final private void coverageLonLatPhysicalModesId(final JSONObject params, final CallbackContext callbackContext) {
        if (this.navitiaSdk == null) {
            callbackContext.error("NavitiaSDK is not instanciated");
            return;
        }

        final PhysicalModesApi.CoverageLonLatPhysicalModesIdRequestBuilder physicalModesRequestBuilder = this.navitiaSdk.physicalModesApi.newCoverageLonLatPhysicalModesIdRequestBuilder();
        cordova.getThreadPool().execute(new Runnable() {
            @Override
            public void run() {
                try {
                    if (params.has("lat") && (params.getString("lat") != null) && (!params.getString("lat").isEmpty()) ) {
                        // Param: lat, Type: BigDecimal
                        physicalModesRequestBuilder.withLat(longToBigDecimal(params.getLong("lat")));
                    }
                    if (params.has("lon") && (params.getString("lon") != null) && (!params.getString("lon").isEmpty()) ) {
                        // Param: lon, Type: BigDecimal
                        physicalModesRequestBuilder.withLon(longToBigDecimal(params.getLong("lon")));
                    }
                    if (params.has("id") && (params.getString("id") != null) && (!params.getString("id").isEmpty()) ) {
                        // Param: id, Type: String
                        physicalModesRequestBuilder.withId(stringStraightPass(params.getString("id")));
                    }
                    if (params.has("startPage") && (params.getString("startPage") != null) && (!params.getString("startPage").isEmpty()) ) {
                        // Param: startPage, Type: Integer
                        physicalModesRequestBuilder.withStartPage(integerStraightPass(params.getInt("startPage")));
                    }
                    if (params.has("count") && (params.getString("count") != null) && (!params.getString("count").isEmpty()) ) {
                        // Param: count, Type: Integer
                        physicalModesRequestBuilder.withCount(integerStraightPass(params.getInt("count")));
                    }
                    if (params.has("depth") && (params.getString("depth") != null) && (!params.getString("depth").isEmpty()) ) {
                        // Param: depth, Type: Integer
                        physicalModesRequestBuilder.withDepth(integerStraightPass(params.getInt("depth")));
                    }
                    if (params.has("forbiddenId") && (params.getString("forbiddenId") != null) && (!params.getString("forbiddenId").isEmpty()) ) {
                        // Param: forbiddenId, Type: List
                        physicalModesRequestBuilder.withForbiddenId(jsonArrayToStringList(params.getJSONArray("forbiddenId")));
                    }
                    if (params.has("forbiddenUris") && (params.getString("forbiddenUris") != null) && (!params.getString("forbiddenUris").isEmpty()) ) {
                        // Param: forbiddenUris, Type: List
                        physicalModesRequestBuilder.withForbiddenUris(jsonArrayToStringList(params.getJSONArray("forbiddenUris")));
                    }
                    if (params.has("externalCode") && (params.getString("externalCode") != null) && (!params.getString("externalCode").isEmpty()) ) {
                        // Param: externalCode, Type: String
                        physicalModesRequestBuilder.withExternalCode(stringStraightPass(params.getString("externalCode")));
                    }
                    if (params.has("headsign") && (params.getString("headsign") != null) && (!params.getString("headsign").isEmpty()) ) {
                        // Param: headsign, Type: String
                        physicalModesRequestBuilder.withHeadsign(stringStraightPass(params.getString("headsign")));
                    }
                    if (params.has("showCodes") && (params.getString("showCodes") != null) && (!params.getString("showCodes").isEmpty()) ) {
                        // Param: showCodes, Type: Boolean
                        physicalModesRequestBuilder.withShowCodes(booleanStraightPass(params.getBoolean("showCodes")));
                    }
                    if (params.has("odtLevel") && (params.getString("odtLevel") != null) && (!params.getString("odtLevel").isEmpty()) ) {
                        // Param: odtLevel, Type: String
                        physicalModesRequestBuilder.withOdtLevel(stringStraightPass(params.getString("odtLevel")));
                    }
                    if (params.has("dataFreshness") && (params.getString("dataFreshness") != null) && (!params.getString("dataFreshness").isEmpty()) ) {
                        // Param: dataFreshness, Type: String
                        physicalModesRequestBuilder.withDataFreshness(stringStraightPass(params.getString("dataFreshness")));
                    }
                    if (params.has("distance") && (params.getString("distance") != null) && (!params.getString("distance").isEmpty()) ) {
                        // Param: distance, Type: Integer
                        physicalModesRequestBuilder.withDistance(integerStraightPass(params.getInt("distance")));
                    }
                    if (params.has("since") && (params.getString("since") != null) && (!params.getString("since").isEmpty()) ) {
                        // Param: since, Type: Date
                        physicalModesRequestBuilder.withSince(stringToDateTime(params.getString("since")));
                    }
                    if (params.has("until") && (params.getString("until") != null) && (!params.getString("until").isEmpty()) ) {
                        // Param: until, Type: Date
                        physicalModesRequestBuilder.withUntil(stringToDateTime(params.getString("until")));
                    }
                    if (params.has("disableGeojson") && (params.getString("disableGeojson") != null) && (!params.getString("disableGeojson").isEmpty()) ) {
                        // Param: disableGeojson, Type: Boolean
                        physicalModesRequestBuilder.withDisableGeojson(booleanStraightPass(params.getBoolean("disableGeojson")));
                    }
                    if (params.has("disableDisruption") && (params.getString("disableDisruption") != null) && (!params.getString("disableDisruption").isEmpty()) ) {
                        // Param: disableDisruption, Type: Boolean
                        physicalModesRequestBuilder.withDisableDisruption(booleanStraightPass(params.getBoolean("disableDisruption")));
                    }
                    if (params.has("tags") && (params.getString("tags") != null) && (!params.getString("tags").isEmpty()) ) {
                        // Param: tags, Type: List
                        physicalModesRequestBuilder.withTags(jsonArrayToStringList(params.getJSONArray("tags")));
                    }
                    
                    physicalModesRequestBuilder.rawGet(new ApiCallback<String>() {
                        @Override
                        public void onFailure(ApiException e, int statusCode, Map<String, List<String>> responseHeaders) {
                            callbackContext.error("Problem during request call | " + e.getMessage());
                        }

                        @Override
                        public void onSuccess(String result, int statusCode, Map<String, List<String>> responseHeaders) {
                            JSONObject jsonObject = null;
                            try {
                                jsonObject = new JSONObject(result);
                                callbackContext.success(jsonObject);
                            } catch (Exception e) {
                                String errorMessage = "Problem during response parsing | " + String.valueOf(e.hashCode()) + ": " + e.getMessage();
                                callbackContext.error(errorMessage);
                            }
                        }

                        @Override
                        public void onUploadProgress(long bytesWritten, long contentLength, boolean done) {
                        }

                        @Override
                        public void onDownloadProgress(long bytesRead, long contentLength, boolean done) {
                        }
                    });
                } catch (Exception e) {
                    String errorMessage = "Problem during request building | " + String.valueOf(e.hashCode()) + ": " + e.getMessage();
                    callbackContext.error(errorMessage);
                }
            }
        });
    }
    final private void coverageLonLatUriPhysicalModes(final JSONObject params, final CallbackContext callbackContext) {
        if (this.navitiaSdk == null) {
            callbackContext.error("NavitiaSDK is not instanciated");
            return;
        }

        final PhysicalModesApi.CoverageLonLatUriPhysicalModesRequestBuilder physicalModesRequestBuilder = this.navitiaSdk.physicalModesApi.newCoverageLonLatUriPhysicalModesRequestBuilder();
        cordova.getThreadPool().execute(new Runnable() {
            @Override
            public void run() {
                try {
                    if (params.has("lat") && (params.getString("lat") != null) && (!params.getString("lat").isEmpty()) ) {
                        // Param: lat, Type: BigDecimal
                        physicalModesRequestBuilder.withLat(longToBigDecimal(params.getLong("lat")));
                    }
                    if (params.has("lon") && (params.getString("lon") != null) && (!params.getString("lon").isEmpty()) ) {
                        // Param: lon, Type: BigDecimal
                        physicalModesRequestBuilder.withLon(longToBigDecimal(params.getLong("lon")));
                    }
                    if (params.has("uri") && (params.getString("uri") != null) && (!params.getString("uri").isEmpty()) ) {
                        // Param: uri, Type: String
                        physicalModesRequestBuilder.withUri(stringStraightPass(params.getString("uri")));
                    }
                    if (params.has("startPage") && (params.getString("startPage") != null) && (!params.getString("startPage").isEmpty()) ) {
                        // Param: startPage, Type: Integer
                        physicalModesRequestBuilder.withStartPage(integerStraightPass(params.getInt("startPage")));
                    }
                    if (params.has("count") && (params.getString("count") != null) && (!params.getString("count").isEmpty()) ) {
                        // Param: count, Type: Integer
                        physicalModesRequestBuilder.withCount(integerStraightPass(params.getInt("count")));
                    }
                    if (params.has("depth") && (params.getString("depth") != null) && (!params.getString("depth").isEmpty()) ) {
                        // Param: depth, Type: Integer
                        physicalModesRequestBuilder.withDepth(integerStraightPass(params.getInt("depth")));
                    }
                    if (params.has("forbiddenId") && (params.getString("forbiddenId") != null) && (!params.getString("forbiddenId").isEmpty()) ) {
                        // Param: forbiddenId, Type: List
                        physicalModesRequestBuilder.withForbiddenId(jsonArrayToStringList(params.getJSONArray("forbiddenId")));
                    }
                    if (params.has("forbiddenUris") && (params.getString("forbiddenUris") != null) && (!params.getString("forbiddenUris").isEmpty()) ) {
                        // Param: forbiddenUris, Type: List
                        physicalModesRequestBuilder.withForbiddenUris(jsonArrayToStringList(params.getJSONArray("forbiddenUris")));
                    }
                    if (params.has("externalCode") && (params.getString("externalCode") != null) && (!params.getString("externalCode").isEmpty()) ) {
                        // Param: externalCode, Type: String
                        physicalModesRequestBuilder.withExternalCode(stringStraightPass(params.getString("externalCode")));
                    }
                    if (params.has("headsign") && (params.getString("headsign") != null) && (!params.getString("headsign").isEmpty()) ) {
                        // Param: headsign, Type: String
                        physicalModesRequestBuilder.withHeadsign(stringStraightPass(params.getString("headsign")));
                    }
                    if (params.has("showCodes") && (params.getString("showCodes") != null) && (!params.getString("showCodes").isEmpty()) ) {
                        // Param: showCodes, Type: Boolean
                        physicalModesRequestBuilder.withShowCodes(booleanStraightPass(params.getBoolean("showCodes")));
                    }
                    if (params.has("odtLevel") && (params.getString("odtLevel") != null) && (!params.getString("odtLevel").isEmpty()) ) {
                        // Param: odtLevel, Type: String
                        physicalModesRequestBuilder.withOdtLevel(stringStraightPass(params.getString("odtLevel")));
                    }
                    if (params.has("dataFreshness") && (params.getString("dataFreshness") != null) && (!params.getString("dataFreshness").isEmpty()) ) {
                        // Param: dataFreshness, Type: String
                        physicalModesRequestBuilder.withDataFreshness(stringStraightPass(params.getString("dataFreshness")));
                    }
                    if (params.has("distance") && (params.getString("distance") != null) && (!params.getString("distance").isEmpty()) ) {
                        // Param: distance, Type: Integer
                        physicalModesRequestBuilder.withDistance(integerStraightPass(params.getInt("distance")));
                    }
                    if (params.has("since") && (params.getString("since") != null) && (!params.getString("since").isEmpty()) ) {
                        // Param: since, Type: Date
                        physicalModesRequestBuilder.withSince(stringToDateTime(params.getString("since")));
                    }
                    if (params.has("until") && (params.getString("until") != null) && (!params.getString("until").isEmpty()) ) {
                        // Param: until, Type: Date
                        physicalModesRequestBuilder.withUntil(stringToDateTime(params.getString("until")));
                    }
                    if (params.has("disableGeojson") && (params.getString("disableGeojson") != null) && (!params.getString("disableGeojson").isEmpty()) ) {
                        // Param: disableGeojson, Type: Boolean
                        physicalModesRequestBuilder.withDisableGeojson(booleanStraightPass(params.getBoolean("disableGeojson")));
                    }
                    if (params.has("disableDisruption") && (params.getString("disableDisruption") != null) && (!params.getString("disableDisruption").isEmpty()) ) {
                        // Param: disableDisruption, Type: Boolean
                        physicalModesRequestBuilder.withDisableDisruption(booleanStraightPass(params.getBoolean("disableDisruption")));
                    }
                    if (params.has("filter") && (params.getString("filter") != null) && (!params.getString("filter").isEmpty()) ) {
                        // Param: filter, Type: String
                        physicalModesRequestBuilder.withFilter(stringStraightPass(params.getString("filter")));
                    }
                    if (params.has("tags") && (params.getString("tags") != null) && (!params.getString("tags").isEmpty()) ) {
                        // Param: tags, Type: List
                        physicalModesRequestBuilder.withTags(jsonArrayToStringList(params.getJSONArray("tags")));
                    }
                    
                    physicalModesRequestBuilder.rawGet(new ApiCallback<String>() {
                        @Override
                        public void onFailure(ApiException e, int statusCode, Map<String, List<String>> responseHeaders) {
                            callbackContext.error("Problem during request call | " + e.getMessage());
                        }

                        @Override
                        public void onSuccess(String result, int statusCode, Map<String, List<String>> responseHeaders) {
                            JSONObject jsonObject = null;
                            try {
                                jsonObject = new JSONObject(result);
                                callbackContext.success(jsonObject);
                            } catch (Exception e) {
                                String errorMessage = "Problem during response parsing | " + String.valueOf(e.hashCode()) + ": " + e.getMessage();
                                callbackContext.error(errorMessage);
                            }
                        }

                        @Override
                        public void onUploadProgress(long bytesWritten, long contentLength, boolean done) {
                        }

                        @Override
                        public void onDownloadProgress(long bytesRead, long contentLength, boolean done) {
                        }
                    });
                } catch (Exception e) {
                    String errorMessage = "Problem during request building | " + String.valueOf(e.hashCode()) + ": " + e.getMessage();
                    callbackContext.error(errorMessage);
                }
            }
        });
    }
    final private void coverageLonLatUriPhysicalModesId(final JSONObject params, final CallbackContext callbackContext) {
        if (this.navitiaSdk == null) {
            callbackContext.error("NavitiaSDK is not instanciated");
            return;
        }

        final PhysicalModesApi.CoverageLonLatUriPhysicalModesIdRequestBuilder physicalModesRequestBuilder = this.navitiaSdk.physicalModesApi.newCoverageLonLatUriPhysicalModesIdRequestBuilder();
        cordova.getThreadPool().execute(new Runnable() {
            @Override
            public void run() {
                try {
                    if (params.has("lat") && (params.getString("lat") != null) && (!params.getString("lat").isEmpty()) ) {
                        // Param: lat, Type: BigDecimal
                        physicalModesRequestBuilder.withLat(longToBigDecimal(params.getLong("lat")));
                    }
                    if (params.has("lon") && (params.getString("lon") != null) && (!params.getString("lon").isEmpty()) ) {
                        // Param: lon, Type: BigDecimal
                        physicalModesRequestBuilder.withLon(longToBigDecimal(params.getLong("lon")));
                    }
                    if (params.has("uri") && (params.getString("uri") != null) && (!params.getString("uri").isEmpty()) ) {
                        // Param: uri, Type: String
                        physicalModesRequestBuilder.withUri(stringStraightPass(params.getString("uri")));
                    }
                    if (params.has("id") && (params.getString("id") != null) && (!params.getString("id").isEmpty()) ) {
                        // Param: id, Type: String
                        physicalModesRequestBuilder.withId(stringStraightPass(params.getString("id")));
                    }
                    if (params.has("startPage") && (params.getString("startPage") != null) && (!params.getString("startPage").isEmpty()) ) {
                        // Param: startPage, Type: Integer
                        physicalModesRequestBuilder.withStartPage(integerStraightPass(params.getInt("startPage")));
                    }
                    if (params.has("count") && (params.getString("count") != null) && (!params.getString("count").isEmpty()) ) {
                        // Param: count, Type: Integer
                        physicalModesRequestBuilder.withCount(integerStraightPass(params.getInt("count")));
                    }
                    if (params.has("depth") && (params.getString("depth") != null) && (!params.getString("depth").isEmpty()) ) {
                        // Param: depth, Type: Integer
                        physicalModesRequestBuilder.withDepth(integerStraightPass(params.getInt("depth")));
                    }
                    if (params.has("forbiddenId") && (params.getString("forbiddenId") != null) && (!params.getString("forbiddenId").isEmpty()) ) {
                        // Param: forbiddenId, Type: List
                        physicalModesRequestBuilder.withForbiddenId(jsonArrayToStringList(params.getJSONArray("forbiddenId")));
                    }
                    if (params.has("forbiddenUris") && (params.getString("forbiddenUris") != null) && (!params.getString("forbiddenUris").isEmpty()) ) {
                        // Param: forbiddenUris, Type: List
                        physicalModesRequestBuilder.withForbiddenUris(jsonArrayToStringList(params.getJSONArray("forbiddenUris")));
                    }
                    if (params.has("externalCode") && (params.getString("externalCode") != null) && (!params.getString("externalCode").isEmpty()) ) {
                        // Param: externalCode, Type: String
                        physicalModesRequestBuilder.withExternalCode(stringStraightPass(params.getString("externalCode")));
                    }
                    if (params.has("headsign") && (params.getString("headsign") != null) && (!params.getString("headsign").isEmpty()) ) {
                        // Param: headsign, Type: String
                        physicalModesRequestBuilder.withHeadsign(stringStraightPass(params.getString("headsign")));
                    }
                    if (params.has("showCodes") && (params.getString("showCodes") != null) && (!params.getString("showCodes").isEmpty()) ) {
                        // Param: showCodes, Type: Boolean
                        physicalModesRequestBuilder.withShowCodes(booleanStraightPass(params.getBoolean("showCodes")));
                    }
                    if (params.has("odtLevel") && (params.getString("odtLevel") != null) && (!params.getString("odtLevel").isEmpty()) ) {
                        // Param: odtLevel, Type: String
                        physicalModesRequestBuilder.withOdtLevel(stringStraightPass(params.getString("odtLevel")));
                    }
                    if (params.has("dataFreshness") && (params.getString("dataFreshness") != null) && (!params.getString("dataFreshness").isEmpty()) ) {
                        // Param: dataFreshness, Type: String
                        physicalModesRequestBuilder.withDataFreshness(stringStraightPass(params.getString("dataFreshness")));
                    }
                    if (params.has("distance") && (params.getString("distance") != null) && (!params.getString("distance").isEmpty()) ) {
                        // Param: distance, Type: Integer
                        physicalModesRequestBuilder.withDistance(integerStraightPass(params.getInt("distance")));
                    }
                    if (params.has("since") && (params.getString("since") != null) && (!params.getString("since").isEmpty()) ) {
                        // Param: since, Type: Date
                        physicalModesRequestBuilder.withSince(stringToDateTime(params.getString("since")));
                    }
                    if (params.has("until") && (params.getString("until") != null) && (!params.getString("until").isEmpty()) ) {
                        // Param: until, Type: Date
                        physicalModesRequestBuilder.withUntil(stringToDateTime(params.getString("until")));
                    }
                    if (params.has("disableGeojson") && (params.getString("disableGeojson") != null) && (!params.getString("disableGeojson").isEmpty()) ) {
                        // Param: disableGeojson, Type: Boolean
                        physicalModesRequestBuilder.withDisableGeojson(booleanStraightPass(params.getBoolean("disableGeojson")));
                    }
                    if (params.has("disableDisruption") && (params.getString("disableDisruption") != null) && (!params.getString("disableDisruption").isEmpty()) ) {
                        // Param: disableDisruption, Type: Boolean
                        physicalModesRequestBuilder.withDisableDisruption(booleanStraightPass(params.getBoolean("disableDisruption")));
                    }
                    if (params.has("tags") && (params.getString("tags") != null) && (!params.getString("tags").isEmpty()) ) {
                        // Param: tags, Type: List
                        physicalModesRequestBuilder.withTags(jsonArrayToStringList(params.getJSONArray("tags")));
                    }
                    
                    physicalModesRequestBuilder.rawGet(new ApiCallback<String>() {
                        @Override
                        public void onFailure(ApiException e, int statusCode, Map<String, List<String>> responseHeaders) {
                            callbackContext.error("Problem during request call | " + e.getMessage());
                        }

                        @Override
                        public void onSuccess(String result, int statusCode, Map<String, List<String>> responseHeaders) {
                            JSONObject jsonObject = null;
                            try {
                                jsonObject = new JSONObject(result);
                                callbackContext.success(jsonObject);
                            } catch (Exception e) {
                                String errorMessage = "Problem during response parsing | " + String.valueOf(e.hashCode()) + ": " + e.getMessage();
                                callbackContext.error(errorMessage);
                            }
                        }

                        @Override
                        public void onUploadProgress(long bytesWritten, long contentLength, boolean done) {
                        }

                        @Override
                        public void onDownloadProgress(long bytesRead, long contentLength, boolean done) {
                        }
                    });
                } catch (Exception e) {
                    String errorMessage = "Problem during request building | " + String.valueOf(e.hashCode()) + ": " + e.getMessage();
                    callbackContext.error(errorMessage);
                }
            }
        });
    }
    final private void coverageRegionPhysicalModes(final JSONObject params, final CallbackContext callbackContext) {
        if (this.navitiaSdk == null) {
            callbackContext.error("NavitiaSDK is not instanciated");
            return;
        }

        final PhysicalModesApi.CoverageRegionPhysicalModesRequestBuilder physicalModesRequestBuilder = this.navitiaSdk.physicalModesApi.newCoverageRegionPhysicalModesRequestBuilder();
        cordova.getThreadPool().execute(new Runnable() {
            @Override
            public void run() {
                try {
                    if (params.has("region") && (params.getString("region") != null) && (!params.getString("region").isEmpty()) ) {
                        // Param: region, Type: String
                        physicalModesRequestBuilder.withRegion(stringStraightPass(params.getString("region")));
                    }
                    if (params.has("startPage") && (params.getString("startPage") != null) && (!params.getString("startPage").isEmpty()) ) {
                        // Param: startPage, Type: Integer
                        physicalModesRequestBuilder.withStartPage(integerStraightPass(params.getInt("startPage")));
                    }
                    if (params.has("count") && (params.getString("count") != null) && (!params.getString("count").isEmpty()) ) {
                        // Param: count, Type: Integer
                        physicalModesRequestBuilder.withCount(integerStraightPass(params.getInt("count")));
                    }
                    if (params.has("depth") && (params.getString("depth") != null) && (!params.getString("depth").isEmpty()) ) {
                        // Param: depth, Type: Integer
                        physicalModesRequestBuilder.withDepth(integerStraightPass(params.getInt("depth")));
                    }
                    if (params.has("forbiddenId") && (params.getString("forbiddenId") != null) && (!params.getString("forbiddenId").isEmpty()) ) {
                        // Param: forbiddenId, Type: List
                        physicalModesRequestBuilder.withForbiddenId(jsonArrayToStringList(params.getJSONArray("forbiddenId")));
                    }
                    if (params.has("forbiddenUris") && (params.getString("forbiddenUris") != null) && (!params.getString("forbiddenUris").isEmpty()) ) {
                        // Param: forbiddenUris, Type: List
                        physicalModesRequestBuilder.withForbiddenUris(jsonArrayToStringList(params.getJSONArray("forbiddenUris")));
                    }
                    if (params.has("externalCode") && (params.getString("externalCode") != null) && (!params.getString("externalCode").isEmpty()) ) {
                        // Param: externalCode, Type: String
                        physicalModesRequestBuilder.withExternalCode(stringStraightPass(params.getString("externalCode")));
                    }
                    if (params.has("headsign") && (params.getString("headsign") != null) && (!params.getString("headsign").isEmpty()) ) {
                        // Param: headsign, Type: String
                        physicalModesRequestBuilder.withHeadsign(stringStraightPass(params.getString("headsign")));
                    }
                    if (params.has("showCodes") && (params.getString("showCodes") != null) && (!params.getString("showCodes").isEmpty()) ) {
                        // Param: showCodes, Type: Boolean
                        physicalModesRequestBuilder.withShowCodes(booleanStraightPass(params.getBoolean("showCodes")));
                    }
                    if (params.has("odtLevel") && (params.getString("odtLevel") != null) && (!params.getString("odtLevel").isEmpty()) ) {
                        // Param: odtLevel, Type: String
                        physicalModesRequestBuilder.withOdtLevel(stringStraightPass(params.getString("odtLevel")));
                    }
                    if (params.has("dataFreshness") && (params.getString("dataFreshness") != null) && (!params.getString("dataFreshness").isEmpty()) ) {
                        // Param: dataFreshness, Type: String
                        physicalModesRequestBuilder.withDataFreshness(stringStraightPass(params.getString("dataFreshness")));
                    }
                    if (params.has("distance") && (params.getString("distance") != null) && (!params.getString("distance").isEmpty()) ) {
                        // Param: distance, Type: Integer
                        physicalModesRequestBuilder.withDistance(integerStraightPass(params.getInt("distance")));
                    }
                    if (params.has("since") && (params.getString("since") != null) && (!params.getString("since").isEmpty()) ) {
                        // Param: since, Type: Date
                        physicalModesRequestBuilder.withSince(stringToDateTime(params.getString("since")));
                    }
                    if (params.has("until") && (params.getString("until") != null) && (!params.getString("until").isEmpty()) ) {
                        // Param: until, Type: Date
                        physicalModesRequestBuilder.withUntil(stringToDateTime(params.getString("until")));
                    }
                    if (params.has("disableGeojson") && (params.getString("disableGeojson") != null) && (!params.getString("disableGeojson").isEmpty()) ) {
                        // Param: disableGeojson, Type: Boolean
                        physicalModesRequestBuilder.withDisableGeojson(booleanStraightPass(params.getBoolean("disableGeojson")));
                    }
                    if (params.has("disableDisruption") && (params.getString("disableDisruption") != null) && (!params.getString("disableDisruption").isEmpty()) ) {
                        // Param: disableDisruption, Type: Boolean
                        physicalModesRequestBuilder.withDisableDisruption(booleanStraightPass(params.getBoolean("disableDisruption")));
                    }
                    if (params.has("filter") && (params.getString("filter") != null) && (!params.getString("filter").isEmpty()) ) {
                        // Param: filter, Type: String
                        physicalModesRequestBuilder.withFilter(stringStraightPass(params.getString("filter")));
                    }
                    if (params.has("tags") && (params.getString("tags") != null) && (!params.getString("tags").isEmpty()) ) {
                        // Param: tags, Type: List
                        physicalModesRequestBuilder.withTags(jsonArrayToStringList(params.getJSONArray("tags")));
                    }
                    
                    physicalModesRequestBuilder.rawGet(new ApiCallback<String>() {
                        @Override
                        public void onFailure(ApiException e, int statusCode, Map<String, List<String>> responseHeaders) {
                            callbackContext.error("Problem during request call | " + e.getMessage());
                        }

                        @Override
                        public void onSuccess(String result, int statusCode, Map<String, List<String>> responseHeaders) {
                            JSONObject jsonObject = null;
                            try {
                                jsonObject = new JSONObject(result);
                                callbackContext.success(jsonObject);
                            } catch (Exception e) {
                                String errorMessage = "Problem during response parsing | " + String.valueOf(e.hashCode()) + ": " + e.getMessage();
                                callbackContext.error(errorMessage);
                            }
                        }

                        @Override
                        public void onUploadProgress(long bytesWritten, long contentLength, boolean done) {
                        }

                        @Override
                        public void onDownloadProgress(long bytesRead, long contentLength, boolean done) {
                        }
                    });
                } catch (Exception e) {
                    String errorMessage = "Problem during request building | " + String.valueOf(e.hashCode()) + ": " + e.getMessage();
                    callbackContext.error(errorMessage);
                }
            }
        });
    }
    final private void coverageRegionPhysicalModesId(final JSONObject params, final CallbackContext callbackContext) {
        if (this.navitiaSdk == null) {
            callbackContext.error("NavitiaSDK is not instanciated");
            return;
        }

        final PhysicalModesApi.CoverageRegionPhysicalModesIdRequestBuilder physicalModesRequestBuilder = this.navitiaSdk.physicalModesApi.newCoverageRegionPhysicalModesIdRequestBuilder();
        cordova.getThreadPool().execute(new Runnable() {
            @Override
            public void run() {
                try {
                    if (params.has("region") && (params.getString("region") != null) && (!params.getString("region").isEmpty()) ) {
                        // Param: region, Type: String
                        physicalModesRequestBuilder.withRegion(stringStraightPass(params.getString("region")));
                    }
                    if (params.has("id") && (params.getString("id") != null) && (!params.getString("id").isEmpty()) ) {
                        // Param: id, Type: String
                        physicalModesRequestBuilder.withId(stringStraightPass(params.getString("id")));
                    }
                    if (params.has("startPage") && (params.getString("startPage") != null) && (!params.getString("startPage").isEmpty()) ) {
                        // Param: startPage, Type: Integer
                        physicalModesRequestBuilder.withStartPage(integerStraightPass(params.getInt("startPage")));
                    }
                    if (params.has("count") && (params.getString("count") != null) && (!params.getString("count").isEmpty()) ) {
                        // Param: count, Type: Integer
                        physicalModesRequestBuilder.withCount(integerStraightPass(params.getInt("count")));
                    }
                    if (params.has("depth") && (params.getString("depth") != null) && (!params.getString("depth").isEmpty()) ) {
                        // Param: depth, Type: Integer
                        physicalModesRequestBuilder.withDepth(integerStraightPass(params.getInt("depth")));
                    }
                    if (params.has("forbiddenId") && (params.getString("forbiddenId") != null) && (!params.getString("forbiddenId").isEmpty()) ) {
                        // Param: forbiddenId, Type: List
                        physicalModesRequestBuilder.withForbiddenId(jsonArrayToStringList(params.getJSONArray("forbiddenId")));
                    }
                    if (params.has("forbiddenUris") && (params.getString("forbiddenUris") != null) && (!params.getString("forbiddenUris").isEmpty()) ) {
                        // Param: forbiddenUris, Type: List
                        physicalModesRequestBuilder.withForbiddenUris(jsonArrayToStringList(params.getJSONArray("forbiddenUris")));
                    }
                    if (params.has("externalCode") && (params.getString("externalCode") != null) && (!params.getString("externalCode").isEmpty()) ) {
                        // Param: externalCode, Type: String
                        physicalModesRequestBuilder.withExternalCode(stringStraightPass(params.getString("externalCode")));
                    }
                    if (params.has("headsign") && (params.getString("headsign") != null) && (!params.getString("headsign").isEmpty()) ) {
                        // Param: headsign, Type: String
                        physicalModesRequestBuilder.withHeadsign(stringStraightPass(params.getString("headsign")));
                    }
                    if (params.has("showCodes") && (params.getString("showCodes") != null) && (!params.getString("showCodes").isEmpty()) ) {
                        // Param: showCodes, Type: Boolean
                        physicalModesRequestBuilder.withShowCodes(booleanStraightPass(params.getBoolean("showCodes")));
                    }
                    if (params.has("odtLevel") && (params.getString("odtLevel") != null) && (!params.getString("odtLevel").isEmpty()) ) {
                        // Param: odtLevel, Type: String
                        physicalModesRequestBuilder.withOdtLevel(stringStraightPass(params.getString("odtLevel")));
                    }
                    if (params.has("dataFreshness") && (params.getString("dataFreshness") != null) && (!params.getString("dataFreshness").isEmpty()) ) {
                        // Param: dataFreshness, Type: String
                        physicalModesRequestBuilder.withDataFreshness(stringStraightPass(params.getString("dataFreshness")));
                    }
                    if (params.has("distance") && (params.getString("distance") != null) && (!params.getString("distance").isEmpty()) ) {
                        // Param: distance, Type: Integer
                        physicalModesRequestBuilder.withDistance(integerStraightPass(params.getInt("distance")));
                    }
                    if (params.has("since") && (params.getString("since") != null) && (!params.getString("since").isEmpty()) ) {
                        // Param: since, Type: Date
                        physicalModesRequestBuilder.withSince(stringToDateTime(params.getString("since")));
                    }
                    if (params.has("until") && (params.getString("until") != null) && (!params.getString("until").isEmpty()) ) {
                        // Param: until, Type: Date
                        physicalModesRequestBuilder.withUntil(stringToDateTime(params.getString("until")));
                    }
                    if (params.has("disableGeojson") && (params.getString("disableGeojson") != null) && (!params.getString("disableGeojson").isEmpty()) ) {
                        // Param: disableGeojson, Type: Boolean
                        physicalModesRequestBuilder.withDisableGeojson(booleanStraightPass(params.getBoolean("disableGeojson")));
                    }
                    if (params.has("disableDisruption") && (params.getString("disableDisruption") != null) && (!params.getString("disableDisruption").isEmpty()) ) {
                        // Param: disableDisruption, Type: Boolean
                        physicalModesRequestBuilder.withDisableDisruption(booleanStraightPass(params.getBoolean("disableDisruption")));
                    }
                    if (params.has("tags") && (params.getString("tags") != null) && (!params.getString("tags").isEmpty()) ) {
                        // Param: tags, Type: List
                        physicalModesRequestBuilder.withTags(jsonArrayToStringList(params.getJSONArray("tags")));
                    }
                    
                    physicalModesRequestBuilder.rawGet(new ApiCallback<String>() {
                        @Override
                        public void onFailure(ApiException e, int statusCode, Map<String, List<String>> responseHeaders) {
                            callbackContext.error("Problem during request call | " + e.getMessage());
                        }

                        @Override
                        public void onSuccess(String result, int statusCode, Map<String, List<String>> responseHeaders) {
                            JSONObject jsonObject = null;
                            try {
                                jsonObject = new JSONObject(result);
                                callbackContext.success(jsonObject);
                            } catch (Exception e) {
                                String errorMessage = "Problem during response parsing | " + String.valueOf(e.hashCode()) + ": " + e.getMessage();
                                callbackContext.error(errorMessage);
                            }
                        }

                        @Override
                        public void onUploadProgress(long bytesWritten, long contentLength, boolean done) {
                        }

                        @Override
                        public void onDownloadProgress(long bytesRead, long contentLength, boolean done) {
                        }
                    });
                } catch (Exception e) {
                    String errorMessage = "Problem during request building | " + String.valueOf(e.hashCode()) + ": " + e.getMessage();
                    callbackContext.error(errorMessage);
                }
            }
        });
    }
    final private void coverageRegionUriPhysicalModes(final JSONObject params, final CallbackContext callbackContext) {
        if (this.navitiaSdk == null) {
            callbackContext.error("NavitiaSDK is not instanciated");
            return;
        }

        final PhysicalModesApi.CoverageRegionUriPhysicalModesRequestBuilder physicalModesRequestBuilder = this.navitiaSdk.physicalModesApi.newCoverageRegionUriPhysicalModesRequestBuilder();
        cordova.getThreadPool().execute(new Runnable() {
            @Override
            public void run() {
                try {
                    if (params.has("region") && (params.getString("region") != null) && (!params.getString("region").isEmpty()) ) {
                        // Param: region, Type: String
                        physicalModesRequestBuilder.withRegion(stringStraightPass(params.getString("region")));
                    }
                    if (params.has("uri") && (params.getString("uri") != null) && (!params.getString("uri").isEmpty()) ) {
                        // Param: uri, Type: String
                        physicalModesRequestBuilder.withUri(stringStraightPass(params.getString("uri")));
                    }
                    if (params.has("startPage") && (params.getString("startPage") != null) && (!params.getString("startPage").isEmpty()) ) {
                        // Param: startPage, Type: Integer
                        physicalModesRequestBuilder.withStartPage(integerStraightPass(params.getInt("startPage")));
                    }
                    if (params.has("count") && (params.getString("count") != null) && (!params.getString("count").isEmpty()) ) {
                        // Param: count, Type: Integer
                        physicalModesRequestBuilder.withCount(integerStraightPass(params.getInt("count")));
                    }
                    if (params.has("depth") && (params.getString("depth") != null) && (!params.getString("depth").isEmpty()) ) {
                        // Param: depth, Type: Integer
                        physicalModesRequestBuilder.withDepth(integerStraightPass(params.getInt("depth")));
                    }
                    if (params.has("forbiddenId") && (params.getString("forbiddenId") != null) && (!params.getString("forbiddenId").isEmpty()) ) {
                        // Param: forbiddenId, Type: List
                        physicalModesRequestBuilder.withForbiddenId(jsonArrayToStringList(params.getJSONArray("forbiddenId")));
                    }
                    if (params.has("forbiddenUris") && (params.getString("forbiddenUris") != null) && (!params.getString("forbiddenUris").isEmpty()) ) {
                        // Param: forbiddenUris, Type: List
                        physicalModesRequestBuilder.withForbiddenUris(jsonArrayToStringList(params.getJSONArray("forbiddenUris")));
                    }
                    if (params.has("externalCode") && (params.getString("externalCode") != null) && (!params.getString("externalCode").isEmpty()) ) {
                        // Param: externalCode, Type: String
                        physicalModesRequestBuilder.withExternalCode(stringStraightPass(params.getString("externalCode")));
                    }
                    if (params.has("headsign") && (params.getString("headsign") != null) && (!params.getString("headsign").isEmpty()) ) {
                        // Param: headsign, Type: String
                        physicalModesRequestBuilder.withHeadsign(stringStraightPass(params.getString("headsign")));
                    }
                    if (params.has("showCodes") && (params.getString("showCodes") != null) && (!params.getString("showCodes").isEmpty()) ) {
                        // Param: showCodes, Type: Boolean
                        physicalModesRequestBuilder.withShowCodes(booleanStraightPass(params.getBoolean("showCodes")));
                    }
                    if (params.has("odtLevel") && (params.getString("odtLevel") != null) && (!params.getString("odtLevel").isEmpty()) ) {
                        // Param: odtLevel, Type: String
                        physicalModesRequestBuilder.withOdtLevel(stringStraightPass(params.getString("odtLevel")));
                    }
                    if (params.has("dataFreshness") && (params.getString("dataFreshness") != null) && (!params.getString("dataFreshness").isEmpty()) ) {
                        // Param: dataFreshness, Type: String
                        physicalModesRequestBuilder.withDataFreshness(stringStraightPass(params.getString("dataFreshness")));
                    }
                    if (params.has("distance") && (params.getString("distance") != null) && (!params.getString("distance").isEmpty()) ) {
                        // Param: distance, Type: Integer
                        physicalModesRequestBuilder.withDistance(integerStraightPass(params.getInt("distance")));
                    }
                    if (params.has("since") && (params.getString("since") != null) && (!params.getString("since").isEmpty()) ) {
                        // Param: since, Type: Date
                        physicalModesRequestBuilder.withSince(stringToDateTime(params.getString("since")));
                    }
                    if (params.has("until") && (params.getString("until") != null) && (!params.getString("until").isEmpty()) ) {
                        // Param: until, Type: Date
                        physicalModesRequestBuilder.withUntil(stringToDateTime(params.getString("until")));
                    }
                    if (params.has("disableGeojson") && (params.getString("disableGeojson") != null) && (!params.getString("disableGeojson").isEmpty()) ) {
                        // Param: disableGeojson, Type: Boolean
                        physicalModesRequestBuilder.withDisableGeojson(booleanStraightPass(params.getBoolean("disableGeojson")));
                    }
                    if (params.has("disableDisruption") && (params.getString("disableDisruption") != null) && (!params.getString("disableDisruption").isEmpty()) ) {
                        // Param: disableDisruption, Type: Boolean
                        physicalModesRequestBuilder.withDisableDisruption(booleanStraightPass(params.getBoolean("disableDisruption")));
                    }
                    if (params.has("filter") && (params.getString("filter") != null) && (!params.getString("filter").isEmpty()) ) {
                        // Param: filter, Type: String
                        physicalModesRequestBuilder.withFilter(stringStraightPass(params.getString("filter")));
                    }
                    if (params.has("tags") && (params.getString("tags") != null) && (!params.getString("tags").isEmpty()) ) {
                        // Param: tags, Type: List
                        physicalModesRequestBuilder.withTags(jsonArrayToStringList(params.getJSONArray("tags")));
                    }
                    
                    physicalModesRequestBuilder.rawGet(new ApiCallback<String>() {
                        @Override
                        public void onFailure(ApiException e, int statusCode, Map<String, List<String>> responseHeaders) {
                            callbackContext.error("Problem during request call | " + e.getMessage());
                        }

                        @Override
                        public void onSuccess(String result, int statusCode, Map<String, List<String>> responseHeaders) {
                            JSONObject jsonObject = null;
                            try {
                                jsonObject = new JSONObject(result);
                                callbackContext.success(jsonObject);
                            } catch (Exception e) {
                                String errorMessage = "Problem during response parsing | " + String.valueOf(e.hashCode()) + ": " + e.getMessage();
                                callbackContext.error(errorMessage);
                            }
                        }

                        @Override
                        public void onUploadProgress(long bytesWritten, long contentLength, boolean done) {
                        }

                        @Override
                        public void onDownloadProgress(long bytesRead, long contentLength, boolean done) {
                        }
                    });
                } catch (Exception e) {
                    String errorMessage = "Problem during request building | " + String.valueOf(e.hashCode()) + ": " + e.getMessage();
                    callbackContext.error(errorMessage);
                }
            }
        });
    }
    final private void coverageRegionUriPhysicalModesId(final JSONObject params, final CallbackContext callbackContext) {
        if (this.navitiaSdk == null) {
            callbackContext.error("NavitiaSDK is not instanciated");
            return;
        }

        final PhysicalModesApi.CoverageRegionUriPhysicalModesIdRequestBuilder physicalModesRequestBuilder = this.navitiaSdk.physicalModesApi.newCoverageRegionUriPhysicalModesIdRequestBuilder();
        cordova.getThreadPool().execute(new Runnable() {
            @Override
            public void run() {
                try {
                    if (params.has("region") && (params.getString("region") != null) && (!params.getString("region").isEmpty()) ) {
                        // Param: region, Type: String
                        physicalModesRequestBuilder.withRegion(stringStraightPass(params.getString("region")));
                    }
                    if (params.has("uri") && (params.getString("uri") != null) && (!params.getString("uri").isEmpty()) ) {
                        // Param: uri, Type: String
                        physicalModesRequestBuilder.withUri(stringStraightPass(params.getString("uri")));
                    }
                    if (params.has("id") && (params.getString("id") != null) && (!params.getString("id").isEmpty()) ) {
                        // Param: id, Type: String
                        physicalModesRequestBuilder.withId(stringStraightPass(params.getString("id")));
                    }
                    if (params.has("startPage") && (params.getString("startPage") != null) && (!params.getString("startPage").isEmpty()) ) {
                        // Param: startPage, Type: Integer
                        physicalModesRequestBuilder.withStartPage(integerStraightPass(params.getInt("startPage")));
                    }
                    if (params.has("count") && (params.getString("count") != null) && (!params.getString("count").isEmpty()) ) {
                        // Param: count, Type: Integer
                        physicalModesRequestBuilder.withCount(integerStraightPass(params.getInt("count")));
                    }
                    if (params.has("depth") && (params.getString("depth") != null) && (!params.getString("depth").isEmpty()) ) {
                        // Param: depth, Type: Integer
                        physicalModesRequestBuilder.withDepth(integerStraightPass(params.getInt("depth")));
                    }
                    if (params.has("forbiddenId") && (params.getString("forbiddenId") != null) && (!params.getString("forbiddenId").isEmpty()) ) {
                        // Param: forbiddenId, Type: List
                        physicalModesRequestBuilder.withForbiddenId(jsonArrayToStringList(params.getJSONArray("forbiddenId")));
                    }
                    if (params.has("forbiddenUris") && (params.getString("forbiddenUris") != null) && (!params.getString("forbiddenUris").isEmpty()) ) {
                        // Param: forbiddenUris, Type: List
                        physicalModesRequestBuilder.withForbiddenUris(jsonArrayToStringList(params.getJSONArray("forbiddenUris")));
                    }
                    if (params.has("externalCode") && (params.getString("externalCode") != null) && (!params.getString("externalCode").isEmpty()) ) {
                        // Param: externalCode, Type: String
                        physicalModesRequestBuilder.withExternalCode(stringStraightPass(params.getString("externalCode")));
                    }
                    if (params.has("headsign") && (params.getString("headsign") != null) && (!params.getString("headsign").isEmpty()) ) {
                        // Param: headsign, Type: String
                        physicalModesRequestBuilder.withHeadsign(stringStraightPass(params.getString("headsign")));
                    }
                    if (params.has("showCodes") && (params.getString("showCodes") != null) && (!params.getString("showCodes").isEmpty()) ) {
                        // Param: showCodes, Type: Boolean
                        physicalModesRequestBuilder.withShowCodes(booleanStraightPass(params.getBoolean("showCodes")));
                    }
                    if (params.has("odtLevel") && (params.getString("odtLevel") != null) && (!params.getString("odtLevel").isEmpty()) ) {
                        // Param: odtLevel, Type: String
                        physicalModesRequestBuilder.withOdtLevel(stringStraightPass(params.getString("odtLevel")));
                    }
                    if (params.has("dataFreshness") && (params.getString("dataFreshness") != null) && (!params.getString("dataFreshness").isEmpty()) ) {
                        // Param: dataFreshness, Type: String
                        physicalModesRequestBuilder.withDataFreshness(stringStraightPass(params.getString("dataFreshness")));
                    }
                    if (params.has("distance") && (params.getString("distance") != null) && (!params.getString("distance").isEmpty()) ) {
                        // Param: distance, Type: Integer
                        physicalModesRequestBuilder.withDistance(integerStraightPass(params.getInt("distance")));
                    }
                    if (params.has("since") && (params.getString("since") != null) && (!params.getString("since").isEmpty()) ) {
                        // Param: since, Type: Date
                        physicalModesRequestBuilder.withSince(stringToDateTime(params.getString("since")));
                    }
                    if (params.has("until") && (params.getString("until") != null) && (!params.getString("until").isEmpty()) ) {
                        // Param: until, Type: Date
                        physicalModesRequestBuilder.withUntil(stringToDateTime(params.getString("until")));
                    }
                    if (params.has("disableGeojson") && (params.getString("disableGeojson") != null) && (!params.getString("disableGeojson").isEmpty()) ) {
                        // Param: disableGeojson, Type: Boolean
                        physicalModesRequestBuilder.withDisableGeojson(booleanStraightPass(params.getBoolean("disableGeojson")));
                    }
                    if (params.has("disableDisruption") && (params.getString("disableDisruption") != null) && (!params.getString("disableDisruption").isEmpty()) ) {
                        // Param: disableDisruption, Type: Boolean
                        physicalModesRequestBuilder.withDisableDisruption(booleanStraightPass(params.getBoolean("disableDisruption")));
                    }
                    if (params.has("tags") && (params.getString("tags") != null) && (!params.getString("tags").isEmpty()) ) {
                        // Param: tags, Type: List
                        physicalModesRequestBuilder.withTags(jsonArrayToStringList(params.getJSONArray("tags")));
                    }
                    
                    physicalModesRequestBuilder.rawGet(new ApiCallback<String>() {
                        @Override
                        public void onFailure(ApiException e, int statusCode, Map<String, List<String>> responseHeaders) {
                            callbackContext.error("Problem during request call | " + e.getMessage());
                        }

                        @Override
                        public void onSuccess(String result, int statusCode, Map<String, List<String>> responseHeaders) {
                            JSONObject jsonObject = null;
                            try {
                                jsonObject = new JSONObject(result);
                                callbackContext.success(jsonObject);
                            } catch (Exception e) {
                                String errorMessage = "Problem during response parsing | " + String.valueOf(e.hashCode()) + ": " + e.getMessage();
                                callbackContext.error(errorMessage);
                            }
                        }

                        @Override
                        public void onUploadProgress(long bytesWritten, long contentLength, boolean done) {
                        }

                        @Override
                        public void onDownloadProgress(long bytesRead, long contentLength, boolean done) {
                        }
                    });
                } catch (Exception e) {
                    String errorMessage = "Problem during request building | " + String.valueOf(e.hashCode()) + ": " + e.getMessage();
                    callbackContext.error(errorMessage);
                }
            }
        });
    }
    final private void coverageLonLatPlacesId(final JSONObject params, final CallbackContext callbackContext) {
        if (this.navitiaSdk == null) {
            callbackContext.error("NavitiaSDK is not instanciated");
            return;
        }

        final PlaceUriApi.CoverageLonLatPlacesIdRequestBuilder placeUriRequestBuilder = this.navitiaSdk.placeUriApi.newCoverageLonLatPlacesIdRequestBuilder();
        cordova.getThreadPool().execute(new Runnable() {
            @Override
            public void run() {
                try {
                    if (params.has("lat") && (params.getString("lat") != null) && (!params.getString("lat").isEmpty()) ) {
                        // Param: lat, Type: BigDecimal
                        placeUriRequestBuilder.withLat(longToBigDecimal(params.getLong("lat")));
                    }
                    if (params.has("lon") && (params.getString("lon") != null) && (!params.getString("lon").isEmpty()) ) {
                        // Param: lon, Type: BigDecimal
                        placeUriRequestBuilder.withLon(longToBigDecimal(params.getLong("lon")));
                    }
                    if (params.has("id") && (params.getString("id") != null) && (!params.getString("id").isEmpty()) ) {
                        // Param: id, Type: String
                        placeUriRequestBuilder.withId(stringStraightPass(params.getString("id")));
                    }
                    if (params.has("bssStands") && (params.getString("bssStands") != null) && (!params.getString("bssStands").isEmpty()) ) {
                        // Param: bssStands, Type: Boolean
                        placeUriRequestBuilder.withBssStands(booleanStraightPass(params.getBoolean("bssStands")));
                    }
                    if (params.has("addPoiInfos") && (params.getString("addPoiInfos") != null) && (!params.getString("addPoiInfos").isEmpty()) ) {
                        // Param: addPoiInfos, Type: List
                        placeUriRequestBuilder.withAddPoiInfos(jsonArrayToStringList(params.getJSONArray("addPoiInfos")));
                    }
                    if (params.has("disableGeojson") && (params.getString("disableGeojson") != null) && (!params.getString("disableGeojson").isEmpty()) ) {
                        // Param: disableGeojson, Type: Boolean
                        placeUriRequestBuilder.withDisableGeojson(booleanStraightPass(params.getBoolean("disableGeojson")));
                    }
                    if (params.has("disableDisruption") && (params.getString("disableDisruption") != null) && (!params.getString("disableDisruption").isEmpty()) ) {
                        // Param: disableDisruption, Type: Boolean
                        placeUriRequestBuilder.withDisableDisruption(booleanStraightPass(params.getBoolean("disableDisruption")));
                    }
                    
                    placeUriRequestBuilder.rawGet(new ApiCallback<String>() {
                        @Override
                        public void onFailure(ApiException e, int statusCode, Map<String, List<String>> responseHeaders) {
                            callbackContext.error("Problem during request call | " + e.getMessage());
                        }

                        @Override
                        public void onSuccess(String result, int statusCode, Map<String, List<String>> responseHeaders) {
                            JSONObject jsonObject = null;
                            try {
                                jsonObject = new JSONObject(result);
                                callbackContext.success(jsonObject);
                            } catch (Exception e) {
                                String errorMessage = "Problem during response parsing | " + String.valueOf(e.hashCode()) + ": " + e.getMessage();
                                callbackContext.error(errorMessage);
                            }
                        }

                        @Override
                        public void onUploadProgress(long bytesWritten, long contentLength, boolean done) {
                        }

                        @Override
                        public void onDownloadProgress(long bytesRead, long contentLength, boolean done) {
                        }
                    });
                } catch (Exception e) {
                    String errorMessage = "Problem during request building | " + String.valueOf(e.hashCode()) + ": " + e.getMessage();
                    callbackContext.error(errorMessage);
                }
            }
        });
    }
    final private void coverageRegionPlacesId(final JSONObject params, final CallbackContext callbackContext) {
        if (this.navitiaSdk == null) {
            callbackContext.error("NavitiaSDK is not instanciated");
            return;
        }

        final PlaceUriApi.CoverageRegionPlacesIdRequestBuilder placeUriRequestBuilder = this.navitiaSdk.placeUriApi.newCoverageRegionPlacesIdRequestBuilder();
        cordova.getThreadPool().execute(new Runnable() {
            @Override
            public void run() {
                try {
                    if (params.has("region") && (params.getString("region") != null) && (!params.getString("region").isEmpty()) ) {
                        // Param: region, Type: String
                        placeUriRequestBuilder.withRegion(stringStraightPass(params.getString("region")));
                    }
                    if (params.has("id") && (params.getString("id") != null) && (!params.getString("id").isEmpty()) ) {
                        // Param: id, Type: String
                        placeUriRequestBuilder.withId(stringStraightPass(params.getString("id")));
                    }
                    if (params.has("bssStands") && (params.getString("bssStands") != null) && (!params.getString("bssStands").isEmpty()) ) {
                        // Param: bssStands, Type: Boolean
                        placeUriRequestBuilder.withBssStands(booleanStraightPass(params.getBoolean("bssStands")));
                    }
                    if (params.has("addPoiInfos") && (params.getString("addPoiInfos") != null) && (!params.getString("addPoiInfos").isEmpty()) ) {
                        // Param: addPoiInfos, Type: List
                        placeUriRequestBuilder.withAddPoiInfos(jsonArrayToStringList(params.getJSONArray("addPoiInfos")));
                    }
                    if (params.has("disableGeojson") && (params.getString("disableGeojson") != null) && (!params.getString("disableGeojson").isEmpty()) ) {
                        // Param: disableGeojson, Type: Boolean
                        placeUriRequestBuilder.withDisableGeojson(booleanStraightPass(params.getBoolean("disableGeojson")));
                    }
                    if (params.has("disableDisruption") && (params.getString("disableDisruption") != null) && (!params.getString("disableDisruption").isEmpty()) ) {
                        // Param: disableDisruption, Type: Boolean
                        placeUriRequestBuilder.withDisableDisruption(booleanStraightPass(params.getBoolean("disableDisruption")));
                    }
                    
                    placeUriRequestBuilder.rawGet(new ApiCallback<String>() {
                        @Override
                        public void onFailure(ApiException e, int statusCode, Map<String, List<String>> responseHeaders) {
                            callbackContext.error("Problem during request call | " + e.getMessage());
                        }

                        @Override
                        public void onSuccess(String result, int statusCode, Map<String, List<String>> responseHeaders) {
                            JSONObject jsonObject = null;
                            try {
                                jsonObject = new JSONObject(result);
                                callbackContext.success(jsonObject);
                            } catch (Exception e) {
                                String errorMessage = "Problem during response parsing | " + String.valueOf(e.hashCode()) + ": " + e.getMessage();
                                callbackContext.error(errorMessage);
                            }
                        }

                        @Override
                        public void onUploadProgress(long bytesWritten, long contentLength, boolean done) {
                        }

                        @Override
                        public void onDownloadProgress(long bytesRead, long contentLength, boolean done) {
                        }
                    });
                } catch (Exception e) {
                    String errorMessage = "Problem during request building | " + String.valueOf(e.hashCode()) + ": " + e.getMessage();
                    callbackContext.error(errorMessage);
                }
            }
        });
    }
    final private void placesId(final JSONObject params, final CallbackContext callbackContext) {
        if (this.navitiaSdk == null) {
            callbackContext.error("NavitiaSDK is not instanciated");
            return;
        }

        final PlaceUriApi.PlacesIdRequestBuilder placeUriRequestBuilder = this.navitiaSdk.placeUriApi.newPlacesIdRequestBuilder();
        cordova.getThreadPool().execute(new Runnable() {
            @Override
            public void run() {
                try {
                    if (params.has("id") && (params.getString("id") != null) && (!params.getString("id").isEmpty()) ) {
                        // Param: id, Type: String
                        placeUriRequestBuilder.withId(stringStraightPass(params.getString("id")));
                    }
                    if (params.has("bssStands") && (params.getString("bssStands") != null) && (!params.getString("bssStands").isEmpty()) ) {
                        // Param: bssStands, Type: Boolean
                        placeUriRequestBuilder.withBssStands(booleanStraightPass(params.getBoolean("bssStands")));
                    }
                    if (params.has("addPoiInfos") && (params.getString("addPoiInfos") != null) && (!params.getString("addPoiInfos").isEmpty()) ) {
                        // Param: addPoiInfos, Type: List
                        placeUriRequestBuilder.withAddPoiInfos(jsonArrayToStringList(params.getJSONArray("addPoiInfos")));
                    }
                    if (params.has("disableGeojson") && (params.getString("disableGeojson") != null) && (!params.getString("disableGeojson").isEmpty()) ) {
                        // Param: disableGeojson, Type: Boolean
                        placeUriRequestBuilder.withDisableGeojson(booleanStraightPass(params.getBoolean("disableGeojson")));
                    }
                    if (params.has("disableDisruption") && (params.getString("disableDisruption") != null) && (!params.getString("disableDisruption").isEmpty()) ) {
                        // Param: disableDisruption, Type: Boolean
                        placeUriRequestBuilder.withDisableDisruption(booleanStraightPass(params.getBoolean("disableDisruption")));
                    }
                    
                    placeUriRequestBuilder.rawGet(new ApiCallback<String>() {
                        @Override
                        public void onFailure(ApiException e, int statusCode, Map<String, List<String>> responseHeaders) {
                            callbackContext.error("Problem during request call | " + e.getMessage());
                        }

                        @Override
                        public void onSuccess(String result, int statusCode, Map<String, List<String>> responseHeaders) {
                            JSONObject jsonObject = null;
                            try {
                                jsonObject = new JSONObject(result);
                                callbackContext.success(jsonObject);
                            } catch (Exception e) {
                                String errorMessage = "Problem during response parsing | " + String.valueOf(e.hashCode()) + ": " + e.getMessage();
                                callbackContext.error(errorMessage);
                            }
                        }

                        @Override
                        public void onUploadProgress(long bytesWritten, long contentLength, boolean done) {
                        }

                        @Override
                        public void onDownloadProgress(long bytesRead, long contentLength, boolean done) {
                        }
                    });
                } catch (Exception e) {
                    String errorMessage = "Problem during request building | " + String.valueOf(e.hashCode()) + ": " + e.getMessage();
                    callbackContext.error(errorMessage);
                }
            }
        });
    }
    final private void coverageLonLatPlaces(final JSONObject params, final CallbackContext callbackContext) {
        if (this.navitiaSdk == null) {
            callbackContext.error("NavitiaSDK is not instanciated");
            return;
        }

        final PlacesApi.CoverageLonLatPlacesRequestBuilder placesRequestBuilder = this.navitiaSdk.placesApi.newCoverageLonLatPlacesRequestBuilder();
        cordova.getThreadPool().execute(new Runnable() {
            @Override
            public void run() {
                try {
                    if (params.has("q") && (params.getString("q") != null) && (!params.getString("q").isEmpty()) ) {
                        // Param: q, Type: String
                        placesRequestBuilder.withQ(stringStraightPass(params.getString("q")));
                    }
                    if (params.has("lat") && (params.getString("lat") != null) && (!params.getString("lat").isEmpty()) ) {
                        // Param: lat, Type: BigDecimal
                        placesRequestBuilder.withLat(longToBigDecimal(params.getLong("lat")));
                    }
                    if (params.has("lon") && (params.getString("lon") != null) && (!params.getString("lon").isEmpty()) ) {
                        // Param: lon, Type: BigDecimal
                        placesRequestBuilder.withLon(longToBigDecimal(params.getLong("lon")));
                    }
                    if (params.has("type") && (params.getString("type") != null) && (!params.getString("type").isEmpty()) ) {
                        // Param: type, Type: List
                        placesRequestBuilder.withType(jsonArrayToStringList(params.getJSONArray("type")));
                    }
                    if (params.has("count") && (params.getString("count") != null) && (!params.getString("count").isEmpty()) ) {
                        // Param: count, Type: Integer
                        placesRequestBuilder.withCount(integerStraightPass(params.getInt("count")));
                    }
                    if (params.has("adminUri") && (params.getString("adminUri") != null) && (!params.getString("adminUri").isEmpty()) ) {
                        // Param: adminUri, Type: List
                        placesRequestBuilder.withAdminUri(jsonArrayToStringList(params.getJSONArray("adminUri")));
                    }
                    if (params.has("depth") && (params.getString("depth") != null) && (!params.getString("depth").isEmpty()) ) {
                        // Param: depth, Type: Integer
                        placesRequestBuilder.withDepth(integerStraightPass(params.getInt("depth")));
                    }
                    if (params.has("disableGeojson") && (params.getString("disableGeojson") != null) && (!params.getString("disableGeojson").isEmpty()) ) {
                        // Param: disableGeojson, Type: Boolean
                        placesRequestBuilder.withDisableGeojson(booleanStraightPass(params.getBoolean("disableGeojson")));
                    }
                    if (params.has("from") && (params.getString("from") != null) && (!params.getString("from").isEmpty()) ) {
                        // Param: from, Type: String
                        placesRequestBuilder.withFrom(stringStraightPass(params.getString("from")));
                    }
                    if (params.has("shape") && (params.getString("shape") != null) && (!params.getString("shape").isEmpty()) ) {
                        // Param: shape, Type: String
                        placesRequestBuilder.withShape(stringStraightPass(params.getString("shape")));
                    }
                    if (params.has("shapeScope") && (params.getString("shapeScope") != null) && (!params.getString("shapeScope").isEmpty()) ) {
                        // Param: shapeScope, Type: List
                        placesRequestBuilder.withShapeScope(jsonArrayToStringList(params.getJSONArray("shapeScope")));
                    }
                    if (params.has("placesProximityRadius") && (params.getString("placesProximityRadius") != null) && (!params.getString("placesProximityRadius").isEmpty()) ) {
                        // Param: placesProximityRadius, Type: Float
                        placesRequestBuilder.withPlacesProximityRadius(longToFloat(params.getLong("placesProximityRadius")));
                    }
                    
                    placesRequestBuilder.rawGet(new ApiCallback<String>() {
                        @Override
                        public void onFailure(ApiException e, int statusCode, Map<String, List<String>> responseHeaders) {
                            callbackContext.error("Problem during request call | " + e.getMessage());
                        }

                        @Override
                        public void onSuccess(String result, int statusCode, Map<String, List<String>> responseHeaders) {
                            JSONObject jsonObject = null;
                            try {
                                jsonObject = new JSONObject(result);
                                callbackContext.success(jsonObject);
                            } catch (Exception e) {
                                String errorMessage = "Problem during response parsing | " + String.valueOf(e.hashCode()) + ": " + e.getMessage();
                                callbackContext.error(errorMessage);
                            }
                        }

                        @Override
                        public void onUploadProgress(long bytesWritten, long contentLength, boolean done) {
                        }

                        @Override
                        public void onDownloadProgress(long bytesRead, long contentLength, boolean done) {
                        }
                    });
                } catch (Exception e) {
                    String errorMessage = "Problem during request building | " + String.valueOf(e.hashCode()) + ": " + e.getMessage();
                    callbackContext.error(errorMessage);
                }
            }
        });
    }
    final private void coverageRegionPlaces(final JSONObject params, final CallbackContext callbackContext) {
        if (this.navitiaSdk == null) {
            callbackContext.error("NavitiaSDK is not instanciated");
            return;
        }

        final PlacesApi.CoverageRegionPlacesRequestBuilder placesRequestBuilder = this.navitiaSdk.placesApi.newCoverageRegionPlacesRequestBuilder();
        cordova.getThreadPool().execute(new Runnable() {
            @Override
            public void run() {
                try {
                    if (params.has("q") && (params.getString("q") != null) && (!params.getString("q").isEmpty()) ) {
                        // Param: q, Type: String
                        placesRequestBuilder.withQ(stringStraightPass(params.getString("q")));
                    }
                    if (params.has("region") && (params.getString("region") != null) && (!params.getString("region").isEmpty()) ) {
                        // Param: region, Type: String
                        placesRequestBuilder.withRegion(stringStraightPass(params.getString("region")));
                    }
                    if (params.has("type") && (params.getString("type") != null) && (!params.getString("type").isEmpty()) ) {
                        // Param: type, Type: List
                        placesRequestBuilder.withType(jsonArrayToStringList(params.getJSONArray("type")));
                    }
                    if (params.has("count") && (params.getString("count") != null) && (!params.getString("count").isEmpty()) ) {
                        // Param: count, Type: Integer
                        placesRequestBuilder.withCount(integerStraightPass(params.getInt("count")));
                    }
                    if (params.has("adminUri") && (params.getString("adminUri") != null) && (!params.getString("adminUri").isEmpty()) ) {
                        // Param: adminUri, Type: List
                        placesRequestBuilder.withAdminUri(jsonArrayToStringList(params.getJSONArray("adminUri")));
                    }
                    if (params.has("depth") && (params.getString("depth") != null) && (!params.getString("depth").isEmpty()) ) {
                        // Param: depth, Type: Integer
                        placesRequestBuilder.withDepth(integerStraightPass(params.getInt("depth")));
                    }
                    if (params.has("disableGeojson") && (params.getString("disableGeojson") != null) && (!params.getString("disableGeojson").isEmpty()) ) {
                        // Param: disableGeojson, Type: Boolean
                        placesRequestBuilder.withDisableGeojson(booleanStraightPass(params.getBoolean("disableGeojson")));
                    }
                    if (params.has("from") && (params.getString("from") != null) && (!params.getString("from").isEmpty()) ) {
                        // Param: from, Type: String
                        placesRequestBuilder.withFrom(stringStraightPass(params.getString("from")));
                    }
                    if (params.has("shape") && (params.getString("shape") != null) && (!params.getString("shape").isEmpty()) ) {
                        // Param: shape, Type: String
                        placesRequestBuilder.withShape(stringStraightPass(params.getString("shape")));
                    }
                    if (params.has("shapeScope") && (params.getString("shapeScope") != null) && (!params.getString("shapeScope").isEmpty()) ) {
                        // Param: shapeScope, Type: List
                        placesRequestBuilder.withShapeScope(jsonArrayToStringList(params.getJSONArray("shapeScope")));
                    }
                    if (params.has("placesProximityRadius") && (params.getString("placesProximityRadius") != null) && (!params.getString("placesProximityRadius").isEmpty()) ) {
                        // Param: placesProximityRadius, Type: Float
                        placesRequestBuilder.withPlacesProximityRadius(longToFloat(params.getLong("placesProximityRadius")));
                    }
                    
                    placesRequestBuilder.rawGet(new ApiCallback<String>() {
                        @Override
                        public void onFailure(ApiException e, int statusCode, Map<String, List<String>> responseHeaders) {
                            callbackContext.error("Problem during request call | " + e.getMessage());
                        }

                        @Override
                        public void onSuccess(String result, int statusCode, Map<String, List<String>> responseHeaders) {
                            JSONObject jsonObject = null;
                            try {
                                jsonObject = new JSONObject(result);
                                callbackContext.success(jsonObject);
                            } catch (Exception e) {
                                String errorMessage = "Problem during response parsing | " + String.valueOf(e.hashCode()) + ": " + e.getMessage();
                                callbackContext.error(errorMessage);
                            }
                        }

                        @Override
                        public void onUploadProgress(long bytesWritten, long contentLength, boolean done) {
                        }

                        @Override
                        public void onDownloadProgress(long bytesRead, long contentLength, boolean done) {
                        }
                    });
                } catch (Exception e) {
                    String errorMessage = "Problem during request building | " + String.valueOf(e.hashCode()) + ": " + e.getMessage();
                    callbackContext.error(errorMessage);
                }
            }
        });
    }
    final private void places(final JSONObject params, final CallbackContext callbackContext) {
        if (this.navitiaSdk == null) {
            callbackContext.error("NavitiaSDK is not instanciated");
            return;
        }

        final PlacesApi.PlacesRequestBuilder placesRequestBuilder = this.navitiaSdk.placesApi.newPlacesRequestBuilder();
        cordova.getThreadPool().execute(new Runnable() {
            @Override
            public void run() {
                try {
                    if (params.has("q") && (params.getString("q") != null) && (!params.getString("q").isEmpty()) ) {
                        // Param: q, Type: String
                        placesRequestBuilder.withQ(stringStraightPass(params.getString("q")));
                    }
                    if (params.has("type") && (params.getString("type") != null) && (!params.getString("type").isEmpty()) ) {
                        // Param: type, Type: List
                        placesRequestBuilder.withType(jsonArrayToStringList(params.getJSONArray("type")));
                    }
                    if (params.has("count") && (params.getString("count") != null) && (!params.getString("count").isEmpty()) ) {
                        // Param: count, Type: Integer
                        placesRequestBuilder.withCount(integerStraightPass(params.getInt("count")));
                    }
                    if (params.has("adminUri") && (params.getString("adminUri") != null) && (!params.getString("adminUri").isEmpty()) ) {
                        // Param: adminUri, Type: List
                        placesRequestBuilder.withAdminUri(jsonArrayToStringList(params.getJSONArray("adminUri")));
                    }
                    if (params.has("depth") && (params.getString("depth") != null) && (!params.getString("depth").isEmpty()) ) {
                        // Param: depth, Type: Integer
                        placesRequestBuilder.withDepth(integerStraightPass(params.getInt("depth")));
                    }
                    if (params.has("disableGeojson") && (params.getString("disableGeojson") != null) && (!params.getString("disableGeojson").isEmpty()) ) {
                        // Param: disableGeojson, Type: Boolean
                        placesRequestBuilder.withDisableGeojson(booleanStraightPass(params.getBoolean("disableGeojson")));
                    }
                    if (params.has("from") && (params.getString("from") != null) && (!params.getString("from").isEmpty()) ) {
                        // Param: from, Type: String
                        placesRequestBuilder.withFrom(stringStraightPass(params.getString("from")));
                    }
                    if (params.has("shape") && (params.getString("shape") != null) && (!params.getString("shape").isEmpty()) ) {
                        // Param: shape, Type: String
                        placesRequestBuilder.withShape(stringStraightPass(params.getString("shape")));
                    }
                    if (params.has("shapeScope") && (params.getString("shapeScope") != null) && (!params.getString("shapeScope").isEmpty()) ) {
                        // Param: shapeScope, Type: List
                        placesRequestBuilder.withShapeScope(jsonArrayToStringList(params.getJSONArray("shapeScope")));
                    }
                    if (params.has("placesProximityRadius") && (params.getString("placesProximityRadius") != null) && (!params.getString("placesProximityRadius").isEmpty()) ) {
                        // Param: placesProximityRadius, Type: Float
                        placesRequestBuilder.withPlacesProximityRadius(longToFloat(params.getLong("placesProximityRadius")));
                    }
                    
                    placesRequestBuilder.rawGet(new ApiCallback<String>() {
                        @Override
                        public void onFailure(ApiException e, int statusCode, Map<String, List<String>> responseHeaders) {
                            callbackContext.error("Problem during request call | " + e.getMessage());
                        }

                        @Override
                        public void onSuccess(String result, int statusCode, Map<String, List<String>> responseHeaders) {
                            JSONObject jsonObject = null;
                            try {
                                jsonObject = new JSONObject(result);
                                callbackContext.success(jsonObject);
                            } catch (Exception e) {
                                String errorMessage = "Problem during response parsing | " + String.valueOf(e.hashCode()) + ": " + e.getMessage();
                                callbackContext.error(errorMessage);
                            }
                        }

                        @Override
                        public void onUploadProgress(long bytesWritten, long contentLength, boolean done) {
                        }

                        @Override
                        public void onDownloadProgress(long bytesRead, long contentLength, boolean done) {
                        }
                    });
                } catch (Exception e) {
                    String errorMessage = "Problem during request building | " + String.valueOf(e.hashCode()) + ": " + e.getMessage();
                    callbackContext.error(errorMessage);
                }
            }
        });
    }
    final private void coordLonLatPlacesNearby(final JSONObject params, final CallbackContext callbackContext) {
        if (this.navitiaSdk == null) {
            callbackContext.error("NavitiaSDK is not instanciated");
            return;
        }

        final PlacesNearbyApi.CoordLonLatPlacesNearbyRequestBuilder placesNearbyRequestBuilder = this.navitiaSdk.placesNearbyApi.newCoordLonLatPlacesNearbyRequestBuilder();
        cordova.getThreadPool().execute(new Runnable() {
            @Override
            public void run() {
                try {
                    if (params.has("lat") && (params.getString("lat") != null) && (!params.getString("lat").isEmpty()) ) {
                        // Param: lat, Type: BigDecimal
                        placesNearbyRequestBuilder.withLat(longToBigDecimal(params.getLong("lat")));
                    }
                    if (params.has("lon") && (params.getString("lon") != null) && (!params.getString("lon").isEmpty()) ) {
                        // Param: lon, Type: BigDecimal
                        placesNearbyRequestBuilder.withLon(longToBigDecimal(params.getLong("lon")));
                    }
                    if (params.has("type") && (params.getString("type") != null) && (!params.getString("type").isEmpty()) ) {
                        // Param: type, Type: List
                        placesNearbyRequestBuilder.withType(jsonArrayToStringList(params.getJSONArray("type")));
                    }
                    if (params.has("filter") && (params.getString("filter") != null) && (!params.getString("filter").isEmpty()) ) {
                        // Param: filter, Type: String
                        placesNearbyRequestBuilder.withFilter(stringStraightPass(params.getString("filter")));
                    }
                    if (params.has("distance") && (params.getString("distance") != null) && (!params.getString("distance").isEmpty()) ) {
                        // Param: distance, Type: Integer
                        placesNearbyRequestBuilder.withDistance(integerStraightPass(params.getInt("distance")));
                    }
                    if (params.has("count") && (params.getString("count") != null) && (!params.getString("count").isEmpty()) ) {
                        // Param: count, Type: Integer
                        placesNearbyRequestBuilder.withCount(integerStraightPass(params.getInt("count")));
                    }
                    if (params.has("depth") && (params.getString("depth") != null) && (!params.getString("depth").isEmpty()) ) {
                        // Param: depth, Type: Integer
                        placesNearbyRequestBuilder.withDepth(integerStraightPass(params.getInt("depth")));
                    }
                    if (params.has("startPage") && (params.getString("startPage") != null) && (!params.getString("startPage").isEmpty()) ) {
                        // Param: startPage, Type: Integer
                        placesNearbyRequestBuilder.withStartPage(integerStraightPass(params.getInt("startPage")));
                    }
                    if (params.has("bssStands") && (params.getString("bssStands") != null) && (!params.getString("bssStands").isEmpty()) ) {
                        // Param: bssStands, Type: Boolean
                        placesNearbyRequestBuilder.withBssStands(booleanStraightPass(params.getBoolean("bssStands")));
                    }
                    if (params.has("addPoiInfos") && (params.getString("addPoiInfos") != null) && (!params.getString("addPoiInfos").isEmpty()) ) {
                        // Param: addPoiInfos, Type: List
                        placesNearbyRequestBuilder.withAddPoiInfos(jsonArrayToStringList(params.getJSONArray("addPoiInfos")));
                    }
                    if (params.has("disableGeojson") && (params.getString("disableGeojson") != null) && (!params.getString("disableGeojson").isEmpty()) ) {
                        // Param: disableGeojson, Type: Boolean
                        placesNearbyRequestBuilder.withDisableGeojson(booleanStraightPass(params.getBoolean("disableGeojson")));
                    }
                    if (params.has("disableDisruption") && (params.getString("disableDisruption") != null) && (!params.getString("disableDisruption").isEmpty()) ) {
                        // Param: disableDisruption, Type: Boolean
                        placesNearbyRequestBuilder.withDisableDisruption(booleanStraightPass(params.getBoolean("disableDisruption")));
                    }
                    
                    placesNearbyRequestBuilder.rawGet(new ApiCallback<String>() {
                        @Override
                        public void onFailure(ApiException e, int statusCode, Map<String, List<String>> responseHeaders) {
                            callbackContext.error("Problem during request call | " + e.getMessage());
                        }

                        @Override
                        public void onSuccess(String result, int statusCode, Map<String, List<String>> responseHeaders) {
                            JSONObject jsonObject = null;
                            try {
                                jsonObject = new JSONObject(result);
                                callbackContext.success(jsonObject);
                            } catch (Exception e) {
                                String errorMessage = "Problem during response parsing | " + String.valueOf(e.hashCode()) + ": " + e.getMessage();
                                callbackContext.error(errorMessage);
                            }
                        }

                        @Override
                        public void onUploadProgress(long bytesWritten, long contentLength, boolean done) {
                        }

                        @Override
                        public void onDownloadProgress(long bytesRead, long contentLength, boolean done) {
                        }
                    });
                } catch (Exception e) {
                    String errorMessage = "Problem during request building | " + String.valueOf(e.hashCode()) + ": " + e.getMessage();
                    callbackContext.error(errorMessage);
                }
            }
        });
    }
    final private void coordsLonLatPlacesNearby(final JSONObject params, final CallbackContext callbackContext) {
        if (this.navitiaSdk == null) {
            callbackContext.error("NavitiaSDK is not instanciated");
            return;
        }

        final PlacesNearbyApi.CoordsLonLatPlacesNearbyRequestBuilder placesNearbyRequestBuilder = this.navitiaSdk.placesNearbyApi.newCoordsLonLatPlacesNearbyRequestBuilder();
        cordova.getThreadPool().execute(new Runnable() {
            @Override
            public void run() {
                try {
                    if (params.has("lat") && (params.getString("lat") != null) && (!params.getString("lat").isEmpty()) ) {
                        // Param: lat, Type: BigDecimal
                        placesNearbyRequestBuilder.withLat(longToBigDecimal(params.getLong("lat")));
                    }
                    if (params.has("lon") && (params.getString("lon") != null) && (!params.getString("lon").isEmpty()) ) {
                        // Param: lon, Type: BigDecimal
                        placesNearbyRequestBuilder.withLon(longToBigDecimal(params.getLong("lon")));
                    }
                    if (params.has("type") && (params.getString("type") != null) && (!params.getString("type").isEmpty()) ) {
                        // Param: type, Type: List
                        placesNearbyRequestBuilder.withType(jsonArrayToStringList(params.getJSONArray("type")));
                    }
                    if (params.has("filter") && (params.getString("filter") != null) && (!params.getString("filter").isEmpty()) ) {
                        // Param: filter, Type: String
                        placesNearbyRequestBuilder.withFilter(stringStraightPass(params.getString("filter")));
                    }
                    if (params.has("distance") && (params.getString("distance") != null) && (!params.getString("distance").isEmpty()) ) {
                        // Param: distance, Type: Integer
                        placesNearbyRequestBuilder.withDistance(integerStraightPass(params.getInt("distance")));
                    }
                    if (params.has("count") && (params.getString("count") != null) && (!params.getString("count").isEmpty()) ) {
                        // Param: count, Type: Integer
                        placesNearbyRequestBuilder.withCount(integerStraightPass(params.getInt("count")));
                    }
                    if (params.has("depth") && (params.getString("depth") != null) && (!params.getString("depth").isEmpty()) ) {
                        // Param: depth, Type: Integer
                        placesNearbyRequestBuilder.withDepth(integerStraightPass(params.getInt("depth")));
                    }
                    if (params.has("startPage") && (params.getString("startPage") != null) && (!params.getString("startPage").isEmpty()) ) {
                        // Param: startPage, Type: Integer
                        placesNearbyRequestBuilder.withStartPage(integerStraightPass(params.getInt("startPage")));
                    }
                    if (params.has("bssStands") && (params.getString("bssStands") != null) && (!params.getString("bssStands").isEmpty()) ) {
                        // Param: bssStands, Type: Boolean
                        placesNearbyRequestBuilder.withBssStands(booleanStraightPass(params.getBoolean("bssStands")));
                    }
                    if (params.has("addPoiInfos") && (params.getString("addPoiInfos") != null) && (!params.getString("addPoiInfos").isEmpty()) ) {
                        // Param: addPoiInfos, Type: List
                        placesNearbyRequestBuilder.withAddPoiInfos(jsonArrayToStringList(params.getJSONArray("addPoiInfos")));
                    }
                    if (params.has("disableGeojson") && (params.getString("disableGeojson") != null) && (!params.getString("disableGeojson").isEmpty()) ) {
                        // Param: disableGeojson, Type: Boolean
                        placesNearbyRequestBuilder.withDisableGeojson(booleanStraightPass(params.getBoolean("disableGeojson")));
                    }
                    if (params.has("disableDisruption") && (params.getString("disableDisruption") != null) && (!params.getString("disableDisruption").isEmpty()) ) {
                        // Param: disableDisruption, Type: Boolean
                        placesNearbyRequestBuilder.withDisableDisruption(booleanStraightPass(params.getBoolean("disableDisruption")));
                    }
                    
                    placesNearbyRequestBuilder.rawGet(new ApiCallback<String>() {
                        @Override
                        public void onFailure(ApiException e, int statusCode, Map<String, List<String>> responseHeaders) {
                            callbackContext.error("Problem during request call | " + e.getMessage());
                        }

                        @Override
                        public void onSuccess(String result, int statusCode, Map<String, List<String>> responseHeaders) {
                            JSONObject jsonObject = null;
                            try {
                                jsonObject = new JSONObject(result);
                                callbackContext.success(jsonObject);
                            } catch (Exception e) {
                                String errorMessage = "Problem during response parsing | " + String.valueOf(e.hashCode()) + ": " + e.getMessage();
                                callbackContext.error(errorMessage);
                            }
                        }

                        @Override
                        public void onUploadProgress(long bytesWritten, long contentLength, boolean done) {
                        }

                        @Override
                        public void onDownloadProgress(long bytesRead, long contentLength, boolean done) {
                        }
                    });
                } catch (Exception e) {
                    String errorMessage = "Problem during request building | " + String.valueOf(e.hashCode()) + ": " + e.getMessage();
                    callbackContext.error(errorMessage);
                }
            }
        });
    }
    final private void coverageLonLatPlacesNearby(final JSONObject params, final CallbackContext callbackContext) {
        if (this.navitiaSdk == null) {
            callbackContext.error("NavitiaSDK is not instanciated");
            return;
        }

        final PlacesNearbyApi.CoverageLonLatPlacesNearbyRequestBuilder placesNearbyRequestBuilder = this.navitiaSdk.placesNearbyApi.newCoverageLonLatPlacesNearbyRequestBuilder();
        cordova.getThreadPool().execute(new Runnable() {
            @Override
            public void run() {
                try {
                    if (params.has("lat") && (params.getString("lat") != null) && (!params.getString("lat").isEmpty()) ) {
                        // Param: lat, Type: BigDecimal
                        placesNearbyRequestBuilder.withLat(longToBigDecimal(params.getLong("lat")));
                    }
                    if (params.has("lon") && (params.getString("lon") != null) && (!params.getString("lon").isEmpty()) ) {
                        // Param: lon, Type: BigDecimal
                        placesNearbyRequestBuilder.withLon(longToBigDecimal(params.getLong("lon")));
                    }
                    if (params.has("type") && (params.getString("type") != null) && (!params.getString("type").isEmpty()) ) {
                        // Param: type, Type: List
                        placesNearbyRequestBuilder.withType(jsonArrayToStringList(params.getJSONArray("type")));
                    }
                    if (params.has("filter") && (params.getString("filter") != null) && (!params.getString("filter").isEmpty()) ) {
                        // Param: filter, Type: String
                        placesNearbyRequestBuilder.withFilter(stringStraightPass(params.getString("filter")));
                    }
                    if (params.has("distance") && (params.getString("distance") != null) && (!params.getString("distance").isEmpty()) ) {
                        // Param: distance, Type: Integer
                        placesNearbyRequestBuilder.withDistance(integerStraightPass(params.getInt("distance")));
                    }
                    if (params.has("count") && (params.getString("count") != null) && (!params.getString("count").isEmpty()) ) {
                        // Param: count, Type: Integer
                        placesNearbyRequestBuilder.withCount(integerStraightPass(params.getInt("count")));
                    }
                    if (params.has("depth") && (params.getString("depth") != null) && (!params.getString("depth").isEmpty()) ) {
                        // Param: depth, Type: Integer
                        placesNearbyRequestBuilder.withDepth(integerStraightPass(params.getInt("depth")));
                    }
                    if (params.has("startPage") && (params.getString("startPage") != null) && (!params.getString("startPage").isEmpty()) ) {
                        // Param: startPage, Type: Integer
                        placesNearbyRequestBuilder.withStartPage(integerStraightPass(params.getInt("startPage")));
                    }
                    if (params.has("bssStands") && (params.getString("bssStands") != null) && (!params.getString("bssStands").isEmpty()) ) {
                        // Param: bssStands, Type: Boolean
                        placesNearbyRequestBuilder.withBssStands(booleanStraightPass(params.getBoolean("bssStands")));
                    }
                    if (params.has("addPoiInfos") && (params.getString("addPoiInfos") != null) && (!params.getString("addPoiInfos").isEmpty()) ) {
                        // Param: addPoiInfos, Type: List
                        placesNearbyRequestBuilder.withAddPoiInfos(jsonArrayToStringList(params.getJSONArray("addPoiInfos")));
                    }
                    if (params.has("disableGeojson") && (params.getString("disableGeojson") != null) && (!params.getString("disableGeojson").isEmpty()) ) {
                        // Param: disableGeojson, Type: Boolean
                        placesNearbyRequestBuilder.withDisableGeojson(booleanStraightPass(params.getBoolean("disableGeojson")));
                    }
                    if (params.has("disableDisruption") && (params.getString("disableDisruption") != null) && (!params.getString("disableDisruption").isEmpty()) ) {
                        // Param: disableDisruption, Type: Boolean
                        placesNearbyRequestBuilder.withDisableDisruption(booleanStraightPass(params.getBoolean("disableDisruption")));
                    }
                    
                    placesNearbyRequestBuilder.rawGet(new ApiCallback<String>() {
                        @Override
                        public void onFailure(ApiException e, int statusCode, Map<String, List<String>> responseHeaders) {
                            callbackContext.error("Problem during request call | " + e.getMessage());
                        }

                        @Override
                        public void onSuccess(String result, int statusCode, Map<String, List<String>> responseHeaders) {
                            JSONObject jsonObject = null;
                            try {
                                jsonObject = new JSONObject(result);
                                callbackContext.success(jsonObject);
                            } catch (Exception e) {
                                String errorMessage = "Problem during response parsing | " + String.valueOf(e.hashCode()) + ": " + e.getMessage();
                                callbackContext.error(errorMessage);
                            }
                        }

                        @Override
                        public void onUploadProgress(long bytesWritten, long contentLength, boolean done) {
                        }

                        @Override
                        public void onDownloadProgress(long bytesRead, long contentLength, boolean done) {
                        }
                    });
                } catch (Exception e) {
                    String errorMessage = "Problem during request building | " + String.valueOf(e.hashCode()) + ": " + e.getMessage();
                    callbackContext.error(errorMessage);
                }
            }
        });
    }
    final private void coverageLonLatUriPlacesNearby(final JSONObject params, final CallbackContext callbackContext) {
        if (this.navitiaSdk == null) {
            callbackContext.error("NavitiaSDK is not instanciated");
            return;
        }

        final PlacesNearbyApi.CoverageLonLatUriPlacesNearbyRequestBuilder placesNearbyRequestBuilder = this.navitiaSdk.placesNearbyApi.newCoverageLonLatUriPlacesNearbyRequestBuilder();
        cordova.getThreadPool().execute(new Runnable() {
            @Override
            public void run() {
                try {
                    if (params.has("lat") && (params.getString("lat") != null) && (!params.getString("lat").isEmpty()) ) {
                        // Param: lat, Type: BigDecimal
                        placesNearbyRequestBuilder.withLat(longToBigDecimal(params.getLong("lat")));
                    }
                    if (params.has("lon") && (params.getString("lon") != null) && (!params.getString("lon").isEmpty()) ) {
                        // Param: lon, Type: BigDecimal
                        placesNearbyRequestBuilder.withLon(longToBigDecimal(params.getLong("lon")));
                    }
                    if (params.has("uri") && (params.getString("uri") != null) && (!params.getString("uri").isEmpty()) ) {
                        // Param: uri, Type: String
                        placesNearbyRequestBuilder.withUri(stringStraightPass(params.getString("uri")));
                    }
                    if (params.has("type") && (params.getString("type") != null) && (!params.getString("type").isEmpty()) ) {
                        // Param: type, Type: List
                        placesNearbyRequestBuilder.withType(jsonArrayToStringList(params.getJSONArray("type")));
                    }
                    if (params.has("filter") && (params.getString("filter") != null) && (!params.getString("filter").isEmpty()) ) {
                        // Param: filter, Type: String
                        placesNearbyRequestBuilder.withFilter(stringStraightPass(params.getString("filter")));
                    }
                    if (params.has("distance") && (params.getString("distance") != null) && (!params.getString("distance").isEmpty()) ) {
                        // Param: distance, Type: Integer
                        placesNearbyRequestBuilder.withDistance(integerStraightPass(params.getInt("distance")));
                    }
                    if (params.has("count") && (params.getString("count") != null) && (!params.getString("count").isEmpty()) ) {
                        // Param: count, Type: Integer
                        placesNearbyRequestBuilder.withCount(integerStraightPass(params.getInt("count")));
                    }
                    if (params.has("depth") && (params.getString("depth") != null) && (!params.getString("depth").isEmpty()) ) {
                        // Param: depth, Type: Integer
                        placesNearbyRequestBuilder.withDepth(integerStraightPass(params.getInt("depth")));
                    }
                    if (params.has("startPage") && (params.getString("startPage") != null) && (!params.getString("startPage").isEmpty()) ) {
                        // Param: startPage, Type: Integer
                        placesNearbyRequestBuilder.withStartPage(integerStraightPass(params.getInt("startPage")));
                    }
                    if (params.has("bssStands") && (params.getString("bssStands") != null) && (!params.getString("bssStands").isEmpty()) ) {
                        // Param: bssStands, Type: Boolean
                        placesNearbyRequestBuilder.withBssStands(booleanStraightPass(params.getBoolean("bssStands")));
                    }
                    if (params.has("addPoiInfos") && (params.getString("addPoiInfos") != null) && (!params.getString("addPoiInfos").isEmpty()) ) {
                        // Param: addPoiInfos, Type: List
                        placesNearbyRequestBuilder.withAddPoiInfos(jsonArrayToStringList(params.getJSONArray("addPoiInfos")));
                    }
                    if (params.has("disableGeojson") && (params.getString("disableGeojson") != null) && (!params.getString("disableGeojson").isEmpty()) ) {
                        // Param: disableGeojson, Type: Boolean
                        placesNearbyRequestBuilder.withDisableGeojson(booleanStraightPass(params.getBoolean("disableGeojson")));
                    }
                    if (params.has("disableDisruption") && (params.getString("disableDisruption") != null) && (!params.getString("disableDisruption").isEmpty()) ) {
                        // Param: disableDisruption, Type: Boolean
                        placesNearbyRequestBuilder.withDisableDisruption(booleanStraightPass(params.getBoolean("disableDisruption")));
                    }
                    
                    placesNearbyRequestBuilder.rawGet(new ApiCallback<String>() {
                        @Override
                        public void onFailure(ApiException e, int statusCode, Map<String, List<String>> responseHeaders) {
                            callbackContext.error("Problem during request call | " + e.getMessage());
                        }

                        @Override
                        public void onSuccess(String result, int statusCode, Map<String, List<String>> responseHeaders) {
                            JSONObject jsonObject = null;
                            try {
                                jsonObject = new JSONObject(result);
                                callbackContext.success(jsonObject);
                            } catch (Exception e) {
                                String errorMessage = "Problem during response parsing | " + String.valueOf(e.hashCode()) + ": " + e.getMessage();
                                callbackContext.error(errorMessage);
                            }
                        }

                        @Override
                        public void onUploadProgress(long bytesWritten, long contentLength, boolean done) {
                        }

                        @Override
                        public void onDownloadProgress(long bytesRead, long contentLength, boolean done) {
                        }
                    });
                } catch (Exception e) {
                    String errorMessage = "Problem during request building | " + String.valueOf(e.hashCode()) + ": " + e.getMessage();
                    callbackContext.error(errorMessage);
                }
            }
        });
    }
    final private void coverageRegionPlacesNearby(final JSONObject params, final CallbackContext callbackContext) {
        if (this.navitiaSdk == null) {
            callbackContext.error("NavitiaSDK is not instanciated");
            return;
        }

        final PlacesNearbyApi.CoverageRegionPlacesNearbyRequestBuilder placesNearbyRequestBuilder = this.navitiaSdk.placesNearbyApi.newCoverageRegionPlacesNearbyRequestBuilder();
        cordova.getThreadPool().execute(new Runnable() {
            @Override
            public void run() {
                try {
                    if (params.has("region") && (params.getString("region") != null) && (!params.getString("region").isEmpty()) ) {
                        // Param: region, Type: String
                        placesNearbyRequestBuilder.withRegion(stringStraightPass(params.getString("region")));
                    }
                    if (params.has("type") && (params.getString("type") != null) && (!params.getString("type").isEmpty()) ) {
                        // Param: type, Type: List
                        placesNearbyRequestBuilder.withType(jsonArrayToStringList(params.getJSONArray("type")));
                    }
                    if (params.has("filter") && (params.getString("filter") != null) && (!params.getString("filter").isEmpty()) ) {
                        // Param: filter, Type: String
                        placesNearbyRequestBuilder.withFilter(stringStraightPass(params.getString("filter")));
                    }
                    if (params.has("distance") && (params.getString("distance") != null) && (!params.getString("distance").isEmpty()) ) {
                        // Param: distance, Type: Integer
                        placesNearbyRequestBuilder.withDistance(integerStraightPass(params.getInt("distance")));
                    }
                    if (params.has("count") && (params.getString("count") != null) && (!params.getString("count").isEmpty()) ) {
                        // Param: count, Type: Integer
                        placesNearbyRequestBuilder.withCount(integerStraightPass(params.getInt("count")));
                    }
                    if (params.has("depth") && (params.getString("depth") != null) && (!params.getString("depth").isEmpty()) ) {
                        // Param: depth, Type: Integer
                        placesNearbyRequestBuilder.withDepth(integerStraightPass(params.getInt("depth")));
                    }
                    if (params.has("startPage") && (params.getString("startPage") != null) && (!params.getString("startPage").isEmpty()) ) {
                        // Param: startPage, Type: Integer
                        placesNearbyRequestBuilder.withStartPage(integerStraightPass(params.getInt("startPage")));
                    }
                    if (params.has("bssStands") && (params.getString("bssStands") != null) && (!params.getString("bssStands").isEmpty()) ) {
                        // Param: bssStands, Type: Boolean
                        placesNearbyRequestBuilder.withBssStands(booleanStraightPass(params.getBoolean("bssStands")));
                    }
                    if (params.has("addPoiInfos") && (params.getString("addPoiInfos") != null) && (!params.getString("addPoiInfos").isEmpty()) ) {
                        // Param: addPoiInfos, Type: List
                        placesNearbyRequestBuilder.withAddPoiInfos(jsonArrayToStringList(params.getJSONArray("addPoiInfos")));
                    }
                    if (params.has("disableGeojson") && (params.getString("disableGeojson") != null) && (!params.getString("disableGeojson").isEmpty()) ) {
                        // Param: disableGeojson, Type: Boolean
                        placesNearbyRequestBuilder.withDisableGeojson(booleanStraightPass(params.getBoolean("disableGeojson")));
                    }
                    if (params.has("disableDisruption") && (params.getString("disableDisruption") != null) && (!params.getString("disableDisruption").isEmpty()) ) {
                        // Param: disableDisruption, Type: Boolean
                        placesNearbyRequestBuilder.withDisableDisruption(booleanStraightPass(params.getBoolean("disableDisruption")));
                    }
                    
                    placesNearbyRequestBuilder.rawGet(new ApiCallback<String>() {
                        @Override
                        public void onFailure(ApiException e, int statusCode, Map<String, List<String>> responseHeaders) {
                            callbackContext.error("Problem during request call | " + e.getMessage());
                        }

                        @Override
                        public void onSuccess(String result, int statusCode, Map<String, List<String>> responseHeaders) {
                            JSONObject jsonObject = null;
                            try {
                                jsonObject = new JSONObject(result);
                                callbackContext.success(jsonObject);
                            } catch (Exception e) {
                                String errorMessage = "Problem during response parsing | " + String.valueOf(e.hashCode()) + ": " + e.getMessage();
                                callbackContext.error(errorMessage);
                            }
                        }

                        @Override
                        public void onUploadProgress(long bytesWritten, long contentLength, boolean done) {
                        }

                        @Override
                        public void onDownloadProgress(long bytesRead, long contentLength, boolean done) {
                        }
                    });
                } catch (Exception e) {
                    String errorMessage = "Problem during request building | " + String.valueOf(e.hashCode()) + ": " + e.getMessage();
                    callbackContext.error(errorMessage);
                }
            }
        });
    }
    final private void coverageRegionUriPlacesNearby(final JSONObject params, final CallbackContext callbackContext) {
        if (this.navitiaSdk == null) {
            callbackContext.error("NavitiaSDK is not instanciated");
            return;
        }

        final PlacesNearbyApi.CoverageRegionUriPlacesNearbyRequestBuilder placesNearbyRequestBuilder = this.navitiaSdk.placesNearbyApi.newCoverageRegionUriPlacesNearbyRequestBuilder();
        cordova.getThreadPool().execute(new Runnable() {
            @Override
            public void run() {
                try {
                    if (params.has("region") && (params.getString("region") != null) && (!params.getString("region").isEmpty()) ) {
                        // Param: region, Type: String
                        placesNearbyRequestBuilder.withRegion(stringStraightPass(params.getString("region")));
                    }
                    if (params.has("uri") && (params.getString("uri") != null) && (!params.getString("uri").isEmpty()) ) {
                        // Param: uri, Type: String
                        placesNearbyRequestBuilder.withUri(stringStraightPass(params.getString("uri")));
                    }
                    if (params.has("type") && (params.getString("type") != null) && (!params.getString("type").isEmpty()) ) {
                        // Param: type, Type: List
                        placesNearbyRequestBuilder.withType(jsonArrayToStringList(params.getJSONArray("type")));
                    }
                    if (params.has("filter") && (params.getString("filter") != null) && (!params.getString("filter").isEmpty()) ) {
                        // Param: filter, Type: String
                        placesNearbyRequestBuilder.withFilter(stringStraightPass(params.getString("filter")));
                    }
                    if (params.has("distance") && (params.getString("distance") != null) && (!params.getString("distance").isEmpty()) ) {
                        // Param: distance, Type: Integer
                        placesNearbyRequestBuilder.withDistance(integerStraightPass(params.getInt("distance")));
                    }
                    if (params.has("count") && (params.getString("count") != null) && (!params.getString("count").isEmpty()) ) {
                        // Param: count, Type: Integer
                        placesNearbyRequestBuilder.withCount(integerStraightPass(params.getInt("count")));
                    }
                    if (params.has("depth") && (params.getString("depth") != null) && (!params.getString("depth").isEmpty()) ) {
                        // Param: depth, Type: Integer
                        placesNearbyRequestBuilder.withDepth(integerStraightPass(params.getInt("depth")));
                    }
                    if (params.has("startPage") && (params.getString("startPage") != null) && (!params.getString("startPage").isEmpty()) ) {
                        // Param: startPage, Type: Integer
                        placesNearbyRequestBuilder.withStartPage(integerStraightPass(params.getInt("startPage")));
                    }
                    if (params.has("bssStands") && (params.getString("bssStands") != null) && (!params.getString("bssStands").isEmpty()) ) {
                        // Param: bssStands, Type: Boolean
                        placesNearbyRequestBuilder.withBssStands(booleanStraightPass(params.getBoolean("bssStands")));
                    }
                    if (params.has("addPoiInfos") && (params.getString("addPoiInfos") != null) && (!params.getString("addPoiInfos").isEmpty()) ) {
                        // Param: addPoiInfos, Type: List
                        placesNearbyRequestBuilder.withAddPoiInfos(jsonArrayToStringList(params.getJSONArray("addPoiInfos")));
                    }
                    if (params.has("disableGeojson") && (params.getString("disableGeojson") != null) && (!params.getString("disableGeojson").isEmpty()) ) {
                        // Param: disableGeojson, Type: Boolean
                        placesNearbyRequestBuilder.withDisableGeojson(booleanStraightPass(params.getBoolean("disableGeojson")));
                    }
                    if (params.has("disableDisruption") && (params.getString("disableDisruption") != null) && (!params.getString("disableDisruption").isEmpty()) ) {
                        // Param: disableDisruption, Type: Boolean
                        placesNearbyRequestBuilder.withDisableDisruption(booleanStraightPass(params.getBoolean("disableDisruption")));
                    }
                    
                    placesNearbyRequestBuilder.rawGet(new ApiCallback<String>() {
                        @Override
                        public void onFailure(ApiException e, int statusCode, Map<String, List<String>> responseHeaders) {
                            callbackContext.error("Problem during request call | " + e.getMessage());
                        }

                        @Override
                        public void onSuccess(String result, int statusCode, Map<String, List<String>> responseHeaders) {
                            JSONObject jsonObject = null;
                            try {
                                jsonObject = new JSONObject(result);
                                callbackContext.success(jsonObject);
                            } catch (Exception e) {
                                String errorMessage = "Problem during response parsing | " + String.valueOf(e.hashCode()) + ": " + e.getMessage();
                                callbackContext.error(errorMessage);
                            }
                        }

                        @Override
                        public void onUploadProgress(long bytesWritten, long contentLength, boolean done) {
                        }

                        @Override
                        public void onDownloadProgress(long bytesRead, long contentLength, boolean done) {
                        }
                    });
                } catch (Exception e) {
                    String errorMessage = "Problem during request building | " + String.valueOf(e.hashCode()) + ": " + e.getMessage();
                    callbackContext.error(errorMessage);
                }
            }
        });
    }
    final private void coverageLonLatPoiTypes(final JSONObject params, final CallbackContext callbackContext) {
        if (this.navitiaSdk == null) {
            callbackContext.error("NavitiaSDK is not instanciated");
            return;
        }

        final PoiTypesApi.CoverageLonLatPoiTypesRequestBuilder poiTypesRequestBuilder = this.navitiaSdk.poiTypesApi.newCoverageLonLatPoiTypesRequestBuilder();
        cordova.getThreadPool().execute(new Runnable() {
            @Override
            public void run() {
                try {
                    if (params.has("lat") && (params.getString("lat") != null) && (!params.getString("lat").isEmpty()) ) {
                        // Param: lat, Type: BigDecimal
                        poiTypesRequestBuilder.withLat(longToBigDecimal(params.getLong("lat")));
                    }
                    if (params.has("lon") && (params.getString("lon") != null) && (!params.getString("lon").isEmpty()) ) {
                        // Param: lon, Type: BigDecimal
                        poiTypesRequestBuilder.withLon(longToBigDecimal(params.getLong("lon")));
                    }
                    if (params.has("startPage") && (params.getString("startPage") != null) && (!params.getString("startPage").isEmpty()) ) {
                        // Param: startPage, Type: Integer
                        poiTypesRequestBuilder.withStartPage(integerStraightPass(params.getInt("startPage")));
                    }
                    if (params.has("count") && (params.getString("count") != null) && (!params.getString("count").isEmpty()) ) {
                        // Param: count, Type: Integer
                        poiTypesRequestBuilder.withCount(integerStraightPass(params.getInt("count")));
                    }
                    if (params.has("depth") && (params.getString("depth") != null) && (!params.getString("depth").isEmpty()) ) {
                        // Param: depth, Type: Integer
                        poiTypesRequestBuilder.withDepth(integerStraightPass(params.getInt("depth")));
                    }
                    if (params.has("forbiddenId") && (params.getString("forbiddenId") != null) && (!params.getString("forbiddenId").isEmpty()) ) {
                        // Param: forbiddenId, Type: List
                        poiTypesRequestBuilder.withForbiddenId(jsonArrayToStringList(params.getJSONArray("forbiddenId")));
                    }
                    if (params.has("forbiddenUris") && (params.getString("forbiddenUris") != null) && (!params.getString("forbiddenUris").isEmpty()) ) {
                        // Param: forbiddenUris, Type: List
                        poiTypesRequestBuilder.withForbiddenUris(jsonArrayToStringList(params.getJSONArray("forbiddenUris")));
                    }
                    if (params.has("externalCode") && (params.getString("externalCode") != null) && (!params.getString("externalCode").isEmpty()) ) {
                        // Param: externalCode, Type: String
                        poiTypesRequestBuilder.withExternalCode(stringStraightPass(params.getString("externalCode")));
                    }
                    if (params.has("headsign") && (params.getString("headsign") != null) && (!params.getString("headsign").isEmpty()) ) {
                        // Param: headsign, Type: String
                        poiTypesRequestBuilder.withHeadsign(stringStraightPass(params.getString("headsign")));
                    }
                    if (params.has("showCodes") && (params.getString("showCodes") != null) && (!params.getString("showCodes").isEmpty()) ) {
                        // Param: showCodes, Type: Boolean
                        poiTypesRequestBuilder.withShowCodes(booleanStraightPass(params.getBoolean("showCodes")));
                    }
                    if (params.has("odtLevel") && (params.getString("odtLevel") != null) && (!params.getString("odtLevel").isEmpty()) ) {
                        // Param: odtLevel, Type: String
                        poiTypesRequestBuilder.withOdtLevel(stringStraightPass(params.getString("odtLevel")));
                    }
                    if (params.has("dataFreshness") && (params.getString("dataFreshness") != null) && (!params.getString("dataFreshness").isEmpty()) ) {
                        // Param: dataFreshness, Type: String
                        poiTypesRequestBuilder.withDataFreshness(stringStraightPass(params.getString("dataFreshness")));
                    }
                    if (params.has("distance") && (params.getString("distance") != null) && (!params.getString("distance").isEmpty()) ) {
                        // Param: distance, Type: Integer
                        poiTypesRequestBuilder.withDistance(integerStraightPass(params.getInt("distance")));
                    }
                    if (params.has("since") && (params.getString("since") != null) && (!params.getString("since").isEmpty()) ) {
                        // Param: since, Type: Date
                        poiTypesRequestBuilder.withSince(stringToDateTime(params.getString("since")));
                    }
                    if (params.has("until") && (params.getString("until") != null) && (!params.getString("until").isEmpty()) ) {
                        // Param: until, Type: Date
                        poiTypesRequestBuilder.withUntil(stringToDateTime(params.getString("until")));
                    }
                    if (params.has("disableGeojson") && (params.getString("disableGeojson") != null) && (!params.getString("disableGeojson").isEmpty()) ) {
                        // Param: disableGeojson, Type: Boolean
                        poiTypesRequestBuilder.withDisableGeojson(booleanStraightPass(params.getBoolean("disableGeojson")));
                    }
                    if (params.has("disableDisruption") && (params.getString("disableDisruption") != null) && (!params.getString("disableDisruption").isEmpty()) ) {
                        // Param: disableDisruption, Type: Boolean
                        poiTypesRequestBuilder.withDisableDisruption(booleanStraightPass(params.getBoolean("disableDisruption")));
                    }
                    if (params.has("filter") && (params.getString("filter") != null) && (!params.getString("filter").isEmpty()) ) {
                        // Param: filter, Type: String
                        poiTypesRequestBuilder.withFilter(stringStraightPass(params.getString("filter")));
                    }
                    if (params.has("tags") && (params.getString("tags") != null) && (!params.getString("tags").isEmpty()) ) {
                        // Param: tags, Type: List
                        poiTypesRequestBuilder.withTags(jsonArrayToStringList(params.getJSONArray("tags")));
                    }
                    
                    poiTypesRequestBuilder.rawGet(new ApiCallback<String>() {
                        @Override
                        public void onFailure(ApiException e, int statusCode, Map<String, List<String>> responseHeaders) {
                            callbackContext.error("Problem during request call | " + e.getMessage());
                        }

                        @Override
                        public void onSuccess(String result, int statusCode, Map<String, List<String>> responseHeaders) {
                            JSONObject jsonObject = null;
                            try {
                                jsonObject = new JSONObject(result);
                                callbackContext.success(jsonObject);
                            } catch (Exception e) {
                                String errorMessage = "Problem during response parsing | " + String.valueOf(e.hashCode()) + ": " + e.getMessage();
                                callbackContext.error(errorMessage);
                            }
                        }

                        @Override
                        public void onUploadProgress(long bytesWritten, long contentLength, boolean done) {
                        }

                        @Override
                        public void onDownloadProgress(long bytesRead, long contentLength, boolean done) {
                        }
                    });
                } catch (Exception e) {
                    String errorMessage = "Problem during request building | " + String.valueOf(e.hashCode()) + ": " + e.getMessage();
                    callbackContext.error(errorMessage);
                }
            }
        });
    }
    final private void coverageLonLatPoiTypesId(final JSONObject params, final CallbackContext callbackContext) {
        if (this.navitiaSdk == null) {
            callbackContext.error("NavitiaSDK is not instanciated");
            return;
        }

        final PoiTypesApi.CoverageLonLatPoiTypesIdRequestBuilder poiTypesRequestBuilder = this.navitiaSdk.poiTypesApi.newCoverageLonLatPoiTypesIdRequestBuilder();
        cordova.getThreadPool().execute(new Runnable() {
            @Override
            public void run() {
                try {
                    if (params.has("lat") && (params.getString("lat") != null) && (!params.getString("lat").isEmpty()) ) {
                        // Param: lat, Type: BigDecimal
                        poiTypesRequestBuilder.withLat(longToBigDecimal(params.getLong("lat")));
                    }
                    if (params.has("lon") && (params.getString("lon") != null) && (!params.getString("lon").isEmpty()) ) {
                        // Param: lon, Type: BigDecimal
                        poiTypesRequestBuilder.withLon(longToBigDecimal(params.getLong("lon")));
                    }
                    if (params.has("id") && (params.getString("id") != null) && (!params.getString("id").isEmpty()) ) {
                        // Param: id, Type: String
                        poiTypesRequestBuilder.withId(stringStraightPass(params.getString("id")));
                    }
                    if (params.has("startPage") && (params.getString("startPage") != null) && (!params.getString("startPage").isEmpty()) ) {
                        // Param: startPage, Type: Integer
                        poiTypesRequestBuilder.withStartPage(integerStraightPass(params.getInt("startPage")));
                    }
                    if (params.has("count") && (params.getString("count") != null) && (!params.getString("count").isEmpty()) ) {
                        // Param: count, Type: Integer
                        poiTypesRequestBuilder.withCount(integerStraightPass(params.getInt("count")));
                    }
                    if (params.has("depth") && (params.getString("depth") != null) && (!params.getString("depth").isEmpty()) ) {
                        // Param: depth, Type: Integer
                        poiTypesRequestBuilder.withDepth(integerStraightPass(params.getInt("depth")));
                    }
                    if (params.has("forbiddenId") && (params.getString("forbiddenId") != null) && (!params.getString("forbiddenId").isEmpty()) ) {
                        // Param: forbiddenId, Type: List
                        poiTypesRequestBuilder.withForbiddenId(jsonArrayToStringList(params.getJSONArray("forbiddenId")));
                    }
                    if (params.has("forbiddenUris") && (params.getString("forbiddenUris") != null) && (!params.getString("forbiddenUris").isEmpty()) ) {
                        // Param: forbiddenUris, Type: List
                        poiTypesRequestBuilder.withForbiddenUris(jsonArrayToStringList(params.getJSONArray("forbiddenUris")));
                    }
                    if (params.has("externalCode") && (params.getString("externalCode") != null) && (!params.getString("externalCode").isEmpty()) ) {
                        // Param: externalCode, Type: String
                        poiTypesRequestBuilder.withExternalCode(stringStraightPass(params.getString("externalCode")));
                    }
                    if (params.has("headsign") && (params.getString("headsign") != null) && (!params.getString("headsign").isEmpty()) ) {
                        // Param: headsign, Type: String
                        poiTypesRequestBuilder.withHeadsign(stringStraightPass(params.getString("headsign")));
                    }
                    if (params.has("showCodes") && (params.getString("showCodes") != null) && (!params.getString("showCodes").isEmpty()) ) {
                        // Param: showCodes, Type: Boolean
                        poiTypesRequestBuilder.withShowCodes(booleanStraightPass(params.getBoolean("showCodes")));
                    }
                    if (params.has("odtLevel") && (params.getString("odtLevel") != null) && (!params.getString("odtLevel").isEmpty()) ) {
                        // Param: odtLevel, Type: String
                        poiTypesRequestBuilder.withOdtLevel(stringStraightPass(params.getString("odtLevel")));
                    }
                    if (params.has("dataFreshness") && (params.getString("dataFreshness") != null) && (!params.getString("dataFreshness").isEmpty()) ) {
                        // Param: dataFreshness, Type: String
                        poiTypesRequestBuilder.withDataFreshness(stringStraightPass(params.getString("dataFreshness")));
                    }
                    if (params.has("distance") && (params.getString("distance") != null) && (!params.getString("distance").isEmpty()) ) {
                        // Param: distance, Type: Integer
                        poiTypesRequestBuilder.withDistance(integerStraightPass(params.getInt("distance")));
                    }
                    if (params.has("since") && (params.getString("since") != null) && (!params.getString("since").isEmpty()) ) {
                        // Param: since, Type: Date
                        poiTypesRequestBuilder.withSince(stringToDateTime(params.getString("since")));
                    }
                    if (params.has("until") && (params.getString("until") != null) && (!params.getString("until").isEmpty()) ) {
                        // Param: until, Type: Date
                        poiTypesRequestBuilder.withUntil(stringToDateTime(params.getString("until")));
                    }
                    if (params.has("disableGeojson") && (params.getString("disableGeojson") != null) && (!params.getString("disableGeojson").isEmpty()) ) {
                        // Param: disableGeojson, Type: Boolean
                        poiTypesRequestBuilder.withDisableGeojson(booleanStraightPass(params.getBoolean("disableGeojson")));
                    }
                    if (params.has("disableDisruption") && (params.getString("disableDisruption") != null) && (!params.getString("disableDisruption").isEmpty()) ) {
                        // Param: disableDisruption, Type: Boolean
                        poiTypesRequestBuilder.withDisableDisruption(booleanStraightPass(params.getBoolean("disableDisruption")));
                    }
                    if (params.has("tags") && (params.getString("tags") != null) && (!params.getString("tags").isEmpty()) ) {
                        // Param: tags, Type: List
                        poiTypesRequestBuilder.withTags(jsonArrayToStringList(params.getJSONArray("tags")));
                    }
                    
                    poiTypesRequestBuilder.rawGet(new ApiCallback<String>() {
                        @Override
                        public void onFailure(ApiException e, int statusCode, Map<String, List<String>> responseHeaders) {
                            callbackContext.error("Problem during request call | " + e.getMessage());
                        }

                        @Override
                        public void onSuccess(String result, int statusCode, Map<String, List<String>> responseHeaders) {
                            JSONObject jsonObject = null;
                            try {
                                jsonObject = new JSONObject(result);
                                callbackContext.success(jsonObject);
                            } catch (Exception e) {
                                String errorMessage = "Problem during response parsing | " + String.valueOf(e.hashCode()) + ": " + e.getMessage();
                                callbackContext.error(errorMessage);
                            }
                        }

                        @Override
                        public void onUploadProgress(long bytesWritten, long contentLength, boolean done) {
                        }

                        @Override
                        public void onDownloadProgress(long bytesRead, long contentLength, boolean done) {
                        }
                    });
                } catch (Exception e) {
                    String errorMessage = "Problem during request building | " + String.valueOf(e.hashCode()) + ": " + e.getMessage();
                    callbackContext.error(errorMessage);
                }
            }
        });
    }
    final private void coverageLonLatUriPoiTypes(final JSONObject params, final CallbackContext callbackContext) {
        if (this.navitiaSdk == null) {
            callbackContext.error("NavitiaSDK is not instanciated");
            return;
        }

        final PoiTypesApi.CoverageLonLatUriPoiTypesRequestBuilder poiTypesRequestBuilder = this.navitiaSdk.poiTypesApi.newCoverageLonLatUriPoiTypesRequestBuilder();
        cordova.getThreadPool().execute(new Runnable() {
            @Override
            public void run() {
                try {
                    if (params.has("lat") && (params.getString("lat") != null) && (!params.getString("lat").isEmpty()) ) {
                        // Param: lat, Type: BigDecimal
                        poiTypesRequestBuilder.withLat(longToBigDecimal(params.getLong("lat")));
                    }
                    if (params.has("lon") && (params.getString("lon") != null) && (!params.getString("lon").isEmpty()) ) {
                        // Param: lon, Type: BigDecimal
                        poiTypesRequestBuilder.withLon(longToBigDecimal(params.getLong("lon")));
                    }
                    if (params.has("uri") && (params.getString("uri") != null) && (!params.getString("uri").isEmpty()) ) {
                        // Param: uri, Type: String
                        poiTypesRequestBuilder.withUri(stringStraightPass(params.getString("uri")));
                    }
                    if (params.has("startPage") && (params.getString("startPage") != null) && (!params.getString("startPage").isEmpty()) ) {
                        // Param: startPage, Type: Integer
                        poiTypesRequestBuilder.withStartPage(integerStraightPass(params.getInt("startPage")));
                    }
                    if (params.has("count") && (params.getString("count") != null) && (!params.getString("count").isEmpty()) ) {
                        // Param: count, Type: Integer
                        poiTypesRequestBuilder.withCount(integerStraightPass(params.getInt("count")));
                    }
                    if (params.has("depth") && (params.getString("depth") != null) && (!params.getString("depth").isEmpty()) ) {
                        // Param: depth, Type: Integer
                        poiTypesRequestBuilder.withDepth(integerStraightPass(params.getInt("depth")));
                    }
                    if (params.has("forbiddenId") && (params.getString("forbiddenId") != null) && (!params.getString("forbiddenId").isEmpty()) ) {
                        // Param: forbiddenId, Type: List
                        poiTypesRequestBuilder.withForbiddenId(jsonArrayToStringList(params.getJSONArray("forbiddenId")));
                    }
                    if (params.has("forbiddenUris") && (params.getString("forbiddenUris") != null) && (!params.getString("forbiddenUris").isEmpty()) ) {
                        // Param: forbiddenUris, Type: List
                        poiTypesRequestBuilder.withForbiddenUris(jsonArrayToStringList(params.getJSONArray("forbiddenUris")));
                    }
                    if (params.has("externalCode") && (params.getString("externalCode") != null) && (!params.getString("externalCode").isEmpty()) ) {
                        // Param: externalCode, Type: String
                        poiTypesRequestBuilder.withExternalCode(stringStraightPass(params.getString("externalCode")));
                    }
                    if (params.has("headsign") && (params.getString("headsign") != null) && (!params.getString("headsign").isEmpty()) ) {
                        // Param: headsign, Type: String
                        poiTypesRequestBuilder.withHeadsign(stringStraightPass(params.getString("headsign")));
                    }
                    if (params.has("showCodes") && (params.getString("showCodes") != null) && (!params.getString("showCodes").isEmpty()) ) {
                        // Param: showCodes, Type: Boolean
                        poiTypesRequestBuilder.withShowCodes(booleanStraightPass(params.getBoolean("showCodes")));
                    }
                    if (params.has("odtLevel") && (params.getString("odtLevel") != null) && (!params.getString("odtLevel").isEmpty()) ) {
                        // Param: odtLevel, Type: String
                        poiTypesRequestBuilder.withOdtLevel(stringStraightPass(params.getString("odtLevel")));
                    }
                    if (params.has("dataFreshness") && (params.getString("dataFreshness") != null) && (!params.getString("dataFreshness").isEmpty()) ) {
                        // Param: dataFreshness, Type: String
                        poiTypesRequestBuilder.withDataFreshness(stringStraightPass(params.getString("dataFreshness")));
                    }
                    if (params.has("distance") && (params.getString("distance") != null) && (!params.getString("distance").isEmpty()) ) {
                        // Param: distance, Type: Integer
                        poiTypesRequestBuilder.withDistance(integerStraightPass(params.getInt("distance")));
                    }
                    if (params.has("since") && (params.getString("since") != null) && (!params.getString("since").isEmpty()) ) {
                        // Param: since, Type: Date
                        poiTypesRequestBuilder.withSince(stringToDateTime(params.getString("since")));
                    }
                    if (params.has("until") && (params.getString("until") != null) && (!params.getString("until").isEmpty()) ) {
                        // Param: until, Type: Date
                        poiTypesRequestBuilder.withUntil(stringToDateTime(params.getString("until")));
                    }
                    if (params.has("disableGeojson") && (params.getString("disableGeojson") != null) && (!params.getString("disableGeojson").isEmpty()) ) {
                        // Param: disableGeojson, Type: Boolean
                        poiTypesRequestBuilder.withDisableGeojson(booleanStraightPass(params.getBoolean("disableGeojson")));
                    }
                    if (params.has("disableDisruption") && (params.getString("disableDisruption") != null) && (!params.getString("disableDisruption").isEmpty()) ) {
                        // Param: disableDisruption, Type: Boolean
                        poiTypesRequestBuilder.withDisableDisruption(booleanStraightPass(params.getBoolean("disableDisruption")));
                    }
                    if (params.has("filter") && (params.getString("filter") != null) && (!params.getString("filter").isEmpty()) ) {
                        // Param: filter, Type: String
                        poiTypesRequestBuilder.withFilter(stringStraightPass(params.getString("filter")));
                    }
                    if (params.has("tags") && (params.getString("tags") != null) && (!params.getString("tags").isEmpty()) ) {
                        // Param: tags, Type: List
                        poiTypesRequestBuilder.withTags(jsonArrayToStringList(params.getJSONArray("tags")));
                    }
                    
                    poiTypesRequestBuilder.rawGet(new ApiCallback<String>() {
                        @Override
                        public void onFailure(ApiException e, int statusCode, Map<String, List<String>> responseHeaders) {
                            callbackContext.error("Problem during request call | " + e.getMessage());
                        }

                        @Override
                        public void onSuccess(String result, int statusCode, Map<String, List<String>> responseHeaders) {
                            JSONObject jsonObject = null;
                            try {
                                jsonObject = new JSONObject(result);
                                callbackContext.success(jsonObject);
                            } catch (Exception e) {
                                String errorMessage = "Problem during response parsing | " + String.valueOf(e.hashCode()) + ": " + e.getMessage();
                                callbackContext.error(errorMessage);
                            }
                        }

                        @Override
                        public void onUploadProgress(long bytesWritten, long contentLength, boolean done) {
                        }

                        @Override
                        public void onDownloadProgress(long bytesRead, long contentLength, boolean done) {
                        }
                    });
                } catch (Exception e) {
                    String errorMessage = "Problem during request building | " + String.valueOf(e.hashCode()) + ": " + e.getMessage();
                    callbackContext.error(errorMessage);
                }
            }
        });
    }
    final private void coverageLonLatUriPoiTypesId(final JSONObject params, final CallbackContext callbackContext) {
        if (this.navitiaSdk == null) {
            callbackContext.error("NavitiaSDK is not instanciated");
            return;
        }

        final PoiTypesApi.CoverageLonLatUriPoiTypesIdRequestBuilder poiTypesRequestBuilder = this.navitiaSdk.poiTypesApi.newCoverageLonLatUriPoiTypesIdRequestBuilder();
        cordova.getThreadPool().execute(new Runnable() {
            @Override
            public void run() {
                try {
                    if (params.has("lat") && (params.getString("lat") != null) && (!params.getString("lat").isEmpty()) ) {
                        // Param: lat, Type: BigDecimal
                        poiTypesRequestBuilder.withLat(longToBigDecimal(params.getLong("lat")));
                    }
                    if (params.has("lon") && (params.getString("lon") != null) && (!params.getString("lon").isEmpty()) ) {
                        // Param: lon, Type: BigDecimal
                        poiTypesRequestBuilder.withLon(longToBigDecimal(params.getLong("lon")));
                    }
                    if (params.has("uri") && (params.getString("uri") != null) && (!params.getString("uri").isEmpty()) ) {
                        // Param: uri, Type: String
                        poiTypesRequestBuilder.withUri(stringStraightPass(params.getString("uri")));
                    }
                    if (params.has("id") && (params.getString("id") != null) && (!params.getString("id").isEmpty()) ) {
                        // Param: id, Type: String
                        poiTypesRequestBuilder.withId(stringStraightPass(params.getString("id")));
                    }
                    if (params.has("startPage") && (params.getString("startPage") != null) && (!params.getString("startPage").isEmpty()) ) {
                        // Param: startPage, Type: Integer
                        poiTypesRequestBuilder.withStartPage(integerStraightPass(params.getInt("startPage")));
                    }
                    if (params.has("count") && (params.getString("count") != null) && (!params.getString("count").isEmpty()) ) {
                        // Param: count, Type: Integer
                        poiTypesRequestBuilder.withCount(integerStraightPass(params.getInt("count")));
                    }
                    if (params.has("depth") && (params.getString("depth") != null) && (!params.getString("depth").isEmpty()) ) {
                        // Param: depth, Type: Integer
                        poiTypesRequestBuilder.withDepth(integerStraightPass(params.getInt("depth")));
                    }
                    if (params.has("forbiddenId") && (params.getString("forbiddenId") != null) && (!params.getString("forbiddenId").isEmpty()) ) {
                        // Param: forbiddenId, Type: List
                        poiTypesRequestBuilder.withForbiddenId(jsonArrayToStringList(params.getJSONArray("forbiddenId")));
                    }
                    if (params.has("forbiddenUris") && (params.getString("forbiddenUris") != null) && (!params.getString("forbiddenUris").isEmpty()) ) {
                        // Param: forbiddenUris, Type: List
                        poiTypesRequestBuilder.withForbiddenUris(jsonArrayToStringList(params.getJSONArray("forbiddenUris")));
                    }
                    if (params.has("externalCode") && (params.getString("externalCode") != null) && (!params.getString("externalCode").isEmpty()) ) {
                        // Param: externalCode, Type: String
                        poiTypesRequestBuilder.withExternalCode(stringStraightPass(params.getString("externalCode")));
                    }
                    if (params.has("headsign") && (params.getString("headsign") != null) && (!params.getString("headsign").isEmpty()) ) {
                        // Param: headsign, Type: String
                        poiTypesRequestBuilder.withHeadsign(stringStraightPass(params.getString("headsign")));
                    }
                    if (params.has("showCodes") && (params.getString("showCodes") != null) && (!params.getString("showCodes").isEmpty()) ) {
                        // Param: showCodes, Type: Boolean
                        poiTypesRequestBuilder.withShowCodes(booleanStraightPass(params.getBoolean("showCodes")));
                    }
                    if (params.has("odtLevel") && (params.getString("odtLevel") != null) && (!params.getString("odtLevel").isEmpty()) ) {
                        // Param: odtLevel, Type: String
                        poiTypesRequestBuilder.withOdtLevel(stringStraightPass(params.getString("odtLevel")));
                    }
                    if (params.has("dataFreshness") && (params.getString("dataFreshness") != null) && (!params.getString("dataFreshness").isEmpty()) ) {
                        // Param: dataFreshness, Type: String
                        poiTypesRequestBuilder.withDataFreshness(stringStraightPass(params.getString("dataFreshness")));
                    }
                    if (params.has("distance") && (params.getString("distance") != null) && (!params.getString("distance").isEmpty()) ) {
                        // Param: distance, Type: Integer
                        poiTypesRequestBuilder.withDistance(integerStraightPass(params.getInt("distance")));
                    }
                    if (params.has("since") && (params.getString("since") != null) && (!params.getString("since").isEmpty()) ) {
                        // Param: since, Type: Date
                        poiTypesRequestBuilder.withSince(stringToDateTime(params.getString("since")));
                    }
                    if (params.has("until") && (params.getString("until") != null) && (!params.getString("until").isEmpty()) ) {
                        // Param: until, Type: Date
                        poiTypesRequestBuilder.withUntil(stringToDateTime(params.getString("until")));
                    }
                    if (params.has("disableGeojson") && (params.getString("disableGeojson") != null) && (!params.getString("disableGeojson").isEmpty()) ) {
                        // Param: disableGeojson, Type: Boolean
                        poiTypesRequestBuilder.withDisableGeojson(booleanStraightPass(params.getBoolean("disableGeojson")));
                    }
                    if (params.has("disableDisruption") && (params.getString("disableDisruption") != null) && (!params.getString("disableDisruption").isEmpty()) ) {
                        // Param: disableDisruption, Type: Boolean
                        poiTypesRequestBuilder.withDisableDisruption(booleanStraightPass(params.getBoolean("disableDisruption")));
                    }
                    if (params.has("tags") && (params.getString("tags") != null) && (!params.getString("tags").isEmpty()) ) {
                        // Param: tags, Type: List
                        poiTypesRequestBuilder.withTags(jsonArrayToStringList(params.getJSONArray("tags")));
                    }
                    
                    poiTypesRequestBuilder.rawGet(new ApiCallback<String>() {
                        @Override
                        public void onFailure(ApiException e, int statusCode, Map<String, List<String>> responseHeaders) {
                            callbackContext.error("Problem during request call | " + e.getMessage());
                        }

                        @Override
                        public void onSuccess(String result, int statusCode, Map<String, List<String>> responseHeaders) {
                            JSONObject jsonObject = null;
                            try {
                                jsonObject = new JSONObject(result);
                                callbackContext.success(jsonObject);
                            } catch (Exception e) {
                                String errorMessage = "Problem during response parsing | " + String.valueOf(e.hashCode()) + ": " + e.getMessage();
                                callbackContext.error(errorMessage);
                            }
                        }

                        @Override
                        public void onUploadProgress(long bytesWritten, long contentLength, boolean done) {
                        }

                        @Override
                        public void onDownloadProgress(long bytesRead, long contentLength, boolean done) {
                        }
                    });
                } catch (Exception e) {
                    String errorMessage = "Problem during request building | " + String.valueOf(e.hashCode()) + ": " + e.getMessage();
                    callbackContext.error(errorMessage);
                }
            }
        });
    }
    final private void coverageRegionPoiTypes(final JSONObject params, final CallbackContext callbackContext) {
        if (this.navitiaSdk == null) {
            callbackContext.error("NavitiaSDK is not instanciated");
            return;
        }

        final PoiTypesApi.CoverageRegionPoiTypesRequestBuilder poiTypesRequestBuilder = this.navitiaSdk.poiTypesApi.newCoverageRegionPoiTypesRequestBuilder();
        cordova.getThreadPool().execute(new Runnable() {
            @Override
            public void run() {
                try {
                    if (params.has("region") && (params.getString("region") != null) && (!params.getString("region").isEmpty()) ) {
                        // Param: region, Type: String
                        poiTypesRequestBuilder.withRegion(stringStraightPass(params.getString("region")));
                    }
                    if (params.has("startPage") && (params.getString("startPage") != null) && (!params.getString("startPage").isEmpty()) ) {
                        // Param: startPage, Type: Integer
                        poiTypesRequestBuilder.withStartPage(integerStraightPass(params.getInt("startPage")));
                    }
                    if (params.has("count") && (params.getString("count") != null) && (!params.getString("count").isEmpty()) ) {
                        // Param: count, Type: Integer
                        poiTypesRequestBuilder.withCount(integerStraightPass(params.getInt("count")));
                    }
                    if (params.has("depth") && (params.getString("depth") != null) && (!params.getString("depth").isEmpty()) ) {
                        // Param: depth, Type: Integer
                        poiTypesRequestBuilder.withDepth(integerStraightPass(params.getInt("depth")));
                    }
                    if (params.has("forbiddenId") && (params.getString("forbiddenId") != null) && (!params.getString("forbiddenId").isEmpty()) ) {
                        // Param: forbiddenId, Type: List
                        poiTypesRequestBuilder.withForbiddenId(jsonArrayToStringList(params.getJSONArray("forbiddenId")));
                    }
                    if (params.has("forbiddenUris") && (params.getString("forbiddenUris") != null) && (!params.getString("forbiddenUris").isEmpty()) ) {
                        // Param: forbiddenUris, Type: List
                        poiTypesRequestBuilder.withForbiddenUris(jsonArrayToStringList(params.getJSONArray("forbiddenUris")));
                    }
                    if (params.has("externalCode") && (params.getString("externalCode") != null) && (!params.getString("externalCode").isEmpty()) ) {
                        // Param: externalCode, Type: String
                        poiTypesRequestBuilder.withExternalCode(stringStraightPass(params.getString("externalCode")));
                    }
                    if (params.has("headsign") && (params.getString("headsign") != null) && (!params.getString("headsign").isEmpty()) ) {
                        // Param: headsign, Type: String
                        poiTypesRequestBuilder.withHeadsign(stringStraightPass(params.getString("headsign")));
                    }
                    if (params.has("showCodes") && (params.getString("showCodes") != null) && (!params.getString("showCodes").isEmpty()) ) {
                        // Param: showCodes, Type: Boolean
                        poiTypesRequestBuilder.withShowCodes(booleanStraightPass(params.getBoolean("showCodes")));
                    }
                    if (params.has("odtLevel") && (params.getString("odtLevel") != null) && (!params.getString("odtLevel").isEmpty()) ) {
                        // Param: odtLevel, Type: String
                        poiTypesRequestBuilder.withOdtLevel(stringStraightPass(params.getString("odtLevel")));
                    }
                    if (params.has("dataFreshness") && (params.getString("dataFreshness") != null) && (!params.getString("dataFreshness").isEmpty()) ) {
                        // Param: dataFreshness, Type: String
                        poiTypesRequestBuilder.withDataFreshness(stringStraightPass(params.getString("dataFreshness")));
                    }
                    if (params.has("distance") && (params.getString("distance") != null) && (!params.getString("distance").isEmpty()) ) {
                        // Param: distance, Type: Integer
                        poiTypesRequestBuilder.withDistance(integerStraightPass(params.getInt("distance")));
                    }
                    if (params.has("since") && (params.getString("since") != null) && (!params.getString("since").isEmpty()) ) {
                        // Param: since, Type: Date
                        poiTypesRequestBuilder.withSince(stringToDateTime(params.getString("since")));
                    }
                    if (params.has("until") && (params.getString("until") != null) && (!params.getString("until").isEmpty()) ) {
                        // Param: until, Type: Date
                        poiTypesRequestBuilder.withUntil(stringToDateTime(params.getString("until")));
                    }
                    if (params.has("disableGeojson") && (params.getString("disableGeojson") != null) && (!params.getString("disableGeojson").isEmpty()) ) {
                        // Param: disableGeojson, Type: Boolean
                        poiTypesRequestBuilder.withDisableGeojson(booleanStraightPass(params.getBoolean("disableGeojson")));
                    }
                    if (params.has("disableDisruption") && (params.getString("disableDisruption") != null) && (!params.getString("disableDisruption").isEmpty()) ) {
                        // Param: disableDisruption, Type: Boolean
                        poiTypesRequestBuilder.withDisableDisruption(booleanStraightPass(params.getBoolean("disableDisruption")));
                    }
                    if (params.has("filter") && (params.getString("filter") != null) && (!params.getString("filter").isEmpty()) ) {
                        // Param: filter, Type: String
                        poiTypesRequestBuilder.withFilter(stringStraightPass(params.getString("filter")));
                    }
                    if (params.has("tags") && (params.getString("tags") != null) && (!params.getString("tags").isEmpty()) ) {
                        // Param: tags, Type: List
                        poiTypesRequestBuilder.withTags(jsonArrayToStringList(params.getJSONArray("tags")));
                    }
                    
                    poiTypesRequestBuilder.rawGet(new ApiCallback<String>() {
                        @Override
                        public void onFailure(ApiException e, int statusCode, Map<String, List<String>> responseHeaders) {
                            callbackContext.error("Problem during request call | " + e.getMessage());
                        }

                        @Override
                        public void onSuccess(String result, int statusCode, Map<String, List<String>> responseHeaders) {
                            JSONObject jsonObject = null;
                            try {
                                jsonObject = new JSONObject(result);
                                callbackContext.success(jsonObject);
                            } catch (Exception e) {
                                String errorMessage = "Problem during response parsing | " + String.valueOf(e.hashCode()) + ": " + e.getMessage();
                                callbackContext.error(errorMessage);
                            }
                        }

                        @Override
                        public void onUploadProgress(long bytesWritten, long contentLength, boolean done) {
                        }

                        @Override
                        public void onDownloadProgress(long bytesRead, long contentLength, boolean done) {
                        }
                    });
                } catch (Exception e) {
                    String errorMessage = "Problem during request building | " + String.valueOf(e.hashCode()) + ": " + e.getMessage();
                    callbackContext.error(errorMessage);
                }
            }
        });
    }
    final private void coverageRegionPoiTypesId(final JSONObject params, final CallbackContext callbackContext) {
        if (this.navitiaSdk == null) {
            callbackContext.error("NavitiaSDK is not instanciated");
            return;
        }

        final PoiTypesApi.CoverageRegionPoiTypesIdRequestBuilder poiTypesRequestBuilder = this.navitiaSdk.poiTypesApi.newCoverageRegionPoiTypesIdRequestBuilder();
        cordova.getThreadPool().execute(new Runnable() {
            @Override
            public void run() {
                try {
                    if (params.has("region") && (params.getString("region") != null) && (!params.getString("region").isEmpty()) ) {
                        // Param: region, Type: String
                        poiTypesRequestBuilder.withRegion(stringStraightPass(params.getString("region")));
                    }
                    if (params.has("id") && (params.getString("id") != null) && (!params.getString("id").isEmpty()) ) {
                        // Param: id, Type: String
                        poiTypesRequestBuilder.withId(stringStraightPass(params.getString("id")));
                    }
                    if (params.has("startPage") && (params.getString("startPage") != null) && (!params.getString("startPage").isEmpty()) ) {
                        // Param: startPage, Type: Integer
                        poiTypesRequestBuilder.withStartPage(integerStraightPass(params.getInt("startPage")));
                    }
                    if (params.has("count") && (params.getString("count") != null) && (!params.getString("count").isEmpty()) ) {
                        // Param: count, Type: Integer
                        poiTypesRequestBuilder.withCount(integerStraightPass(params.getInt("count")));
                    }
                    if (params.has("depth") && (params.getString("depth") != null) && (!params.getString("depth").isEmpty()) ) {
                        // Param: depth, Type: Integer
                        poiTypesRequestBuilder.withDepth(integerStraightPass(params.getInt("depth")));
                    }
                    if (params.has("forbiddenId") && (params.getString("forbiddenId") != null) && (!params.getString("forbiddenId").isEmpty()) ) {
                        // Param: forbiddenId, Type: List
                        poiTypesRequestBuilder.withForbiddenId(jsonArrayToStringList(params.getJSONArray("forbiddenId")));
                    }
                    if (params.has("forbiddenUris") && (params.getString("forbiddenUris") != null) && (!params.getString("forbiddenUris").isEmpty()) ) {
                        // Param: forbiddenUris, Type: List
                        poiTypesRequestBuilder.withForbiddenUris(jsonArrayToStringList(params.getJSONArray("forbiddenUris")));
                    }
                    if (params.has("externalCode") && (params.getString("externalCode") != null) && (!params.getString("externalCode").isEmpty()) ) {
                        // Param: externalCode, Type: String
                        poiTypesRequestBuilder.withExternalCode(stringStraightPass(params.getString("externalCode")));
                    }
                    if (params.has("headsign") && (params.getString("headsign") != null) && (!params.getString("headsign").isEmpty()) ) {
                        // Param: headsign, Type: String
                        poiTypesRequestBuilder.withHeadsign(stringStraightPass(params.getString("headsign")));
                    }
                    if (params.has("showCodes") && (params.getString("showCodes") != null) && (!params.getString("showCodes").isEmpty()) ) {
                        // Param: showCodes, Type: Boolean
                        poiTypesRequestBuilder.withShowCodes(booleanStraightPass(params.getBoolean("showCodes")));
                    }
                    if (params.has("odtLevel") && (params.getString("odtLevel") != null) && (!params.getString("odtLevel").isEmpty()) ) {
                        // Param: odtLevel, Type: String
                        poiTypesRequestBuilder.withOdtLevel(stringStraightPass(params.getString("odtLevel")));
                    }
                    if (params.has("dataFreshness") && (params.getString("dataFreshness") != null) && (!params.getString("dataFreshness").isEmpty()) ) {
                        // Param: dataFreshness, Type: String
                        poiTypesRequestBuilder.withDataFreshness(stringStraightPass(params.getString("dataFreshness")));
                    }
                    if (params.has("distance") && (params.getString("distance") != null) && (!params.getString("distance").isEmpty()) ) {
                        // Param: distance, Type: Integer
                        poiTypesRequestBuilder.withDistance(integerStraightPass(params.getInt("distance")));
                    }
                    if (params.has("since") && (params.getString("since") != null) && (!params.getString("since").isEmpty()) ) {
                        // Param: since, Type: Date
                        poiTypesRequestBuilder.withSince(stringToDateTime(params.getString("since")));
                    }
                    if (params.has("until") && (params.getString("until") != null) && (!params.getString("until").isEmpty()) ) {
                        // Param: until, Type: Date
                        poiTypesRequestBuilder.withUntil(stringToDateTime(params.getString("until")));
                    }
                    if (params.has("disableGeojson") && (params.getString("disableGeojson") != null) && (!params.getString("disableGeojson").isEmpty()) ) {
                        // Param: disableGeojson, Type: Boolean
                        poiTypesRequestBuilder.withDisableGeojson(booleanStraightPass(params.getBoolean("disableGeojson")));
                    }
                    if (params.has("disableDisruption") && (params.getString("disableDisruption") != null) && (!params.getString("disableDisruption").isEmpty()) ) {
                        // Param: disableDisruption, Type: Boolean
                        poiTypesRequestBuilder.withDisableDisruption(booleanStraightPass(params.getBoolean("disableDisruption")));
                    }
                    if (params.has("tags") && (params.getString("tags") != null) && (!params.getString("tags").isEmpty()) ) {
                        // Param: tags, Type: List
                        poiTypesRequestBuilder.withTags(jsonArrayToStringList(params.getJSONArray("tags")));
                    }
                    
                    poiTypesRequestBuilder.rawGet(new ApiCallback<String>() {
                        @Override
                        public void onFailure(ApiException e, int statusCode, Map<String, List<String>> responseHeaders) {
                            callbackContext.error("Problem during request call | " + e.getMessage());
                        }

                        @Override
                        public void onSuccess(String result, int statusCode, Map<String, List<String>> responseHeaders) {
                            JSONObject jsonObject = null;
                            try {
                                jsonObject = new JSONObject(result);
                                callbackContext.success(jsonObject);
                            } catch (Exception e) {
                                String errorMessage = "Problem during response parsing | " + String.valueOf(e.hashCode()) + ": " + e.getMessage();
                                callbackContext.error(errorMessage);
                            }
                        }

                        @Override
                        public void onUploadProgress(long bytesWritten, long contentLength, boolean done) {
                        }

                        @Override
                        public void onDownloadProgress(long bytesRead, long contentLength, boolean done) {
                        }
                    });
                } catch (Exception e) {
                    String errorMessage = "Problem during request building | " + String.valueOf(e.hashCode()) + ": " + e.getMessage();
                    callbackContext.error(errorMessage);
                }
            }
        });
    }
    final private void coverageRegionUriPoiTypes(final JSONObject params, final CallbackContext callbackContext) {
        if (this.navitiaSdk == null) {
            callbackContext.error("NavitiaSDK is not instanciated");
            return;
        }

        final PoiTypesApi.CoverageRegionUriPoiTypesRequestBuilder poiTypesRequestBuilder = this.navitiaSdk.poiTypesApi.newCoverageRegionUriPoiTypesRequestBuilder();
        cordova.getThreadPool().execute(new Runnable() {
            @Override
            public void run() {
                try {
                    if (params.has("region") && (params.getString("region") != null) && (!params.getString("region").isEmpty()) ) {
                        // Param: region, Type: String
                        poiTypesRequestBuilder.withRegion(stringStraightPass(params.getString("region")));
                    }
                    if (params.has("uri") && (params.getString("uri") != null) && (!params.getString("uri").isEmpty()) ) {
                        // Param: uri, Type: String
                        poiTypesRequestBuilder.withUri(stringStraightPass(params.getString("uri")));
                    }
                    if (params.has("startPage") && (params.getString("startPage") != null) && (!params.getString("startPage").isEmpty()) ) {
                        // Param: startPage, Type: Integer
                        poiTypesRequestBuilder.withStartPage(integerStraightPass(params.getInt("startPage")));
                    }
                    if (params.has("count") && (params.getString("count") != null) && (!params.getString("count").isEmpty()) ) {
                        // Param: count, Type: Integer
                        poiTypesRequestBuilder.withCount(integerStraightPass(params.getInt("count")));
                    }
                    if (params.has("depth") && (params.getString("depth") != null) && (!params.getString("depth").isEmpty()) ) {
                        // Param: depth, Type: Integer
                        poiTypesRequestBuilder.withDepth(integerStraightPass(params.getInt("depth")));
                    }
                    if (params.has("forbiddenId") && (params.getString("forbiddenId") != null) && (!params.getString("forbiddenId").isEmpty()) ) {
                        // Param: forbiddenId, Type: List
                        poiTypesRequestBuilder.withForbiddenId(jsonArrayToStringList(params.getJSONArray("forbiddenId")));
                    }
                    if (params.has("forbiddenUris") && (params.getString("forbiddenUris") != null) && (!params.getString("forbiddenUris").isEmpty()) ) {
                        // Param: forbiddenUris, Type: List
                        poiTypesRequestBuilder.withForbiddenUris(jsonArrayToStringList(params.getJSONArray("forbiddenUris")));
                    }
                    if (params.has("externalCode") && (params.getString("externalCode") != null) && (!params.getString("externalCode").isEmpty()) ) {
                        // Param: externalCode, Type: String
                        poiTypesRequestBuilder.withExternalCode(stringStraightPass(params.getString("externalCode")));
                    }
                    if (params.has("headsign") && (params.getString("headsign") != null) && (!params.getString("headsign").isEmpty()) ) {
                        // Param: headsign, Type: String
                        poiTypesRequestBuilder.withHeadsign(stringStraightPass(params.getString("headsign")));
                    }
                    if (params.has("showCodes") && (params.getString("showCodes") != null) && (!params.getString("showCodes").isEmpty()) ) {
                        // Param: showCodes, Type: Boolean
                        poiTypesRequestBuilder.withShowCodes(booleanStraightPass(params.getBoolean("showCodes")));
                    }
                    if (params.has("odtLevel") && (params.getString("odtLevel") != null) && (!params.getString("odtLevel").isEmpty()) ) {
                        // Param: odtLevel, Type: String
                        poiTypesRequestBuilder.withOdtLevel(stringStraightPass(params.getString("odtLevel")));
                    }
                    if (params.has("dataFreshness") && (params.getString("dataFreshness") != null) && (!params.getString("dataFreshness").isEmpty()) ) {
                        // Param: dataFreshness, Type: String
                        poiTypesRequestBuilder.withDataFreshness(stringStraightPass(params.getString("dataFreshness")));
                    }
                    if (params.has("distance") && (params.getString("distance") != null) && (!params.getString("distance").isEmpty()) ) {
                        // Param: distance, Type: Integer
                        poiTypesRequestBuilder.withDistance(integerStraightPass(params.getInt("distance")));
                    }
                    if (params.has("since") && (params.getString("since") != null) && (!params.getString("since").isEmpty()) ) {
                        // Param: since, Type: Date
                        poiTypesRequestBuilder.withSince(stringToDateTime(params.getString("since")));
                    }
                    if (params.has("until") && (params.getString("until") != null) && (!params.getString("until").isEmpty()) ) {
                        // Param: until, Type: Date
                        poiTypesRequestBuilder.withUntil(stringToDateTime(params.getString("until")));
                    }
                    if (params.has("disableGeojson") && (params.getString("disableGeojson") != null) && (!params.getString("disableGeojson").isEmpty()) ) {
                        // Param: disableGeojson, Type: Boolean
                        poiTypesRequestBuilder.withDisableGeojson(booleanStraightPass(params.getBoolean("disableGeojson")));
                    }
                    if (params.has("disableDisruption") && (params.getString("disableDisruption") != null) && (!params.getString("disableDisruption").isEmpty()) ) {
                        // Param: disableDisruption, Type: Boolean
                        poiTypesRequestBuilder.withDisableDisruption(booleanStraightPass(params.getBoolean("disableDisruption")));
                    }
                    if (params.has("filter") && (params.getString("filter") != null) && (!params.getString("filter").isEmpty()) ) {
                        // Param: filter, Type: String
                        poiTypesRequestBuilder.withFilter(stringStraightPass(params.getString("filter")));
                    }
                    if (params.has("tags") && (params.getString("tags") != null) && (!params.getString("tags").isEmpty()) ) {
                        // Param: tags, Type: List
                        poiTypesRequestBuilder.withTags(jsonArrayToStringList(params.getJSONArray("tags")));
                    }
                    
                    poiTypesRequestBuilder.rawGet(new ApiCallback<String>() {
                        @Override
                        public void onFailure(ApiException e, int statusCode, Map<String, List<String>> responseHeaders) {
                            callbackContext.error("Problem during request call | " + e.getMessage());
                        }

                        @Override
                        public void onSuccess(String result, int statusCode, Map<String, List<String>> responseHeaders) {
                            JSONObject jsonObject = null;
                            try {
                                jsonObject = new JSONObject(result);
                                callbackContext.success(jsonObject);
                            } catch (Exception e) {
                                String errorMessage = "Problem during response parsing | " + String.valueOf(e.hashCode()) + ": " + e.getMessage();
                                callbackContext.error(errorMessage);
                            }
                        }

                        @Override
                        public void onUploadProgress(long bytesWritten, long contentLength, boolean done) {
                        }

                        @Override
                        public void onDownloadProgress(long bytesRead, long contentLength, boolean done) {
                        }
                    });
                } catch (Exception e) {
                    String errorMessage = "Problem during request building | " + String.valueOf(e.hashCode()) + ": " + e.getMessage();
                    callbackContext.error(errorMessage);
                }
            }
        });
    }
    final private void coverageRegionUriPoiTypesId(final JSONObject params, final CallbackContext callbackContext) {
        if (this.navitiaSdk == null) {
            callbackContext.error("NavitiaSDK is not instanciated");
            return;
        }

        final PoiTypesApi.CoverageRegionUriPoiTypesIdRequestBuilder poiTypesRequestBuilder = this.navitiaSdk.poiTypesApi.newCoverageRegionUriPoiTypesIdRequestBuilder();
        cordova.getThreadPool().execute(new Runnable() {
            @Override
            public void run() {
                try {
                    if (params.has("region") && (params.getString("region") != null) && (!params.getString("region").isEmpty()) ) {
                        // Param: region, Type: String
                        poiTypesRequestBuilder.withRegion(stringStraightPass(params.getString("region")));
                    }
                    if (params.has("uri") && (params.getString("uri") != null) && (!params.getString("uri").isEmpty()) ) {
                        // Param: uri, Type: String
                        poiTypesRequestBuilder.withUri(stringStraightPass(params.getString("uri")));
                    }
                    if (params.has("id") && (params.getString("id") != null) && (!params.getString("id").isEmpty()) ) {
                        // Param: id, Type: String
                        poiTypesRequestBuilder.withId(stringStraightPass(params.getString("id")));
                    }
                    if (params.has("startPage") && (params.getString("startPage") != null) && (!params.getString("startPage").isEmpty()) ) {
                        // Param: startPage, Type: Integer
                        poiTypesRequestBuilder.withStartPage(integerStraightPass(params.getInt("startPage")));
                    }
                    if (params.has("count") && (params.getString("count") != null) && (!params.getString("count").isEmpty()) ) {
                        // Param: count, Type: Integer
                        poiTypesRequestBuilder.withCount(integerStraightPass(params.getInt("count")));
                    }
                    if (params.has("depth") && (params.getString("depth") != null) && (!params.getString("depth").isEmpty()) ) {
                        // Param: depth, Type: Integer
                        poiTypesRequestBuilder.withDepth(integerStraightPass(params.getInt("depth")));
                    }
                    if (params.has("forbiddenId") && (params.getString("forbiddenId") != null) && (!params.getString("forbiddenId").isEmpty()) ) {
                        // Param: forbiddenId, Type: List
                        poiTypesRequestBuilder.withForbiddenId(jsonArrayToStringList(params.getJSONArray("forbiddenId")));
                    }
                    if (params.has("forbiddenUris") && (params.getString("forbiddenUris") != null) && (!params.getString("forbiddenUris").isEmpty()) ) {
                        // Param: forbiddenUris, Type: List
                        poiTypesRequestBuilder.withForbiddenUris(jsonArrayToStringList(params.getJSONArray("forbiddenUris")));
                    }
                    if (params.has("externalCode") && (params.getString("externalCode") != null) && (!params.getString("externalCode").isEmpty()) ) {
                        // Param: externalCode, Type: String
                        poiTypesRequestBuilder.withExternalCode(stringStraightPass(params.getString("externalCode")));
                    }
                    if (params.has("headsign") && (params.getString("headsign") != null) && (!params.getString("headsign").isEmpty()) ) {
                        // Param: headsign, Type: String
                        poiTypesRequestBuilder.withHeadsign(stringStraightPass(params.getString("headsign")));
                    }
                    if (params.has("showCodes") && (params.getString("showCodes") != null) && (!params.getString("showCodes").isEmpty()) ) {
                        // Param: showCodes, Type: Boolean
                        poiTypesRequestBuilder.withShowCodes(booleanStraightPass(params.getBoolean("showCodes")));
                    }
                    if (params.has("odtLevel") && (params.getString("odtLevel") != null) && (!params.getString("odtLevel").isEmpty()) ) {
                        // Param: odtLevel, Type: String
                        poiTypesRequestBuilder.withOdtLevel(stringStraightPass(params.getString("odtLevel")));
                    }
                    if (params.has("dataFreshness") && (params.getString("dataFreshness") != null) && (!params.getString("dataFreshness").isEmpty()) ) {
                        // Param: dataFreshness, Type: String
                        poiTypesRequestBuilder.withDataFreshness(stringStraightPass(params.getString("dataFreshness")));
                    }
                    if (params.has("distance") && (params.getString("distance") != null) && (!params.getString("distance").isEmpty()) ) {
                        // Param: distance, Type: Integer
                        poiTypesRequestBuilder.withDistance(integerStraightPass(params.getInt("distance")));
                    }
                    if (params.has("since") && (params.getString("since") != null) && (!params.getString("since").isEmpty()) ) {
                        // Param: since, Type: Date
                        poiTypesRequestBuilder.withSince(stringToDateTime(params.getString("since")));
                    }
                    if (params.has("until") && (params.getString("until") != null) && (!params.getString("until").isEmpty()) ) {
                        // Param: until, Type: Date
                        poiTypesRequestBuilder.withUntil(stringToDateTime(params.getString("until")));
                    }
                    if (params.has("disableGeojson") && (params.getString("disableGeojson") != null) && (!params.getString("disableGeojson").isEmpty()) ) {
                        // Param: disableGeojson, Type: Boolean
                        poiTypesRequestBuilder.withDisableGeojson(booleanStraightPass(params.getBoolean("disableGeojson")));
                    }
                    if (params.has("disableDisruption") && (params.getString("disableDisruption") != null) && (!params.getString("disableDisruption").isEmpty()) ) {
                        // Param: disableDisruption, Type: Boolean
                        poiTypesRequestBuilder.withDisableDisruption(booleanStraightPass(params.getBoolean("disableDisruption")));
                    }
                    if (params.has("tags") && (params.getString("tags") != null) && (!params.getString("tags").isEmpty()) ) {
                        // Param: tags, Type: List
                        poiTypesRequestBuilder.withTags(jsonArrayToStringList(params.getJSONArray("tags")));
                    }
                    
                    poiTypesRequestBuilder.rawGet(new ApiCallback<String>() {
                        @Override
                        public void onFailure(ApiException e, int statusCode, Map<String, List<String>> responseHeaders) {
                            callbackContext.error("Problem during request call | " + e.getMessage());
                        }

                        @Override
                        public void onSuccess(String result, int statusCode, Map<String, List<String>> responseHeaders) {
                            JSONObject jsonObject = null;
                            try {
                                jsonObject = new JSONObject(result);
                                callbackContext.success(jsonObject);
                            } catch (Exception e) {
                                String errorMessage = "Problem during response parsing | " + String.valueOf(e.hashCode()) + ": " + e.getMessage();
                                callbackContext.error(errorMessage);
                            }
                        }

                        @Override
                        public void onUploadProgress(long bytesWritten, long contentLength, boolean done) {
                        }

                        @Override
                        public void onDownloadProgress(long bytesRead, long contentLength, boolean done) {
                        }
                    });
                } catch (Exception e) {
                    String errorMessage = "Problem during request building | " + String.valueOf(e.hashCode()) + ": " + e.getMessage();
                    callbackContext.error(errorMessage);
                }
            }
        });
    }
    final private void coverageLonLatPois(final JSONObject params, final CallbackContext callbackContext) {
        if (this.navitiaSdk == null) {
            callbackContext.error("NavitiaSDK is not instanciated");
            return;
        }

        final PoisApi.CoverageLonLatPoisRequestBuilder poisRequestBuilder = this.navitiaSdk.poisApi.newCoverageLonLatPoisRequestBuilder();
        cordova.getThreadPool().execute(new Runnable() {
            @Override
            public void run() {
                try {
                    if (params.has("lat") && (params.getString("lat") != null) && (!params.getString("lat").isEmpty()) ) {
                        // Param: lat, Type: BigDecimal
                        poisRequestBuilder.withLat(longToBigDecimal(params.getLong("lat")));
                    }
                    if (params.has("lon") && (params.getString("lon") != null) && (!params.getString("lon").isEmpty()) ) {
                        // Param: lon, Type: BigDecimal
                        poisRequestBuilder.withLon(longToBigDecimal(params.getLong("lon")));
                    }
                    if (params.has("startPage") && (params.getString("startPage") != null) && (!params.getString("startPage").isEmpty()) ) {
                        // Param: startPage, Type: Integer
                        poisRequestBuilder.withStartPage(integerStraightPass(params.getInt("startPage")));
                    }
                    if (params.has("count") && (params.getString("count") != null) && (!params.getString("count").isEmpty()) ) {
                        // Param: count, Type: Integer
                        poisRequestBuilder.withCount(integerStraightPass(params.getInt("count")));
                    }
                    if (params.has("depth") && (params.getString("depth") != null) && (!params.getString("depth").isEmpty()) ) {
                        // Param: depth, Type: Integer
                        poisRequestBuilder.withDepth(integerStraightPass(params.getInt("depth")));
                    }
                    if (params.has("forbiddenId") && (params.getString("forbiddenId") != null) && (!params.getString("forbiddenId").isEmpty()) ) {
                        // Param: forbiddenId, Type: List
                        poisRequestBuilder.withForbiddenId(jsonArrayToStringList(params.getJSONArray("forbiddenId")));
                    }
                    if (params.has("forbiddenUris") && (params.getString("forbiddenUris") != null) && (!params.getString("forbiddenUris").isEmpty()) ) {
                        // Param: forbiddenUris, Type: List
                        poisRequestBuilder.withForbiddenUris(jsonArrayToStringList(params.getJSONArray("forbiddenUris")));
                    }
                    if (params.has("externalCode") && (params.getString("externalCode") != null) && (!params.getString("externalCode").isEmpty()) ) {
                        // Param: externalCode, Type: String
                        poisRequestBuilder.withExternalCode(stringStraightPass(params.getString("externalCode")));
                    }
                    if (params.has("headsign") && (params.getString("headsign") != null) && (!params.getString("headsign").isEmpty()) ) {
                        // Param: headsign, Type: String
                        poisRequestBuilder.withHeadsign(stringStraightPass(params.getString("headsign")));
                    }
                    if (params.has("showCodes") && (params.getString("showCodes") != null) && (!params.getString("showCodes").isEmpty()) ) {
                        // Param: showCodes, Type: Boolean
                        poisRequestBuilder.withShowCodes(booleanStraightPass(params.getBoolean("showCodes")));
                    }
                    if (params.has("odtLevel") && (params.getString("odtLevel") != null) && (!params.getString("odtLevel").isEmpty()) ) {
                        // Param: odtLevel, Type: String
                        poisRequestBuilder.withOdtLevel(stringStraightPass(params.getString("odtLevel")));
                    }
                    if (params.has("dataFreshness") && (params.getString("dataFreshness") != null) && (!params.getString("dataFreshness").isEmpty()) ) {
                        // Param: dataFreshness, Type: String
                        poisRequestBuilder.withDataFreshness(stringStraightPass(params.getString("dataFreshness")));
                    }
                    if (params.has("distance") && (params.getString("distance") != null) && (!params.getString("distance").isEmpty()) ) {
                        // Param: distance, Type: Integer
                        poisRequestBuilder.withDistance(integerStraightPass(params.getInt("distance")));
                    }
                    if (params.has("since") && (params.getString("since") != null) && (!params.getString("since").isEmpty()) ) {
                        // Param: since, Type: Date
                        poisRequestBuilder.withSince(stringToDateTime(params.getString("since")));
                    }
                    if (params.has("until") && (params.getString("until") != null) && (!params.getString("until").isEmpty()) ) {
                        // Param: until, Type: Date
                        poisRequestBuilder.withUntil(stringToDateTime(params.getString("until")));
                    }
                    if (params.has("disableGeojson") && (params.getString("disableGeojson") != null) && (!params.getString("disableGeojson").isEmpty()) ) {
                        // Param: disableGeojson, Type: Boolean
                        poisRequestBuilder.withDisableGeojson(booleanStraightPass(params.getBoolean("disableGeojson")));
                    }
                    if (params.has("disableDisruption") && (params.getString("disableDisruption") != null) && (!params.getString("disableDisruption").isEmpty()) ) {
                        // Param: disableDisruption, Type: Boolean
                        poisRequestBuilder.withDisableDisruption(booleanStraightPass(params.getBoolean("disableDisruption")));
                    }
                    if (params.has("filter") && (params.getString("filter") != null) && (!params.getString("filter").isEmpty()) ) {
                        // Param: filter, Type: String
                        poisRequestBuilder.withFilter(stringStraightPass(params.getString("filter")));
                    }
                    if (params.has("tags") && (params.getString("tags") != null) && (!params.getString("tags").isEmpty()) ) {
                        // Param: tags, Type: List
                        poisRequestBuilder.withTags(jsonArrayToStringList(params.getJSONArray("tags")));
                    }
                    if (params.has("originalId") && (params.getString("originalId") != null) && (!params.getString("originalId").isEmpty()) ) {
                        // Param: originalId, Type: String
                        poisRequestBuilder.withOriginalId(stringStraightPass(params.getString("originalId")));
                    }
                    if (params.has("bssStands") && (params.getString("bssStands") != null) && (!params.getString("bssStands").isEmpty()) ) {
                        // Param: bssStands, Type: Boolean
                        poisRequestBuilder.withBssStands(booleanStraightPass(params.getBoolean("bssStands")));
                    }
                    if (params.has("addPoiInfos") && (params.getString("addPoiInfos") != null) && (!params.getString("addPoiInfos").isEmpty()) ) {
                        // Param: addPoiInfos, Type: List
                        poisRequestBuilder.withAddPoiInfos(jsonArrayToStringList(params.getJSONArray("addPoiInfos")));
                    }
                    
                    poisRequestBuilder.rawGet(new ApiCallback<String>() {
                        @Override
                        public void onFailure(ApiException e, int statusCode, Map<String, List<String>> responseHeaders) {
                            callbackContext.error("Problem during request call | " + e.getMessage());
                        }

                        @Override
                        public void onSuccess(String result, int statusCode, Map<String, List<String>> responseHeaders) {
                            JSONObject jsonObject = null;
                            try {
                                jsonObject = new JSONObject(result);
                                callbackContext.success(jsonObject);
                            } catch (Exception e) {
                                String errorMessage = "Problem during response parsing | " + String.valueOf(e.hashCode()) + ": " + e.getMessage();
                                callbackContext.error(errorMessage);
                            }
                        }

                        @Override
                        public void onUploadProgress(long bytesWritten, long contentLength, boolean done) {
                        }

                        @Override
                        public void onDownloadProgress(long bytesRead, long contentLength, boolean done) {
                        }
                    });
                } catch (Exception e) {
                    String errorMessage = "Problem during request building | " + String.valueOf(e.hashCode()) + ": " + e.getMessage();
                    callbackContext.error(errorMessage);
                }
            }
        });
    }
    final private void coverageLonLatPoisId(final JSONObject params, final CallbackContext callbackContext) {
        if (this.navitiaSdk == null) {
            callbackContext.error("NavitiaSDK is not instanciated");
            return;
        }

        final PoisApi.CoverageLonLatPoisIdRequestBuilder poisRequestBuilder = this.navitiaSdk.poisApi.newCoverageLonLatPoisIdRequestBuilder();
        cordova.getThreadPool().execute(new Runnable() {
            @Override
            public void run() {
                try {
                    if (params.has("lat") && (params.getString("lat") != null) && (!params.getString("lat").isEmpty()) ) {
                        // Param: lat, Type: BigDecimal
                        poisRequestBuilder.withLat(longToBigDecimal(params.getLong("lat")));
                    }
                    if (params.has("lon") && (params.getString("lon") != null) && (!params.getString("lon").isEmpty()) ) {
                        // Param: lon, Type: BigDecimal
                        poisRequestBuilder.withLon(longToBigDecimal(params.getLong("lon")));
                    }
                    if (params.has("id") && (params.getString("id") != null) && (!params.getString("id").isEmpty()) ) {
                        // Param: id, Type: String
                        poisRequestBuilder.withId(stringStraightPass(params.getString("id")));
                    }
                    if (params.has("startPage") && (params.getString("startPage") != null) && (!params.getString("startPage").isEmpty()) ) {
                        // Param: startPage, Type: Integer
                        poisRequestBuilder.withStartPage(integerStraightPass(params.getInt("startPage")));
                    }
                    if (params.has("count") && (params.getString("count") != null) && (!params.getString("count").isEmpty()) ) {
                        // Param: count, Type: Integer
                        poisRequestBuilder.withCount(integerStraightPass(params.getInt("count")));
                    }
                    if (params.has("depth") && (params.getString("depth") != null) && (!params.getString("depth").isEmpty()) ) {
                        // Param: depth, Type: Integer
                        poisRequestBuilder.withDepth(integerStraightPass(params.getInt("depth")));
                    }
                    if (params.has("forbiddenId") && (params.getString("forbiddenId") != null) && (!params.getString("forbiddenId").isEmpty()) ) {
                        // Param: forbiddenId, Type: List
                        poisRequestBuilder.withForbiddenId(jsonArrayToStringList(params.getJSONArray("forbiddenId")));
                    }
                    if (params.has("forbiddenUris") && (params.getString("forbiddenUris") != null) && (!params.getString("forbiddenUris").isEmpty()) ) {
                        // Param: forbiddenUris, Type: List
                        poisRequestBuilder.withForbiddenUris(jsonArrayToStringList(params.getJSONArray("forbiddenUris")));
                    }
                    if (params.has("externalCode") && (params.getString("externalCode") != null) && (!params.getString("externalCode").isEmpty()) ) {
                        // Param: externalCode, Type: String
                        poisRequestBuilder.withExternalCode(stringStraightPass(params.getString("externalCode")));
                    }
                    if (params.has("headsign") && (params.getString("headsign") != null) && (!params.getString("headsign").isEmpty()) ) {
                        // Param: headsign, Type: String
                        poisRequestBuilder.withHeadsign(stringStraightPass(params.getString("headsign")));
                    }
                    if (params.has("showCodes") && (params.getString("showCodes") != null) && (!params.getString("showCodes").isEmpty()) ) {
                        // Param: showCodes, Type: Boolean
                        poisRequestBuilder.withShowCodes(booleanStraightPass(params.getBoolean("showCodes")));
                    }
                    if (params.has("odtLevel") && (params.getString("odtLevel") != null) && (!params.getString("odtLevel").isEmpty()) ) {
                        // Param: odtLevel, Type: String
                        poisRequestBuilder.withOdtLevel(stringStraightPass(params.getString("odtLevel")));
                    }
                    if (params.has("dataFreshness") && (params.getString("dataFreshness") != null) && (!params.getString("dataFreshness").isEmpty()) ) {
                        // Param: dataFreshness, Type: String
                        poisRequestBuilder.withDataFreshness(stringStraightPass(params.getString("dataFreshness")));
                    }
                    if (params.has("distance") && (params.getString("distance") != null) && (!params.getString("distance").isEmpty()) ) {
                        // Param: distance, Type: Integer
                        poisRequestBuilder.withDistance(integerStraightPass(params.getInt("distance")));
                    }
                    if (params.has("since") && (params.getString("since") != null) && (!params.getString("since").isEmpty()) ) {
                        // Param: since, Type: Date
                        poisRequestBuilder.withSince(stringToDateTime(params.getString("since")));
                    }
                    if (params.has("until") && (params.getString("until") != null) && (!params.getString("until").isEmpty()) ) {
                        // Param: until, Type: Date
                        poisRequestBuilder.withUntil(stringToDateTime(params.getString("until")));
                    }
                    if (params.has("disableGeojson") && (params.getString("disableGeojson") != null) && (!params.getString("disableGeojson").isEmpty()) ) {
                        // Param: disableGeojson, Type: Boolean
                        poisRequestBuilder.withDisableGeojson(booleanStraightPass(params.getBoolean("disableGeojson")));
                    }
                    if (params.has("disableDisruption") && (params.getString("disableDisruption") != null) && (!params.getString("disableDisruption").isEmpty()) ) {
                        // Param: disableDisruption, Type: Boolean
                        poisRequestBuilder.withDisableDisruption(booleanStraightPass(params.getBoolean("disableDisruption")));
                    }
                    if (params.has("tags") && (params.getString("tags") != null) && (!params.getString("tags").isEmpty()) ) {
                        // Param: tags, Type: List
                        poisRequestBuilder.withTags(jsonArrayToStringList(params.getJSONArray("tags")));
                    }
                    if (params.has("originalId") && (params.getString("originalId") != null) && (!params.getString("originalId").isEmpty()) ) {
                        // Param: originalId, Type: String
                        poisRequestBuilder.withOriginalId(stringStraightPass(params.getString("originalId")));
                    }
                    if (params.has("bssStands") && (params.getString("bssStands") != null) && (!params.getString("bssStands").isEmpty()) ) {
                        // Param: bssStands, Type: Boolean
                        poisRequestBuilder.withBssStands(booleanStraightPass(params.getBoolean("bssStands")));
                    }
                    if (params.has("addPoiInfos") && (params.getString("addPoiInfos") != null) && (!params.getString("addPoiInfos").isEmpty()) ) {
                        // Param: addPoiInfos, Type: List
                        poisRequestBuilder.withAddPoiInfos(jsonArrayToStringList(params.getJSONArray("addPoiInfos")));
                    }
                    
                    poisRequestBuilder.rawGet(new ApiCallback<String>() {
                        @Override
                        public void onFailure(ApiException e, int statusCode, Map<String, List<String>> responseHeaders) {
                            callbackContext.error("Problem during request call | " + e.getMessage());
                        }

                        @Override
                        public void onSuccess(String result, int statusCode, Map<String, List<String>> responseHeaders) {
                            JSONObject jsonObject = null;
                            try {
                                jsonObject = new JSONObject(result);
                                callbackContext.success(jsonObject);
                            } catch (Exception e) {
                                String errorMessage = "Problem during response parsing | " + String.valueOf(e.hashCode()) + ": " + e.getMessage();
                                callbackContext.error(errorMessage);
                            }
                        }

                        @Override
                        public void onUploadProgress(long bytesWritten, long contentLength, boolean done) {
                        }

                        @Override
                        public void onDownloadProgress(long bytesRead, long contentLength, boolean done) {
                        }
                    });
                } catch (Exception e) {
                    String errorMessage = "Problem during request building | " + String.valueOf(e.hashCode()) + ": " + e.getMessage();
                    callbackContext.error(errorMessage);
                }
            }
        });
    }
    final private void coverageLonLatUriPois(final JSONObject params, final CallbackContext callbackContext) {
        if (this.navitiaSdk == null) {
            callbackContext.error("NavitiaSDK is not instanciated");
            return;
        }

        final PoisApi.CoverageLonLatUriPoisRequestBuilder poisRequestBuilder = this.navitiaSdk.poisApi.newCoverageLonLatUriPoisRequestBuilder();
        cordova.getThreadPool().execute(new Runnable() {
            @Override
            public void run() {
                try {
                    if (params.has("lat") && (params.getString("lat") != null) && (!params.getString("lat").isEmpty()) ) {
                        // Param: lat, Type: BigDecimal
                        poisRequestBuilder.withLat(longToBigDecimal(params.getLong("lat")));
                    }
                    if (params.has("lon") && (params.getString("lon") != null) && (!params.getString("lon").isEmpty()) ) {
                        // Param: lon, Type: BigDecimal
                        poisRequestBuilder.withLon(longToBigDecimal(params.getLong("lon")));
                    }
                    if (params.has("uri") && (params.getString("uri") != null) && (!params.getString("uri").isEmpty()) ) {
                        // Param: uri, Type: String
                        poisRequestBuilder.withUri(stringStraightPass(params.getString("uri")));
                    }
                    if (params.has("startPage") && (params.getString("startPage") != null) && (!params.getString("startPage").isEmpty()) ) {
                        // Param: startPage, Type: Integer
                        poisRequestBuilder.withStartPage(integerStraightPass(params.getInt("startPage")));
                    }
                    if (params.has("count") && (params.getString("count") != null) && (!params.getString("count").isEmpty()) ) {
                        // Param: count, Type: Integer
                        poisRequestBuilder.withCount(integerStraightPass(params.getInt("count")));
                    }
                    if (params.has("depth") && (params.getString("depth") != null) && (!params.getString("depth").isEmpty()) ) {
                        // Param: depth, Type: Integer
                        poisRequestBuilder.withDepth(integerStraightPass(params.getInt("depth")));
                    }
                    if (params.has("forbiddenId") && (params.getString("forbiddenId") != null) && (!params.getString("forbiddenId").isEmpty()) ) {
                        // Param: forbiddenId, Type: List
                        poisRequestBuilder.withForbiddenId(jsonArrayToStringList(params.getJSONArray("forbiddenId")));
                    }
                    if (params.has("forbiddenUris") && (params.getString("forbiddenUris") != null) && (!params.getString("forbiddenUris").isEmpty()) ) {
                        // Param: forbiddenUris, Type: List
                        poisRequestBuilder.withForbiddenUris(jsonArrayToStringList(params.getJSONArray("forbiddenUris")));
                    }
                    if (params.has("externalCode") && (params.getString("externalCode") != null) && (!params.getString("externalCode").isEmpty()) ) {
                        // Param: externalCode, Type: String
                        poisRequestBuilder.withExternalCode(stringStraightPass(params.getString("externalCode")));
                    }
                    if (params.has("headsign") && (params.getString("headsign") != null) && (!params.getString("headsign").isEmpty()) ) {
                        // Param: headsign, Type: String
                        poisRequestBuilder.withHeadsign(stringStraightPass(params.getString("headsign")));
                    }
                    if (params.has("showCodes") && (params.getString("showCodes") != null) && (!params.getString("showCodes").isEmpty()) ) {
                        // Param: showCodes, Type: Boolean
                        poisRequestBuilder.withShowCodes(booleanStraightPass(params.getBoolean("showCodes")));
                    }
                    if (params.has("odtLevel") && (params.getString("odtLevel") != null) && (!params.getString("odtLevel").isEmpty()) ) {
                        // Param: odtLevel, Type: String
                        poisRequestBuilder.withOdtLevel(stringStraightPass(params.getString("odtLevel")));
                    }
                    if (params.has("dataFreshness") && (params.getString("dataFreshness") != null) && (!params.getString("dataFreshness").isEmpty()) ) {
                        // Param: dataFreshness, Type: String
                        poisRequestBuilder.withDataFreshness(stringStraightPass(params.getString("dataFreshness")));
                    }
                    if (params.has("distance") && (params.getString("distance") != null) && (!params.getString("distance").isEmpty()) ) {
                        // Param: distance, Type: Integer
                        poisRequestBuilder.withDistance(integerStraightPass(params.getInt("distance")));
                    }
                    if (params.has("since") && (params.getString("since") != null) && (!params.getString("since").isEmpty()) ) {
                        // Param: since, Type: Date
                        poisRequestBuilder.withSince(stringToDateTime(params.getString("since")));
                    }
                    if (params.has("until") && (params.getString("until") != null) && (!params.getString("until").isEmpty()) ) {
                        // Param: until, Type: Date
                        poisRequestBuilder.withUntil(stringToDateTime(params.getString("until")));
                    }
                    if (params.has("disableGeojson") && (params.getString("disableGeojson") != null) && (!params.getString("disableGeojson").isEmpty()) ) {
                        // Param: disableGeojson, Type: Boolean
                        poisRequestBuilder.withDisableGeojson(booleanStraightPass(params.getBoolean("disableGeojson")));
                    }
                    if (params.has("disableDisruption") && (params.getString("disableDisruption") != null) && (!params.getString("disableDisruption").isEmpty()) ) {
                        // Param: disableDisruption, Type: Boolean
                        poisRequestBuilder.withDisableDisruption(booleanStraightPass(params.getBoolean("disableDisruption")));
                    }
                    if (params.has("filter") && (params.getString("filter") != null) && (!params.getString("filter").isEmpty()) ) {
                        // Param: filter, Type: String
                        poisRequestBuilder.withFilter(stringStraightPass(params.getString("filter")));
                    }
                    if (params.has("tags") && (params.getString("tags") != null) && (!params.getString("tags").isEmpty()) ) {
                        // Param: tags, Type: List
                        poisRequestBuilder.withTags(jsonArrayToStringList(params.getJSONArray("tags")));
                    }
                    if (params.has("originalId") && (params.getString("originalId") != null) && (!params.getString("originalId").isEmpty()) ) {
                        // Param: originalId, Type: String
                        poisRequestBuilder.withOriginalId(stringStraightPass(params.getString("originalId")));
                    }
                    if (params.has("bssStands") && (params.getString("bssStands") != null) && (!params.getString("bssStands").isEmpty()) ) {
                        // Param: bssStands, Type: Boolean
                        poisRequestBuilder.withBssStands(booleanStraightPass(params.getBoolean("bssStands")));
                    }
                    if (params.has("addPoiInfos") && (params.getString("addPoiInfos") != null) && (!params.getString("addPoiInfos").isEmpty()) ) {
                        // Param: addPoiInfos, Type: List
                        poisRequestBuilder.withAddPoiInfos(jsonArrayToStringList(params.getJSONArray("addPoiInfos")));
                    }
                    
                    poisRequestBuilder.rawGet(new ApiCallback<String>() {
                        @Override
                        public void onFailure(ApiException e, int statusCode, Map<String, List<String>> responseHeaders) {
                            callbackContext.error("Problem during request call | " + e.getMessage());
                        }

                        @Override
                        public void onSuccess(String result, int statusCode, Map<String, List<String>> responseHeaders) {
                            JSONObject jsonObject = null;
                            try {
                                jsonObject = new JSONObject(result);
                                callbackContext.success(jsonObject);
                            } catch (Exception e) {
                                String errorMessage = "Problem during response parsing | " + String.valueOf(e.hashCode()) + ": " + e.getMessage();
                                callbackContext.error(errorMessage);
                            }
                        }

                        @Override
                        public void onUploadProgress(long bytesWritten, long contentLength, boolean done) {
                        }

                        @Override
                        public void onDownloadProgress(long bytesRead, long contentLength, boolean done) {
                        }
                    });
                } catch (Exception e) {
                    String errorMessage = "Problem during request building | " + String.valueOf(e.hashCode()) + ": " + e.getMessage();
                    callbackContext.error(errorMessage);
                }
            }
        });
    }
    final private void coverageLonLatUriPoisId(final JSONObject params, final CallbackContext callbackContext) {
        if (this.navitiaSdk == null) {
            callbackContext.error("NavitiaSDK is not instanciated");
            return;
        }

        final PoisApi.CoverageLonLatUriPoisIdRequestBuilder poisRequestBuilder = this.navitiaSdk.poisApi.newCoverageLonLatUriPoisIdRequestBuilder();
        cordova.getThreadPool().execute(new Runnable() {
            @Override
            public void run() {
                try {
                    if (params.has("lat") && (params.getString("lat") != null) && (!params.getString("lat").isEmpty()) ) {
                        // Param: lat, Type: BigDecimal
                        poisRequestBuilder.withLat(longToBigDecimal(params.getLong("lat")));
                    }
                    if (params.has("lon") && (params.getString("lon") != null) && (!params.getString("lon").isEmpty()) ) {
                        // Param: lon, Type: BigDecimal
                        poisRequestBuilder.withLon(longToBigDecimal(params.getLong("lon")));
                    }
                    if (params.has("uri") && (params.getString("uri") != null) && (!params.getString("uri").isEmpty()) ) {
                        // Param: uri, Type: String
                        poisRequestBuilder.withUri(stringStraightPass(params.getString("uri")));
                    }
                    if (params.has("id") && (params.getString("id") != null) && (!params.getString("id").isEmpty()) ) {
                        // Param: id, Type: String
                        poisRequestBuilder.withId(stringStraightPass(params.getString("id")));
                    }
                    if (params.has("startPage") && (params.getString("startPage") != null) && (!params.getString("startPage").isEmpty()) ) {
                        // Param: startPage, Type: Integer
                        poisRequestBuilder.withStartPage(integerStraightPass(params.getInt("startPage")));
                    }
                    if (params.has("count") && (params.getString("count") != null) && (!params.getString("count").isEmpty()) ) {
                        // Param: count, Type: Integer
                        poisRequestBuilder.withCount(integerStraightPass(params.getInt("count")));
                    }
                    if (params.has("depth") && (params.getString("depth") != null) && (!params.getString("depth").isEmpty()) ) {
                        // Param: depth, Type: Integer
                        poisRequestBuilder.withDepth(integerStraightPass(params.getInt("depth")));
                    }
                    if (params.has("forbiddenId") && (params.getString("forbiddenId") != null) && (!params.getString("forbiddenId").isEmpty()) ) {
                        // Param: forbiddenId, Type: List
                        poisRequestBuilder.withForbiddenId(jsonArrayToStringList(params.getJSONArray("forbiddenId")));
                    }
                    if (params.has("forbiddenUris") && (params.getString("forbiddenUris") != null) && (!params.getString("forbiddenUris").isEmpty()) ) {
                        // Param: forbiddenUris, Type: List
                        poisRequestBuilder.withForbiddenUris(jsonArrayToStringList(params.getJSONArray("forbiddenUris")));
                    }
                    if (params.has("externalCode") && (params.getString("externalCode") != null) && (!params.getString("externalCode").isEmpty()) ) {
                        // Param: externalCode, Type: String
                        poisRequestBuilder.withExternalCode(stringStraightPass(params.getString("externalCode")));
                    }
                    if (params.has("headsign") && (params.getString("headsign") != null) && (!params.getString("headsign").isEmpty()) ) {
                        // Param: headsign, Type: String
                        poisRequestBuilder.withHeadsign(stringStraightPass(params.getString("headsign")));
                    }
                    if (params.has("showCodes") && (params.getString("showCodes") != null) && (!params.getString("showCodes").isEmpty()) ) {
                        // Param: showCodes, Type: Boolean
                        poisRequestBuilder.withShowCodes(booleanStraightPass(params.getBoolean("showCodes")));
                    }
                    if (params.has("odtLevel") && (params.getString("odtLevel") != null) && (!params.getString("odtLevel").isEmpty()) ) {
                        // Param: odtLevel, Type: String
                        poisRequestBuilder.withOdtLevel(stringStraightPass(params.getString("odtLevel")));
                    }
                    if (params.has("dataFreshness") && (params.getString("dataFreshness") != null) && (!params.getString("dataFreshness").isEmpty()) ) {
                        // Param: dataFreshness, Type: String
                        poisRequestBuilder.withDataFreshness(stringStraightPass(params.getString("dataFreshness")));
                    }
                    if (params.has("distance") && (params.getString("distance") != null) && (!params.getString("distance").isEmpty()) ) {
                        // Param: distance, Type: Integer
                        poisRequestBuilder.withDistance(integerStraightPass(params.getInt("distance")));
                    }
                    if (params.has("since") && (params.getString("since") != null) && (!params.getString("since").isEmpty()) ) {
                        // Param: since, Type: Date
                        poisRequestBuilder.withSince(stringToDateTime(params.getString("since")));
                    }
                    if (params.has("until") && (params.getString("until") != null) && (!params.getString("until").isEmpty()) ) {
                        // Param: until, Type: Date
                        poisRequestBuilder.withUntil(stringToDateTime(params.getString("until")));
                    }
                    if (params.has("disableGeojson") && (params.getString("disableGeojson") != null) && (!params.getString("disableGeojson").isEmpty()) ) {
                        // Param: disableGeojson, Type: Boolean
                        poisRequestBuilder.withDisableGeojson(booleanStraightPass(params.getBoolean("disableGeojson")));
                    }
                    if (params.has("disableDisruption") && (params.getString("disableDisruption") != null) && (!params.getString("disableDisruption").isEmpty()) ) {
                        // Param: disableDisruption, Type: Boolean
                        poisRequestBuilder.withDisableDisruption(booleanStraightPass(params.getBoolean("disableDisruption")));
                    }
                    if (params.has("tags") && (params.getString("tags") != null) && (!params.getString("tags").isEmpty()) ) {
                        // Param: tags, Type: List
                        poisRequestBuilder.withTags(jsonArrayToStringList(params.getJSONArray("tags")));
                    }
                    if (params.has("originalId") && (params.getString("originalId") != null) && (!params.getString("originalId").isEmpty()) ) {
                        // Param: originalId, Type: String
                        poisRequestBuilder.withOriginalId(stringStraightPass(params.getString("originalId")));
                    }
                    if (params.has("bssStands") && (params.getString("bssStands") != null) && (!params.getString("bssStands").isEmpty()) ) {
                        // Param: bssStands, Type: Boolean
                        poisRequestBuilder.withBssStands(booleanStraightPass(params.getBoolean("bssStands")));
                    }
                    if (params.has("addPoiInfos") && (params.getString("addPoiInfos") != null) && (!params.getString("addPoiInfos").isEmpty()) ) {
                        // Param: addPoiInfos, Type: List
                        poisRequestBuilder.withAddPoiInfos(jsonArrayToStringList(params.getJSONArray("addPoiInfos")));
                    }
                    
                    poisRequestBuilder.rawGet(new ApiCallback<String>() {
                        @Override
                        public void onFailure(ApiException e, int statusCode, Map<String, List<String>> responseHeaders) {
                            callbackContext.error("Problem during request call | " + e.getMessage());
                        }

                        @Override
                        public void onSuccess(String result, int statusCode, Map<String, List<String>> responseHeaders) {
                            JSONObject jsonObject = null;
                            try {
                                jsonObject = new JSONObject(result);
                                callbackContext.success(jsonObject);
                            } catch (Exception e) {
                                String errorMessage = "Problem during response parsing | " + String.valueOf(e.hashCode()) + ": " + e.getMessage();
                                callbackContext.error(errorMessage);
                            }
                        }

                        @Override
                        public void onUploadProgress(long bytesWritten, long contentLength, boolean done) {
                        }

                        @Override
                        public void onDownloadProgress(long bytesRead, long contentLength, boolean done) {
                        }
                    });
                } catch (Exception e) {
                    String errorMessage = "Problem during request building | " + String.valueOf(e.hashCode()) + ": " + e.getMessage();
                    callbackContext.error(errorMessage);
                }
            }
        });
    }
    final private void coverageRegionPois(final JSONObject params, final CallbackContext callbackContext) {
        if (this.navitiaSdk == null) {
            callbackContext.error("NavitiaSDK is not instanciated");
            return;
        }

        final PoisApi.CoverageRegionPoisRequestBuilder poisRequestBuilder = this.navitiaSdk.poisApi.newCoverageRegionPoisRequestBuilder();
        cordova.getThreadPool().execute(new Runnable() {
            @Override
            public void run() {
                try {
                    if (params.has("region") && (params.getString("region") != null) && (!params.getString("region").isEmpty()) ) {
                        // Param: region, Type: String
                        poisRequestBuilder.withRegion(stringStraightPass(params.getString("region")));
                    }
                    if (params.has("startPage") && (params.getString("startPage") != null) && (!params.getString("startPage").isEmpty()) ) {
                        // Param: startPage, Type: Integer
                        poisRequestBuilder.withStartPage(integerStraightPass(params.getInt("startPage")));
                    }
                    if (params.has("count") && (params.getString("count") != null) && (!params.getString("count").isEmpty()) ) {
                        // Param: count, Type: Integer
                        poisRequestBuilder.withCount(integerStraightPass(params.getInt("count")));
                    }
                    if (params.has("depth") && (params.getString("depth") != null) && (!params.getString("depth").isEmpty()) ) {
                        // Param: depth, Type: Integer
                        poisRequestBuilder.withDepth(integerStraightPass(params.getInt("depth")));
                    }
                    if (params.has("forbiddenId") && (params.getString("forbiddenId") != null) && (!params.getString("forbiddenId").isEmpty()) ) {
                        // Param: forbiddenId, Type: List
                        poisRequestBuilder.withForbiddenId(jsonArrayToStringList(params.getJSONArray("forbiddenId")));
                    }
                    if (params.has("forbiddenUris") && (params.getString("forbiddenUris") != null) && (!params.getString("forbiddenUris").isEmpty()) ) {
                        // Param: forbiddenUris, Type: List
                        poisRequestBuilder.withForbiddenUris(jsonArrayToStringList(params.getJSONArray("forbiddenUris")));
                    }
                    if (params.has("externalCode") && (params.getString("externalCode") != null) && (!params.getString("externalCode").isEmpty()) ) {
                        // Param: externalCode, Type: String
                        poisRequestBuilder.withExternalCode(stringStraightPass(params.getString("externalCode")));
                    }
                    if (params.has("headsign") && (params.getString("headsign") != null) && (!params.getString("headsign").isEmpty()) ) {
                        // Param: headsign, Type: String
                        poisRequestBuilder.withHeadsign(stringStraightPass(params.getString("headsign")));
                    }
                    if (params.has("showCodes") && (params.getString("showCodes") != null) && (!params.getString("showCodes").isEmpty()) ) {
                        // Param: showCodes, Type: Boolean
                        poisRequestBuilder.withShowCodes(booleanStraightPass(params.getBoolean("showCodes")));
                    }
                    if (params.has("odtLevel") && (params.getString("odtLevel") != null) && (!params.getString("odtLevel").isEmpty()) ) {
                        // Param: odtLevel, Type: String
                        poisRequestBuilder.withOdtLevel(stringStraightPass(params.getString("odtLevel")));
                    }
                    if (params.has("dataFreshness") && (params.getString("dataFreshness") != null) && (!params.getString("dataFreshness").isEmpty()) ) {
                        // Param: dataFreshness, Type: String
                        poisRequestBuilder.withDataFreshness(stringStraightPass(params.getString("dataFreshness")));
                    }
                    if (params.has("distance") && (params.getString("distance") != null) && (!params.getString("distance").isEmpty()) ) {
                        // Param: distance, Type: Integer
                        poisRequestBuilder.withDistance(integerStraightPass(params.getInt("distance")));
                    }
                    if (params.has("since") && (params.getString("since") != null) && (!params.getString("since").isEmpty()) ) {
                        // Param: since, Type: Date
                        poisRequestBuilder.withSince(stringToDateTime(params.getString("since")));
                    }
                    if (params.has("until") && (params.getString("until") != null) && (!params.getString("until").isEmpty()) ) {
                        // Param: until, Type: Date
                        poisRequestBuilder.withUntil(stringToDateTime(params.getString("until")));
                    }
                    if (params.has("disableGeojson") && (params.getString("disableGeojson") != null) && (!params.getString("disableGeojson").isEmpty()) ) {
                        // Param: disableGeojson, Type: Boolean
                        poisRequestBuilder.withDisableGeojson(booleanStraightPass(params.getBoolean("disableGeojson")));
                    }
                    if (params.has("disableDisruption") && (params.getString("disableDisruption") != null) && (!params.getString("disableDisruption").isEmpty()) ) {
                        // Param: disableDisruption, Type: Boolean
                        poisRequestBuilder.withDisableDisruption(booleanStraightPass(params.getBoolean("disableDisruption")));
                    }
                    if (params.has("filter") && (params.getString("filter") != null) && (!params.getString("filter").isEmpty()) ) {
                        // Param: filter, Type: String
                        poisRequestBuilder.withFilter(stringStraightPass(params.getString("filter")));
                    }
                    if (params.has("tags") && (params.getString("tags") != null) && (!params.getString("tags").isEmpty()) ) {
                        // Param: tags, Type: List
                        poisRequestBuilder.withTags(jsonArrayToStringList(params.getJSONArray("tags")));
                    }
                    if (params.has("originalId") && (params.getString("originalId") != null) && (!params.getString("originalId").isEmpty()) ) {
                        // Param: originalId, Type: String
                        poisRequestBuilder.withOriginalId(stringStraightPass(params.getString("originalId")));
                    }
                    if (params.has("bssStands") && (params.getString("bssStands") != null) && (!params.getString("bssStands").isEmpty()) ) {
                        // Param: bssStands, Type: Boolean
                        poisRequestBuilder.withBssStands(booleanStraightPass(params.getBoolean("bssStands")));
                    }
                    if (params.has("addPoiInfos") && (params.getString("addPoiInfos") != null) && (!params.getString("addPoiInfos").isEmpty()) ) {
                        // Param: addPoiInfos, Type: List
                        poisRequestBuilder.withAddPoiInfos(jsonArrayToStringList(params.getJSONArray("addPoiInfos")));
                    }
                    
                    poisRequestBuilder.rawGet(new ApiCallback<String>() {
                        @Override
                        public void onFailure(ApiException e, int statusCode, Map<String, List<String>> responseHeaders) {
                            callbackContext.error("Problem during request call | " + e.getMessage());
                        }

                        @Override
                        public void onSuccess(String result, int statusCode, Map<String, List<String>> responseHeaders) {
                            JSONObject jsonObject = null;
                            try {
                                jsonObject = new JSONObject(result);
                                callbackContext.success(jsonObject);
                            } catch (Exception e) {
                                String errorMessage = "Problem during response parsing | " + String.valueOf(e.hashCode()) + ": " + e.getMessage();
                                callbackContext.error(errorMessage);
                            }
                        }

                        @Override
                        public void onUploadProgress(long bytesWritten, long contentLength, boolean done) {
                        }

                        @Override
                        public void onDownloadProgress(long bytesRead, long contentLength, boolean done) {
                        }
                    });
                } catch (Exception e) {
                    String errorMessage = "Problem during request building | " + String.valueOf(e.hashCode()) + ": " + e.getMessage();
                    callbackContext.error(errorMessage);
                }
            }
        });
    }
    final private void coverageRegionPoisId(final JSONObject params, final CallbackContext callbackContext) {
        if (this.navitiaSdk == null) {
            callbackContext.error("NavitiaSDK is not instanciated");
            return;
        }

        final PoisApi.CoverageRegionPoisIdRequestBuilder poisRequestBuilder = this.navitiaSdk.poisApi.newCoverageRegionPoisIdRequestBuilder();
        cordova.getThreadPool().execute(new Runnable() {
            @Override
            public void run() {
                try {
                    if (params.has("region") && (params.getString("region") != null) && (!params.getString("region").isEmpty()) ) {
                        // Param: region, Type: String
                        poisRequestBuilder.withRegion(stringStraightPass(params.getString("region")));
                    }
                    if (params.has("id") && (params.getString("id") != null) && (!params.getString("id").isEmpty()) ) {
                        // Param: id, Type: String
                        poisRequestBuilder.withId(stringStraightPass(params.getString("id")));
                    }
                    if (params.has("startPage") && (params.getString("startPage") != null) && (!params.getString("startPage").isEmpty()) ) {
                        // Param: startPage, Type: Integer
                        poisRequestBuilder.withStartPage(integerStraightPass(params.getInt("startPage")));
                    }
                    if (params.has("count") && (params.getString("count") != null) && (!params.getString("count").isEmpty()) ) {
                        // Param: count, Type: Integer
                        poisRequestBuilder.withCount(integerStraightPass(params.getInt("count")));
                    }
                    if (params.has("depth") && (params.getString("depth") != null) && (!params.getString("depth").isEmpty()) ) {
                        // Param: depth, Type: Integer
                        poisRequestBuilder.withDepth(integerStraightPass(params.getInt("depth")));
                    }
                    if (params.has("forbiddenId") && (params.getString("forbiddenId") != null) && (!params.getString("forbiddenId").isEmpty()) ) {
                        // Param: forbiddenId, Type: List
                        poisRequestBuilder.withForbiddenId(jsonArrayToStringList(params.getJSONArray("forbiddenId")));
                    }
                    if (params.has("forbiddenUris") && (params.getString("forbiddenUris") != null) && (!params.getString("forbiddenUris").isEmpty()) ) {
                        // Param: forbiddenUris, Type: List
                        poisRequestBuilder.withForbiddenUris(jsonArrayToStringList(params.getJSONArray("forbiddenUris")));
                    }
                    if (params.has("externalCode") && (params.getString("externalCode") != null) && (!params.getString("externalCode").isEmpty()) ) {
                        // Param: externalCode, Type: String
                        poisRequestBuilder.withExternalCode(stringStraightPass(params.getString("externalCode")));
                    }
                    if (params.has("headsign") && (params.getString("headsign") != null) && (!params.getString("headsign").isEmpty()) ) {
                        // Param: headsign, Type: String
                        poisRequestBuilder.withHeadsign(stringStraightPass(params.getString("headsign")));
                    }
                    if (params.has("showCodes") && (params.getString("showCodes") != null) && (!params.getString("showCodes").isEmpty()) ) {
                        // Param: showCodes, Type: Boolean
                        poisRequestBuilder.withShowCodes(booleanStraightPass(params.getBoolean("showCodes")));
                    }
                    if (params.has("odtLevel") && (params.getString("odtLevel") != null) && (!params.getString("odtLevel").isEmpty()) ) {
                        // Param: odtLevel, Type: String
                        poisRequestBuilder.withOdtLevel(stringStraightPass(params.getString("odtLevel")));
                    }
                    if (params.has("dataFreshness") && (params.getString("dataFreshness") != null) && (!params.getString("dataFreshness").isEmpty()) ) {
                        // Param: dataFreshness, Type: String
                        poisRequestBuilder.withDataFreshness(stringStraightPass(params.getString("dataFreshness")));
                    }
                    if (params.has("distance") && (params.getString("distance") != null) && (!params.getString("distance").isEmpty()) ) {
                        // Param: distance, Type: Integer
                        poisRequestBuilder.withDistance(integerStraightPass(params.getInt("distance")));
                    }
                    if (params.has("since") && (params.getString("since") != null) && (!params.getString("since").isEmpty()) ) {
                        // Param: since, Type: Date
                        poisRequestBuilder.withSince(stringToDateTime(params.getString("since")));
                    }
                    if (params.has("until") && (params.getString("until") != null) && (!params.getString("until").isEmpty()) ) {
                        // Param: until, Type: Date
                        poisRequestBuilder.withUntil(stringToDateTime(params.getString("until")));
                    }
                    if (params.has("disableGeojson") && (params.getString("disableGeojson") != null) && (!params.getString("disableGeojson").isEmpty()) ) {
                        // Param: disableGeojson, Type: Boolean
                        poisRequestBuilder.withDisableGeojson(booleanStraightPass(params.getBoolean("disableGeojson")));
                    }
                    if (params.has("disableDisruption") && (params.getString("disableDisruption") != null) && (!params.getString("disableDisruption").isEmpty()) ) {
                        // Param: disableDisruption, Type: Boolean
                        poisRequestBuilder.withDisableDisruption(booleanStraightPass(params.getBoolean("disableDisruption")));
                    }
                    if (params.has("tags") && (params.getString("tags") != null) && (!params.getString("tags").isEmpty()) ) {
                        // Param: tags, Type: List
                        poisRequestBuilder.withTags(jsonArrayToStringList(params.getJSONArray("tags")));
                    }
                    if (params.has("originalId") && (params.getString("originalId") != null) && (!params.getString("originalId").isEmpty()) ) {
                        // Param: originalId, Type: String
                        poisRequestBuilder.withOriginalId(stringStraightPass(params.getString("originalId")));
                    }
                    if (params.has("bssStands") && (params.getString("bssStands") != null) && (!params.getString("bssStands").isEmpty()) ) {
                        // Param: bssStands, Type: Boolean
                        poisRequestBuilder.withBssStands(booleanStraightPass(params.getBoolean("bssStands")));
                    }
                    if (params.has("addPoiInfos") && (params.getString("addPoiInfos") != null) && (!params.getString("addPoiInfos").isEmpty()) ) {
                        // Param: addPoiInfos, Type: List
                        poisRequestBuilder.withAddPoiInfos(jsonArrayToStringList(params.getJSONArray("addPoiInfos")));
                    }
                    
                    poisRequestBuilder.rawGet(new ApiCallback<String>() {
                        @Override
                        public void onFailure(ApiException e, int statusCode, Map<String, List<String>> responseHeaders) {
                            callbackContext.error("Problem during request call | " + e.getMessage());
                        }

                        @Override
                        public void onSuccess(String result, int statusCode, Map<String, List<String>> responseHeaders) {
                            JSONObject jsonObject = null;
                            try {
                                jsonObject = new JSONObject(result);
                                callbackContext.success(jsonObject);
                            } catch (Exception e) {
                                String errorMessage = "Problem during response parsing | " + String.valueOf(e.hashCode()) + ": " + e.getMessage();
                                callbackContext.error(errorMessage);
                            }
                        }

                        @Override
                        public void onUploadProgress(long bytesWritten, long contentLength, boolean done) {
                        }

                        @Override
                        public void onDownloadProgress(long bytesRead, long contentLength, boolean done) {
                        }
                    });
                } catch (Exception e) {
                    String errorMessage = "Problem during request building | " + String.valueOf(e.hashCode()) + ": " + e.getMessage();
                    callbackContext.error(errorMessage);
                }
            }
        });
    }
    final private void coverageRegionUriPois(final JSONObject params, final CallbackContext callbackContext) {
        if (this.navitiaSdk == null) {
            callbackContext.error("NavitiaSDK is not instanciated");
            return;
        }

        final PoisApi.CoverageRegionUriPoisRequestBuilder poisRequestBuilder = this.navitiaSdk.poisApi.newCoverageRegionUriPoisRequestBuilder();
        cordova.getThreadPool().execute(new Runnable() {
            @Override
            public void run() {
                try {
                    if (params.has("region") && (params.getString("region") != null) && (!params.getString("region").isEmpty()) ) {
                        // Param: region, Type: String
                        poisRequestBuilder.withRegion(stringStraightPass(params.getString("region")));
                    }
                    if (params.has("uri") && (params.getString("uri") != null) && (!params.getString("uri").isEmpty()) ) {
                        // Param: uri, Type: String
                        poisRequestBuilder.withUri(stringStraightPass(params.getString("uri")));
                    }
                    if (params.has("startPage") && (params.getString("startPage") != null) && (!params.getString("startPage").isEmpty()) ) {
                        // Param: startPage, Type: Integer
                        poisRequestBuilder.withStartPage(integerStraightPass(params.getInt("startPage")));
                    }
                    if (params.has("count") && (params.getString("count") != null) && (!params.getString("count").isEmpty()) ) {
                        // Param: count, Type: Integer
                        poisRequestBuilder.withCount(integerStraightPass(params.getInt("count")));
                    }
                    if (params.has("depth") && (params.getString("depth") != null) && (!params.getString("depth").isEmpty()) ) {
                        // Param: depth, Type: Integer
                        poisRequestBuilder.withDepth(integerStraightPass(params.getInt("depth")));
                    }
                    if (params.has("forbiddenId") && (params.getString("forbiddenId") != null) && (!params.getString("forbiddenId").isEmpty()) ) {
                        // Param: forbiddenId, Type: List
                        poisRequestBuilder.withForbiddenId(jsonArrayToStringList(params.getJSONArray("forbiddenId")));
                    }
                    if (params.has("forbiddenUris") && (params.getString("forbiddenUris") != null) && (!params.getString("forbiddenUris").isEmpty()) ) {
                        // Param: forbiddenUris, Type: List
                        poisRequestBuilder.withForbiddenUris(jsonArrayToStringList(params.getJSONArray("forbiddenUris")));
                    }
                    if (params.has("externalCode") && (params.getString("externalCode") != null) && (!params.getString("externalCode").isEmpty()) ) {
                        // Param: externalCode, Type: String
                        poisRequestBuilder.withExternalCode(stringStraightPass(params.getString("externalCode")));
                    }
                    if (params.has("headsign") && (params.getString("headsign") != null) && (!params.getString("headsign").isEmpty()) ) {
                        // Param: headsign, Type: String
                        poisRequestBuilder.withHeadsign(stringStraightPass(params.getString("headsign")));
                    }
                    if (params.has("showCodes") && (params.getString("showCodes") != null) && (!params.getString("showCodes").isEmpty()) ) {
                        // Param: showCodes, Type: Boolean
                        poisRequestBuilder.withShowCodes(booleanStraightPass(params.getBoolean("showCodes")));
                    }
                    if (params.has("odtLevel") && (params.getString("odtLevel") != null) && (!params.getString("odtLevel").isEmpty()) ) {
                        // Param: odtLevel, Type: String
                        poisRequestBuilder.withOdtLevel(stringStraightPass(params.getString("odtLevel")));
                    }
                    if (params.has("dataFreshness") && (params.getString("dataFreshness") != null) && (!params.getString("dataFreshness").isEmpty()) ) {
                        // Param: dataFreshness, Type: String
                        poisRequestBuilder.withDataFreshness(stringStraightPass(params.getString("dataFreshness")));
                    }
                    if (params.has("distance") && (params.getString("distance") != null) && (!params.getString("distance").isEmpty()) ) {
                        // Param: distance, Type: Integer
                        poisRequestBuilder.withDistance(integerStraightPass(params.getInt("distance")));
                    }
                    if (params.has("since") && (params.getString("since") != null) && (!params.getString("since").isEmpty()) ) {
                        // Param: since, Type: Date
                        poisRequestBuilder.withSince(stringToDateTime(params.getString("since")));
                    }
                    if (params.has("until") && (params.getString("until") != null) && (!params.getString("until").isEmpty()) ) {
                        // Param: until, Type: Date
                        poisRequestBuilder.withUntil(stringToDateTime(params.getString("until")));
                    }
                    if (params.has("disableGeojson") && (params.getString("disableGeojson") != null) && (!params.getString("disableGeojson").isEmpty()) ) {
                        // Param: disableGeojson, Type: Boolean
                        poisRequestBuilder.withDisableGeojson(booleanStraightPass(params.getBoolean("disableGeojson")));
                    }
                    if (params.has("disableDisruption") && (params.getString("disableDisruption") != null) && (!params.getString("disableDisruption").isEmpty()) ) {
                        // Param: disableDisruption, Type: Boolean
                        poisRequestBuilder.withDisableDisruption(booleanStraightPass(params.getBoolean("disableDisruption")));
                    }
                    if (params.has("filter") && (params.getString("filter") != null) && (!params.getString("filter").isEmpty()) ) {
                        // Param: filter, Type: String
                        poisRequestBuilder.withFilter(stringStraightPass(params.getString("filter")));
                    }
                    if (params.has("tags") && (params.getString("tags") != null) && (!params.getString("tags").isEmpty()) ) {
                        // Param: tags, Type: List
                        poisRequestBuilder.withTags(jsonArrayToStringList(params.getJSONArray("tags")));
                    }
                    if (params.has("originalId") && (params.getString("originalId") != null) && (!params.getString("originalId").isEmpty()) ) {
                        // Param: originalId, Type: String
                        poisRequestBuilder.withOriginalId(stringStraightPass(params.getString("originalId")));
                    }
                    if (params.has("bssStands") && (params.getString("bssStands") != null) && (!params.getString("bssStands").isEmpty()) ) {
                        // Param: bssStands, Type: Boolean
                        poisRequestBuilder.withBssStands(booleanStraightPass(params.getBoolean("bssStands")));
                    }
                    if (params.has("addPoiInfos") && (params.getString("addPoiInfos") != null) && (!params.getString("addPoiInfos").isEmpty()) ) {
                        // Param: addPoiInfos, Type: List
                        poisRequestBuilder.withAddPoiInfos(jsonArrayToStringList(params.getJSONArray("addPoiInfos")));
                    }
                    
                    poisRequestBuilder.rawGet(new ApiCallback<String>() {
                        @Override
                        public void onFailure(ApiException e, int statusCode, Map<String, List<String>> responseHeaders) {
                            callbackContext.error("Problem during request call | " + e.getMessage());
                        }

                        @Override
                        public void onSuccess(String result, int statusCode, Map<String, List<String>> responseHeaders) {
                            JSONObject jsonObject = null;
                            try {
                                jsonObject = new JSONObject(result);
                                callbackContext.success(jsonObject);
                            } catch (Exception e) {
                                String errorMessage = "Problem during response parsing | " + String.valueOf(e.hashCode()) + ": " + e.getMessage();
                                callbackContext.error(errorMessage);
                            }
                        }

                        @Override
                        public void onUploadProgress(long bytesWritten, long contentLength, boolean done) {
                        }

                        @Override
                        public void onDownloadProgress(long bytesRead, long contentLength, boolean done) {
                        }
                    });
                } catch (Exception e) {
                    String errorMessage = "Problem during request building | " + String.valueOf(e.hashCode()) + ": " + e.getMessage();
                    callbackContext.error(errorMessage);
                }
            }
        });
    }
    final private void coverageRegionUriPoisId(final JSONObject params, final CallbackContext callbackContext) {
        if (this.navitiaSdk == null) {
            callbackContext.error("NavitiaSDK is not instanciated");
            return;
        }

        final PoisApi.CoverageRegionUriPoisIdRequestBuilder poisRequestBuilder = this.navitiaSdk.poisApi.newCoverageRegionUriPoisIdRequestBuilder();
        cordova.getThreadPool().execute(new Runnable() {
            @Override
            public void run() {
                try {
                    if (params.has("region") && (params.getString("region") != null) && (!params.getString("region").isEmpty()) ) {
                        // Param: region, Type: String
                        poisRequestBuilder.withRegion(stringStraightPass(params.getString("region")));
                    }
                    if (params.has("uri") && (params.getString("uri") != null) && (!params.getString("uri").isEmpty()) ) {
                        // Param: uri, Type: String
                        poisRequestBuilder.withUri(stringStraightPass(params.getString("uri")));
                    }
                    if (params.has("id") && (params.getString("id") != null) && (!params.getString("id").isEmpty()) ) {
                        // Param: id, Type: String
                        poisRequestBuilder.withId(stringStraightPass(params.getString("id")));
                    }
                    if (params.has("startPage") && (params.getString("startPage") != null) && (!params.getString("startPage").isEmpty()) ) {
                        // Param: startPage, Type: Integer
                        poisRequestBuilder.withStartPage(integerStraightPass(params.getInt("startPage")));
                    }
                    if (params.has("count") && (params.getString("count") != null) && (!params.getString("count").isEmpty()) ) {
                        // Param: count, Type: Integer
                        poisRequestBuilder.withCount(integerStraightPass(params.getInt("count")));
                    }
                    if (params.has("depth") && (params.getString("depth") != null) && (!params.getString("depth").isEmpty()) ) {
                        // Param: depth, Type: Integer
                        poisRequestBuilder.withDepth(integerStraightPass(params.getInt("depth")));
                    }
                    if (params.has("forbiddenId") && (params.getString("forbiddenId") != null) && (!params.getString("forbiddenId").isEmpty()) ) {
                        // Param: forbiddenId, Type: List
                        poisRequestBuilder.withForbiddenId(jsonArrayToStringList(params.getJSONArray("forbiddenId")));
                    }
                    if (params.has("forbiddenUris") && (params.getString("forbiddenUris") != null) && (!params.getString("forbiddenUris").isEmpty()) ) {
                        // Param: forbiddenUris, Type: List
                        poisRequestBuilder.withForbiddenUris(jsonArrayToStringList(params.getJSONArray("forbiddenUris")));
                    }
                    if (params.has("externalCode") && (params.getString("externalCode") != null) && (!params.getString("externalCode").isEmpty()) ) {
                        // Param: externalCode, Type: String
                        poisRequestBuilder.withExternalCode(stringStraightPass(params.getString("externalCode")));
                    }
                    if (params.has("headsign") && (params.getString("headsign") != null) && (!params.getString("headsign").isEmpty()) ) {
                        // Param: headsign, Type: String
                        poisRequestBuilder.withHeadsign(stringStraightPass(params.getString("headsign")));
                    }
                    if (params.has("showCodes") && (params.getString("showCodes") != null) && (!params.getString("showCodes").isEmpty()) ) {
                        // Param: showCodes, Type: Boolean
                        poisRequestBuilder.withShowCodes(booleanStraightPass(params.getBoolean("showCodes")));
                    }
                    if (params.has("odtLevel") && (params.getString("odtLevel") != null) && (!params.getString("odtLevel").isEmpty()) ) {
                        // Param: odtLevel, Type: String
                        poisRequestBuilder.withOdtLevel(stringStraightPass(params.getString("odtLevel")));
                    }
                    if (params.has("dataFreshness") && (params.getString("dataFreshness") != null) && (!params.getString("dataFreshness").isEmpty()) ) {
                        // Param: dataFreshness, Type: String
                        poisRequestBuilder.withDataFreshness(stringStraightPass(params.getString("dataFreshness")));
                    }
                    if (params.has("distance") && (params.getString("distance") != null) && (!params.getString("distance").isEmpty()) ) {
                        // Param: distance, Type: Integer
                        poisRequestBuilder.withDistance(integerStraightPass(params.getInt("distance")));
                    }
                    if (params.has("since") && (params.getString("since") != null) && (!params.getString("since").isEmpty()) ) {
                        // Param: since, Type: Date
                        poisRequestBuilder.withSince(stringToDateTime(params.getString("since")));
                    }
                    if (params.has("until") && (params.getString("until") != null) && (!params.getString("until").isEmpty()) ) {
                        // Param: until, Type: Date
                        poisRequestBuilder.withUntil(stringToDateTime(params.getString("until")));
                    }
                    if (params.has("disableGeojson") && (params.getString("disableGeojson") != null) && (!params.getString("disableGeojson").isEmpty()) ) {
                        // Param: disableGeojson, Type: Boolean
                        poisRequestBuilder.withDisableGeojson(booleanStraightPass(params.getBoolean("disableGeojson")));
                    }
                    if (params.has("disableDisruption") && (params.getString("disableDisruption") != null) && (!params.getString("disableDisruption").isEmpty()) ) {
                        // Param: disableDisruption, Type: Boolean
                        poisRequestBuilder.withDisableDisruption(booleanStraightPass(params.getBoolean("disableDisruption")));
                    }
                    if (params.has("tags") && (params.getString("tags") != null) && (!params.getString("tags").isEmpty()) ) {
                        // Param: tags, Type: List
                        poisRequestBuilder.withTags(jsonArrayToStringList(params.getJSONArray("tags")));
                    }
                    if (params.has("originalId") && (params.getString("originalId") != null) && (!params.getString("originalId").isEmpty()) ) {
                        // Param: originalId, Type: String
                        poisRequestBuilder.withOriginalId(stringStraightPass(params.getString("originalId")));
                    }
                    if (params.has("bssStands") && (params.getString("bssStands") != null) && (!params.getString("bssStands").isEmpty()) ) {
                        // Param: bssStands, Type: Boolean
                        poisRequestBuilder.withBssStands(booleanStraightPass(params.getBoolean("bssStands")));
                    }
                    if (params.has("addPoiInfos") && (params.getString("addPoiInfos") != null) && (!params.getString("addPoiInfos").isEmpty()) ) {
                        // Param: addPoiInfos, Type: List
                        poisRequestBuilder.withAddPoiInfos(jsonArrayToStringList(params.getJSONArray("addPoiInfos")));
                    }
                    
                    poisRequestBuilder.rawGet(new ApiCallback<String>() {
                        @Override
                        public void onFailure(ApiException e, int statusCode, Map<String, List<String>> responseHeaders) {
                            callbackContext.error("Problem during request call | " + e.getMessage());
                        }

                        @Override
                        public void onSuccess(String result, int statusCode, Map<String, List<String>> responseHeaders) {
                            JSONObject jsonObject = null;
                            try {
                                jsonObject = new JSONObject(result);
                                callbackContext.success(jsonObject);
                            } catch (Exception e) {
                                String errorMessage = "Problem during response parsing | " + String.valueOf(e.hashCode()) + ": " + e.getMessage();
                                callbackContext.error(errorMessage);
                            }
                        }

                        @Override
                        public void onUploadProgress(long bytesWritten, long contentLength, boolean done) {
                        }

                        @Override
                        public void onDownloadProgress(long bytesRead, long contentLength, boolean done) {
                        }
                    });
                } catch (Exception e) {
                    String errorMessage = "Problem during request building | " + String.valueOf(e.hashCode()) + ": " + e.getMessage();
                    callbackContext.error(errorMessage);
                }
            }
        });
    }
    final private void coverageLonLatPtObjects(final JSONObject params, final CallbackContext callbackContext) {
        if (this.navitiaSdk == null) {
            callbackContext.error("NavitiaSDK is not instanciated");
            return;
        }

        final PtobjectsApi.CoverageLonLatPtObjectsRequestBuilder ptobjectsRequestBuilder = this.navitiaSdk.ptobjectsApi.newCoverageLonLatPtObjectsRequestBuilder();
        cordova.getThreadPool().execute(new Runnable() {
            @Override
            public void run() {
                try {
                    if (params.has("q") && (params.getString("q") != null) && (!params.getString("q").isEmpty()) ) {
                        // Param: q, Type: String
                        ptobjectsRequestBuilder.withQ(stringStraightPass(params.getString("q")));
                    }
                    if (params.has("lat") && (params.getString("lat") != null) && (!params.getString("lat").isEmpty()) ) {
                        // Param: lat, Type: BigDecimal
                        ptobjectsRequestBuilder.withLat(longToBigDecimal(params.getLong("lat")));
                    }
                    if (params.has("lon") && (params.getString("lon") != null) && (!params.getString("lon").isEmpty()) ) {
                        // Param: lon, Type: BigDecimal
                        ptobjectsRequestBuilder.withLon(longToBigDecimal(params.getLong("lon")));
                    }
                    if (params.has("type") && (params.getString("type") != null) && (!params.getString("type").isEmpty()) ) {
                        // Param: type, Type: List
                        ptobjectsRequestBuilder.withType(jsonArrayToStringList(params.getJSONArray("type")));
                    }
                    if (params.has("count") && (params.getString("count") != null) && (!params.getString("count").isEmpty()) ) {
                        // Param: count, Type: Integer
                        ptobjectsRequestBuilder.withCount(integerStraightPass(params.getInt("count")));
                    }
                    if (params.has("adminUri") && (params.getString("adminUri") != null) && (!params.getString("adminUri").isEmpty()) ) {
                        // Param: adminUri, Type: List
                        ptobjectsRequestBuilder.withAdminUri(jsonArrayToStringList(params.getJSONArray("adminUri")));
                    }
                    if (params.has("depth") && (params.getString("depth") != null) && (!params.getString("depth").isEmpty()) ) {
                        // Param: depth, Type: Integer
                        ptobjectsRequestBuilder.withDepth(integerStraightPass(params.getInt("depth")));
                    }
                    if (params.has("disableGeojson") && (params.getString("disableGeojson") != null) && (!params.getString("disableGeojson").isEmpty()) ) {
                        // Param: disableGeojson, Type: Boolean
                        ptobjectsRequestBuilder.withDisableGeojson(booleanStraightPass(params.getBoolean("disableGeojson")));
                    }
                    if (params.has("disableDisruption") && (params.getString("disableDisruption") != null) && (!params.getString("disableDisruption").isEmpty()) ) {
                        // Param: disableDisruption, Type: Boolean
                        ptobjectsRequestBuilder.withDisableDisruption(booleanStraightPass(params.getBoolean("disableDisruption")));
                    }
                    if (params.has("filter") && (params.getString("filter") != null) && (!params.getString("filter").isEmpty()) ) {
                        // Param: filter, Type: String
                        ptobjectsRequestBuilder.withFilter(stringStraightPass(params.getString("filter")));
                    }
                    
                    ptobjectsRequestBuilder.rawGet(new ApiCallback<String>() {
                        @Override
                        public void onFailure(ApiException e, int statusCode, Map<String, List<String>> responseHeaders) {
                            callbackContext.error("Problem during request call | " + e.getMessage());
                        }

                        @Override
                        public void onSuccess(String result, int statusCode, Map<String, List<String>> responseHeaders) {
                            JSONObject jsonObject = null;
                            try {
                                jsonObject = new JSONObject(result);
                                callbackContext.success(jsonObject);
                            } catch (Exception e) {
                                String errorMessage = "Problem during response parsing | " + String.valueOf(e.hashCode()) + ": " + e.getMessage();
                                callbackContext.error(errorMessage);
                            }
                        }

                        @Override
                        public void onUploadProgress(long bytesWritten, long contentLength, boolean done) {
                        }

                        @Override
                        public void onDownloadProgress(long bytesRead, long contentLength, boolean done) {
                        }
                    });
                } catch (Exception e) {
                    String errorMessage = "Problem during request building | " + String.valueOf(e.hashCode()) + ": " + e.getMessage();
                    callbackContext.error(errorMessage);
                }
            }
        });
    }
    final private void coverageRegionPtObjects(final JSONObject params, final CallbackContext callbackContext) {
        if (this.navitiaSdk == null) {
            callbackContext.error("NavitiaSDK is not instanciated");
            return;
        }

        final PtobjectsApi.CoverageRegionPtObjectsRequestBuilder ptobjectsRequestBuilder = this.navitiaSdk.ptobjectsApi.newCoverageRegionPtObjectsRequestBuilder();
        cordova.getThreadPool().execute(new Runnable() {
            @Override
            public void run() {
                try {
                    if (params.has("q") && (params.getString("q") != null) && (!params.getString("q").isEmpty()) ) {
                        // Param: q, Type: String
                        ptobjectsRequestBuilder.withQ(stringStraightPass(params.getString("q")));
                    }
                    if (params.has("region") && (params.getString("region") != null) && (!params.getString("region").isEmpty()) ) {
                        // Param: region, Type: String
                        ptobjectsRequestBuilder.withRegion(stringStraightPass(params.getString("region")));
                    }
                    if (params.has("type") && (params.getString("type") != null) && (!params.getString("type").isEmpty()) ) {
                        // Param: type, Type: List
                        ptobjectsRequestBuilder.withType(jsonArrayToStringList(params.getJSONArray("type")));
                    }
                    if (params.has("count") && (params.getString("count") != null) && (!params.getString("count").isEmpty()) ) {
                        // Param: count, Type: Integer
                        ptobjectsRequestBuilder.withCount(integerStraightPass(params.getInt("count")));
                    }
                    if (params.has("adminUri") && (params.getString("adminUri") != null) && (!params.getString("adminUri").isEmpty()) ) {
                        // Param: adminUri, Type: List
                        ptobjectsRequestBuilder.withAdminUri(jsonArrayToStringList(params.getJSONArray("adminUri")));
                    }
                    if (params.has("depth") && (params.getString("depth") != null) && (!params.getString("depth").isEmpty()) ) {
                        // Param: depth, Type: Integer
                        ptobjectsRequestBuilder.withDepth(integerStraightPass(params.getInt("depth")));
                    }
                    if (params.has("disableGeojson") && (params.getString("disableGeojson") != null) && (!params.getString("disableGeojson").isEmpty()) ) {
                        // Param: disableGeojson, Type: Boolean
                        ptobjectsRequestBuilder.withDisableGeojson(booleanStraightPass(params.getBoolean("disableGeojson")));
                    }
                    if (params.has("disableDisruption") && (params.getString("disableDisruption") != null) && (!params.getString("disableDisruption").isEmpty()) ) {
                        // Param: disableDisruption, Type: Boolean
                        ptobjectsRequestBuilder.withDisableDisruption(booleanStraightPass(params.getBoolean("disableDisruption")));
                    }
                    if (params.has("filter") && (params.getString("filter") != null) && (!params.getString("filter").isEmpty()) ) {
                        // Param: filter, Type: String
                        ptobjectsRequestBuilder.withFilter(stringStraightPass(params.getString("filter")));
                    }
                    
                    ptobjectsRequestBuilder.rawGet(new ApiCallback<String>() {
                        @Override
                        public void onFailure(ApiException e, int statusCode, Map<String, List<String>> responseHeaders) {
                            callbackContext.error("Problem during request call | " + e.getMessage());
                        }

                        @Override
                        public void onSuccess(String result, int statusCode, Map<String, List<String>> responseHeaders) {
                            JSONObject jsonObject = null;
                            try {
                                jsonObject = new JSONObject(result);
                                callbackContext.success(jsonObject);
                            } catch (Exception e) {
                                String errorMessage = "Problem during response parsing | " + String.valueOf(e.hashCode()) + ": " + e.getMessage();
                                callbackContext.error(errorMessage);
                            }
                        }

                        @Override
                        public void onUploadProgress(long bytesWritten, long contentLength, boolean done) {
                        }

                        @Override
                        public void onDownloadProgress(long bytesRead, long contentLength, boolean done) {
                        }
                    });
                } catch (Exception e) {
                    String errorMessage = "Problem during request building | " + String.valueOf(e.hashCode()) + ": " + e.getMessage();
                    callbackContext.error(errorMessage);
                }
            }
        });
    }
    final private void coverageLonLatUriRouteSchedules(final JSONObject params, final CallbackContext callbackContext) {
        if (this.navitiaSdk == null) {
            callbackContext.error("NavitiaSDK is not instanciated");
            return;
        }

        final RouteSchedulesApi.CoverageLonLatUriRouteSchedulesRequestBuilder routeSchedulesRequestBuilder = this.navitiaSdk.routeSchedulesApi.newCoverageLonLatUriRouteSchedulesRequestBuilder();
        cordova.getThreadPool().execute(new Runnable() {
            @Override
            public void run() {
                try {
                    if (params.has("lat") && (params.getString("lat") != null) && (!params.getString("lat").isEmpty()) ) {
                        // Param: lat, Type: BigDecimal
                        routeSchedulesRequestBuilder.withLat(longToBigDecimal(params.getLong("lat")));
                    }
                    if (params.has("lon") && (params.getString("lon") != null) && (!params.getString("lon").isEmpty()) ) {
                        // Param: lon, Type: BigDecimal
                        routeSchedulesRequestBuilder.withLon(longToBigDecimal(params.getLong("lon")));
                    }
                    if (params.has("uri") && (params.getString("uri") != null) && (!params.getString("uri").isEmpty()) ) {
                        // Param: uri, Type: String
                        routeSchedulesRequestBuilder.withUri(stringStraightPass(params.getString("uri")));
                    }
                    if (params.has("filter") && (params.getString("filter") != null) && (!params.getString("filter").isEmpty()) ) {
                        // Param: filter, Type: String
                        routeSchedulesRequestBuilder.withFilter(stringStraightPass(params.getString("filter")));
                    }
                    if (params.has("fromDatetime") && (params.getString("fromDatetime") != null) && (!params.getString("fromDatetime").isEmpty()) ) {
                        // Param: fromDatetime, Type: Date
                        routeSchedulesRequestBuilder.withFromDatetime(stringToDateTime(params.getString("fromDatetime")));
                    }
                    if (params.has("untilDatetime") && (params.getString("untilDatetime") != null) && (!params.getString("untilDatetime").isEmpty()) ) {
                        // Param: untilDatetime, Type: Date
                        routeSchedulesRequestBuilder.withUntilDatetime(stringToDateTime(params.getString("untilDatetime")));
                    }
                    if (params.has("duration") && (params.getString("duration") != null) && (!params.getString("duration").isEmpty()) ) {
                        // Param: duration, Type: Integer
                        routeSchedulesRequestBuilder.withDuration(integerStraightPass(params.getInt("duration")));
                    }
                    if (params.has("depth") && (params.getString("depth") != null) && (!params.getString("depth").isEmpty()) ) {
                        // Param: depth, Type: Integer
                        routeSchedulesRequestBuilder.withDepth(integerStraightPass(params.getInt("depth")));
                    }
                    if (params.has("count") && (params.getString("count") != null) && (!params.getString("count").isEmpty()) ) {
                        // Param: count, Type: Integer
                        routeSchedulesRequestBuilder.withCount(integerStraightPass(params.getInt("count")));
                    }
                    if (params.has("startPage") && (params.getString("startPage") != null) && (!params.getString("startPage").isEmpty()) ) {
                        // Param: startPage, Type: Integer
                        routeSchedulesRequestBuilder.withStartPage(integerStraightPass(params.getInt("startPage")));
                    }
                    if (params.has("maxDateTimes") && (params.getString("maxDateTimes") != null) && (!params.getString("maxDateTimes").isEmpty()) ) {
                        // Param: maxDateTimes, Type: Integer
                        routeSchedulesRequestBuilder.withMaxDateTimes(integerStraightPass(params.getInt("maxDateTimes")));
                    }
                    if (params.has("forbiddenId") && (params.getString("forbiddenId") != null) && (!params.getString("forbiddenId").isEmpty()) ) {
                        // Param: forbiddenId, Type: List
                        routeSchedulesRequestBuilder.withForbiddenId(jsonArrayToStringList(params.getJSONArray("forbiddenId")));
                    }
                    if (params.has("forbiddenUris") && (params.getString("forbiddenUris") != null) && (!params.getString("forbiddenUris").isEmpty()) ) {
                        // Param: forbiddenUris, Type: List
                        routeSchedulesRequestBuilder.withForbiddenUris(jsonArrayToStringList(params.getJSONArray("forbiddenUris")));
                    }
                    if (params.has("calendar") && (params.getString("calendar") != null) && (!params.getString("calendar").isEmpty()) ) {
                        // Param: calendar, Type: String
                        routeSchedulesRequestBuilder.withCalendar(stringStraightPass(params.getString("calendar")));
                    }
                    if (params.has("distance") && (params.getString("distance") != null) && (!params.getString("distance").isEmpty()) ) {
                        // Param: distance, Type: Integer
                        routeSchedulesRequestBuilder.withDistance(integerStraightPass(params.getInt("distance")));
                    }
                    if (params.has("showCodes") && (params.getString("showCodes") != null) && (!params.getString("showCodes").isEmpty()) ) {
                        // Param: showCodes, Type: Boolean
                        routeSchedulesRequestBuilder.withShowCodes(booleanStraightPass(params.getBoolean("showCodes")));
                    }
                    if (params.has("dataFreshness") && (params.getString("dataFreshness") != null) && (!params.getString("dataFreshness").isEmpty()) ) {
                        // Param: dataFreshness, Type: String
                        routeSchedulesRequestBuilder.withDataFreshness(stringStraightPass(params.getString("dataFreshness")));
                    }
                    if (params.has("itemsPerSchedule") && (params.getString("itemsPerSchedule") != null) && (!params.getString("itemsPerSchedule").isEmpty()) ) {
                        // Param: itemsPerSchedule, Type: Integer
                        routeSchedulesRequestBuilder.withItemsPerSchedule(integerStraightPass(params.getInt("itemsPerSchedule")));
                    }
                    if (params.has("disableGeojson") && (params.getString("disableGeojson") != null) && (!params.getString("disableGeojson").isEmpty()) ) {
                        // Param: disableGeojson, Type: Boolean
                        routeSchedulesRequestBuilder.withDisableGeojson(booleanStraightPass(params.getBoolean("disableGeojson")));
                    }
                    if (params.has("directionType") && (params.getString("directionType") != null) && (!params.getString("directionType").isEmpty()) ) {
                        // Param: directionType, Type: String
                        routeSchedulesRequestBuilder.withDirectionType(stringStraightPass(params.getString("directionType")));
                    }
                    
                    routeSchedulesRequestBuilder.rawGet(new ApiCallback<String>() {
                        @Override
                        public void onFailure(ApiException e, int statusCode, Map<String, List<String>> responseHeaders) {
                            callbackContext.error("Problem during request call | " + e.getMessage());
                        }

                        @Override
                        public void onSuccess(String result, int statusCode, Map<String, List<String>> responseHeaders) {
                            JSONObject jsonObject = null;
                            try {
                                jsonObject = new JSONObject(result);
                                callbackContext.success(jsonObject);
                            } catch (Exception e) {
                                String errorMessage = "Problem during response parsing | " + String.valueOf(e.hashCode()) + ": " + e.getMessage();
                                callbackContext.error(errorMessage);
                            }
                        }

                        @Override
                        public void onUploadProgress(long bytesWritten, long contentLength, boolean done) {
                        }

                        @Override
                        public void onDownloadProgress(long bytesRead, long contentLength, boolean done) {
                        }
                    });
                } catch (Exception e) {
                    String errorMessage = "Problem during request building | " + String.valueOf(e.hashCode()) + ": " + e.getMessage();
                    callbackContext.error(errorMessage);
                }
            }
        });
    }
    final private void coverageRegionUriRouteSchedules(final JSONObject params, final CallbackContext callbackContext) {
        if (this.navitiaSdk == null) {
            callbackContext.error("NavitiaSDK is not instanciated");
            return;
        }

        final RouteSchedulesApi.CoverageRegionUriRouteSchedulesRequestBuilder routeSchedulesRequestBuilder = this.navitiaSdk.routeSchedulesApi.newCoverageRegionUriRouteSchedulesRequestBuilder();
        cordova.getThreadPool().execute(new Runnable() {
            @Override
            public void run() {
                try {
                    if (params.has("region") && (params.getString("region") != null) && (!params.getString("region").isEmpty()) ) {
                        // Param: region, Type: String
                        routeSchedulesRequestBuilder.withRegion(stringStraightPass(params.getString("region")));
                    }
                    if (params.has("uri") && (params.getString("uri") != null) && (!params.getString("uri").isEmpty()) ) {
                        // Param: uri, Type: String
                        routeSchedulesRequestBuilder.withUri(stringStraightPass(params.getString("uri")));
                    }
                    if (params.has("filter") && (params.getString("filter") != null) && (!params.getString("filter").isEmpty()) ) {
                        // Param: filter, Type: String
                        routeSchedulesRequestBuilder.withFilter(stringStraightPass(params.getString("filter")));
                    }
                    if (params.has("fromDatetime") && (params.getString("fromDatetime") != null) && (!params.getString("fromDatetime").isEmpty()) ) {
                        // Param: fromDatetime, Type: Date
                        routeSchedulesRequestBuilder.withFromDatetime(stringToDateTime(params.getString("fromDatetime")));
                    }
                    if (params.has("untilDatetime") && (params.getString("untilDatetime") != null) && (!params.getString("untilDatetime").isEmpty()) ) {
                        // Param: untilDatetime, Type: Date
                        routeSchedulesRequestBuilder.withUntilDatetime(stringToDateTime(params.getString("untilDatetime")));
                    }
                    if (params.has("duration") && (params.getString("duration") != null) && (!params.getString("duration").isEmpty()) ) {
                        // Param: duration, Type: Integer
                        routeSchedulesRequestBuilder.withDuration(integerStraightPass(params.getInt("duration")));
                    }
                    if (params.has("depth") && (params.getString("depth") != null) && (!params.getString("depth").isEmpty()) ) {
                        // Param: depth, Type: Integer
                        routeSchedulesRequestBuilder.withDepth(integerStraightPass(params.getInt("depth")));
                    }
                    if (params.has("count") && (params.getString("count") != null) && (!params.getString("count").isEmpty()) ) {
                        // Param: count, Type: Integer
                        routeSchedulesRequestBuilder.withCount(integerStraightPass(params.getInt("count")));
                    }
                    if (params.has("startPage") && (params.getString("startPage") != null) && (!params.getString("startPage").isEmpty()) ) {
                        // Param: startPage, Type: Integer
                        routeSchedulesRequestBuilder.withStartPage(integerStraightPass(params.getInt("startPage")));
                    }
                    if (params.has("maxDateTimes") && (params.getString("maxDateTimes") != null) && (!params.getString("maxDateTimes").isEmpty()) ) {
                        // Param: maxDateTimes, Type: Integer
                        routeSchedulesRequestBuilder.withMaxDateTimes(integerStraightPass(params.getInt("maxDateTimes")));
                    }
                    if (params.has("forbiddenId") && (params.getString("forbiddenId") != null) && (!params.getString("forbiddenId").isEmpty()) ) {
                        // Param: forbiddenId, Type: List
                        routeSchedulesRequestBuilder.withForbiddenId(jsonArrayToStringList(params.getJSONArray("forbiddenId")));
                    }
                    if (params.has("forbiddenUris") && (params.getString("forbiddenUris") != null) && (!params.getString("forbiddenUris").isEmpty()) ) {
                        // Param: forbiddenUris, Type: List
                        routeSchedulesRequestBuilder.withForbiddenUris(jsonArrayToStringList(params.getJSONArray("forbiddenUris")));
                    }
                    if (params.has("calendar") && (params.getString("calendar") != null) && (!params.getString("calendar").isEmpty()) ) {
                        // Param: calendar, Type: String
                        routeSchedulesRequestBuilder.withCalendar(stringStraightPass(params.getString("calendar")));
                    }
                    if (params.has("distance") && (params.getString("distance") != null) && (!params.getString("distance").isEmpty()) ) {
                        // Param: distance, Type: Integer
                        routeSchedulesRequestBuilder.withDistance(integerStraightPass(params.getInt("distance")));
                    }
                    if (params.has("showCodes") && (params.getString("showCodes") != null) && (!params.getString("showCodes").isEmpty()) ) {
                        // Param: showCodes, Type: Boolean
                        routeSchedulesRequestBuilder.withShowCodes(booleanStraightPass(params.getBoolean("showCodes")));
                    }
                    if (params.has("dataFreshness") && (params.getString("dataFreshness") != null) && (!params.getString("dataFreshness").isEmpty()) ) {
                        // Param: dataFreshness, Type: String
                        routeSchedulesRequestBuilder.withDataFreshness(stringStraightPass(params.getString("dataFreshness")));
                    }
                    if (params.has("itemsPerSchedule") && (params.getString("itemsPerSchedule") != null) && (!params.getString("itemsPerSchedule").isEmpty()) ) {
                        // Param: itemsPerSchedule, Type: Integer
                        routeSchedulesRequestBuilder.withItemsPerSchedule(integerStraightPass(params.getInt("itemsPerSchedule")));
                    }
                    if (params.has("disableGeojson") && (params.getString("disableGeojson") != null) && (!params.getString("disableGeojson").isEmpty()) ) {
                        // Param: disableGeojson, Type: Boolean
                        routeSchedulesRequestBuilder.withDisableGeojson(booleanStraightPass(params.getBoolean("disableGeojson")));
                    }
                    if (params.has("directionType") && (params.getString("directionType") != null) && (!params.getString("directionType").isEmpty()) ) {
                        // Param: directionType, Type: String
                        routeSchedulesRequestBuilder.withDirectionType(stringStraightPass(params.getString("directionType")));
                    }
                    
                    routeSchedulesRequestBuilder.rawGet(new ApiCallback<String>() {
                        @Override
                        public void onFailure(ApiException e, int statusCode, Map<String, List<String>> responseHeaders) {
                            callbackContext.error("Problem during request call | " + e.getMessage());
                        }

                        @Override
                        public void onSuccess(String result, int statusCode, Map<String, List<String>> responseHeaders) {
                            JSONObject jsonObject = null;
                            try {
                                jsonObject = new JSONObject(result);
                                callbackContext.success(jsonObject);
                            } catch (Exception e) {
                                String errorMessage = "Problem during response parsing | " + String.valueOf(e.hashCode()) + ": " + e.getMessage();
                                callbackContext.error(errorMessage);
                            }
                        }

                        @Override
                        public void onUploadProgress(long bytesWritten, long contentLength, boolean done) {
                        }

                        @Override
                        public void onDownloadProgress(long bytesRead, long contentLength, boolean done) {
                        }
                    });
                } catch (Exception e) {
                    String errorMessage = "Problem during request building | " + String.valueOf(e.hashCode()) + ": " + e.getMessage();
                    callbackContext.error(errorMessage);
                }
            }
        });
    }
    final private void routeSchedules(final JSONObject params, final CallbackContext callbackContext) {
        if (this.navitiaSdk == null) {
            callbackContext.error("NavitiaSDK is not instanciated");
            return;
        }

        final RouteSchedulesApi.RouteSchedulesRequestBuilder routeSchedulesRequestBuilder = this.navitiaSdk.routeSchedulesApi.newRouteSchedulesRequestBuilder();
        cordova.getThreadPool().execute(new Runnable() {
            @Override
            public void run() {
                try {
                    if (params.has("filter") && (params.getString("filter") != null) && (!params.getString("filter").isEmpty()) ) {
                        // Param: filter, Type: String
                        routeSchedulesRequestBuilder.withFilter(stringStraightPass(params.getString("filter")));
                    }
                    if (params.has("fromDatetime") && (params.getString("fromDatetime") != null) && (!params.getString("fromDatetime").isEmpty()) ) {
                        // Param: fromDatetime, Type: Date
                        routeSchedulesRequestBuilder.withFromDatetime(stringToDateTime(params.getString("fromDatetime")));
                    }
                    if (params.has("untilDatetime") && (params.getString("untilDatetime") != null) && (!params.getString("untilDatetime").isEmpty()) ) {
                        // Param: untilDatetime, Type: Date
                        routeSchedulesRequestBuilder.withUntilDatetime(stringToDateTime(params.getString("untilDatetime")));
                    }
                    if (params.has("duration") && (params.getString("duration") != null) && (!params.getString("duration").isEmpty()) ) {
                        // Param: duration, Type: Integer
                        routeSchedulesRequestBuilder.withDuration(integerStraightPass(params.getInt("duration")));
                    }
                    if (params.has("depth") && (params.getString("depth") != null) && (!params.getString("depth").isEmpty()) ) {
                        // Param: depth, Type: Integer
                        routeSchedulesRequestBuilder.withDepth(integerStraightPass(params.getInt("depth")));
                    }
                    if (params.has("count") && (params.getString("count") != null) && (!params.getString("count").isEmpty()) ) {
                        // Param: count, Type: Integer
                        routeSchedulesRequestBuilder.withCount(integerStraightPass(params.getInt("count")));
                    }
                    if (params.has("startPage") && (params.getString("startPage") != null) && (!params.getString("startPage").isEmpty()) ) {
                        // Param: startPage, Type: Integer
                        routeSchedulesRequestBuilder.withStartPage(integerStraightPass(params.getInt("startPage")));
                    }
                    if (params.has("maxDateTimes") && (params.getString("maxDateTimes") != null) && (!params.getString("maxDateTimes").isEmpty()) ) {
                        // Param: maxDateTimes, Type: Integer
                        routeSchedulesRequestBuilder.withMaxDateTimes(integerStraightPass(params.getInt("maxDateTimes")));
                    }
                    if (params.has("forbiddenId") && (params.getString("forbiddenId") != null) && (!params.getString("forbiddenId").isEmpty()) ) {
                        // Param: forbiddenId, Type: List
                        routeSchedulesRequestBuilder.withForbiddenId(jsonArrayToStringList(params.getJSONArray("forbiddenId")));
                    }
                    if (params.has("forbiddenUris") && (params.getString("forbiddenUris") != null) && (!params.getString("forbiddenUris").isEmpty()) ) {
                        // Param: forbiddenUris, Type: List
                        routeSchedulesRequestBuilder.withForbiddenUris(jsonArrayToStringList(params.getJSONArray("forbiddenUris")));
                    }
                    if (params.has("calendar") && (params.getString("calendar") != null) && (!params.getString("calendar").isEmpty()) ) {
                        // Param: calendar, Type: String
                        routeSchedulesRequestBuilder.withCalendar(stringStraightPass(params.getString("calendar")));
                    }
                    if (params.has("distance") && (params.getString("distance") != null) && (!params.getString("distance").isEmpty()) ) {
                        // Param: distance, Type: Integer
                        routeSchedulesRequestBuilder.withDistance(integerStraightPass(params.getInt("distance")));
                    }
                    if (params.has("showCodes") && (params.getString("showCodes") != null) && (!params.getString("showCodes").isEmpty()) ) {
                        // Param: showCodes, Type: Boolean
                        routeSchedulesRequestBuilder.withShowCodes(booleanStraightPass(params.getBoolean("showCodes")));
                    }
                    if (params.has("dataFreshness") && (params.getString("dataFreshness") != null) && (!params.getString("dataFreshness").isEmpty()) ) {
                        // Param: dataFreshness, Type: String
                        routeSchedulesRequestBuilder.withDataFreshness(stringStraightPass(params.getString("dataFreshness")));
                    }
                    if (params.has("itemsPerSchedule") && (params.getString("itemsPerSchedule") != null) && (!params.getString("itemsPerSchedule").isEmpty()) ) {
                        // Param: itemsPerSchedule, Type: Integer
                        routeSchedulesRequestBuilder.withItemsPerSchedule(integerStraightPass(params.getInt("itemsPerSchedule")));
                    }
                    if (params.has("disableGeojson") && (params.getString("disableGeojson") != null) && (!params.getString("disableGeojson").isEmpty()) ) {
                        // Param: disableGeojson, Type: Boolean
                        routeSchedulesRequestBuilder.withDisableGeojson(booleanStraightPass(params.getBoolean("disableGeojson")));
                    }
                    if (params.has("directionType") && (params.getString("directionType") != null) && (!params.getString("directionType").isEmpty()) ) {
                        // Param: directionType, Type: String
                        routeSchedulesRequestBuilder.withDirectionType(stringStraightPass(params.getString("directionType")));
                    }
                    
                    routeSchedulesRequestBuilder.rawGet(new ApiCallback<String>() {
                        @Override
                        public void onFailure(ApiException e, int statusCode, Map<String, List<String>> responseHeaders) {
                            callbackContext.error("Problem during request call | " + e.getMessage());
                        }

                        @Override
                        public void onSuccess(String result, int statusCode, Map<String, List<String>> responseHeaders) {
                            JSONObject jsonObject = null;
                            try {
                                jsonObject = new JSONObject(result);
                                callbackContext.success(jsonObject);
                            } catch (Exception e) {
                                String errorMessage = "Problem during response parsing | " + String.valueOf(e.hashCode()) + ": " + e.getMessage();
                                callbackContext.error(errorMessage);
                            }
                        }

                        @Override
                        public void onUploadProgress(long bytesWritten, long contentLength, boolean done) {
                        }

                        @Override
                        public void onDownloadProgress(long bytesRead, long contentLength, boolean done) {
                        }
                    });
                } catch (Exception e) {
                    String errorMessage = "Problem during request building | " + String.valueOf(e.hashCode()) + ": " + e.getMessage();
                    callbackContext.error(errorMessage);
                }
            }
        });
    }
    final private void coverageLonLatRoutes(final JSONObject params, final CallbackContext callbackContext) {
        if (this.navitiaSdk == null) {
            callbackContext.error("NavitiaSDK is not instanciated");
            return;
        }

        final RoutesApi.CoverageLonLatRoutesRequestBuilder routesRequestBuilder = this.navitiaSdk.routesApi.newCoverageLonLatRoutesRequestBuilder();
        cordova.getThreadPool().execute(new Runnable() {
            @Override
            public void run() {
                try {
                    if (params.has("lat") && (params.getString("lat") != null) && (!params.getString("lat").isEmpty()) ) {
                        // Param: lat, Type: BigDecimal
                        routesRequestBuilder.withLat(longToBigDecimal(params.getLong("lat")));
                    }
                    if (params.has("lon") && (params.getString("lon") != null) && (!params.getString("lon").isEmpty()) ) {
                        // Param: lon, Type: BigDecimal
                        routesRequestBuilder.withLon(longToBigDecimal(params.getLong("lon")));
                    }
                    if (params.has("startPage") && (params.getString("startPage") != null) && (!params.getString("startPage").isEmpty()) ) {
                        // Param: startPage, Type: Integer
                        routesRequestBuilder.withStartPage(integerStraightPass(params.getInt("startPage")));
                    }
                    if (params.has("count") && (params.getString("count") != null) && (!params.getString("count").isEmpty()) ) {
                        // Param: count, Type: Integer
                        routesRequestBuilder.withCount(integerStraightPass(params.getInt("count")));
                    }
                    if (params.has("depth") && (params.getString("depth") != null) && (!params.getString("depth").isEmpty()) ) {
                        // Param: depth, Type: Integer
                        routesRequestBuilder.withDepth(integerStraightPass(params.getInt("depth")));
                    }
                    if (params.has("forbiddenId") && (params.getString("forbiddenId") != null) && (!params.getString("forbiddenId").isEmpty()) ) {
                        // Param: forbiddenId, Type: List
                        routesRequestBuilder.withForbiddenId(jsonArrayToStringList(params.getJSONArray("forbiddenId")));
                    }
                    if (params.has("forbiddenUris") && (params.getString("forbiddenUris") != null) && (!params.getString("forbiddenUris").isEmpty()) ) {
                        // Param: forbiddenUris, Type: List
                        routesRequestBuilder.withForbiddenUris(jsonArrayToStringList(params.getJSONArray("forbiddenUris")));
                    }
                    if (params.has("externalCode") && (params.getString("externalCode") != null) && (!params.getString("externalCode").isEmpty()) ) {
                        // Param: externalCode, Type: String
                        routesRequestBuilder.withExternalCode(stringStraightPass(params.getString("externalCode")));
                    }
                    if (params.has("headsign") && (params.getString("headsign") != null) && (!params.getString("headsign").isEmpty()) ) {
                        // Param: headsign, Type: String
                        routesRequestBuilder.withHeadsign(stringStraightPass(params.getString("headsign")));
                    }
                    if (params.has("showCodes") && (params.getString("showCodes") != null) && (!params.getString("showCodes").isEmpty()) ) {
                        // Param: showCodes, Type: Boolean
                        routesRequestBuilder.withShowCodes(booleanStraightPass(params.getBoolean("showCodes")));
                    }
                    if (params.has("odtLevel") && (params.getString("odtLevel") != null) && (!params.getString("odtLevel").isEmpty()) ) {
                        // Param: odtLevel, Type: String
                        routesRequestBuilder.withOdtLevel(stringStraightPass(params.getString("odtLevel")));
                    }
                    if (params.has("dataFreshness") && (params.getString("dataFreshness") != null) && (!params.getString("dataFreshness").isEmpty()) ) {
                        // Param: dataFreshness, Type: String
                        routesRequestBuilder.withDataFreshness(stringStraightPass(params.getString("dataFreshness")));
                    }
                    if (params.has("distance") && (params.getString("distance") != null) && (!params.getString("distance").isEmpty()) ) {
                        // Param: distance, Type: Integer
                        routesRequestBuilder.withDistance(integerStraightPass(params.getInt("distance")));
                    }
                    if (params.has("since") && (params.getString("since") != null) && (!params.getString("since").isEmpty()) ) {
                        // Param: since, Type: Date
                        routesRequestBuilder.withSince(stringToDateTime(params.getString("since")));
                    }
                    if (params.has("until") && (params.getString("until") != null) && (!params.getString("until").isEmpty()) ) {
                        // Param: until, Type: Date
                        routesRequestBuilder.withUntil(stringToDateTime(params.getString("until")));
                    }
                    if (params.has("disableGeojson") && (params.getString("disableGeojson") != null) && (!params.getString("disableGeojson").isEmpty()) ) {
                        // Param: disableGeojson, Type: Boolean
                        routesRequestBuilder.withDisableGeojson(booleanStraightPass(params.getBoolean("disableGeojson")));
                    }
                    if (params.has("disableDisruption") && (params.getString("disableDisruption") != null) && (!params.getString("disableDisruption").isEmpty()) ) {
                        // Param: disableDisruption, Type: Boolean
                        routesRequestBuilder.withDisableDisruption(booleanStraightPass(params.getBoolean("disableDisruption")));
                    }
                    if (params.has("filter") && (params.getString("filter") != null) && (!params.getString("filter").isEmpty()) ) {
                        // Param: filter, Type: String
                        routesRequestBuilder.withFilter(stringStraightPass(params.getString("filter")));
                    }
                    if (params.has("tags") && (params.getString("tags") != null) && (!params.getString("tags").isEmpty()) ) {
                        // Param: tags, Type: List
                        routesRequestBuilder.withTags(jsonArrayToStringList(params.getJSONArray("tags")));
                    }
                    if (params.has("originalId") && (params.getString("originalId") != null) && (!params.getString("originalId").isEmpty()) ) {
                        // Param: originalId, Type: String
                        routesRequestBuilder.withOriginalId(stringStraightPass(params.getString("originalId")));
                    }
                    
                    routesRequestBuilder.rawGet(new ApiCallback<String>() {
                        @Override
                        public void onFailure(ApiException e, int statusCode, Map<String, List<String>> responseHeaders) {
                            callbackContext.error("Problem during request call | " + e.getMessage());
                        }

                        @Override
                        public void onSuccess(String result, int statusCode, Map<String, List<String>> responseHeaders) {
                            JSONObject jsonObject = null;
                            try {
                                jsonObject = new JSONObject(result);
                                callbackContext.success(jsonObject);
                            } catch (Exception e) {
                                String errorMessage = "Problem during response parsing | " + String.valueOf(e.hashCode()) + ": " + e.getMessage();
                                callbackContext.error(errorMessage);
                            }
                        }

                        @Override
                        public void onUploadProgress(long bytesWritten, long contentLength, boolean done) {
                        }

                        @Override
                        public void onDownloadProgress(long bytesRead, long contentLength, boolean done) {
                        }
                    });
                } catch (Exception e) {
                    String errorMessage = "Problem during request building | " + String.valueOf(e.hashCode()) + ": " + e.getMessage();
                    callbackContext.error(errorMessage);
                }
            }
        });
    }
    final private void coverageLonLatRoutesId(final JSONObject params, final CallbackContext callbackContext) {
        if (this.navitiaSdk == null) {
            callbackContext.error("NavitiaSDK is not instanciated");
            return;
        }

        final RoutesApi.CoverageLonLatRoutesIdRequestBuilder routesRequestBuilder = this.navitiaSdk.routesApi.newCoverageLonLatRoutesIdRequestBuilder();
        cordova.getThreadPool().execute(new Runnable() {
            @Override
            public void run() {
                try {
                    if (params.has("lat") && (params.getString("lat") != null) && (!params.getString("lat").isEmpty()) ) {
                        // Param: lat, Type: BigDecimal
                        routesRequestBuilder.withLat(longToBigDecimal(params.getLong("lat")));
                    }
                    if (params.has("lon") && (params.getString("lon") != null) && (!params.getString("lon").isEmpty()) ) {
                        // Param: lon, Type: BigDecimal
                        routesRequestBuilder.withLon(longToBigDecimal(params.getLong("lon")));
                    }
                    if (params.has("id") && (params.getString("id") != null) && (!params.getString("id").isEmpty()) ) {
                        // Param: id, Type: String
                        routesRequestBuilder.withId(stringStraightPass(params.getString("id")));
                    }
                    if (params.has("startPage") && (params.getString("startPage") != null) && (!params.getString("startPage").isEmpty()) ) {
                        // Param: startPage, Type: Integer
                        routesRequestBuilder.withStartPage(integerStraightPass(params.getInt("startPage")));
                    }
                    if (params.has("count") && (params.getString("count") != null) && (!params.getString("count").isEmpty()) ) {
                        // Param: count, Type: Integer
                        routesRequestBuilder.withCount(integerStraightPass(params.getInt("count")));
                    }
                    if (params.has("depth") && (params.getString("depth") != null) && (!params.getString("depth").isEmpty()) ) {
                        // Param: depth, Type: Integer
                        routesRequestBuilder.withDepth(integerStraightPass(params.getInt("depth")));
                    }
                    if (params.has("forbiddenId") && (params.getString("forbiddenId") != null) && (!params.getString("forbiddenId").isEmpty()) ) {
                        // Param: forbiddenId, Type: List
                        routesRequestBuilder.withForbiddenId(jsonArrayToStringList(params.getJSONArray("forbiddenId")));
                    }
                    if (params.has("forbiddenUris") && (params.getString("forbiddenUris") != null) && (!params.getString("forbiddenUris").isEmpty()) ) {
                        // Param: forbiddenUris, Type: List
                        routesRequestBuilder.withForbiddenUris(jsonArrayToStringList(params.getJSONArray("forbiddenUris")));
                    }
                    if (params.has("externalCode") && (params.getString("externalCode") != null) && (!params.getString("externalCode").isEmpty()) ) {
                        // Param: externalCode, Type: String
                        routesRequestBuilder.withExternalCode(stringStraightPass(params.getString("externalCode")));
                    }
                    if (params.has("headsign") && (params.getString("headsign") != null) && (!params.getString("headsign").isEmpty()) ) {
                        // Param: headsign, Type: String
                        routesRequestBuilder.withHeadsign(stringStraightPass(params.getString("headsign")));
                    }
                    if (params.has("showCodes") && (params.getString("showCodes") != null) && (!params.getString("showCodes").isEmpty()) ) {
                        // Param: showCodes, Type: Boolean
                        routesRequestBuilder.withShowCodes(booleanStraightPass(params.getBoolean("showCodes")));
                    }
                    if (params.has("odtLevel") && (params.getString("odtLevel") != null) && (!params.getString("odtLevel").isEmpty()) ) {
                        // Param: odtLevel, Type: String
                        routesRequestBuilder.withOdtLevel(stringStraightPass(params.getString("odtLevel")));
                    }
                    if (params.has("dataFreshness") && (params.getString("dataFreshness") != null) && (!params.getString("dataFreshness").isEmpty()) ) {
                        // Param: dataFreshness, Type: String
                        routesRequestBuilder.withDataFreshness(stringStraightPass(params.getString("dataFreshness")));
                    }
                    if (params.has("distance") && (params.getString("distance") != null) && (!params.getString("distance").isEmpty()) ) {
                        // Param: distance, Type: Integer
                        routesRequestBuilder.withDistance(integerStraightPass(params.getInt("distance")));
                    }
                    if (params.has("since") && (params.getString("since") != null) && (!params.getString("since").isEmpty()) ) {
                        // Param: since, Type: Date
                        routesRequestBuilder.withSince(stringToDateTime(params.getString("since")));
                    }
                    if (params.has("until") && (params.getString("until") != null) && (!params.getString("until").isEmpty()) ) {
                        // Param: until, Type: Date
                        routesRequestBuilder.withUntil(stringToDateTime(params.getString("until")));
                    }
                    if (params.has("disableGeojson") && (params.getString("disableGeojson") != null) && (!params.getString("disableGeojson").isEmpty()) ) {
                        // Param: disableGeojson, Type: Boolean
                        routesRequestBuilder.withDisableGeojson(booleanStraightPass(params.getBoolean("disableGeojson")));
                    }
                    if (params.has("disableDisruption") && (params.getString("disableDisruption") != null) && (!params.getString("disableDisruption").isEmpty()) ) {
                        // Param: disableDisruption, Type: Boolean
                        routesRequestBuilder.withDisableDisruption(booleanStraightPass(params.getBoolean("disableDisruption")));
                    }
                    if (params.has("tags") && (params.getString("tags") != null) && (!params.getString("tags").isEmpty()) ) {
                        // Param: tags, Type: List
                        routesRequestBuilder.withTags(jsonArrayToStringList(params.getJSONArray("tags")));
                    }
                    if (params.has("originalId") && (params.getString("originalId") != null) && (!params.getString("originalId").isEmpty()) ) {
                        // Param: originalId, Type: String
                        routesRequestBuilder.withOriginalId(stringStraightPass(params.getString("originalId")));
                    }
                    
                    routesRequestBuilder.rawGet(new ApiCallback<String>() {
                        @Override
                        public void onFailure(ApiException e, int statusCode, Map<String, List<String>> responseHeaders) {
                            callbackContext.error("Problem during request call | " + e.getMessage());
                        }

                        @Override
                        public void onSuccess(String result, int statusCode, Map<String, List<String>> responseHeaders) {
                            JSONObject jsonObject = null;
                            try {
                                jsonObject = new JSONObject(result);
                                callbackContext.success(jsonObject);
                            } catch (Exception e) {
                                String errorMessage = "Problem during response parsing | " + String.valueOf(e.hashCode()) + ": " + e.getMessage();
                                callbackContext.error(errorMessage);
                            }
                        }

                        @Override
                        public void onUploadProgress(long bytesWritten, long contentLength, boolean done) {
                        }

                        @Override
                        public void onDownloadProgress(long bytesRead, long contentLength, boolean done) {
                        }
                    });
                } catch (Exception e) {
                    String errorMessage = "Problem during request building | " + String.valueOf(e.hashCode()) + ": " + e.getMessage();
                    callbackContext.error(errorMessage);
                }
            }
        });
    }
    final private void coverageLonLatUriRoutes(final JSONObject params, final CallbackContext callbackContext) {
        if (this.navitiaSdk == null) {
            callbackContext.error("NavitiaSDK is not instanciated");
            return;
        }

        final RoutesApi.CoverageLonLatUriRoutesRequestBuilder routesRequestBuilder = this.navitiaSdk.routesApi.newCoverageLonLatUriRoutesRequestBuilder();
        cordova.getThreadPool().execute(new Runnable() {
            @Override
            public void run() {
                try {
                    if (params.has("lat") && (params.getString("lat") != null) && (!params.getString("lat").isEmpty()) ) {
                        // Param: lat, Type: BigDecimal
                        routesRequestBuilder.withLat(longToBigDecimal(params.getLong("lat")));
                    }
                    if (params.has("lon") && (params.getString("lon") != null) && (!params.getString("lon").isEmpty()) ) {
                        // Param: lon, Type: BigDecimal
                        routesRequestBuilder.withLon(longToBigDecimal(params.getLong("lon")));
                    }
                    if (params.has("uri") && (params.getString("uri") != null) && (!params.getString("uri").isEmpty()) ) {
                        // Param: uri, Type: String
                        routesRequestBuilder.withUri(stringStraightPass(params.getString("uri")));
                    }
                    if (params.has("startPage") && (params.getString("startPage") != null) && (!params.getString("startPage").isEmpty()) ) {
                        // Param: startPage, Type: Integer
                        routesRequestBuilder.withStartPage(integerStraightPass(params.getInt("startPage")));
                    }
                    if (params.has("count") && (params.getString("count") != null) && (!params.getString("count").isEmpty()) ) {
                        // Param: count, Type: Integer
                        routesRequestBuilder.withCount(integerStraightPass(params.getInt("count")));
                    }
                    if (params.has("depth") && (params.getString("depth") != null) && (!params.getString("depth").isEmpty()) ) {
                        // Param: depth, Type: Integer
                        routesRequestBuilder.withDepth(integerStraightPass(params.getInt("depth")));
                    }
                    if (params.has("forbiddenId") && (params.getString("forbiddenId") != null) && (!params.getString("forbiddenId").isEmpty()) ) {
                        // Param: forbiddenId, Type: List
                        routesRequestBuilder.withForbiddenId(jsonArrayToStringList(params.getJSONArray("forbiddenId")));
                    }
                    if (params.has("forbiddenUris") && (params.getString("forbiddenUris") != null) && (!params.getString("forbiddenUris").isEmpty()) ) {
                        // Param: forbiddenUris, Type: List
                        routesRequestBuilder.withForbiddenUris(jsonArrayToStringList(params.getJSONArray("forbiddenUris")));
                    }
                    if (params.has("externalCode") && (params.getString("externalCode") != null) && (!params.getString("externalCode").isEmpty()) ) {
                        // Param: externalCode, Type: String
                        routesRequestBuilder.withExternalCode(stringStraightPass(params.getString("externalCode")));
                    }
                    if (params.has("headsign") && (params.getString("headsign") != null) && (!params.getString("headsign").isEmpty()) ) {
                        // Param: headsign, Type: String
                        routesRequestBuilder.withHeadsign(stringStraightPass(params.getString("headsign")));
                    }
                    if (params.has("showCodes") && (params.getString("showCodes") != null) && (!params.getString("showCodes").isEmpty()) ) {
                        // Param: showCodes, Type: Boolean
                        routesRequestBuilder.withShowCodes(booleanStraightPass(params.getBoolean("showCodes")));
                    }
                    if (params.has("odtLevel") && (params.getString("odtLevel") != null) && (!params.getString("odtLevel").isEmpty()) ) {
                        // Param: odtLevel, Type: String
                        routesRequestBuilder.withOdtLevel(stringStraightPass(params.getString("odtLevel")));
                    }
                    if (params.has("dataFreshness") && (params.getString("dataFreshness") != null) && (!params.getString("dataFreshness").isEmpty()) ) {
                        // Param: dataFreshness, Type: String
                        routesRequestBuilder.withDataFreshness(stringStraightPass(params.getString("dataFreshness")));
                    }
                    if (params.has("distance") && (params.getString("distance") != null) && (!params.getString("distance").isEmpty()) ) {
                        // Param: distance, Type: Integer
                        routesRequestBuilder.withDistance(integerStraightPass(params.getInt("distance")));
                    }
                    if (params.has("since") && (params.getString("since") != null) && (!params.getString("since").isEmpty()) ) {
                        // Param: since, Type: Date
                        routesRequestBuilder.withSince(stringToDateTime(params.getString("since")));
                    }
                    if (params.has("until") && (params.getString("until") != null) && (!params.getString("until").isEmpty()) ) {
                        // Param: until, Type: Date
                        routesRequestBuilder.withUntil(stringToDateTime(params.getString("until")));
                    }
                    if (params.has("disableGeojson") && (params.getString("disableGeojson") != null) && (!params.getString("disableGeojson").isEmpty()) ) {
                        // Param: disableGeojson, Type: Boolean
                        routesRequestBuilder.withDisableGeojson(booleanStraightPass(params.getBoolean("disableGeojson")));
                    }
                    if (params.has("disableDisruption") && (params.getString("disableDisruption") != null) && (!params.getString("disableDisruption").isEmpty()) ) {
                        // Param: disableDisruption, Type: Boolean
                        routesRequestBuilder.withDisableDisruption(booleanStraightPass(params.getBoolean("disableDisruption")));
                    }
                    if (params.has("filter") && (params.getString("filter") != null) && (!params.getString("filter").isEmpty()) ) {
                        // Param: filter, Type: String
                        routesRequestBuilder.withFilter(stringStraightPass(params.getString("filter")));
                    }
                    if (params.has("tags") && (params.getString("tags") != null) && (!params.getString("tags").isEmpty()) ) {
                        // Param: tags, Type: List
                        routesRequestBuilder.withTags(jsonArrayToStringList(params.getJSONArray("tags")));
                    }
                    if (params.has("originalId") && (params.getString("originalId") != null) && (!params.getString("originalId").isEmpty()) ) {
                        // Param: originalId, Type: String
                        routesRequestBuilder.withOriginalId(stringStraightPass(params.getString("originalId")));
                    }
                    
                    routesRequestBuilder.rawGet(new ApiCallback<String>() {
                        @Override
                        public void onFailure(ApiException e, int statusCode, Map<String, List<String>> responseHeaders) {
                            callbackContext.error("Problem during request call | " + e.getMessage());
                        }

                        @Override
                        public void onSuccess(String result, int statusCode, Map<String, List<String>> responseHeaders) {
                            JSONObject jsonObject = null;
                            try {
                                jsonObject = new JSONObject(result);
                                callbackContext.success(jsonObject);
                            } catch (Exception e) {
                                String errorMessage = "Problem during response parsing | " + String.valueOf(e.hashCode()) + ": " + e.getMessage();
                                callbackContext.error(errorMessage);
                            }
                        }

                        @Override
                        public void onUploadProgress(long bytesWritten, long contentLength, boolean done) {
                        }

                        @Override
                        public void onDownloadProgress(long bytesRead, long contentLength, boolean done) {
                        }
                    });
                } catch (Exception e) {
                    String errorMessage = "Problem during request building | " + String.valueOf(e.hashCode()) + ": " + e.getMessage();
                    callbackContext.error(errorMessage);
                }
            }
        });
    }
    final private void coverageLonLatUriRoutesId(final JSONObject params, final CallbackContext callbackContext) {
        if (this.navitiaSdk == null) {
            callbackContext.error("NavitiaSDK is not instanciated");
            return;
        }

        final RoutesApi.CoverageLonLatUriRoutesIdRequestBuilder routesRequestBuilder = this.navitiaSdk.routesApi.newCoverageLonLatUriRoutesIdRequestBuilder();
        cordova.getThreadPool().execute(new Runnable() {
            @Override
            public void run() {
                try {
                    if (params.has("lat") && (params.getString("lat") != null) && (!params.getString("lat").isEmpty()) ) {
                        // Param: lat, Type: BigDecimal
                        routesRequestBuilder.withLat(longToBigDecimal(params.getLong("lat")));
                    }
                    if (params.has("lon") && (params.getString("lon") != null) && (!params.getString("lon").isEmpty()) ) {
                        // Param: lon, Type: BigDecimal
                        routesRequestBuilder.withLon(longToBigDecimal(params.getLong("lon")));
                    }
                    if (params.has("uri") && (params.getString("uri") != null) && (!params.getString("uri").isEmpty()) ) {
                        // Param: uri, Type: String
                        routesRequestBuilder.withUri(stringStraightPass(params.getString("uri")));
                    }
                    if (params.has("id") && (params.getString("id") != null) && (!params.getString("id").isEmpty()) ) {
                        // Param: id, Type: String
                        routesRequestBuilder.withId(stringStraightPass(params.getString("id")));
                    }
                    if (params.has("startPage") && (params.getString("startPage") != null) && (!params.getString("startPage").isEmpty()) ) {
                        // Param: startPage, Type: Integer
                        routesRequestBuilder.withStartPage(integerStraightPass(params.getInt("startPage")));
                    }
                    if (params.has("count") && (params.getString("count") != null) && (!params.getString("count").isEmpty()) ) {
                        // Param: count, Type: Integer
                        routesRequestBuilder.withCount(integerStraightPass(params.getInt("count")));
                    }
                    if (params.has("depth") && (params.getString("depth") != null) && (!params.getString("depth").isEmpty()) ) {
                        // Param: depth, Type: Integer
                        routesRequestBuilder.withDepth(integerStraightPass(params.getInt("depth")));
                    }
                    if (params.has("forbiddenId") && (params.getString("forbiddenId") != null) && (!params.getString("forbiddenId").isEmpty()) ) {
                        // Param: forbiddenId, Type: List
                        routesRequestBuilder.withForbiddenId(jsonArrayToStringList(params.getJSONArray("forbiddenId")));
                    }
                    if (params.has("forbiddenUris") && (params.getString("forbiddenUris") != null) && (!params.getString("forbiddenUris").isEmpty()) ) {
                        // Param: forbiddenUris, Type: List
                        routesRequestBuilder.withForbiddenUris(jsonArrayToStringList(params.getJSONArray("forbiddenUris")));
                    }
                    if (params.has("externalCode") && (params.getString("externalCode") != null) && (!params.getString("externalCode").isEmpty()) ) {
                        // Param: externalCode, Type: String
                        routesRequestBuilder.withExternalCode(stringStraightPass(params.getString("externalCode")));
                    }
                    if (params.has("headsign") && (params.getString("headsign") != null) && (!params.getString("headsign").isEmpty()) ) {
                        // Param: headsign, Type: String
                        routesRequestBuilder.withHeadsign(stringStraightPass(params.getString("headsign")));
                    }
                    if (params.has("showCodes") && (params.getString("showCodes") != null) && (!params.getString("showCodes").isEmpty()) ) {
                        // Param: showCodes, Type: Boolean
                        routesRequestBuilder.withShowCodes(booleanStraightPass(params.getBoolean("showCodes")));
                    }
                    if (params.has("odtLevel") && (params.getString("odtLevel") != null) && (!params.getString("odtLevel").isEmpty()) ) {
                        // Param: odtLevel, Type: String
                        routesRequestBuilder.withOdtLevel(stringStraightPass(params.getString("odtLevel")));
                    }
                    if (params.has("dataFreshness") && (params.getString("dataFreshness") != null) && (!params.getString("dataFreshness").isEmpty()) ) {
                        // Param: dataFreshness, Type: String
                        routesRequestBuilder.withDataFreshness(stringStraightPass(params.getString("dataFreshness")));
                    }
                    if (params.has("distance") && (params.getString("distance") != null) && (!params.getString("distance").isEmpty()) ) {
                        // Param: distance, Type: Integer
                        routesRequestBuilder.withDistance(integerStraightPass(params.getInt("distance")));
                    }
                    if (params.has("since") && (params.getString("since") != null) && (!params.getString("since").isEmpty()) ) {
                        // Param: since, Type: Date
                        routesRequestBuilder.withSince(stringToDateTime(params.getString("since")));
                    }
                    if (params.has("until") && (params.getString("until") != null) && (!params.getString("until").isEmpty()) ) {
                        // Param: until, Type: Date
                        routesRequestBuilder.withUntil(stringToDateTime(params.getString("until")));
                    }
                    if (params.has("disableGeojson") && (params.getString("disableGeojson") != null) && (!params.getString("disableGeojson").isEmpty()) ) {
                        // Param: disableGeojson, Type: Boolean
                        routesRequestBuilder.withDisableGeojson(booleanStraightPass(params.getBoolean("disableGeojson")));
                    }
                    if (params.has("disableDisruption") && (params.getString("disableDisruption") != null) && (!params.getString("disableDisruption").isEmpty()) ) {
                        // Param: disableDisruption, Type: Boolean
                        routesRequestBuilder.withDisableDisruption(booleanStraightPass(params.getBoolean("disableDisruption")));
                    }
                    if (params.has("tags") && (params.getString("tags") != null) && (!params.getString("tags").isEmpty()) ) {
                        // Param: tags, Type: List
                        routesRequestBuilder.withTags(jsonArrayToStringList(params.getJSONArray("tags")));
                    }
                    if (params.has("originalId") && (params.getString("originalId") != null) && (!params.getString("originalId").isEmpty()) ) {
                        // Param: originalId, Type: String
                        routesRequestBuilder.withOriginalId(stringStraightPass(params.getString("originalId")));
                    }
                    
                    routesRequestBuilder.rawGet(new ApiCallback<String>() {
                        @Override
                        public void onFailure(ApiException e, int statusCode, Map<String, List<String>> responseHeaders) {
                            callbackContext.error("Problem during request call | " + e.getMessage());
                        }

                        @Override
                        public void onSuccess(String result, int statusCode, Map<String, List<String>> responseHeaders) {
                            JSONObject jsonObject = null;
                            try {
                                jsonObject = new JSONObject(result);
                                callbackContext.success(jsonObject);
                            } catch (Exception e) {
                                String errorMessage = "Problem during response parsing | " + String.valueOf(e.hashCode()) + ": " + e.getMessage();
                                callbackContext.error(errorMessage);
                            }
                        }

                        @Override
                        public void onUploadProgress(long bytesWritten, long contentLength, boolean done) {
                        }

                        @Override
                        public void onDownloadProgress(long bytesRead, long contentLength, boolean done) {
                        }
                    });
                } catch (Exception e) {
                    String errorMessage = "Problem during request building | " + String.valueOf(e.hashCode()) + ": " + e.getMessage();
                    callbackContext.error(errorMessage);
                }
            }
        });
    }
    final private void coverageRegionRoutes(final JSONObject params, final CallbackContext callbackContext) {
        if (this.navitiaSdk == null) {
            callbackContext.error("NavitiaSDK is not instanciated");
            return;
        }

        final RoutesApi.CoverageRegionRoutesRequestBuilder routesRequestBuilder = this.navitiaSdk.routesApi.newCoverageRegionRoutesRequestBuilder();
        cordova.getThreadPool().execute(new Runnable() {
            @Override
            public void run() {
                try {
                    if (params.has("region") && (params.getString("region") != null) && (!params.getString("region").isEmpty()) ) {
                        // Param: region, Type: String
                        routesRequestBuilder.withRegion(stringStraightPass(params.getString("region")));
                    }
                    if (params.has("startPage") && (params.getString("startPage") != null) && (!params.getString("startPage").isEmpty()) ) {
                        // Param: startPage, Type: Integer
                        routesRequestBuilder.withStartPage(integerStraightPass(params.getInt("startPage")));
                    }
                    if (params.has("count") && (params.getString("count") != null) && (!params.getString("count").isEmpty()) ) {
                        // Param: count, Type: Integer
                        routesRequestBuilder.withCount(integerStraightPass(params.getInt("count")));
                    }
                    if (params.has("depth") && (params.getString("depth") != null) && (!params.getString("depth").isEmpty()) ) {
                        // Param: depth, Type: Integer
                        routesRequestBuilder.withDepth(integerStraightPass(params.getInt("depth")));
                    }
                    if (params.has("forbiddenId") && (params.getString("forbiddenId") != null) && (!params.getString("forbiddenId").isEmpty()) ) {
                        // Param: forbiddenId, Type: List
                        routesRequestBuilder.withForbiddenId(jsonArrayToStringList(params.getJSONArray("forbiddenId")));
                    }
                    if (params.has("forbiddenUris") && (params.getString("forbiddenUris") != null) && (!params.getString("forbiddenUris").isEmpty()) ) {
                        // Param: forbiddenUris, Type: List
                        routesRequestBuilder.withForbiddenUris(jsonArrayToStringList(params.getJSONArray("forbiddenUris")));
                    }
                    if (params.has("externalCode") && (params.getString("externalCode") != null) && (!params.getString("externalCode").isEmpty()) ) {
                        // Param: externalCode, Type: String
                        routesRequestBuilder.withExternalCode(stringStraightPass(params.getString("externalCode")));
                    }
                    if (params.has("headsign") && (params.getString("headsign") != null) && (!params.getString("headsign").isEmpty()) ) {
                        // Param: headsign, Type: String
                        routesRequestBuilder.withHeadsign(stringStraightPass(params.getString("headsign")));
                    }
                    if (params.has("showCodes") && (params.getString("showCodes") != null) && (!params.getString("showCodes").isEmpty()) ) {
                        // Param: showCodes, Type: Boolean
                        routesRequestBuilder.withShowCodes(booleanStraightPass(params.getBoolean("showCodes")));
                    }
                    if (params.has("odtLevel") && (params.getString("odtLevel") != null) && (!params.getString("odtLevel").isEmpty()) ) {
                        // Param: odtLevel, Type: String
                        routesRequestBuilder.withOdtLevel(stringStraightPass(params.getString("odtLevel")));
                    }
                    if (params.has("dataFreshness") && (params.getString("dataFreshness") != null) && (!params.getString("dataFreshness").isEmpty()) ) {
                        // Param: dataFreshness, Type: String
                        routesRequestBuilder.withDataFreshness(stringStraightPass(params.getString("dataFreshness")));
                    }
                    if (params.has("distance") && (params.getString("distance") != null) && (!params.getString("distance").isEmpty()) ) {
                        // Param: distance, Type: Integer
                        routesRequestBuilder.withDistance(integerStraightPass(params.getInt("distance")));
                    }
                    if (params.has("since") && (params.getString("since") != null) && (!params.getString("since").isEmpty()) ) {
                        // Param: since, Type: Date
                        routesRequestBuilder.withSince(stringToDateTime(params.getString("since")));
                    }
                    if (params.has("until") && (params.getString("until") != null) && (!params.getString("until").isEmpty()) ) {
                        // Param: until, Type: Date
                        routesRequestBuilder.withUntil(stringToDateTime(params.getString("until")));
                    }
                    if (params.has("disableGeojson") && (params.getString("disableGeojson") != null) && (!params.getString("disableGeojson").isEmpty()) ) {
                        // Param: disableGeojson, Type: Boolean
                        routesRequestBuilder.withDisableGeojson(booleanStraightPass(params.getBoolean("disableGeojson")));
                    }
                    if (params.has("disableDisruption") && (params.getString("disableDisruption") != null) && (!params.getString("disableDisruption").isEmpty()) ) {
                        // Param: disableDisruption, Type: Boolean
                        routesRequestBuilder.withDisableDisruption(booleanStraightPass(params.getBoolean("disableDisruption")));
                    }
                    if (params.has("filter") && (params.getString("filter") != null) && (!params.getString("filter").isEmpty()) ) {
                        // Param: filter, Type: String
                        routesRequestBuilder.withFilter(stringStraightPass(params.getString("filter")));
                    }
                    if (params.has("tags") && (params.getString("tags") != null) && (!params.getString("tags").isEmpty()) ) {
                        // Param: tags, Type: List
                        routesRequestBuilder.withTags(jsonArrayToStringList(params.getJSONArray("tags")));
                    }
                    if (params.has("originalId") && (params.getString("originalId") != null) && (!params.getString("originalId").isEmpty()) ) {
                        // Param: originalId, Type: String
                        routesRequestBuilder.withOriginalId(stringStraightPass(params.getString("originalId")));
                    }
                    
                    routesRequestBuilder.rawGet(new ApiCallback<String>() {
                        @Override
                        public void onFailure(ApiException e, int statusCode, Map<String, List<String>> responseHeaders) {
                            callbackContext.error("Problem during request call | " + e.getMessage());
                        }

                        @Override
                        public void onSuccess(String result, int statusCode, Map<String, List<String>> responseHeaders) {
                            JSONObject jsonObject = null;
                            try {
                                jsonObject = new JSONObject(result);
                                callbackContext.success(jsonObject);
                            } catch (Exception e) {
                                String errorMessage = "Problem during response parsing | " + String.valueOf(e.hashCode()) + ": " + e.getMessage();
                                callbackContext.error(errorMessage);
                            }
                        }

                        @Override
                        public void onUploadProgress(long bytesWritten, long contentLength, boolean done) {
                        }

                        @Override
                        public void onDownloadProgress(long bytesRead, long contentLength, boolean done) {
                        }
                    });
                } catch (Exception e) {
                    String errorMessage = "Problem during request building | " + String.valueOf(e.hashCode()) + ": " + e.getMessage();
                    callbackContext.error(errorMessage);
                }
            }
        });
    }
    final private void coverageRegionRoutesId(final JSONObject params, final CallbackContext callbackContext) {
        if (this.navitiaSdk == null) {
            callbackContext.error("NavitiaSDK is not instanciated");
            return;
        }

        final RoutesApi.CoverageRegionRoutesIdRequestBuilder routesRequestBuilder = this.navitiaSdk.routesApi.newCoverageRegionRoutesIdRequestBuilder();
        cordova.getThreadPool().execute(new Runnable() {
            @Override
            public void run() {
                try {
                    if (params.has("region") && (params.getString("region") != null) && (!params.getString("region").isEmpty()) ) {
                        // Param: region, Type: String
                        routesRequestBuilder.withRegion(stringStraightPass(params.getString("region")));
                    }
                    if (params.has("id") && (params.getString("id") != null) && (!params.getString("id").isEmpty()) ) {
                        // Param: id, Type: String
                        routesRequestBuilder.withId(stringStraightPass(params.getString("id")));
                    }
                    if (params.has("startPage") && (params.getString("startPage") != null) && (!params.getString("startPage").isEmpty()) ) {
                        // Param: startPage, Type: Integer
                        routesRequestBuilder.withStartPage(integerStraightPass(params.getInt("startPage")));
                    }
                    if (params.has("count") && (params.getString("count") != null) && (!params.getString("count").isEmpty()) ) {
                        // Param: count, Type: Integer
                        routesRequestBuilder.withCount(integerStraightPass(params.getInt("count")));
                    }
                    if (params.has("depth") && (params.getString("depth") != null) && (!params.getString("depth").isEmpty()) ) {
                        // Param: depth, Type: Integer
                        routesRequestBuilder.withDepth(integerStraightPass(params.getInt("depth")));
                    }
                    if (params.has("forbiddenId") && (params.getString("forbiddenId") != null) && (!params.getString("forbiddenId").isEmpty()) ) {
                        // Param: forbiddenId, Type: List
                        routesRequestBuilder.withForbiddenId(jsonArrayToStringList(params.getJSONArray("forbiddenId")));
                    }
                    if (params.has("forbiddenUris") && (params.getString("forbiddenUris") != null) && (!params.getString("forbiddenUris").isEmpty()) ) {
                        // Param: forbiddenUris, Type: List
                        routesRequestBuilder.withForbiddenUris(jsonArrayToStringList(params.getJSONArray("forbiddenUris")));
                    }
                    if (params.has("externalCode") && (params.getString("externalCode") != null) && (!params.getString("externalCode").isEmpty()) ) {
                        // Param: externalCode, Type: String
                        routesRequestBuilder.withExternalCode(stringStraightPass(params.getString("externalCode")));
                    }
                    if (params.has("headsign") && (params.getString("headsign") != null) && (!params.getString("headsign").isEmpty()) ) {
                        // Param: headsign, Type: String
                        routesRequestBuilder.withHeadsign(stringStraightPass(params.getString("headsign")));
                    }
                    if (params.has("showCodes") && (params.getString("showCodes") != null) && (!params.getString("showCodes").isEmpty()) ) {
                        // Param: showCodes, Type: Boolean
                        routesRequestBuilder.withShowCodes(booleanStraightPass(params.getBoolean("showCodes")));
                    }
                    if (params.has("odtLevel") && (params.getString("odtLevel") != null) && (!params.getString("odtLevel").isEmpty()) ) {
                        // Param: odtLevel, Type: String
                        routesRequestBuilder.withOdtLevel(stringStraightPass(params.getString("odtLevel")));
                    }
                    if (params.has("dataFreshness") && (params.getString("dataFreshness") != null) && (!params.getString("dataFreshness").isEmpty()) ) {
                        // Param: dataFreshness, Type: String
                        routesRequestBuilder.withDataFreshness(stringStraightPass(params.getString("dataFreshness")));
                    }
                    if (params.has("distance") && (params.getString("distance") != null) && (!params.getString("distance").isEmpty()) ) {
                        // Param: distance, Type: Integer
                        routesRequestBuilder.withDistance(integerStraightPass(params.getInt("distance")));
                    }
                    if (params.has("since") && (params.getString("since") != null) && (!params.getString("since").isEmpty()) ) {
                        // Param: since, Type: Date
                        routesRequestBuilder.withSince(stringToDateTime(params.getString("since")));
                    }
                    if (params.has("until") && (params.getString("until") != null) && (!params.getString("until").isEmpty()) ) {
                        // Param: until, Type: Date
                        routesRequestBuilder.withUntil(stringToDateTime(params.getString("until")));
                    }
                    if (params.has("disableGeojson") && (params.getString("disableGeojson") != null) && (!params.getString("disableGeojson").isEmpty()) ) {
                        // Param: disableGeojson, Type: Boolean
                        routesRequestBuilder.withDisableGeojson(booleanStraightPass(params.getBoolean("disableGeojson")));
                    }
                    if (params.has("disableDisruption") && (params.getString("disableDisruption") != null) && (!params.getString("disableDisruption").isEmpty()) ) {
                        // Param: disableDisruption, Type: Boolean
                        routesRequestBuilder.withDisableDisruption(booleanStraightPass(params.getBoolean("disableDisruption")));
                    }
                    if (params.has("tags") && (params.getString("tags") != null) && (!params.getString("tags").isEmpty()) ) {
                        // Param: tags, Type: List
                        routesRequestBuilder.withTags(jsonArrayToStringList(params.getJSONArray("tags")));
                    }
                    if (params.has("originalId") && (params.getString("originalId") != null) && (!params.getString("originalId").isEmpty()) ) {
                        // Param: originalId, Type: String
                        routesRequestBuilder.withOriginalId(stringStraightPass(params.getString("originalId")));
                    }
                    
                    routesRequestBuilder.rawGet(new ApiCallback<String>() {
                        @Override
                        public void onFailure(ApiException e, int statusCode, Map<String, List<String>> responseHeaders) {
                            callbackContext.error("Problem during request call | " + e.getMessage());
                        }

                        @Override
                        public void onSuccess(String result, int statusCode, Map<String, List<String>> responseHeaders) {
                            JSONObject jsonObject = null;
                            try {
                                jsonObject = new JSONObject(result);
                                callbackContext.success(jsonObject);
                            } catch (Exception e) {
                                String errorMessage = "Problem during response parsing | " + String.valueOf(e.hashCode()) + ": " + e.getMessage();
                                callbackContext.error(errorMessage);
                            }
                        }

                        @Override
                        public void onUploadProgress(long bytesWritten, long contentLength, boolean done) {
                        }

                        @Override
                        public void onDownloadProgress(long bytesRead, long contentLength, boolean done) {
                        }
                    });
                } catch (Exception e) {
                    String errorMessage = "Problem during request building | " + String.valueOf(e.hashCode()) + ": " + e.getMessage();
                    callbackContext.error(errorMessage);
                }
            }
        });
    }
    final private void coverageRegionUriRoutes(final JSONObject params, final CallbackContext callbackContext) {
        if (this.navitiaSdk == null) {
            callbackContext.error("NavitiaSDK is not instanciated");
            return;
        }

        final RoutesApi.CoverageRegionUriRoutesRequestBuilder routesRequestBuilder = this.navitiaSdk.routesApi.newCoverageRegionUriRoutesRequestBuilder();
        cordova.getThreadPool().execute(new Runnable() {
            @Override
            public void run() {
                try {
                    if (params.has("region") && (params.getString("region") != null) && (!params.getString("region").isEmpty()) ) {
                        // Param: region, Type: String
                        routesRequestBuilder.withRegion(stringStraightPass(params.getString("region")));
                    }
                    if (params.has("uri") && (params.getString("uri") != null) && (!params.getString("uri").isEmpty()) ) {
                        // Param: uri, Type: String
                        routesRequestBuilder.withUri(stringStraightPass(params.getString("uri")));
                    }
                    if (params.has("startPage") && (params.getString("startPage") != null) && (!params.getString("startPage").isEmpty()) ) {
                        // Param: startPage, Type: Integer
                        routesRequestBuilder.withStartPage(integerStraightPass(params.getInt("startPage")));
                    }
                    if (params.has("count") && (params.getString("count") != null) && (!params.getString("count").isEmpty()) ) {
                        // Param: count, Type: Integer
                        routesRequestBuilder.withCount(integerStraightPass(params.getInt("count")));
                    }
                    if (params.has("depth") && (params.getString("depth") != null) && (!params.getString("depth").isEmpty()) ) {
                        // Param: depth, Type: Integer
                        routesRequestBuilder.withDepth(integerStraightPass(params.getInt("depth")));
                    }
                    if (params.has("forbiddenId") && (params.getString("forbiddenId") != null) && (!params.getString("forbiddenId").isEmpty()) ) {
                        // Param: forbiddenId, Type: List
                        routesRequestBuilder.withForbiddenId(jsonArrayToStringList(params.getJSONArray("forbiddenId")));
                    }
                    if (params.has("forbiddenUris") && (params.getString("forbiddenUris") != null) && (!params.getString("forbiddenUris").isEmpty()) ) {
                        // Param: forbiddenUris, Type: List
                        routesRequestBuilder.withForbiddenUris(jsonArrayToStringList(params.getJSONArray("forbiddenUris")));
                    }
                    if (params.has("externalCode") && (params.getString("externalCode") != null) && (!params.getString("externalCode").isEmpty()) ) {
                        // Param: externalCode, Type: String
                        routesRequestBuilder.withExternalCode(stringStraightPass(params.getString("externalCode")));
                    }
                    if (params.has("headsign") && (params.getString("headsign") != null) && (!params.getString("headsign").isEmpty()) ) {
                        // Param: headsign, Type: String
                        routesRequestBuilder.withHeadsign(stringStraightPass(params.getString("headsign")));
                    }
                    if (params.has("showCodes") && (params.getString("showCodes") != null) && (!params.getString("showCodes").isEmpty()) ) {
                        // Param: showCodes, Type: Boolean
                        routesRequestBuilder.withShowCodes(booleanStraightPass(params.getBoolean("showCodes")));
                    }
                    if (params.has("odtLevel") && (params.getString("odtLevel") != null) && (!params.getString("odtLevel").isEmpty()) ) {
                        // Param: odtLevel, Type: String
                        routesRequestBuilder.withOdtLevel(stringStraightPass(params.getString("odtLevel")));
                    }
                    if (params.has("dataFreshness") && (params.getString("dataFreshness") != null) && (!params.getString("dataFreshness").isEmpty()) ) {
                        // Param: dataFreshness, Type: String
                        routesRequestBuilder.withDataFreshness(stringStraightPass(params.getString("dataFreshness")));
                    }
                    if (params.has("distance") && (params.getString("distance") != null) && (!params.getString("distance").isEmpty()) ) {
                        // Param: distance, Type: Integer
                        routesRequestBuilder.withDistance(integerStraightPass(params.getInt("distance")));
                    }
                    if (params.has("since") && (params.getString("since") != null) && (!params.getString("since").isEmpty()) ) {
                        // Param: since, Type: Date
                        routesRequestBuilder.withSince(stringToDateTime(params.getString("since")));
                    }
                    if (params.has("until") && (params.getString("until") != null) && (!params.getString("until").isEmpty()) ) {
                        // Param: until, Type: Date
                        routesRequestBuilder.withUntil(stringToDateTime(params.getString("until")));
                    }
                    if (params.has("disableGeojson") && (params.getString("disableGeojson") != null) && (!params.getString("disableGeojson").isEmpty()) ) {
                        // Param: disableGeojson, Type: Boolean
                        routesRequestBuilder.withDisableGeojson(booleanStraightPass(params.getBoolean("disableGeojson")));
                    }
                    if (params.has("disableDisruption") && (params.getString("disableDisruption") != null) && (!params.getString("disableDisruption").isEmpty()) ) {
                        // Param: disableDisruption, Type: Boolean
                        routesRequestBuilder.withDisableDisruption(booleanStraightPass(params.getBoolean("disableDisruption")));
                    }
                    if (params.has("filter") && (params.getString("filter") != null) && (!params.getString("filter").isEmpty()) ) {
                        // Param: filter, Type: String
                        routesRequestBuilder.withFilter(stringStraightPass(params.getString("filter")));
                    }
                    if (params.has("tags") && (params.getString("tags") != null) && (!params.getString("tags").isEmpty()) ) {
                        // Param: tags, Type: List
                        routesRequestBuilder.withTags(jsonArrayToStringList(params.getJSONArray("tags")));
                    }
                    if (params.has("originalId") && (params.getString("originalId") != null) && (!params.getString("originalId").isEmpty()) ) {
                        // Param: originalId, Type: String
                        routesRequestBuilder.withOriginalId(stringStraightPass(params.getString("originalId")));
                    }
                    
                    routesRequestBuilder.rawGet(new ApiCallback<String>() {
                        @Override
                        public void onFailure(ApiException e, int statusCode, Map<String, List<String>> responseHeaders) {
                            callbackContext.error("Problem during request call | " + e.getMessage());
                        }

                        @Override
                        public void onSuccess(String result, int statusCode, Map<String, List<String>> responseHeaders) {
                            JSONObject jsonObject = null;
                            try {
                                jsonObject = new JSONObject(result);
                                callbackContext.success(jsonObject);
                            } catch (Exception e) {
                                String errorMessage = "Problem during response parsing | " + String.valueOf(e.hashCode()) + ": " + e.getMessage();
                                callbackContext.error(errorMessage);
                            }
                        }

                        @Override
                        public void onUploadProgress(long bytesWritten, long contentLength, boolean done) {
                        }

                        @Override
                        public void onDownloadProgress(long bytesRead, long contentLength, boolean done) {
                        }
                    });
                } catch (Exception e) {
                    String errorMessage = "Problem during request building | " + String.valueOf(e.hashCode()) + ": " + e.getMessage();
                    callbackContext.error(errorMessage);
                }
            }
        });
    }
    final private void coverageRegionUriRoutesId(final JSONObject params, final CallbackContext callbackContext) {
        if (this.navitiaSdk == null) {
            callbackContext.error("NavitiaSDK is not instanciated");
            return;
        }

        final RoutesApi.CoverageRegionUriRoutesIdRequestBuilder routesRequestBuilder = this.navitiaSdk.routesApi.newCoverageRegionUriRoutesIdRequestBuilder();
        cordova.getThreadPool().execute(new Runnable() {
            @Override
            public void run() {
                try {
                    if (params.has("region") && (params.getString("region") != null) && (!params.getString("region").isEmpty()) ) {
                        // Param: region, Type: String
                        routesRequestBuilder.withRegion(stringStraightPass(params.getString("region")));
                    }
                    if (params.has("uri") && (params.getString("uri") != null) && (!params.getString("uri").isEmpty()) ) {
                        // Param: uri, Type: String
                        routesRequestBuilder.withUri(stringStraightPass(params.getString("uri")));
                    }
                    if (params.has("id") && (params.getString("id") != null) && (!params.getString("id").isEmpty()) ) {
                        // Param: id, Type: String
                        routesRequestBuilder.withId(stringStraightPass(params.getString("id")));
                    }
                    if (params.has("startPage") && (params.getString("startPage") != null) && (!params.getString("startPage").isEmpty()) ) {
                        // Param: startPage, Type: Integer
                        routesRequestBuilder.withStartPage(integerStraightPass(params.getInt("startPage")));
                    }
                    if (params.has("count") && (params.getString("count") != null) && (!params.getString("count").isEmpty()) ) {
                        // Param: count, Type: Integer
                        routesRequestBuilder.withCount(integerStraightPass(params.getInt("count")));
                    }
                    if (params.has("depth") && (params.getString("depth") != null) && (!params.getString("depth").isEmpty()) ) {
                        // Param: depth, Type: Integer
                        routesRequestBuilder.withDepth(integerStraightPass(params.getInt("depth")));
                    }
                    if (params.has("forbiddenId") && (params.getString("forbiddenId") != null) && (!params.getString("forbiddenId").isEmpty()) ) {
                        // Param: forbiddenId, Type: List
                        routesRequestBuilder.withForbiddenId(jsonArrayToStringList(params.getJSONArray("forbiddenId")));
                    }
                    if (params.has("forbiddenUris") && (params.getString("forbiddenUris") != null) && (!params.getString("forbiddenUris").isEmpty()) ) {
                        // Param: forbiddenUris, Type: List
                        routesRequestBuilder.withForbiddenUris(jsonArrayToStringList(params.getJSONArray("forbiddenUris")));
                    }
                    if (params.has("externalCode") && (params.getString("externalCode") != null) && (!params.getString("externalCode").isEmpty()) ) {
                        // Param: externalCode, Type: String
                        routesRequestBuilder.withExternalCode(stringStraightPass(params.getString("externalCode")));
                    }
                    if (params.has("headsign") && (params.getString("headsign") != null) && (!params.getString("headsign").isEmpty()) ) {
                        // Param: headsign, Type: String
                        routesRequestBuilder.withHeadsign(stringStraightPass(params.getString("headsign")));
                    }
                    if (params.has("showCodes") && (params.getString("showCodes") != null) && (!params.getString("showCodes").isEmpty()) ) {
                        // Param: showCodes, Type: Boolean
                        routesRequestBuilder.withShowCodes(booleanStraightPass(params.getBoolean("showCodes")));
                    }
                    if (params.has("odtLevel") && (params.getString("odtLevel") != null) && (!params.getString("odtLevel").isEmpty()) ) {
                        // Param: odtLevel, Type: String
                        routesRequestBuilder.withOdtLevel(stringStraightPass(params.getString("odtLevel")));
                    }
                    if (params.has("dataFreshness") && (params.getString("dataFreshness") != null) && (!params.getString("dataFreshness").isEmpty()) ) {
                        // Param: dataFreshness, Type: String
                        routesRequestBuilder.withDataFreshness(stringStraightPass(params.getString("dataFreshness")));
                    }
                    if (params.has("distance") && (params.getString("distance") != null) && (!params.getString("distance").isEmpty()) ) {
                        // Param: distance, Type: Integer
                        routesRequestBuilder.withDistance(integerStraightPass(params.getInt("distance")));
                    }
                    if (params.has("since") && (params.getString("since") != null) && (!params.getString("since").isEmpty()) ) {
                        // Param: since, Type: Date
                        routesRequestBuilder.withSince(stringToDateTime(params.getString("since")));
                    }
                    if (params.has("until") && (params.getString("until") != null) && (!params.getString("until").isEmpty()) ) {
                        // Param: until, Type: Date
                        routesRequestBuilder.withUntil(stringToDateTime(params.getString("until")));
                    }
                    if (params.has("disableGeojson") && (params.getString("disableGeojson") != null) && (!params.getString("disableGeojson").isEmpty()) ) {
                        // Param: disableGeojson, Type: Boolean
                        routesRequestBuilder.withDisableGeojson(booleanStraightPass(params.getBoolean("disableGeojson")));
                    }
                    if (params.has("disableDisruption") && (params.getString("disableDisruption") != null) && (!params.getString("disableDisruption").isEmpty()) ) {
                        // Param: disableDisruption, Type: Boolean
                        routesRequestBuilder.withDisableDisruption(booleanStraightPass(params.getBoolean("disableDisruption")));
                    }
                    if (params.has("tags") && (params.getString("tags") != null) && (!params.getString("tags").isEmpty()) ) {
                        // Param: tags, Type: List
                        routesRequestBuilder.withTags(jsonArrayToStringList(params.getJSONArray("tags")));
                    }
                    if (params.has("originalId") && (params.getString("originalId") != null) && (!params.getString("originalId").isEmpty()) ) {
                        // Param: originalId, Type: String
                        routesRequestBuilder.withOriginalId(stringStraightPass(params.getString("originalId")));
                    }
                    
                    routesRequestBuilder.rawGet(new ApiCallback<String>() {
                        @Override
                        public void onFailure(ApiException e, int statusCode, Map<String, List<String>> responseHeaders) {
                            callbackContext.error("Problem during request call | " + e.getMessage());
                        }

                        @Override
                        public void onSuccess(String result, int statusCode, Map<String, List<String>> responseHeaders) {
                            JSONObject jsonObject = null;
                            try {
                                jsonObject = new JSONObject(result);
                                callbackContext.success(jsonObject);
                            } catch (Exception e) {
                                String errorMessage = "Problem during response parsing | " + String.valueOf(e.hashCode()) + ": " + e.getMessage();
                                callbackContext.error(errorMessage);
                            }
                        }

                        @Override
                        public void onUploadProgress(long bytesWritten, long contentLength, boolean done) {
                        }

                        @Override
                        public void onDownloadProgress(long bytesRead, long contentLength, boolean done) {
                        }
                    });
                } catch (Exception e) {
                    String errorMessage = "Problem during request building | " + String.valueOf(e.hashCode()) + ": " + e.getMessage();
                    callbackContext.error(errorMessage);
                }
            }
        });
    }
    final private void routes(final JSONObject params, final CallbackContext callbackContext) {
        if (this.navitiaSdk == null) {
            callbackContext.error("NavitiaSDK is not instanciated");
            return;
        }

        final RoutesApi.RoutesRequestBuilder routesRequestBuilder = this.navitiaSdk.routesApi.newRoutesRequestBuilder();
        cordova.getThreadPool().execute(new Runnable() {
            @Override
            public void run() {
                try {
                    if (params.has("externalCode") && (params.getString("externalCode") != null) && (!params.getString("externalCode").isEmpty()) ) {
                        // Param: externalCode, Type: String
                        routesRequestBuilder.withExternalCode(stringStraightPass(params.getString("externalCode")));
                    }
                    if (params.has("startPage") && (params.getString("startPage") != null) && (!params.getString("startPage").isEmpty()) ) {
                        // Param: startPage, Type: Integer
                        routesRequestBuilder.withStartPage(integerStraightPass(params.getInt("startPage")));
                    }
                    if (params.has("count") && (params.getString("count") != null) && (!params.getString("count").isEmpty()) ) {
                        // Param: count, Type: Integer
                        routesRequestBuilder.withCount(integerStraightPass(params.getInt("count")));
                    }
                    if (params.has("depth") && (params.getString("depth") != null) && (!params.getString("depth").isEmpty()) ) {
                        // Param: depth, Type: Integer
                        routesRequestBuilder.withDepth(integerStraightPass(params.getInt("depth")));
                    }
                    if (params.has("forbiddenId") && (params.getString("forbiddenId") != null) && (!params.getString("forbiddenId").isEmpty()) ) {
                        // Param: forbiddenId, Type: List
                        routesRequestBuilder.withForbiddenId(jsonArrayToStringList(params.getJSONArray("forbiddenId")));
                    }
                    if (params.has("forbiddenUris") && (params.getString("forbiddenUris") != null) && (!params.getString("forbiddenUris").isEmpty()) ) {
                        // Param: forbiddenUris, Type: List
                        routesRequestBuilder.withForbiddenUris(jsonArrayToStringList(params.getJSONArray("forbiddenUris")));
                    }
                    if (params.has("headsign") && (params.getString("headsign") != null) && (!params.getString("headsign").isEmpty()) ) {
                        // Param: headsign, Type: String
                        routesRequestBuilder.withHeadsign(stringStraightPass(params.getString("headsign")));
                    }
                    if (params.has("showCodes") && (params.getString("showCodes") != null) && (!params.getString("showCodes").isEmpty()) ) {
                        // Param: showCodes, Type: Boolean
                        routesRequestBuilder.withShowCodes(booleanStraightPass(params.getBoolean("showCodes")));
                    }
                    if (params.has("odtLevel") && (params.getString("odtLevel") != null) && (!params.getString("odtLevel").isEmpty()) ) {
                        // Param: odtLevel, Type: String
                        routesRequestBuilder.withOdtLevel(stringStraightPass(params.getString("odtLevel")));
                    }
                    if (params.has("dataFreshness") && (params.getString("dataFreshness") != null) && (!params.getString("dataFreshness").isEmpty()) ) {
                        // Param: dataFreshness, Type: String
                        routesRequestBuilder.withDataFreshness(stringStraightPass(params.getString("dataFreshness")));
                    }
                    if (params.has("distance") && (params.getString("distance") != null) && (!params.getString("distance").isEmpty()) ) {
                        // Param: distance, Type: Integer
                        routesRequestBuilder.withDistance(integerStraightPass(params.getInt("distance")));
                    }
                    if (params.has("since") && (params.getString("since") != null) && (!params.getString("since").isEmpty()) ) {
                        // Param: since, Type: Date
                        routesRequestBuilder.withSince(stringToDateTime(params.getString("since")));
                    }
                    if (params.has("until") && (params.getString("until") != null) && (!params.getString("until").isEmpty()) ) {
                        // Param: until, Type: Date
                        routesRequestBuilder.withUntil(stringToDateTime(params.getString("until")));
                    }
                    if (params.has("disableGeojson") && (params.getString("disableGeojson") != null) && (!params.getString("disableGeojson").isEmpty()) ) {
                        // Param: disableGeojson, Type: Boolean
                        routesRequestBuilder.withDisableGeojson(booleanStraightPass(params.getBoolean("disableGeojson")));
                    }
                    if (params.has("disableDisruption") && (params.getString("disableDisruption") != null) && (!params.getString("disableDisruption").isEmpty()) ) {
                        // Param: disableDisruption, Type: Boolean
                        routesRequestBuilder.withDisableDisruption(booleanStraightPass(params.getBoolean("disableDisruption")));
                    }
                    if (params.has("filter") && (params.getString("filter") != null) && (!params.getString("filter").isEmpty()) ) {
                        // Param: filter, Type: String
                        routesRequestBuilder.withFilter(stringStraightPass(params.getString("filter")));
                    }
                    if (params.has("tags") && (params.getString("tags") != null) && (!params.getString("tags").isEmpty()) ) {
                        // Param: tags, Type: List
                        routesRequestBuilder.withTags(jsonArrayToStringList(params.getJSONArray("tags")));
                    }
                    if (params.has("originalId") && (params.getString("originalId") != null) && (!params.getString("originalId").isEmpty()) ) {
                        // Param: originalId, Type: String
                        routesRequestBuilder.withOriginalId(stringStraightPass(params.getString("originalId")));
                    }
                    
                    routesRequestBuilder.rawGet(new ApiCallback<String>() {
                        @Override
                        public void onFailure(ApiException e, int statusCode, Map<String, List<String>> responseHeaders) {
                            callbackContext.error("Problem during request call | " + e.getMessage());
                        }

                        @Override
                        public void onSuccess(String result, int statusCode, Map<String, List<String>> responseHeaders) {
                            JSONObject jsonObject = null;
                            try {
                                jsonObject = new JSONObject(result);
                                callbackContext.success(jsonObject);
                            } catch (Exception e) {
                                String errorMessage = "Problem during response parsing | " + String.valueOf(e.hashCode()) + ": " + e.getMessage();
                                callbackContext.error(errorMessage);
                            }
                        }

                        @Override
                        public void onUploadProgress(long bytesWritten, long contentLength, boolean done) {
                        }

                        @Override
                        public void onDownloadProgress(long bytesRead, long contentLength, boolean done) {
                        }
                    });
                } catch (Exception e) {
                    String errorMessage = "Problem during request building | " + String.valueOf(e.hashCode()) + ": " + e.getMessage();
                    callbackContext.error(errorMessage);
                }
            }
        });
    }
    final private void coverageLonLatStopAreas(final JSONObject params, final CallbackContext callbackContext) {
        if (this.navitiaSdk == null) {
            callbackContext.error("NavitiaSDK is not instanciated");
            return;
        }

        final StopAreasApi.CoverageLonLatStopAreasRequestBuilder stopAreasRequestBuilder = this.navitiaSdk.stopAreasApi.newCoverageLonLatStopAreasRequestBuilder();
        cordova.getThreadPool().execute(new Runnable() {
            @Override
            public void run() {
                try {
                    if (params.has("lat") && (params.getString("lat") != null) && (!params.getString("lat").isEmpty()) ) {
                        // Param: lat, Type: BigDecimal
                        stopAreasRequestBuilder.withLat(longToBigDecimal(params.getLong("lat")));
                    }
                    if (params.has("lon") && (params.getString("lon") != null) && (!params.getString("lon").isEmpty()) ) {
                        // Param: lon, Type: BigDecimal
                        stopAreasRequestBuilder.withLon(longToBigDecimal(params.getLong("lon")));
                    }
                    if (params.has("startPage") && (params.getString("startPage") != null) && (!params.getString("startPage").isEmpty()) ) {
                        // Param: startPage, Type: Integer
                        stopAreasRequestBuilder.withStartPage(integerStraightPass(params.getInt("startPage")));
                    }
                    if (params.has("count") && (params.getString("count") != null) && (!params.getString("count").isEmpty()) ) {
                        // Param: count, Type: Integer
                        stopAreasRequestBuilder.withCount(integerStraightPass(params.getInt("count")));
                    }
                    if (params.has("depth") && (params.getString("depth") != null) && (!params.getString("depth").isEmpty()) ) {
                        // Param: depth, Type: Integer
                        stopAreasRequestBuilder.withDepth(integerStraightPass(params.getInt("depth")));
                    }
                    if (params.has("forbiddenId") && (params.getString("forbiddenId") != null) && (!params.getString("forbiddenId").isEmpty()) ) {
                        // Param: forbiddenId, Type: List
                        stopAreasRequestBuilder.withForbiddenId(jsonArrayToStringList(params.getJSONArray("forbiddenId")));
                    }
                    if (params.has("forbiddenUris") && (params.getString("forbiddenUris") != null) && (!params.getString("forbiddenUris").isEmpty()) ) {
                        // Param: forbiddenUris, Type: List
                        stopAreasRequestBuilder.withForbiddenUris(jsonArrayToStringList(params.getJSONArray("forbiddenUris")));
                    }
                    if (params.has("externalCode") && (params.getString("externalCode") != null) && (!params.getString("externalCode").isEmpty()) ) {
                        // Param: externalCode, Type: String
                        stopAreasRequestBuilder.withExternalCode(stringStraightPass(params.getString("externalCode")));
                    }
                    if (params.has("headsign") && (params.getString("headsign") != null) && (!params.getString("headsign").isEmpty()) ) {
                        // Param: headsign, Type: String
                        stopAreasRequestBuilder.withHeadsign(stringStraightPass(params.getString("headsign")));
                    }
                    if (params.has("showCodes") && (params.getString("showCodes") != null) && (!params.getString("showCodes").isEmpty()) ) {
                        // Param: showCodes, Type: Boolean
                        stopAreasRequestBuilder.withShowCodes(booleanStraightPass(params.getBoolean("showCodes")));
                    }
                    if (params.has("odtLevel") && (params.getString("odtLevel") != null) && (!params.getString("odtLevel").isEmpty()) ) {
                        // Param: odtLevel, Type: String
                        stopAreasRequestBuilder.withOdtLevel(stringStraightPass(params.getString("odtLevel")));
                    }
                    if (params.has("dataFreshness") && (params.getString("dataFreshness") != null) && (!params.getString("dataFreshness").isEmpty()) ) {
                        // Param: dataFreshness, Type: String
                        stopAreasRequestBuilder.withDataFreshness(stringStraightPass(params.getString("dataFreshness")));
                    }
                    if (params.has("distance") && (params.getString("distance") != null) && (!params.getString("distance").isEmpty()) ) {
                        // Param: distance, Type: Integer
                        stopAreasRequestBuilder.withDistance(integerStraightPass(params.getInt("distance")));
                    }
                    if (params.has("since") && (params.getString("since") != null) && (!params.getString("since").isEmpty()) ) {
                        // Param: since, Type: Date
                        stopAreasRequestBuilder.withSince(stringToDateTime(params.getString("since")));
                    }
                    if (params.has("until") && (params.getString("until") != null) && (!params.getString("until").isEmpty()) ) {
                        // Param: until, Type: Date
                        stopAreasRequestBuilder.withUntil(stringToDateTime(params.getString("until")));
                    }
                    if (params.has("disableGeojson") && (params.getString("disableGeojson") != null) && (!params.getString("disableGeojson").isEmpty()) ) {
                        // Param: disableGeojson, Type: Boolean
                        stopAreasRequestBuilder.withDisableGeojson(booleanStraightPass(params.getBoolean("disableGeojson")));
                    }
                    if (params.has("disableDisruption") && (params.getString("disableDisruption") != null) && (!params.getString("disableDisruption").isEmpty()) ) {
                        // Param: disableDisruption, Type: Boolean
                        stopAreasRequestBuilder.withDisableDisruption(booleanStraightPass(params.getBoolean("disableDisruption")));
                    }
                    if (params.has("filter") && (params.getString("filter") != null) && (!params.getString("filter").isEmpty()) ) {
                        // Param: filter, Type: String
                        stopAreasRequestBuilder.withFilter(stringStraightPass(params.getString("filter")));
                    }
                    if (params.has("tags") && (params.getString("tags") != null) && (!params.getString("tags").isEmpty()) ) {
                        // Param: tags, Type: List
                        stopAreasRequestBuilder.withTags(jsonArrayToStringList(params.getJSONArray("tags")));
                    }
                    if (params.has("originalId") && (params.getString("originalId") != null) && (!params.getString("originalId").isEmpty()) ) {
                        // Param: originalId, Type: String
                        stopAreasRequestBuilder.withOriginalId(stringStraightPass(params.getString("originalId")));
                    }
                    
                    stopAreasRequestBuilder.rawGet(new ApiCallback<String>() {
                        @Override
                        public void onFailure(ApiException e, int statusCode, Map<String, List<String>> responseHeaders) {
                            callbackContext.error("Problem during request call | " + e.getMessage());
                        }

                        @Override
                        public void onSuccess(String result, int statusCode, Map<String, List<String>> responseHeaders) {
                            JSONObject jsonObject = null;
                            try {
                                jsonObject = new JSONObject(result);
                                callbackContext.success(jsonObject);
                            } catch (Exception e) {
                                String errorMessage = "Problem during response parsing | " + String.valueOf(e.hashCode()) + ": " + e.getMessage();
                                callbackContext.error(errorMessage);
                            }
                        }

                        @Override
                        public void onUploadProgress(long bytesWritten, long contentLength, boolean done) {
                        }

                        @Override
                        public void onDownloadProgress(long bytesRead, long contentLength, boolean done) {
                        }
                    });
                } catch (Exception e) {
                    String errorMessage = "Problem during request building | " + String.valueOf(e.hashCode()) + ": " + e.getMessage();
                    callbackContext.error(errorMessage);
                }
            }
        });
    }
    final private void coverageLonLatStopAreasId(final JSONObject params, final CallbackContext callbackContext) {
        if (this.navitiaSdk == null) {
            callbackContext.error("NavitiaSDK is not instanciated");
            return;
        }

        final StopAreasApi.CoverageLonLatStopAreasIdRequestBuilder stopAreasRequestBuilder = this.navitiaSdk.stopAreasApi.newCoverageLonLatStopAreasIdRequestBuilder();
        cordova.getThreadPool().execute(new Runnable() {
            @Override
            public void run() {
                try {
                    if (params.has("lat") && (params.getString("lat") != null) && (!params.getString("lat").isEmpty()) ) {
                        // Param: lat, Type: BigDecimal
                        stopAreasRequestBuilder.withLat(longToBigDecimal(params.getLong("lat")));
                    }
                    if (params.has("lon") && (params.getString("lon") != null) && (!params.getString("lon").isEmpty()) ) {
                        // Param: lon, Type: BigDecimal
                        stopAreasRequestBuilder.withLon(longToBigDecimal(params.getLong("lon")));
                    }
                    if (params.has("id") && (params.getString("id") != null) && (!params.getString("id").isEmpty()) ) {
                        // Param: id, Type: String
                        stopAreasRequestBuilder.withId(stringStraightPass(params.getString("id")));
                    }
                    if (params.has("startPage") && (params.getString("startPage") != null) && (!params.getString("startPage").isEmpty()) ) {
                        // Param: startPage, Type: Integer
                        stopAreasRequestBuilder.withStartPage(integerStraightPass(params.getInt("startPage")));
                    }
                    if (params.has("count") && (params.getString("count") != null) && (!params.getString("count").isEmpty()) ) {
                        // Param: count, Type: Integer
                        stopAreasRequestBuilder.withCount(integerStraightPass(params.getInt("count")));
                    }
                    if (params.has("depth") && (params.getString("depth") != null) && (!params.getString("depth").isEmpty()) ) {
                        // Param: depth, Type: Integer
                        stopAreasRequestBuilder.withDepth(integerStraightPass(params.getInt("depth")));
                    }
                    if (params.has("forbiddenId") && (params.getString("forbiddenId") != null) && (!params.getString("forbiddenId").isEmpty()) ) {
                        // Param: forbiddenId, Type: List
                        stopAreasRequestBuilder.withForbiddenId(jsonArrayToStringList(params.getJSONArray("forbiddenId")));
                    }
                    if (params.has("forbiddenUris") && (params.getString("forbiddenUris") != null) && (!params.getString("forbiddenUris").isEmpty()) ) {
                        // Param: forbiddenUris, Type: List
                        stopAreasRequestBuilder.withForbiddenUris(jsonArrayToStringList(params.getJSONArray("forbiddenUris")));
                    }
                    if (params.has("externalCode") && (params.getString("externalCode") != null) && (!params.getString("externalCode").isEmpty()) ) {
                        // Param: externalCode, Type: String
                        stopAreasRequestBuilder.withExternalCode(stringStraightPass(params.getString("externalCode")));
                    }
                    if (params.has("headsign") && (params.getString("headsign") != null) && (!params.getString("headsign").isEmpty()) ) {
                        // Param: headsign, Type: String
                        stopAreasRequestBuilder.withHeadsign(stringStraightPass(params.getString("headsign")));
                    }
                    if (params.has("showCodes") && (params.getString("showCodes") != null) && (!params.getString("showCodes").isEmpty()) ) {
                        // Param: showCodes, Type: Boolean
                        stopAreasRequestBuilder.withShowCodes(booleanStraightPass(params.getBoolean("showCodes")));
                    }
                    if (params.has("odtLevel") && (params.getString("odtLevel") != null) && (!params.getString("odtLevel").isEmpty()) ) {
                        // Param: odtLevel, Type: String
                        stopAreasRequestBuilder.withOdtLevel(stringStraightPass(params.getString("odtLevel")));
                    }
                    if (params.has("dataFreshness") && (params.getString("dataFreshness") != null) && (!params.getString("dataFreshness").isEmpty()) ) {
                        // Param: dataFreshness, Type: String
                        stopAreasRequestBuilder.withDataFreshness(stringStraightPass(params.getString("dataFreshness")));
                    }
                    if (params.has("distance") && (params.getString("distance") != null) && (!params.getString("distance").isEmpty()) ) {
                        // Param: distance, Type: Integer
                        stopAreasRequestBuilder.withDistance(integerStraightPass(params.getInt("distance")));
                    }
                    if (params.has("since") && (params.getString("since") != null) && (!params.getString("since").isEmpty()) ) {
                        // Param: since, Type: Date
                        stopAreasRequestBuilder.withSince(stringToDateTime(params.getString("since")));
                    }
                    if (params.has("until") && (params.getString("until") != null) && (!params.getString("until").isEmpty()) ) {
                        // Param: until, Type: Date
                        stopAreasRequestBuilder.withUntil(stringToDateTime(params.getString("until")));
                    }
                    if (params.has("disableGeojson") && (params.getString("disableGeojson") != null) && (!params.getString("disableGeojson").isEmpty()) ) {
                        // Param: disableGeojson, Type: Boolean
                        stopAreasRequestBuilder.withDisableGeojson(booleanStraightPass(params.getBoolean("disableGeojson")));
                    }
                    if (params.has("disableDisruption") && (params.getString("disableDisruption") != null) && (!params.getString("disableDisruption").isEmpty()) ) {
                        // Param: disableDisruption, Type: Boolean
                        stopAreasRequestBuilder.withDisableDisruption(booleanStraightPass(params.getBoolean("disableDisruption")));
                    }
                    if (params.has("tags") && (params.getString("tags") != null) && (!params.getString("tags").isEmpty()) ) {
                        // Param: tags, Type: List
                        stopAreasRequestBuilder.withTags(jsonArrayToStringList(params.getJSONArray("tags")));
                    }
                    if (params.has("originalId") && (params.getString("originalId") != null) && (!params.getString("originalId").isEmpty()) ) {
                        // Param: originalId, Type: String
                        stopAreasRequestBuilder.withOriginalId(stringStraightPass(params.getString("originalId")));
                    }
                    
                    stopAreasRequestBuilder.rawGet(new ApiCallback<String>() {
                        @Override
                        public void onFailure(ApiException e, int statusCode, Map<String, List<String>> responseHeaders) {
                            callbackContext.error("Problem during request call | " + e.getMessage());
                        }

                        @Override
                        public void onSuccess(String result, int statusCode, Map<String, List<String>> responseHeaders) {
                            JSONObject jsonObject = null;
                            try {
                                jsonObject = new JSONObject(result);
                                callbackContext.success(jsonObject);
                            } catch (Exception e) {
                                String errorMessage = "Problem during response parsing | " + String.valueOf(e.hashCode()) + ": " + e.getMessage();
                                callbackContext.error(errorMessage);
                            }
                        }

                        @Override
                        public void onUploadProgress(long bytesWritten, long contentLength, boolean done) {
                        }

                        @Override
                        public void onDownloadProgress(long bytesRead, long contentLength, boolean done) {
                        }
                    });
                } catch (Exception e) {
                    String errorMessage = "Problem during request building | " + String.valueOf(e.hashCode()) + ": " + e.getMessage();
                    callbackContext.error(errorMessage);
                }
            }
        });
    }
    final private void coverageLonLatUriStopAreas(final JSONObject params, final CallbackContext callbackContext) {
        if (this.navitiaSdk == null) {
            callbackContext.error("NavitiaSDK is not instanciated");
            return;
        }

        final StopAreasApi.CoverageLonLatUriStopAreasRequestBuilder stopAreasRequestBuilder = this.navitiaSdk.stopAreasApi.newCoverageLonLatUriStopAreasRequestBuilder();
        cordova.getThreadPool().execute(new Runnable() {
            @Override
            public void run() {
                try {
                    if (params.has("lat") && (params.getString("lat") != null) && (!params.getString("lat").isEmpty()) ) {
                        // Param: lat, Type: BigDecimal
                        stopAreasRequestBuilder.withLat(longToBigDecimal(params.getLong("lat")));
                    }
                    if (params.has("lon") && (params.getString("lon") != null) && (!params.getString("lon").isEmpty()) ) {
                        // Param: lon, Type: BigDecimal
                        stopAreasRequestBuilder.withLon(longToBigDecimal(params.getLong("lon")));
                    }
                    if (params.has("uri") && (params.getString("uri") != null) && (!params.getString("uri").isEmpty()) ) {
                        // Param: uri, Type: String
                        stopAreasRequestBuilder.withUri(stringStraightPass(params.getString("uri")));
                    }
                    if (params.has("startPage") && (params.getString("startPage") != null) && (!params.getString("startPage").isEmpty()) ) {
                        // Param: startPage, Type: Integer
                        stopAreasRequestBuilder.withStartPage(integerStraightPass(params.getInt("startPage")));
                    }
                    if (params.has("count") && (params.getString("count") != null) && (!params.getString("count").isEmpty()) ) {
                        // Param: count, Type: Integer
                        stopAreasRequestBuilder.withCount(integerStraightPass(params.getInt("count")));
                    }
                    if (params.has("depth") && (params.getString("depth") != null) && (!params.getString("depth").isEmpty()) ) {
                        // Param: depth, Type: Integer
                        stopAreasRequestBuilder.withDepth(integerStraightPass(params.getInt("depth")));
                    }
                    if (params.has("forbiddenId") && (params.getString("forbiddenId") != null) && (!params.getString("forbiddenId").isEmpty()) ) {
                        // Param: forbiddenId, Type: List
                        stopAreasRequestBuilder.withForbiddenId(jsonArrayToStringList(params.getJSONArray("forbiddenId")));
                    }
                    if (params.has("forbiddenUris") && (params.getString("forbiddenUris") != null) && (!params.getString("forbiddenUris").isEmpty()) ) {
                        // Param: forbiddenUris, Type: List
                        stopAreasRequestBuilder.withForbiddenUris(jsonArrayToStringList(params.getJSONArray("forbiddenUris")));
                    }
                    if (params.has("externalCode") && (params.getString("externalCode") != null) && (!params.getString("externalCode").isEmpty()) ) {
                        // Param: externalCode, Type: String
                        stopAreasRequestBuilder.withExternalCode(stringStraightPass(params.getString("externalCode")));
                    }
                    if (params.has("headsign") && (params.getString("headsign") != null) && (!params.getString("headsign").isEmpty()) ) {
                        // Param: headsign, Type: String
                        stopAreasRequestBuilder.withHeadsign(stringStraightPass(params.getString("headsign")));
                    }
                    if (params.has("showCodes") && (params.getString("showCodes") != null) && (!params.getString("showCodes").isEmpty()) ) {
                        // Param: showCodes, Type: Boolean
                        stopAreasRequestBuilder.withShowCodes(booleanStraightPass(params.getBoolean("showCodes")));
                    }
                    if (params.has("odtLevel") && (params.getString("odtLevel") != null) && (!params.getString("odtLevel").isEmpty()) ) {
                        // Param: odtLevel, Type: String
                        stopAreasRequestBuilder.withOdtLevel(stringStraightPass(params.getString("odtLevel")));
                    }
                    if (params.has("dataFreshness") && (params.getString("dataFreshness") != null) && (!params.getString("dataFreshness").isEmpty()) ) {
                        // Param: dataFreshness, Type: String
                        stopAreasRequestBuilder.withDataFreshness(stringStraightPass(params.getString("dataFreshness")));
                    }
                    if (params.has("distance") && (params.getString("distance") != null) && (!params.getString("distance").isEmpty()) ) {
                        // Param: distance, Type: Integer
                        stopAreasRequestBuilder.withDistance(integerStraightPass(params.getInt("distance")));
                    }
                    if (params.has("since") && (params.getString("since") != null) && (!params.getString("since").isEmpty()) ) {
                        // Param: since, Type: Date
                        stopAreasRequestBuilder.withSince(stringToDateTime(params.getString("since")));
                    }
                    if (params.has("until") && (params.getString("until") != null) && (!params.getString("until").isEmpty()) ) {
                        // Param: until, Type: Date
                        stopAreasRequestBuilder.withUntil(stringToDateTime(params.getString("until")));
                    }
                    if (params.has("disableGeojson") && (params.getString("disableGeojson") != null) && (!params.getString("disableGeojson").isEmpty()) ) {
                        // Param: disableGeojson, Type: Boolean
                        stopAreasRequestBuilder.withDisableGeojson(booleanStraightPass(params.getBoolean("disableGeojson")));
                    }
                    if (params.has("disableDisruption") && (params.getString("disableDisruption") != null) && (!params.getString("disableDisruption").isEmpty()) ) {
                        // Param: disableDisruption, Type: Boolean
                        stopAreasRequestBuilder.withDisableDisruption(booleanStraightPass(params.getBoolean("disableDisruption")));
                    }
                    if (params.has("filter") && (params.getString("filter") != null) && (!params.getString("filter").isEmpty()) ) {
                        // Param: filter, Type: String
                        stopAreasRequestBuilder.withFilter(stringStraightPass(params.getString("filter")));
                    }
                    if (params.has("tags") && (params.getString("tags") != null) && (!params.getString("tags").isEmpty()) ) {
                        // Param: tags, Type: List
                        stopAreasRequestBuilder.withTags(jsonArrayToStringList(params.getJSONArray("tags")));
                    }
                    if (params.has("originalId") && (params.getString("originalId") != null) && (!params.getString("originalId").isEmpty()) ) {
                        // Param: originalId, Type: String
                        stopAreasRequestBuilder.withOriginalId(stringStraightPass(params.getString("originalId")));
                    }
                    
                    stopAreasRequestBuilder.rawGet(new ApiCallback<String>() {
                        @Override
                        public void onFailure(ApiException e, int statusCode, Map<String, List<String>> responseHeaders) {
                            callbackContext.error("Problem during request call | " + e.getMessage());
                        }

                        @Override
                        public void onSuccess(String result, int statusCode, Map<String, List<String>> responseHeaders) {
                            JSONObject jsonObject = null;
                            try {
                                jsonObject = new JSONObject(result);
                                callbackContext.success(jsonObject);
                            } catch (Exception e) {
                                String errorMessage = "Problem during response parsing | " + String.valueOf(e.hashCode()) + ": " + e.getMessage();
                                callbackContext.error(errorMessage);
                            }
                        }

                        @Override
                        public void onUploadProgress(long bytesWritten, long contentLength, boolean done) {
                        }

                        @Override
                        public void onDownloadProgress(long bytesRead, long contentLength, boolean done) {
                        }
                    });
                } catch (Exception e) {
                    String errorMessage = "Problem during request building | " + String.valueOf(e.hashCode()) + ": " + e.getMessage();
                    callbackContext.error(errorMessage);
                }
            }
        });
    }
    final private void coverageLonLatUriStopAreasId(final JSONObject params, final CallbackContext callbackContext) {
        if (this.navitiaSdk == null) {
            callbackContext.error("NavitiaSDK is not instanciated");
            return;
        }

        final StopAreasApi.CoverageLonLatUriStopAreasIdRequestBuilder stopAreasRequestBuilder = this.navitiaSdk.stopAreasApi.newCoverageLonLatUriStopAreasIdRequestBuilder();
        cordova.getThreadPool().execute(new Runnable() {
            @Override
            public void run() {
                try {
                    if (params.has("lat") && (params.getString("lat") != null) && (!params.getString("lat").isEmpty()) ) {
                        // Param: lat, Type: BigDecimal
                        stopAreasRequestBuilder.withLat(longToBigDecimal(params.getLong("lat")));
                    }
                    if (params.has("lon") && (params.getString("lon") != null) && (!params.getString("lon").isEmpty()) ) {
                        // Param: lon, Type: BigDecimal
                        stopAreasRequestBuilder.withLon(longToBigDecimal(params.getLong("lon")));
                    }
                    if (params.has("uri") && (params.getString("uri") != null) && (!params.getString("uri").isEmpty()) ) {
                        // Param: uri, Type: String
                        stopAreasRequestBuilder.withUri(stringStraightPass(params.getString("uri")));
                    }
                    if (params.has("id") && (params.getString("id") != null) && (!params.getString("id").isEmpty()) ) {
                        // Param: id, Type: String
                        stopAreasRequestBuilder.withId(stringStraightPass(params.getString("id")));
                    }
                    if (params.has("startPage") && (params.getString("startPage") != null) && (!params.getString("startPage").isEmpty()) ) {
                        // Param: startPage, Type: Integer
                        stopAreasRequestBuilder.withStartPage(integerStraightPass(params.getInt("startPage")));
                    }
                    if (params.has("count") && (params.getString("count") != null) && (!params.getString("count").isEmpty()) ) {
                        // Param: count, Type: Integer
                        stopAreasRequestBuilder.withCount(integerStraightPass(params.getInt("count")));
                    }
                    if (params.has("depth") && (params.getString("depth") != null) && (!params.getString("depth").isEmpty()) ) {
                        // Param: depth, Type: Integer
                        stopAreasRequestBuilder.withDepth(integerStraightPass(params.getInt("depth")));
                    }
                    if (params.has("forbiddenId") && (params.getString("forbiddenId") != null) && (!params.getString("forbiddenId").isEmpty()) ) {
                        // Param: forbiddenId, Type: List
                        stopAreasRequestBuilder.withForbiddenId(jsonArrayToStringList(params.getJSONArray("forbiddenId")));
                    }
                    if (params.has("forbiddenUris") && (params.getString("forbiddenUris") != null) && (!params.getString("forbiddenUris").isEmpty()) ) {
                        // Param: forbiddenUris, Type: List
                        stopAreasRequestBuilder.withForbiddenUris(jsonArrayToStringList(params.getJSONArray("forbiddenUris")));
                    }
                    if (params.has("externalCode") && (params.getString("externalCode") != null) && (!params.getString("externalCode").isEmpty()) ) {
                        // Param: externalCode, Type: String
                        stopAreasRequestBuilder.withExternalCode(stringStraightPass(params.getString("externalCode")));
                    }
                    if (params.has("headsign") && (params.getString("headsign") != null) && (!params.getString("headsign").isEmpty()) ) {
                        // Param: headsign, Type: String
                        stopAreasRequestBuilder.withHeadsign(stringStraightPass(params.getString("headsign")));
                    }
                    if (params.has("showCodes") && (params.getString("showCodes") != null) && (!params.getString("showCodes").isEmpty()) ) {
                        // Param: showCodes, Type: Boolean
                        stopAreasRequestBuilder.withShowCodes(booleanStraightPass(params.getBoolean("showCodes")));
                    }
                    if (params.has("odtLevel") && (params.getString("odtLevel") != null) && (!params.getString("odtLevel").isEmpty()) ) {
                        // Param: odtLevel, Type: String
                        stopAreasRequestBuilder.withOdtLevel(stringStraightPass(params.getString("odtLevel")));
                    }
                    if (params.has("dataFreshness") && (params.getString("dataFreshness") != null) && (!params.getString("dataFreshness").isEmpty()) ) {
                        // Param: dataFreshness, Type: String
                        stopAreasRequestBuilder.withDataFreshness(stringStraightPass(params.getString("dataFreshness")));
                    }
                    if (params.has("distance") && (params.getString("distance") != null) && (!params.getString("distance").isEmpty()) ) {
                        // Param: distance, Type: Integer
                        stopAreasRequestBuilder.withDistance(integerStraightPass(params.getInt("distance")));
                    }
                    if (params.has("since") && (params.getString("since") != null) && (!params.getString("since").isEmpty()) ) {
                        // Param: since, Type: Date
                        stopAreasRequestBuilder.withSince(stringToDateTime(params.getString("since")));
                    }
                    if (params.has("until") && (params.getString("until") != null) && (!params.getString("until").isEmpty()) ) {
                        // Param: until, Type: Date
                        stopAreasRequestBuilder.withUntil(stringToDateTime(params.getString("until")));
                    }
                    if (params.has("disableGeojson") && (params.getString("disableGeojson") != null) && (!params.getString("disableGeojson").isEmpty()) ) {
                        // Param: disableGeojson, Type: Boolean
                        stopAreasRequestBuilder.withDisableGeojson(booleanStraightPass(params.getBoolean("disableGeojson")));
                    }
                    if (params.has("disableDisruption") && (params.getString("disableDisruption") != null) && (!params.getString("disableDisruption").isEmpty()) ) {
                        // Param: disableDisruption, Type: Boolean
                        stopAreasRequestBuilder.withDisableDisruption(booleanStraightPass(params.getBoolean("disableDisruption")));
                    }
                    if (params.has("tags") && (params.getString("tags") != null) && (!params.getString("tags").isEmpty()) ) {
                        // Param: tags, Type: List
                        stopAreasRequestBuilder.withTags(jsonArrayToStringList(params.getJSONArray("tags")));
                    }
                    if (params.has("originalId") && (params.getString("originalId") != null) && (!params.getString("originalId").isEmpty()) ) {
                        // Param: originalId, Type: String
                        stopAreasRequestBuilder.withOriginalId(stringStraightPass(params.getString("originalId")));
                    }
                    
                    stopAreasRequestBuilder.rawGet(new ApiCallback<String>() {
                        @Override
                        public void onFailure(ApiException e, int statusCode, Map<String, List<String>> responseHeaders) {
                            callbackContext.error("Problem during request call | " + e.getMessage());
                        }

                        @Override
                        public void onSuccess(String result, int statusCode, Map<String, List<String>> responseHeaders) {
                            JSONObject jsonObject = null;
                            try {
                                jsonObject = new JSONObject(result);
                                callbackContext.success(jsonObject);
                            } catch (Exception e) {
                                String errorMessage = "Problem during response parsing | " + String.valueOf(e.hashCode()) + ": " + e.getMessage();
                                callbackContext.error(errorMessage);
                            }
                        }

                        @Override
                        public void onUploadProgress(long bytesWritten, long contentLength, boolean done) {
                        }

                        @Override
                        public void onDownloadProgress(long bytesRead, long contentLength, boolean done) {
                        }
                    });
                } catch (Exception e) {
                    String errorMessage = "Problem during request building | " + String.valueOf(e.hashCode()) + ": " + e.getMessage();
                    callbackContext.error(errorMessage);
                }
            }
        });
    }
    final private void coverageRegionStopAreas(final JSONObject params, final CallbackContext callbackContext) {
        if (this.navitiaSdk == null) {
            callbackContext.error("NavitiaSDK is not instanciated");
            return;
        }

        final StopAreasApi.CoverageRegionStopAreasRequestBuilder stopAreasRequestBuilder = this.navitiaSdk.stopAreasApi.newCoverageRegionStopAreasRequestBuilder();
        cordova.getThreadPool().execute(new Runnable() {
            @Override
            public void run() {
                try {
                    if (params.has("region") && (params.getString("region") != null) && (!params.getString("region").isEmpty()) ) {
                        // Param: region, Type: String
                        stopAreasRequestBuilder.withRegion(stringStraightPass(params.getString("region")));
                    }
                    if (params.has("startPage") && (params.getString("startPage") != null) && (!params.getString("startPage").isEmpty()) ) {
                        // Param: startPage, Type: Integer
                        stopAreasRequestBuilder.withStartPage(integerStraightPass(params.getInt("startPage")));
                    }
                    if (params.has("count") && (params.getString("count") != null) && (!params.getString("count").isEmpty()) ) {
                        // Param: count, Type: Integer
                        stopAreasRequestBuilder.withCount(integerStraightPass(params.getInt("count")));
                    }
                    if (params.has("depth") && (params.getString("depth") != null) && (!params.getString("depth").isEmpty()) ) {
                        // Param: depth, Type: Integer
                        stopAreasRequestBuilder.withDepth(integerStraightPass(params.getInt("depth")));
                    }
                    if (params.has("forbiddenId") && (params.getString("forbiddenId") != null) && (!params.getString("forbiddenId").isEmpty()) ) {
                        // Param: forbiddenId, Type: List
                        stopAreasRequestBuilder.withForbiddenId(jsonArrayToStringList(params.getJSONArray("forbiddenId")));
                    }
                    if (params.has("forbiddenUris") && (params.getString("forbiddenUris") != null) && (!params.getString("forbiddenUris").isEmpty()) ) {
                        // Param: forbiddenUris, Type: List
                        stopAreasRequestBuilder.withForbiddenUris(jsonArrayToStringList(params.getJSONArray("forbiddenUris")));
                    }
                    if (params.has("externalCode") && (params.getString("externalCode") != null) && (!params.getString("externalCode").isEmpty()) ) {
                        // Param: externalCode, Type: String
                        stopAreasRequestBuilder.withExternalCode(stringStraightPass(params.getString("externalCode")));
                    }
                    if (params.has("headsign") && (params.getString("headsign") != null) && (!params.getString("headsign").isEmpty()) ) {
                        // Param: headsign, Type: String
                        stopAreasRequestBuilder.withHeadsign(stringStraightPass(params.getString("headsign")));
                    }
                    if (params.has("showCodes") && (params.getString("showCodes") != null) && (!params.getString("showCodes").isEmpty()) ) {
                        // Param: showCodes, Type: Boolean
                        stopAreasRequestBuilder.withShowCodes(booleanStraightPass(params.getBoolean("showCodes")));
                    }
                    if (params.has("odtLevel") && (params.getString("odtLevel") != null) && (!params.getString("odtLevel").isEmpty()) ) {
                        // Param: odtLevel, Type: String
                        stopAreasRequestBuilder.withOdtLevel(stringStraightPass(params.getString("odtLevel")));
                    }
                    if (params.has("dataFreshness") && (params.getString("dataFreshness") != null) && (!params.getString("dataFreshness").isEmpty()) ) {
                        // Param: dataFreshness, Type: String
                        stopAreasRequestBuilder.withDataFreshness(stringStraightPass(params.getString("dataFreshness")));
                    }
                    if (params.has("distance") && (params.getString("distance") != null) && (!params.getString("distance").isEmpty()) ) {
                        // Param: distance, Type: Integer
                        stopAreasRequestBuilder.withDistance(integerStraightPass(params.getInt("distance")));
                    }
                    if (params.has("since") && (params.getString("since") != null) && (!params.getString("since").isEmpty()) ) {
                        // Param: since, Type: Date
                        stopAreasRequestBuilder.withSince(stringToDateTime(params.getString("since")));
                    }
                    if (params.has("until") && (params.getString("until") != null) && (!params.getString("until").isEmpty()) ) {
                        // Param: until, Type: Date
                        stopAreasRequestBuilder.withUntil(stringToDateTime(params.getString("until")));
                    }
                    if (params.has("disableGeojson") && (params.getString("disableGeojson") != null) && (!params.getString("disableGeojson").isEmpty()) ) {
                        // Param: disableGeojson, Type: Boolean
                        stopAreasRequestBuilder.withDisableGeojson(booleanStraightPass(params.getBoolean("disableGeojson")));
                    }
                    if (params.has("disableDisruption") && (params.getString("disableDisruption") != null) && (!params.getString("disableDisruption").isEmpty()) ) {
                        // Param: disableDisruption, Type: Boolean
                        stopAreasRequestBuilder.withDisableDisruption(booleanStraightPass(params.getBoolean("disableDisruption")));
                    }
                    if (params.has("filter") && (params.getString("filter") != null) && (!params.getString("filter").isEmpty()) ) {
                        // Param: filter, Type: String
                        stopAreasRequestBuilder.withFilter(stringStraightPass(params.getString("filter")));
                    }
                    if (params.has("tags") && (params.getString("tags") != null) && (!params.getString("tags").isEmpty()) ) {
                        // Param: tags, Type: List
                        stopAreasRequestBuilder.withTags(jsonArrayToStringList(params.getJSONArray("tags")));
                    }
                    if (params.has("originalId") && (params.getString("originalId") != null) && (!params.getString("originalId").isEmpty()) ) {
                        // Param: originalId, Type: String
                        stopAreasRequestBuilder.withOriginalId(stringStraightPass(params.getString("originalId")));
                    }
                    
                    stopAreasRequestBuilder.rawGet(new ApiCallback<String>() {
                        @Override
                        public void onFailure(ApiException e, int statusCode, Map<String, List<String>> responseHeaders) {
                            callbackContext.error("Problem during request call | " + e.getMessage());
                        }

                        @Override
                        public void onSuccess(String result, int statusCode, Map<String, List<String>> responseHeaders) {
                            JSONObject jsonObject = null;
                            try {
                                jsonObject = new JSONObject(result);
                                callbackContext.success(jsonObject);
                            } catch (Exception e) {
                                String errorMessage = "Problem during response parsing | " + String.valueOf(e.hashCode()) + ": " + e.getMessage();
                                callbackContext.error(errorMessage);
                            }
                        }

                        @Override
                        public void onUploadProgress(long bytesWritten, long contentLength, boolean done) {
                        }

                        @Override
                        public void onDownloadProgress(long bytesRead, long contentLength, boolean done) {
                        }
                    });
                } catch (Exception e) {
                    String errorMessage = "Problem during request building | " + String.valueOf(e.hashCode()) + ": " + e.getMessage();
                    callbackContext.error(errorMessage);
                }
            }
        });
    }
    final private void coverageRegionStopAreasId(final JSONObject params, final CallbackContext callbackContext) {
        if (this.navitiaSdk == null) {
            callbackContext.error("NavitiaSDK is not instanciated");
            return;
        }

        final StopAreasApi.CoverageRegionStopAreasIdRequestBuilder stopAreasRequestBuilder = this.navitiaSdk.stopAreasApi.newCoverageRegionStopAreasIdRequestBuilder();
        cordova.getThreadPool().execute(new Runnable() {
            @Override
            public void run() {
                try {
                    if (params.has("region") && (params.getString("region") != null) && (!params.getString("region").isEmpty()) ) {
                        // Param: region, Type: String
                        stopAreasRequestBuilder.withRegion(stringStraightPass(params.getString("region")));
                    }
                    if (params.has("id") && (params.getString("id") != null) && (!params.getString("id").isEmpty()) ) {
                        // Param: id, Type: String
                        stopAreasRequestBuilder.withId(stringStraightPass(params.getString("id")));
                    }
                    if (params.has("startPage") && (params.getString("startPage") != null) && (!params.getString("startPage").isEmpty()) ) {
                        // Param: startPage, Type: Integer
                        stopAreasRequestBuilder.withStartPage(integerStraightPass(params.getInt("startPage")));
                    }
                    if (params.has("count") && (params.getString("count") != null) && (!params.getString("count").isEmpty()) ) {
                        // Param: count, Type: Integer
                        stopAreasRequestBuilder.withCount(integerStraightPass(params.getInt("count")));
                    }
                    if (params.has("depth") && (params.getString("depth") != null) && (!params.getString("depth").isEmpty()) ) {
                        // Param: depth, Type: Integer
                        stopAreasRequestBuilder.withDepth(integerStraightPass(params.getInt("depth")));
                    }
                    if (params.has("forbiddenId") && (params.getString("forbiddenId") != null) && (!params.getString("forbiddenId").isEmpty()) ) {
                        // Param: forbiddenId, Type: List
                        stopAreasRequestBuilder.withForbiddenId(jsonArrayToStringList(params.getJSONArray("forbiddenId")));
                    }
                    if (params.has("forbiddenUris") && (params.getString("forbiddenUris") != null) && (!params.getString("forbiddenUris").isEmpty()) ) {
                        // Param: forbiddenUris, Type: List
                        stopAreasRequestBuilder.withForbiddenUris(jsonArrayToStringList(params.getJSONArray("forbiddenUris")));
                    }
                    if (params.has("externalCode") && (params.getString("externalCode") != null) && (!params.getString("externalCode").isEmpty()) ) {
                        // Param: externalCode, Type: String
                        stopAreasRequestBuilder.withExternalCode(stringStraightPass(params.getString("externalCode")));
                    }
                    if (params.has("headsign") && (params.getString("headsign") != null) && (!params.getString("headsign").isEmpty()) ) {
                        // Param: headsign, Type: String
                        stopAreasRequestBuilder.withHeadsign(stringStraightPass(params.getString("headsign")));
                    }
                    if (params.has("showCodes") && (params.getString("showCodes") != null) && (!params.getString("showCodes").isEmpty()) ) {
                        // Param: showCodes, Type: Boolean
                        stopAreasRequestBuilder.withShowCodes(booleanStraightPass(params.getBoolean("showCodes")));
                    }
                    if (params.has("odtLevel") && (params.getString("odtLevel") != null) && (!params.getString("odtLevel").isEmpty()) ) {
                        // Param: odtLevel, Type: String
                        stopAreasRequestBuilder.withOdtLevel(stringStraightPass(params.getString("odtLevel")));
                    }
                    if (params.has("dataFreshness") && (params.getString("dataFreshness") != null) && (!params.getString("dataFreshness").isEmpty()) ) {
                        // Param: dataFreshness, Type: String
                        stopAreasRequestBuilder.withDataFreshness(stringStraightPass(params.getString("dataFreshness")));
                    }
                    if (params.has("distance") && (params.getString("distance") != null) && (!params.getString("distance").isEmpty()) ) {
                        // Param: distance, Type: Integer
                        stopAreasRequestBuilder.withDistance(integerStraightPass(params.getInt("distance")));
                    }
                    if (params.has("since") && (params.getString("since") != null) && (!params.getString("since").isEmpty()) ) {
                        // Param: since, Type: Date
                        stopAreasRequestBuilder.withSince(stringToDateTime(params.getString("since")));
                    }
                    if (params.has("until") && (params.getString("until") != null) && (!params.getString("until").isEmpty()) ) {
                        // Param: until, Type: Date
                        stopAreasRequestBuilder.withUntil(stringToDateTime(params.getString("until")));
                    }
                    if (params.has("disableGeojson") && (params.getString("disableGeojson") != null) && (!params.getString("disableGeojson").isEmpty()) ) {
                        // Param: disableGeojson, Type: Boolean
                        stopAreasRequestBuilder.withDisableGeojson(booleanStraightPass(params.getBoolean("disableGeojson")));
                    }
                    if (params.has("disableDisruption") && (params.getString("disableDisruption") != null) && (!params.getString("disableDisruption").isEmpty()) ) {
                        // Param: disableDisruption, Type: Boolean
                        stopAreasRequestBuilder.withDisableDisruption(booleanStraightPass(params.getBoolean("disableDisruption")));
                    }
                    if (params.has("tags") && (params.getString("tags") != null) && (!params.getString("tags").isEmpty()) ) {
                        // Param: tags, Type: List
                        stopAreasRequestBuilder.withTags(jsonArrayToStringList(params.getJSONArray("tags")));
                    }
                    if (params.has("originalId") && (params.getString("originalId") != null) && (!params.getString("originalId").isEmpty()) ) {
                        // Param: originalId, Type: String
                        stopAreasRequestBuilder.withOriginalId(stringStraightPass(params.getString("originalId")));
                    }
                    
                    stopAreasRequestBuilder.rawGet(new ApiCallback<String>() {
                        @Override
                        public void onFailure(ApiException e, int statusCode, Map<String, List<String>> responseHeaders) {
                            callbackContext.error("Problem during request call | " + e.getMessage());
                        }

                        @Override
                        public void onSuccess(String result, int statusCode, Map<String, List<String>> responseHeaders) {
                            JSONObject jsonObject = null;
                            try {
                                jsonObject = new JSONObject(result);
                                callbackContext.success(jsonObject);
                            } catch (Exception e) {
                                String errorMessage = "Problem during response parsing | " + String.valueOf(e.hashCode()) + ": " + e.getMessage();
                                callbackContext.error(errorMessage);
                            }
                        }

                        @Override
                        public void onUploadProgress(long bytesWritten, long contentLength, boolean done) {
                        }

                        @Override
                        public void onDownloadProgress(long bytesRead, long contentLength, boolean done) {
                        }
                    });
                } catch (Exception e) {
                    String errorMessage = "Problem during request building | " + String.valueOf(e.hashCode()) + ": " + e.getMessage();
                    callbackContext.error(errorMessage);
                }
            }
        });
    }
    final private void coverageRegionUriStopAreas(final JSONObject params, final CallbackContext callbackContext) {
        if (this.navitiaSdk == null) {
            callbackContext.error("NavitiaSDK is not instanciated");
            return;
        }

        final StopAreasApi.CoverageRegionUriStopAreasRequestBuilder stopAreasRequestBuilder = this.navitiaSdk.stopAreasApi.newCoverageRegionUriStopAreasRequestBuilder();
        cordova.getThreadPool().execute(new Runnable() {
            @Override
            public void run() {
                try {
                    if (params.has("region") && (params.getString("region") != null) && (!params.getString("region").isEmpty()) ) {
                        // Param: region, Type: String
                        stopAreasRequestBuilder.withRegion(stringStraightPass(params.getString("region")));
                    }
                    if (params.has("uri") && (params.getString("uri") != null) && (!params.getString("uri").isEmpty()) ) {
                        // Param: uri, Type: String
                        stopAreasRequestBuilder.withUri(stringStraightPass(params.getString("uri")));
                    }
                    if (params.has("startPage") && (params.getString("startPage") != null) && (!params.getString("startPage").isEmpty()) ) {
                        // Param: startPage, Type: Integer
                        stopAreasRequestBuilder.withStartPage(integerStraightPass(params.getInt("startPage")));
                    }
                    if (params.has("count") && (params.getString("count") != null) && (!params.getString("count").isEmpty()) ) {
                        // Param: count, Type: Integer
                        stopAreasRequestBuilder.withCount(integerStraightPass(params.getInt("count")));
                    }
                    if (params.has("depth") && (params.getString("depth") != null) && (!params.getString("depth").isEmpty()) ) {
                        // Param: depth, Type: Integer
                        stopAreasRequestBuilder.withDepth(integerStraightPass(params.getInt("depth")));
                    }
                    if (params.has("forbiddenId") && (params.getString("forbiddenId") != null) && (!params.getString("forbiddenId").isEmpty()) ) {
                        // Param: forbiddenId, Type: List
                        stopAreasRequestBuilder.withForbiddenId(jsonArrayToStringList(params.getJSONArray("forbiddenId")));
                    }
                    if (params.has("forbiddenUris") && (params.getString("forbiddenUris") != null) && (!params.getString("forbiddenUris").isEmpty()) ) {
                        // Param: forbiddenUris, Type: List
                        stopAreasRequestBuilder.withForbiddenUris(jsonArrayToStringList(params.getJSONArray("forbiddenUris")));
                    }
                    if (params.has("externalCode") && (params.getString("externalCode") != null) && (!params.getString("externalCode").isEmpty()) ) {
                        // Param: externalCode, Type: String
                        stopAreasRequestBuilder.withExternalCode(stringStraightPass(params.getString("externalCode")));
                    }
                    if (params.has("headsign") && (params.getString("headsign") != null) && (!params.getString("headsign").isEmpty()) ) {
                        // Param: headsign, Type: String
                        stopAreasRequestBuilder.withHeadsign(stringStraightPass(params.getString("headsign")));
                    }
                    if (params.has("showCodes") && (params.getString("showCodes") != null) && (!params.getString("showCodes").isEmpty()) ) {
                        // Param: showCodes, Type: Boolean
                        stopAreasRequestBuilder.withShowCodes(booleanStraightPass(params.getBoolean("showCodes")));
                    }
                    if (params.has("odtLevel") && (params.getString("odtLevel") != null) && (!params.getString("odtLevel").isEmpty()) ) {
                        // Param: odtLevel, Type: String
                        stopAreasRequestBuilder.withOdtLevel(stringStraightPass(params.getString("odtLevel")));
                    }
                    if (params.has("dataFreshness") && (params.getString("dataFreshness") != null) && (!params.getString("dataFreshness").isEmpty()) ) {
                        // Param: dataFreshness, Type: String
                        stopAreasRequestBuilder.withDataFreshness(stringStraightPass(params.getString("dataFreshness")));
                    }
                    if (params.has("distance") && (params.getString("distance") != null) && (!params.getString("distance").isEmpty()) ) {
                        // Param: distance, Type: Integer
                        stopAreasRequestBuilder.withDistance(integerStraightPass(params.getInt("distance")));
                    }
                    if (params.has("since") && (params.getString("since") != null) && (!params.getString("since").isEmpty()) ) {
                        // Param: since, Type: Date
                        stopAreasRequestBuilder.withSince(stringToDateTime(params.getString("since")));
                    }
                    if (params.has("until") && (params.getString("until") != null) && (!params.getString("until").isEmpty()) ) {
                        // Param: until, Type: Date
                        stopAreasRequestBuilder.withUntil(stringToDateTime(params.getString("until")));
                    }
                    if (params.has("disableGeojson") && (params.getString("disableGeojson") != null) && (!params.getString("disableGeojson").isEmpty()) ) {
                        // Param: disableGeojson, Type: Boolean
                        stopAreasRequestBuilder.withDisableGeojson(booleanStraightPass(params.getBoolean("disableGeojson")));
                    }
                    if (params.has("disableDisruption") && (params.getString("disableDisruption") != null) && (!params.getString("disableDisruption").isEmpty()) ) {
                        // Param: disableDisruption, Type: Boolean
                        stopAreasRequestBuilder.withDisableDisruption(booleanStraightPass(params.getBoolean("disableDisruption")));
                    }
                    if (params.has("filter") && (params.getString("filter") != null) && (!params.getString("filter").isEmpty()) ) {
                        // Param: filter, Type: String
                        stopAreasRequestBuilder.withFilter(stringStraightPass(params.getString("filter")));
                    }
                    if (params.has("tags") && (params.getString("tags") != null) && (!params.getString("tags").isEmpty()) ) {
                        // Param: tags, Type: List
                        stopAreasRequestBuilder.withTags(jsonArrayToStringList(params.getJSONArray("tags")));
                    }
                    if (params.has("originalId") && (params.getString("originalId") != null) && (!params.getString("originalId").isEmpty()) ) {
                        // Param: originalId, Type: String
                        stopAreasRequestBuilder.withOriginalId(stringStraightPass(params.getString("originalId")));
                    }
                    
                    stopAreasRequestBuilder.rawGet(new ApiCallback<String>() {
                        @Override
                        public void onFailure(ApiException e, int statusCode, Map<String, List<String>> responseHeaders) {
                            callbackContext.error("Problem during request call | " + e.getMessage());
                        }

                        @Override
                        public void onSuccess(String result, int statusCode, Map<String, List<String>> responseHeaders) {
                            JSONObject jsonObject = null;
                            try {
                                jsonObject = new JSONObject(result);
                                callbackContext.success(jsonObject);
                            } catch (Exception e) {
                                String errorMessage = "Problem during response parsing | " + String.valueOf(e.hashCode()) + ": " + e.getMessage();
                                callbackContext.error(errorMessage);
                            }
                        }

                        @Override
                        public void onUploadProgress(long bytesWritten, long contentLength, boolean done) {
                        }

                        @Override
                        public void onDownloadProgress(long bytesRead, long contentLength, boolean done) {
                        }
                    });
                } catch (Exception e) {
                    String errorMessage = "Problem during request building | " + String.valueOf(e.hashCode()) + ": " + e.getMessage();
                    callbackContext.error(errorMessage);
                }
            }
        });
    }
    final private void coverageRegionUriStopAreasId(final JSONObject params, final CallbackContext callbackContext) {
        if (this.navitiaSdk == null) {
            callbackContext.error("NavitiaSDK is not instanciated");
            return;
        }

        final StopAreasApi.CoverageRegionUriStopAreasIdRequestBuilder stopAreasRequestBuilder = this.navitiaSdk.stopAreasApi.newCoverageRegionUriStopAreasIdRequestBuilder();
        cordova.getThreadPool().execute(new Runnable() {
            @Override
            public void run() {
                try {
                    if (params.has("region") && (params.getString("region") != null) && (!params.getString("region").isEmpty()) ) {
                        // Param: region, Type: String
                        stopAreasRequestBuilder.withRegion(stringStraightPass(params.getString("region")));
                    }
                    if (params.has("uri") && (params.getString("uri") != null) && (!params.getString("uri").isEmpty()) ) {
                        // Param: uri, Type: String
                        stopAreasRequestBuilder.withUri(stringStraightPass(params.getString("uri")));
                    }
                    if (params.has("id") && (params.getString("id") != null) && (!params.getString("id").isEmpty()) ) {
                        // Param: id, Type: String
                        stopAreasRequestBuilder.withId(stringStraightPass(params.getString("id")));
                    }
                    if (params.has("startPage") && (params.getString("startPage") != null) && (!params.getString("startPage").isEmpty()) ) {
                        // Param: startPage, Type: Integer
                        stopAreasRequestBuilder.withStartPage(integerStraightPass(params.getInt("startPage")));
                    }
                    if (params.has("count") && (params.getString("count") != null) && (!params.getString("count").isEmpty()) ) {
                        // Param: count, Type: Integer
                        stopAreasRequestBuilder.withCount(integerStraightPass(params.getInt("count")));
                    }
                    if (params.has("depth") && (params.getString("depth") != null) && (!params.getString("depth").isEmpty()) ) {
                        // Param: depth, Type: Integer
                        stopAreasRequestBuilder.withDepth(integerStraightPass(params.getInt("depth")));
                    }
                    if (params.has("forbiddenId") && (params.getString("forbiddenId") != null) && (!params.getString("forbiddenId").isEmpty()) ) {
                        // Param: forbiddenId, Type: List
                        stopAreasRequestBuilder.withForbiddenId(jsonArrayToStringList(params.getJSONArray("forbiddenId")));
                    }
                    if (params.has("forbiddenUris") && (params.getString("forbiddenUris") != null) && (!params.getString("forbiddenUris").isEmpty()) ) {
                        // Param: forbiddenUris, Type: List
                        stopAreasRequestBuilder.withForbiddenUris(jsonArrayToStringList(params.getJSONArray("forbiddenUris")));
                    }
                    if (params.has("externalCode") && (params.getString("externalCode") != null) && (!params.getString("externalCode").isEmpty()) ) {
                        // Param: externalCode, Type: String
                        stopAreasRequestBuilder.withExternalCode(stringStraightPass(params.getString("externalCode")));
                    }
                    if (params.has("headsign") && (params.getString("headsign") != null) && (!params.getString("headsign").isEmpty()) ) {
                        // Param: headsign, Type: String
                        stopAreasRequestBuilder.withHeadsign(stringStraightPass(params.getString("headsign")));
                    }
                    if (params.has("showCodes") && (params.getString("showCodes") != null) && (!params.getString("showCodes").isEmpty()) ) {
                        // Param: showCodes, Type: Boolean
                        stopAreasRequestBuilder.withShowCodes(booleanStraightPass(params.getBoolean("showCodes")));
                    }
                    if (params.has("odtLevel") && (params.getString("odtLevel") != null) && (!params.getString("odtLevel").isEmpty()) ) {
                        // Param: odtLevel, Type: String
                        stopAreasRequestBuilder.withOdtLevel(stringStraightPass(params.getString("odtLevel")));
                    }
                    if (params.has("dataFreshness") && (params.getString("dataFreshness") != null) && (!params.getString("dataFreshness").isEmpty()) ) {
                        // Param: dataFreshness, Type: String
                        stopAreasRequestBuilder.withDataFreshness(stringStraightPass(params.getString("dataFreshness")));
                    }
                    if (params.has("distance") && (params.getString("distance") != null) && (!params.getString("distance").isEmpty()) ) {
                        // Param: distance, Type: Integer
                        stopAreasRequestBuilder.withDistance(integerStraightPass(params.getInt("distance")));
                    }
                    if (params.has("since") && (params.getString("since") != null) && (!params.getString("since").isEmpty()) ) {
                        // Param: since, Type: Date
                        stopAreasRequestBuilder.withSince(stringToDateTime(params.getString("since")));
                    }
                    if (params.has("until") && (params.getString("until") != null) && (!params.getString("until").isEmpty()) ) {
                        // Param: until, Type: Date
                        stopAreasRequestBuilder.withUntil(stringToDateTime(params.getString("until")));
                    }
                    if (params.has("disableGeojson") && (params.getString("disableGeojson") != null) && (!params.getString("disableGeojson").isEmpty()) ) {
                        // Param: disableGeojson, Type: Boolean
                        stopAreasRequestBuilder.withDisableGeojson(booleanStraightPass(params.getBoolean("disableGeojson")));
                    }
                    if (params.has("disableDisruption") && (params.getString("disableDisruption") != null) && (!params.getString("disableDisruption").isEmpty()) ) {
                        // Param: disableDisruption, Type: Boolean
                        stopAreasRequestBuilder.withDisableDisruption(booleanStraightPass(params.getBoolean("disableDisruption")));
                    }
                    if (params.has("tags") && (params.getString("tags") != null) && (!params.getString("tags").isEmpty()) ) {
                        // Param: tags, Type: List
                        stopAreasRequestBuilder.withTags(jsonArrayToStringList(params.getJSONArray("tags")));
                    }
                    if (params.has("originalId") && (params.getString("originalId") != null) && (!params.getString("originalId").isEmpty()) ) {
                        // Param: originalId, Type: String
                        stopAreasRequestBuilder.withOriginalId(stringStraightPass(params.getString("originalId")));
                    }
                    
                    stopAreasRequestBuilder.rawGet(new ApiCallback<String>() {
                        @Override
                        public void onFailure(ApiException e, int statusCode, Map<String, List<String>> responseHeaders) {
                            callbackContext.error("Problem during request call | " + e.getMessage());
                        }

                        @Override
                        public void onSuccess(String result, int statusCode, Map<String, List<String>> responseHeaders) {
                            JSONObject jsonObject = null;
                            try {
                                jsonObject = new JSONObject(result);
                                callbackContext.success(jsonObject);
                            } catch (Exception e) {
                                String errorMessage = "Problem during response parsing | " + String.valueOf(e.hashCode()) + ": " + e.getMessage();
                                callbackContext.error(errorMessage);
                            }
                        }

                        @Override
                        public void onUploadProgress(long bytesWritten, long contentLength, boolean done) {
                        }

                        @Override
                        public void onDownloadProgress(long bytesRead, long contentLength, boolean done) {
                        }
                    });
                } catch (Exception e) {
                    String errorMessage = "Problem during request building | " + String.valueOf(e.hashCode()) + ": " + e.getMessage();
                    callbackContext.error(errorMessage);
                }
            }
        });
    }
    final private void stopAreas(final JSONObject params, final CallbackContext callbackContext) {
        if (this.navitiaSdk == null) {
            callbackContext.error("NavitiaSDK is not instanciated");
            return;
        }

        final StopAreasApi.StopAreasRequestBuilder stopAreasRequestBuilder = this.navitiaSdk.stopAreasApi.newStopAreasRequestBuilder();
        cordova.getThreadPool().execute(new Runnable() {
            @Override
            public void run() {
                try {
                    if (params.has("externalCode") && (params.getString("externalCode") != null) && (!params.getString("externalCode").isEmpty()) ) {
                        // Param: externalCode, Type: String
                        stopAreasRequestBuilder.withExternalCode(stringStraightPass(params.getString("externalCode")));
                    }
                    if (params.has("startPage") && (params.getString("startPage") != null) && (!params.getString("startPage").isEmpty()) ) {
                        // Param: startPage, Type: Integer
                        stopAreasRequestBuilder.withStartPage(integerStraightPass(params.getInt("startPage")));
                    }
                    if (params.has("count") && (params.getString("count") != null) && (!params.getString("count").isEmpty()) ) {
                        // Param: count, Type: Integer
                        stopAreasRequestBuilder.withCount(integerStraightPass(params.getInt("count")));
                    }
                    if (params.has("depth") && (params.getString("depth") != null) && (!params.getString("depth").isEmpty()) ) {
                        // Param: depth, Type: Integer
                        stopAreasRequestBuilder.withDepth(integerStraightPass(params.getInt("depth")));
                    }
                    if (params.has("forbiddenId") && (params.getString("forbiddenId") != null) && (!params.getString("forbiddenId").isEmpty()) ) {
                        // Param: forbiddenId, Type: List
                        stopAreasRequestBuilder.withForbiddenId(jsonArrayToStringList(params.getJSONArray("forbiddenId")));
                    }
                    if (params.has("forbiddenUris") && (params.getString("forbiddenUris") != null) && (!params.getString("forbiddenUris").isEmpty()) ) {
                        // Param: forbiddenUris, Type: List
                        stopAreasRequestBuilder.withForbiddenUris(jsonArrayToStringList(params.getJSONArray("forbiddenUris")));
                    }
                    if (params.has("headsign") && (params.getString("headsign") != null) && (!params.getString("headsign").isEmpty()) ) {
                        // Param: headsign, Type: String
                        stopAreasRequestBuilder.withHeadsign(stringStraightPass(params.getString("headsign")));
                    }
                    if (params.has("showCodes") && (params.getString("showCodes") != null) && (!params.getString("showCodes").isEmpty()) ) {
                        // Param: showCodes, Type: Boolean
                        stopAreasRequestBuilder.withShowCodes(booleanStraightPass(params.getBoolean("showCodes")));
                    }
                    if (params.has("odtLevel") && (params.getString("odtLevel") != null) && (!params.getString("odtLevel").isEmpty()) ) {
                        // Param: odtLevel, Type: String
                        stopAreasRequestBuilder.withOdtLevel(stringStraightPass(params.getString("odtLevel")));
                    }
                    if (params.has("dataFreshness") && (params.getString("dataFreshness") != null) && (!params.getString("dataFreshness").isEmpty()) ) {
                        // Param: dataFreshness, Type: String
                        stopAreasRequestBuilder.withDataFreshness(stringStraightPass(params.getString("dataFreshness")));
                    }
                    if (params.has("distance") && (params.getString("distance") != null) && (!params.getString("distance").isEmpty()) ) {
                        // Param: distance, Type: Integer
                        stopAreasRequestBuilder.withDistance(integerStraightPass(params.getInt("distance")));
                    }
                    if (params.has("since") && (params.getString("since") != null) && (!params.getString("since").isEmpty()) ) {
                        // Param: since, Type: Date
                        stopAreasRequestBuilder.withSince(stringToDateTime(params.getString("since")));
                    }
                    if (params.has("until") && (params.getString("until") != null) && (!params.getString("until").isEmpty()) ) {
                        // Param: until, Type: Date
                        stopAreasRequestBuilder.withUntil(stringToDateTime(params.getString("until")));
                    }
                    if (params.has("disableGeojson") && (params.getString("disableGeojson") != null) && (!params.getString("disableGeojson").isEmpty()) ) {
                        // Param: disableGeojson, Type: Boolean
                        stopAreasRequestBuilder.withDisableGeojson(booleanStraightPass(params.getBoolean("disableGeojson")));
                    }
                    if (params.has("disableDisruption") && (params.getString("disableDisruption") != null) && (!params.getString("disableDisruption").isEmpty()) ) {
                        // Param: disableDisruption, Type: Boolean
                        stopAreasRequestBuilder.withDisableDisruption(booleanStraightPass(params.getBoolean("disableDisruption")));
                    }
                    if (params.has("filter") && (params.getString("filter") != null) && (!params.getString("filter").isEmpty()) ) {
                        // Param: filter, Type: String
                        stopAreasRequestBuilder.withFilter(stringStraightPass(params.getString("filter")));
                    }
                    if (params.has("tags") && (params.getString("tags") != null) && (!params.getString("tags").isEmpty()) ) {
                        // Param: tags, Type: List
                        stopAreasRequestBuilder.withTags(jsonArrayToStringList(params.getJSONArray("tags")));
                    }
                    if (params.has("originalId") && (params.getString("originalId") != null) && (!params.getString("originalId").isEmpty()) ) {
                        // Param: originalId, Type: String
                        stopAreasRequestBuilder.withOriginalId(stringStraightPass(params.getString("originalId")));
                    }
                    
                    stopAreasRequestBuilder.rawGet(new ApiCallback<String>() {
                        @Override
                        public void onFailure(ApiException e, int statusCode, Map<String, List<String>> responseHeaders) {
                            callbackContext.error("Problem during request call | " + e.getMessage());
                        }

                        @Override
                        public void onSuccess(String result, int statusCode, Map<String, List<String>> responseHeaders) {
                            JSONObject jsonObject = null;
                            try {
                                jsonObject = new JSONObject(result);
                                callbackContext.success(jsonObject);
                            } catch (Exception e) {
                                String errorMessage = "Problem during response parsing | " + String.valueOf(e.hashCode()) + ": " + e.getMessage();
                                callbackContext.error(errorMessage);
                            }
                        }

                        @Override
                        public void onUploadProgress(long bytesWritten, long contentLength, boolean done) {
                        }

                        @Override
                        public void onDownloadProgress(long bytesRead, long contentLength, boolean done) {
                        }
                    });
                } catch (Exception e) {
                    String errorMessage = "Problem during request building | " + String.valueOf(e.hashCode()) + ": " + e.getMessage();
                    callbackContext.error(errorMessage);
                }
            }
        });
    }
    final private void coverageLonLatStopPoints(final JSONObject params, final CallbackContext callbackContext) {
        if (this.navitiaSdk == null) {
            callbackContext.error("NavitiaSDK is not instanciated");
            return;
        }

        final StopPointsApi.CoverageLonLatStopPointsRequestBuilder stopPointsRequestBuilder = this.navitiaSdk.stopPointsApi.newCoverageLonLatStopPointsRequestBuilder();
        cordova.getThreadPool().execute(new Runnable() {
            @Override
            public void run() {
                try {
                    if (params.has("lat") && (params.getString("lat") != null) && (!params.getString("lat").isEmpty()) ) {
                        // Param: lat, Type: BigDecimal
                        stopPointsRequestBuilder.withLat(longToBigDecimal(params.getLong("lat")));
                    }
                    if (params.has("lon") && (params.getString("lon") != null) && (!params.getString("lon").isEmpty()) ) {
                        // Param: lon, Type: BigDecimal
                        stopPointsRequestBuilder.withLon(longToBigDecimal(params.getLong("lon")));
                    }
                    if (params.has("startPage") && (params.getString("startPage") != null) && (!params.getString("startPage").isEmpty()) ) {
                        // Param: startPage, Type: Integer
                        stopPointsRequestBuilder.withStartPage(integerStraightPass(params.getInt("startPage")));
                    }
                    if (params.has("count") && (params.getString("count") != null) && (!params.getString("count").isEmpty()) ) {
                        // Param: count, Type: Integer
                        stopPointsRequestBuilder.withCount(integerStraightPass(params.getInt("count")));
                    }
                    if (params.has("depth") && (params.getString("depth") != null) && (!params.getString("depth").isEmpty()) ) {
                        // Param: depth, Type: Integer
                        stopPointsRequestBuilder.withDepth(integerStraightPass(params.getInt("depth")));
                    }
                    if (params.has("forbiddenId") && (params.getString("forbiddenId") != null) && (!params.getString("forbiddenId").isEmpty()) ) {
                        // Param: forbiddenId, Type: List
                        stopPointsRequestBuilder.withForbiddenId(jsonArrayToStringList(params.getJSONArray("forbiddenId")));
                    }
                    if (params.has("forbiddenUris") && (params.getString("forbiddenUris") != null) && (!params.getString("forbiddenUris").isEmpty()) ) {
                        // Param: forbiddenUris, Type: List
                        stopPointsRequestBuilder.withForbiddenUris(jsonArrayToStringList(params.getJSONArray("forbiddenUris")));
                    }
                    if (params.has("externalCode") && (params.getString("externalCode") != null) && (!params.getString("externalCode").isEmpty()) ) {
                        // Param: externalCode, Type: String
                        stopPointsRequestBuilder.withExternalCode(stringStraightPass(params.getString("externalCode")));
                    }
                    if (params.has("headsign") && (params.getString("headsign") != null) && (!params.getString("headsign").isEmpty()) ) {
                        // Param: headsign, Type: String
                        stopPointsRequestBuilder.withHeadsign(stringStraightPass(params.getString("headsign")));
                    }
                    if (params.has("showCodes") && (params.getString("showCodes") != null) && (!params.getString("showCodes").isEmpty()) ) {
                        // Param: showCodes, Type: Boolean
                        stopPointsRequestBuilder.withShowCodes(booleanStraightPass(params.getBoolean("showCodes")));
                    }
                    if (params.has("odtLevel") && (params.getString("odtLevel") != null) && (!params.getString("odtLevel").isEmpty()) ) {
                        // Param: odtLevel, Type: String
                        stopPointsRequestBuilder.withOdtLevel(stringStraightPass(params.getString("odtLevel")));
                    }
                    if (params.has("dataFreshness") && (params.getString("dataFreshness") != null) && (!params.getString("dataFreshness").isEmpty()) ) {
                        // Param: dataFreshness, Type: String
                        stopPointsRequestBuilder.withDataFreshness(stringStraightPass(params.getString("dataFreshness")));
                    }
                    if (params.has("distance") && (params.getString("distance") != null) && (!params.getString("distance").isEmpty()) ) {
                        // Param: distance, Type: Integer
                        stopPointsRequestBuilder.withDistance(integerStraightPass(params.getInt("distance")));
                    }
                    if (params.has("since") && (params.getString("since") != null) && (!params.getString("since").isEmpty()) ) {
                        // Param: since, Type: Date
                        stopPointsRequestBuilder.withSince(stringToDateTime(params.getString("since")));
                    }
                    if (params.has("until") && (params.getString("until") != null) && (!params.getString("until").isEmpty()) ) {
                        // Param: until, Type: Date
                        stopPointsRequestBuilder.withUntil(stringToDateTime(params.getString("until")));
                    }
                    if (params.has("disableGeojson") && (params.getString("disableGeojson") != null) && (!params.getString("disableGeojson").isEmpty()) ) {
                        // Param: disableGeojson, Type: Boolean
                        stopPointsRequestBuilder.withDisableGeojson(booleanStraightPass(params.getBoolean("disableGeojson")));
                    }
                    if (params.has("disableDisruption") && (params.getString("disableDisruption") != null) && (!params.getString("disableDisruption").isEmpty()) ) {
                        // Param: disableDisruption, Type: Boolean
                        stopPointsRequestBuilder.withDisableDisruption(booleanStraightPass(params.getBoolean("disableDisruption")));
                    }
                    if (params.has("filter") && (params.getString("filter") != null) && (!params.getString("filter").isEmpty()) ) {
                        // Param: filter, Type: String
                        stopPointsRequestBuilder.withFilter(stringStraightPass(params.getString("filter")));
                    }
                    if (params.has("tags") && (params.getString("tags") != null) && (!params.getString("tags").isEmpty()) ) {
                        // Param: tags, Type: List
                        stopPointsRequestBuilder.withTags(jsonArrayToStringList(params.getJSONArray("tags")));
                    }
                    if (params.has("originalId") && (params.getString("originalId") != null) && (!params.getString("originalId").isEmpty()) ) {
                        // Param: originalId, Type: String
                        stopPointsRequestBuilder.withOriginalId(stringStraightPass(params.getString("originalId")));
                    }
                    
                    stopPointsRequestBuilder.rawGet(new ApiCallback<String>() {
                        @Override
                        public void onFailure(ApiException e, int statusCode, Map<String, List<String>> responseHeaders) {
                            callbackContext.error("Problem during request call | " + e.getMessage());
                        }

                        @Override
                        public void onSuccess(String result, int statusCode, Map<String, List<String>> responseHeaders) {
                            JSONObject jsonObject = null;
                            try {
                                jsonObject = new JSONObject(result);
                                callbackContext.success(jsonObject);
                            } catch (Exception e) {
                                String errorMessage = "Problem during response parsing | " + String.valueOf(e.hashCode()) + ": " + e.getMessage();
                                callbackContext.error(errorMessage);
                            }
                        }

                        @Override
                        public void onUploadProgress(long bytesWritten, long contentLength, boolean done) {
                        }

                        @Override
                        public void onDownloadProgress(long bytesRead, long contentLength, boolean done) {
                        }
                    });
                } catch (Exception e) {
                    String errorMessage = "Problem during request building | " + String.valueOf(e.hashCode()) + ": " + e.getMessage();
                    callbackContext.error(errorMessage);
                }
            }
        });
    }
    final private void coverageLonLatStopPointsId(final JSONObject params, final CallbackContext callbackContext) {
        if (this.navitiaSdk == null) {
            callbackContext.error("NavitiaSDK is not instanciated");
            return;
        }

        final StopPointsApi.CoverageLonLatStopPointsIdRequestBuilder stopPointsRequestBuilder = this.navitiaSdk.stopPointsApi.newCoverageLonLatStopPointsIdRequestBuilder();
        cordova.getThreadPool().execute(new Runnable() {
            @Override
            public void run() {
                try {
                    if (params.has("lat") && (params.getString("lat") != null) && (!params.getString("lat").isEmpty()) ) {
                        // Param: lat, Type: BigDecimal
                        stopPointsRequestBuilder.withLat(longToBigDecimal(params.getLong("lat")));
                    }
                    if (params.has("lon") && (params.getString("lon") != null) && (!params.getString("lon").isEmpty()) ) {
                        // Param: lon, Type: BigDecimal
                        stopPointsRequestBuilder.withLon(longToBigDecimal(params.getLong("lon")));
                    }
                    if (params.has("id") && (params.getString("id") != null) && (!params.getString("id").isEmpty()) ) {
                        // Param: id, Type: String
                        stopPointsRequestBuilder.withId(stringStraightPass(params.getString("id")));
                    }
                    if (params.has("startPage") && (params.getString("startPage") != null) && (!params.getString("startPage").isEmpty()) ) {
                        // Param: startPage, Type: Integer
                        stopPointsRequestBuilder.withStartPage(integerStraightPass(params.getInt("startPage")));
                    }
                    if (params.has("count") && (params.getString("count") != null) && (!params.getString("count").isEmpty()) ) {
                        // Param: count, Type: Integer
                        stopPointsRequestBuilder.withCount(integerStraightPass(params.getInt("count")));
                    }
                    if (params.has("depth") && (params.getString("depth") != null) && (!params.getString("depth").isEmpty()) ) {
                        // Param: depth, Type: Integer
                        stopPointsRequestBuilder.withDepth(integerStraightPass(params.getInt("depth")));
                    }
                    if (params.has("forbiddenId") && (params.getString("forbiddenId") != null) && (!params.getString("forbiddenId").isEmpty()) ) {
                        // Param: forbiddenId, Type: List
                        stopPointsRequestBuilder.withForbiddenId(jsonArrayToStringList(params.getJSONArray("forbiddenId")));
                    }
                    if (params.has("forbiddenUris") && (params.getString("forbiddenUris") != null) && (!params.getString("forbiddenUris").isEmpty()) ) {
                        // Param: forbiddenUris, Type: List
                        stopPointsRequestBuilder.withForbiddenUris(jsonArrayToStringList(params.getJSONArray("forbiddenUris")));
                    }
                    if (params.has("externalCode") && (params.getString("externalCode") != null) && (!params.getString("externalCode").isEmpty()) ) {
                        // Param: externalCode, Type: String
                        stopPointsRequestBuilder.withExternalCode(stringStraightPass(params.getString("externalCode")));
                    }
                    if (params.has("headsign") && (params.getString("headsign") != null) && (!params.getString("headsign").isEmpty()) ) {
                        // Param: headsign, Type: String
                        stopPointsRequestBuilder.withHeadsign(stringStraightPass(params.getString("headsign")));
                    }
                    if (params.has("showCodes") && (params.getString("showCodes") != null) && (!params.getString("showCodes").isEmpty()) ) {
                        // Param: showCodes, Type: Boolean
                        stopPointsRequestBuilder.withShowCodes(booleanStraightPass(params.getBoolean("showCodes")));
                    }
                    if (params.has("odtLevel") && (params.getString("odtLevel") != null) && (!params.getString("odtLevel").isEmpty()) ) {
                        // Param: odtLevel, Type: String
                        stopPointsRequestBuilder.withOdtLevel(stringStraightPass(params.getString("odtLevel")));
                    }
                    if (params.has("dataFreshness") && (params.getString("dataFreshness") != null) && (!params.getString("dataFreshness").isEmpty()) ) {
                        // Param: dataFreshness, Type: String
                        stopPointsRequestBuilder.withDataFreshness(stringStraightPass(params.getString("dataFreshness")));
                    }
                    if (params.has("distance") && (params.getString("distance") != null) && (!params.getString("distance").isEmpty()) ) {
                        // Param: distance, Type: Integer
                        stopPointsRequestBuilder.withDistance(integerStraightPass(params.getInt("distance")));
                    }
                    if (params.has("since") && (params.getString("since") != null) && (!params.getString("since").isEmpty()) ) {
                        // Param: since, Type: Date
                        stopPointsRequestBuilder.withSince(stringToDateTime(params.getString("since")));
                    }
                    if (params.has("until") && (params.getString("until") != null) && (!params.getString("until").isEmpty()) ) {
                        // Param: until, Type: Date
                        stopPointsRequestBuilder.withUntil(stringToDateTime(params.getString("until")));
                    }
                    if (params.has("disableGeojson") && (params.getString("disableGeojson") != null) && (!params.getString("disableGeojson").isEmpty()) ) {
                        // Param: disableGeojson, Type: Boolean
                        stopPointsRequestBuilder.withDisableGeojson(booleanStraightPass(params.getBoolean("disableGeojson")));
                    }
                    if (params.has("disableDisruption") && (params.getString("disableDisruption") != null) && (!params.getString("disableDisruption").isEmpty()) ) {
                        // Param: disableDisruption, Type: Boolean
                        stopPointsRequestBuilder.withDisableDisruption(booleanStraightPass(params.getBoolean("disableDisruption")));
                    }
                    if (params.has("tags") && (params.getString("tags") != null) && (!params.getString("tags").isEmpty()) ) {
                        // Param: tags, Type: List
                        stopPointsRequestBuilder.withTags(jsonArrayToStringList(params.getJSONArray("tags")));
                    }
                    if (params.has("originalId") && (params.getString("originalId") != null) && (!params.getString("originalId").isEmpty()) ) {
                        // Param: originalId, Type: String
                        stopPointsRequestBuilder.withOriginalId(stringStraightPass(params.getString("originalId")));
                    }
                    
                    stopPointsRequestBuilder.rawGet(new ApiCallback<String>() {
                        @Override
                        public void onFailure(ApiException e, int statusCode, Map<String, List<String>> responseHeaders) {
                            callbackContext.error("Problem during request call | " + e.getMessage());
                        }

                        @Override
                        public void onSuccess(String result, int statusCode, Map<String, List<String>> responseHeaders) {
                            JSONObject jsonObject = null;
                            try {
                                jsonObject = new JSONObject(result);
                                callbackContext.success(jsonObject);
                            } catch (Exception e) {
                                String errorMessage = "Problem during response parsing | " + String.valueOf(e.hashCode()) + ": " + e.getMessage();
                                callbackContext.error(errorMessage);
                            }
                        }

                        @Override
                        public void onUploadProgress(long bytesWritten, long contentLength, boolean done) {
                        }

                        @Override
                        public void onDownloadProgress(long bytesRead, long contentLength, boolean done) {
                        }
                    });
                } catch (Exception e) {
                    String errorMessage = "Problem during request building | " + String.valueOf(e.hashCode()) + ": " + e.getMessage();
                    callbackContext.error(errorMessage);
                }
            }
        });
    }
    final private void coverageLonLatUriStopPoints(final JSONObject params, final CallbackContext callbackContext) {
        if (this.navitiaSdk == null) {
            callbackContext.error("NavitiaSDK is not instanciated");
            return;
        }

        final StopPointsApi.CoverageLonLatUriStopPointsRequestBuilder stopPointsRequestBuilder = this.navitiaSdk.stopPointsApi.newCoverageLonLatUriStopPointsRequestBuilder();
        cordova.getThreadPool().execute(new Runnable() {
            @Override
            public void run() {
                try {
                    if (params.has("lat") && (params.getString("lat") != null) && (!params.getString("lat").isEmpty()) ) {
                        // Param: lat, Type: BigDecimal
                        stopPointsRequestBuilder.withLat(longToBigDecimal(params.getLong("lat")));
                    }
                    if (params.has("lon") && (params.getString("lon") != null) && (!params.getString("lon").isEmpty()) ) {
                        // Param: lon, Type: BigDecimal
                        stopPointsRequestBuilder.withLon(longToBigDecimal(params.getLong("lon")));
                    }
                    if (params.has("uri") && (params.getString("uri") != null) && (!params.getString("uri").isEmpty()) ) {
                        // Param: uri, Type: String
                        stopPointsRequestBuilder.withUri(stringStraightPass(params.getString("uri")));
                    }
                    if (params.has("startPage") && (params.getString("startPage") != null) && (!params.getString("startPage").isEmpty()) ) {
                        // Param: startPage, Type: Integer
                        stopPointsRequestBuilder.withStartPage(integerStraightPass(params.getInt("startPage")));
                    }
                    if (params.has("count") && (params.getString("count") != null) && (!params.getString("count").isEmpty()) ) {
                        // Param: count, Type: Integer
                        stopPointsRequestBuilder.withCount(integerStraightPass(params.getInt("count")));
                    }
                    if (params.has("depth") && (params.getString("depth") != null) && (!params.getString("depth").isEmpty()) ) {
                        // Param: depth, Type: Integer
                        stopPointsRequestBuilder.withDepth(integerStraightPass(params.getInt("depth")));
                    }
                    if (params.has("forbiddenId") && (params.getString("forbiddenId") != null) && (!params.getString("forbiddenId").isEmpty()) ) {
                        // Param: forbiddenId, Type: List
                        stopPointsRequestBuilder.withForbiddenId(jsonArrayToStringList(params.getJSONArray("forbiddenId")));
                    }
                    if (params.has("forbiddenUris") && (params.getString("forbiddenUris") != null) && (!params.getString("forbiddenUris").isEmpty()) ) {
                        // Param: forbiddenUris, Type: List
                        stopPointsRequestBuilder.withForbiddenUris(jsonArrayToStringList(params.getJSONArray("forbiddenUris")));
                    }
                    if (params.has("externalCode") && (params.getString("externalCode") != null) && (!params.getString("externalCode").isEmpty()) ) {
                        // Param: externalCode, Type: String
                        stopPointsRequestBuilder.withExternalCode(stringStraightPass(params.getString("externalCode")));
                    }
                    if (params.has("headsign") && (params.getString("headsign") != null) && (!params.getString("headsign").isEmpty()) ) {
                        // Param: headsign, Type: String
                        stopPointsRequestBuilder.withHeadsign(stringStraightPass(params.getString("headsign")));
                    }
                    if (params.has("showCodes") && (params.getString("showCodes") != null) && (!params.getString("showCodes").isEmpty()) ) {
                        // Param: showCodes, Type: Boolean
                        stopPointsRequestBuilder.withShowCodes(booleanStraightPass(params.getBoolean("showCodes")));
                    }
                    if (params.has("odtLevel") && (params.getString("odtLevel") != null) && (!params.getString("odtLevel").isEmpty()) ) {
                        // Param: odtLevel, Type: String
                        stopPointsRequestBuilder.withOdtLevel(stringStraightPass(params.getString("odtLevel")));
                    }
                    if (params.has("dataFreshness") && (params.getString("dataFreshness") != null) && (!params.getString("dataFreshness").isEmpty()) ) {
                        // Param: dataFreshness, Type: String
                        stopPointsRequestBuilder.withDataFreshness(stringStraightPass(params.getString("dataFreshness")));
                    }
                    if (params.has("distance") && (params.getString("distance") != null) && (!params.getString("distance").isEmpty()) ) {
                        // Param: distance, Type: Integer
                        stopPointsRequestBuilder.withDistance(integerStraightPass(params.getInt("distance")));
                    }
                    if (params.has("since") && (params.getString("since") != null) && (!params.getString("since").isEmpty()) ) {
                        // Param: since, Type: Date
                        stopPointsRequestBuilder.withSince(stringToDateTime(params.getString("since")));
                    }
                    if (params.has("until") && (params.getString("until") != null) && (!params.getString("until").isEmpty()) ) {
                        // Param: until, Type: Date
                        stopPointsRequestBuilder.withUntil(stringToDateTime(params.getString("until")));
                    }
                    if (params.has("disableGeojson") && (params.getString("disableGeojson") != null) && (!params.getString("disableGeojson").isEmpty()) ) {
                        // Param: disableGeojson, Type: Boolean
                        stopPointsRequestBuilder.withDisableGeojson(booleanStraightPass(params.getBoolean("disableGeojson")));
                    }
                    if (params.has("disableDisruption") && (params.getString("disableDisruption") != null) && (!params.getString("disableDisruption").isEmpty()) ) {
                        // Param: disableDisruption, Type: Boolean
                        stopPointsRequestBuilder.withDisableDisruption(booleanStraightPass(params.getBoolean("disableDisruption")));
                    }
                    if (params.has("filter") && (params.getString("filter") != null) && (!params.getString("filter").isEmpty()) ) {
                        // Param: filter, Type: String
                        stopPointsRequestBuilder.withFilter(stringStraightPass(params.getString("filter")));
                    }
                    if (params.has("tags") && (params.getString("tags") != null) && (!params.getString("tags").isEmpty()) ) {
                        // Param: tags, Type: List
                        stopPointsRequestBuilder.withTags(jsonArrayToStringList(params.getJSONArray("tags")));
                    }
                    if (params.has("originalId") && (params.getString("originalId") != null) && (!params.getString("originalId").isEmpty()) ) {
                        // Param: originalId, Type: String
                        stopPointsRequestBuilder.withOriginalId(stringStraightPass(params.getString("originalId")));
                    }
                    
                    stopPointsRequestBuilder.rawGet(new ApiCallback<String>() {
                        @Override
                        public void onFailure(ApiException e, int statusCode, Map<String, List<String>> responseHeaders) {
                            callbackContext.error("Problem during request call | " + e.getMessage());
                        }

                        @Override
                        public void onSuccess(String result, int statusCode, Map<String, List<String>> responseHeaders) {
                            JSONObject jsonObject = null;
                            try {
                                jsonObject = new JSONObject(result);
                                callbackContext.success(jsonObject);
                            } catch (Exception e) {
                                String errorMessage = "Problem during response parsing | " + String.valueOf(e.hashCode()) + ": " + e.getMessage();
                                callbackContext.error(errorMessage);
                            }
                        }

                        @Override
                        public void onUploadProgress(long bytesWritten, long contentLength, boolean done) {
                        }

                        @Override
                        public void onDownloadProgress(long bytesRead, long contentLength, boolean done) {
                        }
                    });
                } catch (Exception e) {
                    String errorMessage = "Problem during request building | " + String.valueOf(e.hashCode()) + ": " + e.getMessage();
                    callbackContext.error(errorMessage);
                }
            }
        });
    }
    final private void coverageLonLatUriStopPointsId(final JSONObject params, final CallbackContext callbackContext) {
        if (this.navitiaSdk == null) {
            callbackContext.error("NavitiaSDK is not instanciated");
            return;
        }

        final StopPointsApi.CoverageLonLatUriStopPointsIdRequestBuilder stopPointsRequestBuilder = this.navitiaSdk.stopPointsApi.newCoverageLonLatUriStopPointsIdRequestBuilder();
        cordova.getThreadPool().execute(new Runnable() {
            @Override
            public void run() {
                try {
                    if (params.has("lat") && (params.getString("lat") != null) && (!params.getString("lat").isEmpty()) ) {
                        // Param: lat, Type: BigDecimal
                        stopPointsRequestBuilder.withLat(longToBigDecimal(params.getLong("lat")));
                    }
                    if (params.has("lon") && (params.getString("lon") != null) && (!params.getString("lon").isEmpty()) ) {
                        // Param: lon, Type: BigDecimal
                        stopPointsRequestBuilder.withLon(longToBigDecimal(params.getLong("lon")));
                    }
                    if (params.has("uri") && (params.getString("uri") != null) && (!params.getString("uri").isEmpty()) ) {
                        // Param: uri, Type: String
                        stopPointsRequestBuilder.withUri(stringStraightPass(params.getString("uri")));
                    }
                    if (params.has("id") && (params.getString("id") != null) && (!params.getString("id").isEmpty()) ) {
                        // Param: id, Type: String
                        stopPointsRequestBuilder.withId(stringStraightPass(params.getString("id")));
                    }
                    if (params.has("startPage") && (params.getString("startPage") != null) && (!params.getString("startPage").isEmpty()) ) {
                        // Param: startPage, Type: Integer
                        stopPointsRequestBuilder.withStartPage(integerStraightPass(params.getInt("startPage")));
                    }
                    if (params.has("count") && (params.getString("count") != null) && (!params.getString("count").isEmpty()) ) {
                        // Param: count, Type: Integer
                        stopPointsRequestBuilder.withCount(integerStraightPass(params.getInt("count")));
                    }
                    if (params.has("depth") && (params.getString("depth") != null) && (!params.getString("depth").isEmpty()) ) {
                        // Param: depth, Type: Integer
                        stopPointsRequestBuilder.withDepth(integerStraightPass(params.getInt("depth")));
                    }
                    if (params.has("forbiddenId") && (params.getString("forbiddenId") != null) && (!params.getString("forbiddenId").isEmpty()) ) {
                        // Param: forbiddenId, Type: List
                        stopPointsRequestBuilder.withForbiddenId(jsonArrayToStringList(params.getJSONArray("forbiddenId")));
                    }
                    if (params.has("forbiddenUris") && (params.getString("forbiddenUris") != null) && (!params.getString("forbiddenUris").isEmpty()) ) {
                        // Param: forbiddenUris, Type: List
                        stopPointsRequestBuilder.withForbiddenUris(jsonArrayToStringList(params.getJSONArray("forbiddenUris")));
                    }
                    if (params.has("externalCode") && (params.getString("externalCode") != null) && (!params.getString("externalCode").isEmpty()) ) {
                        // Param: externalCode, Type: String
                        stopPointsRequestBuilder.withExternalCode(stringStraightPass(params.getString("externalCode")));
                    }
                    if (params.has("headsign") && (params.getString("headsign") != null) && (!params.getString("headsign").isEmpty()) ) {
                        // Param: headsign, Type: String
                        stopPointsRequestBuilder.withHeadsign(stringStraightPass(params.getString("headsign")));
                    }
                    if (params.has("showCodes") && (params.getString("showCodes") != null) && (!params.getString("showCodes").isEmpty()) ) {
                        // Param: showCodes, Type: Boolean
                        stopPointsRequestBuilder.withShowCodes(booleanStraightPass(params.getBoolean("showCodes")));
                    }
                    if (params.has("odtLevel") && (params.getString("odtLevel") != null) && (!params.getString("odtLevel").isEmpty()) ) {
                        // Param: odtLevel, Type: String
                        stopPointsRequestBuilder.withOdtLevel(stringStraightPass(params.getString("odtLevel")));
                    }
                    if (params.has("dataFreshness") && (params.getString("dataFreshness") != null) && (!params.getString("dataFreshness").isEmpty()) ) {
                        // Param: dataFreshness, Type: String
                        stopPointsRequestBuilder.withDataFreshness(stringStraightPass(params.getString("dataFreshness")));
                    }
                    if (params.has("distance") && (params.getString("distance") != null) && (!params.getString("distance").isEmpty()) ) {
                        // Param: distance, Type: Integer
                        stopPointsRequestBuilder.withDistance(integerStraightPass(params.getInt("distance")));
                    }
                    if (params.has("since") && (params.getString("since") != null) && (!params.getString("since").isEmpty()) ) {
                        // Param: since, Type: Date
                        stopPointsRequestBuilder.withSince(stringToDateTime(params.getString("since")));
                    }
                    if (params.has("until") && (params.getString("until") != null) && (!params.getString("until").isEmpty()) ) {
                        // Param: until, Type: Date
                        stopPointsRequestBuilder.withUntil(stringToDateTime(params.getString("until")));
                    }
                    if (params.has("disableGeojson") && (params.getString("disableGeojson") != null) && (!params.getString("disableGeojson").isEmpty()) ) {
                        // Param: disableGeojson, Type: Boolean
                        stopPointsRequestBuilder.withDisableGeojson(booleanStraightPass(params.getBoolean("disableGeojson")));
                    }
                    if (params.has("disableDisruption") && (params.getString("disableDisruption") != null) && (!params.getString("disableDisruption").isEmpty()) ) {
                        // Param: disableDisruption, Type: Boolean
                        stopPointsRequestBuilder.withDisableDisruption(booleanStraightPass(params.getBoolean("disableDisruption")));
                    }
                    if (params.has("tags") && (params.getString("tags") != null) && (!params.getString("tags").isEmpty()) ) {
                        // Param: tags, Type: List
                        stopPointsRequestBuilder.withTags(jsonArrayToStringList(params.getJSONArray("tags")));
                    }
                    if (params.has("originalId") && (params.getString("originalId") != null) && (!params.getString("originalId").isEmpty()) ) {
                        // Param: originalId, Type: String
                        stopPointsRequestBuilder.withOriginalId(stringStraightPass(params.getString("originalId")));
                    }
                    
                    stopPointsRequestBuilder.rawGet(new ApiCallback<String>() {
                        @Override
                        public void onFailure(ApiException e, int statusCode, Map<String, List<String>> responseHeaders) {
                            callbackContext.error("Problem during request call | " + e.getMessage());
                        }

                        @Override
                        public void onSuccess(String result, int statusCode, Map<String, List<String>> responseHeaders) {
                            JSONObject jsonObject = null;
                            try {
                                jsonObject = new JSONObject(result);
                                callbackContext.success(jsonObject);
                            } catch (Exception e) {
                                String errorMessage = "Problem during response parsing | " + String.valueOf(e.hashCode()) + ": " + e.getMessage();
                                callbackContext.error(errorMessage);
                            }
                        }

                        @Override
                        public void onUploadProgress(long bytesWritten, long contentLength, boolean done) {
                        }

                        @Override
                        public void onDownloadProgress(long bytesRead, long contentLength, boolean done) {
                        }
                    });
                } catch (Exception e) {
                    String errorMessage = "Problem during request building | " + String.valueOf(e.hashCode()) + ": " + e.getMessage();
                    callbackContext.error(errorMessage);
                }
            }
        });
    }
    final private void coverageRegionStopPoints(final JSONObject params, final CallbackContext callbackContext) {
        if (this.navitiaSdk == null) {
            callbackContext.error("NavitiaSDK is not instanciated");
            return;
        }

        final StopPointsApi.CoverageRegionStopPointsRequestBuilder stopPointsRequestBuilder = this.navitiaSdk.stopPointsApi.newCoverageRegionStopPointsRequestBuilder();
        cordova.getThreadPool().execute(new Runnable() {
            @Override
            public void run() {
                try {
                    if (params.has("region") && (params.getString("region") != null) && (!params.getString("region").isEmpty()) ) {
                        // Param: region, Type: String
                        stopPointsRequestBuilder.withRegion(stringStraightPass(params.getString("region")));
                    }
                    if (params.has("startPage") && (params.getString("startPage") != null) && (!params.getString("startPage").isEmpty()) ) {
                        // Param: startPage, Type: Integer
                        stopPointsRequestBuilder.withStartPage(integerStraightPass(params.getInt("startPage")));
                    }
                    if (params.has("count") && (params.getString("count") != null) && (!params.getString("count").isEmpty()) ) {
                        // Param: count, Type: Integer
                        stopPointsRequestBuilder.withCount(integerStraightPass(params.getInt("count")));
                    }
                    if (params.has("depth") && (params.getString("depth") != null) && (!params.getString("depth").isEmpty()) ) {
                        // Param: depth, Type: Integer
                        stopPointsRequestBuilder.withDepth(integerStraightPass(params.getInt("depth")));
                    }
                    if (params.has("forbiddenId") && (params.getString("forbiddenId") != null) && (!params.getString("forbiddenId").isEmpty()) ) {
                        // Param: forbiddenId, Type: List
                        stopPointsRequestBuilder.withForbiddenId(jsonArrayToStringList(params.getJSONArray("forbiddenId")));
                    }
                    if (params.has("forbiddenUris") && (params.getString("forbiddenUris") != null) && (!params.getString("forbiddenUris").isEmpty()) ) {
                        // Param: forbiddenUris, Type: List
                        stopPointsRequestBuilder.withForbiddenUris(jsonArrayToStringList(params.getJSONArray("forbiddenUris")));
                    }
                    if (params.has("externalCode") && (params.getString("externalCode") != null) && (!params.getString("externalCode").isEmpty()) ) {
                        // Param: externalCode, Type: String
                        stopPointsRequestBuilder.withExternalCode(stringStraightPass(params.getString("externalCode")));
                    }
                    if (params.has("headsign") && (params.getString("headsign") != null) && (!params.getString("headsign").isEmpty()) ) {
                        // Param: headsign, Type: String
                        stopPointsRequestBuilder.withHeadsign(stringStraightPass(params.getString("headsign")));
                    }
                    if (params.has("showCodes") && (params.getString("showCodes") != null) && (!params.getString("showCodes").isEmpty()) ) {
                        // Param: showCodes, Type: Boolean
                        stopPointsRequestBuilder.withShowCodes(booleanStraightPass(params.getBoolean("showCodes")));
                    }
                    if (params.has("odtLevel") && (params.getString("odtLevel") != null) && (!params.getString("odtLevel").isEmpty()) ) {
                        // Param: odtLevel, Type: String
                        stopPointsRequestBuilder.withOdtLevel(stringStraightPass(params.getString("odtLevel")));
                    }
                    if (params.has("dataFreshness") && (params.getString("dataFreshness") != null) && (!params.getString("dataFreshness").isEmpty()) ) {
                        // Param: dataFreshness, Type: String
                        stopPointsRequestBuilder.withDataFreshness(stringStraightPass(params.getString("dataFreshness")));
                    }
                    if (params.has("distance") && (params.getString("distance") != null) && (!params.getString("distance").isEmpty()) ) {
                        // Param: distance, Type: Integer
                        stopPointsRequestBuilder.withDistance(integerStraightPass(params.getInt("distance")));
                    }
                    if (params.has("since") && (params.getString("since") != null) && (!params.getString("since").isEmpty()) ) {
                        // Param: since, Type: Date
                        stopPointsRequestBuilder.withSince(stringToDateTime(params.getString("since")));
                    }
                    if (params.has("until") && (params.getString("until") != null) && (!params.getString("until").isEmpty()) ) {
                        // Param: until, Type: Date
                        stopPointsRequestBuilder.withUntil(stringToDateTime(params.getString("until")));
                    }
                    if (params.has("disableGeojson") && (params.getString("disableGeojson") != null) && (!params.getString("disableGeojson").isEmpty()) ) {
                        // Param: disableGeojson, Type: Boolean
                        stopPointsRequestBuilder.withDisableGeojson(booleanStraightPass(params.getBoolean("disableGeojson")));
                    }
                    if (params.has("disableDisruption") && (params.getString("disableDisruption") != null) && (!params.getString("disableDisruption").isEmpty()) ) {
                        // Param: disableDisruption, Type: Boolean
                        stopPointsRequestBuilder.withDisableDisruption(booleanStraightPass(params.getBoolean("disableDisruption")));
                    }
                    if (params.has("filter") && (params.getString("filter") != null) && (!params.getString("filter").isEmpty()) ) {
                        // Param: filter, Type: String
                        stopPointsRequestBuilder.withFilter(stringStraightPass(params.getString("filter")));
                    }
                    if (params.has("tags") && (params.getString("tags") != null) && (!params.getString("tags").isEmpty()) ) {
                        // Param: tags, Type: List
                        stopPointsRequestBuilder.withTags(jsonArrayToStringList(params.getJSONArray("tags")));
                    }
                    if (params.has("originalId") && (params.getString("originalId") != null) && (!params.getString("originalId").isEmpty()) ) {
                        // Param: originalId, Type: String
                        stopPointsRequestBuilder.withOriginalId(stringStraightPass(params.getString("originalId")));
                    }
                    
                    stopPointsRequestBuilder.rawGet(new ApiCallback<String>() {
                        @Override
                        public void onFailure(ApiException e, int statusCode, Map<String, List<String>> responseHeaders) {
                            callbackContext.error("Problem during request call | " + e.getMessage());
                        }

                        @Override
                        public void onSuccess(String result, int statusCode, Map<String, List<String>> responseHeaders) {
                            JSONObject jsonObject = null;
                            try {
                                jsonObject = new JSONObject(result);
                                callbackContext.success(jsonObject);
                            } catch (Exception e) {
                                String errorMessage = "Problem during response parsing | " + String.valueOf(e.hashCode()) + ": " + e.getMessage();
                                callbackContext.error(errorMessage);
                            }
                        }

                        @Override
                        public void onUploadProgress(long bytesWritten, long contentLength, boolean done) {
                        }

                        @Override
                        public void onDownloadProgress(long bytesRead, long contentLength, boolean done) {
                        }
                    });
                } catch (Exception e) {
                    String errorMessage = "Problem during request building | " + String.valueOf(e.hashCode()) + ": " + e.getMessage();
                    callbackContext.error(errorMessage);
                }
            }
        });
    }
    final private void coverageRegionStopPointsId(final JSONObject params, final CallbackContext callbackContext) {
        if (this.navitiaSdk == null) {
            callbackContext.error("NavitiaSDK is not instanciated");
            return;
        }

        final StopPointsApi.CoverageRegionStopPointsIdRequestBuilder stopPointsRequestBuilder = this.navitiaSdk.stopPointsApi.newCoverageRegionStopPointsIdRequestBuilder();
        cordova.getThreadPool().execute(new Runnable() {
            @Override
            public void run() {
                try {
                    if (params.has("region") && (params.getString("region") != null) && (!params.getString("region").isEmpty()) ) {
                        // Param: region, Type: String
                        stopPointsRequestBuilder.withRegion(stringStraightPass(params.getString("region")));
                    }
                    if (params.has("id") && (params.getString("id") != null) && (!params.getString("id").isEmpty()) ) {
                        // Param: id, Type: String
                        stopPointsRequestBuilder.withId(stringStraightPass(params.getString("id")));
                    }
                    if (params.has("startPage") && (params.getString("startPage") != null) && (!params.getString("startPage").isEmpty()) ) {
                        // Param: startPage, Type: Integer
                        stopPointsRequestBuilder.withStartPage(integerStraightPass(params.getInt("startPage")));
                    }
                    if (params.has("count") && (params.getString("count") != null) && (!params.getString("count").isEmpty()) ) {
                        // Param: count, Type: Integer
                        stopPointsRequestBuilder.withCount(integerStraightPass(params.getInt("count")));
                    }
                    if (params.has("depth") && (params.getString("depth") != null) && (!params.getString("depth").isEmpty()) ) {
                        // Param: depth, Type: Integer
                        stopPointsRequestBuilder.withDepth(integerStraightPass(params.getInt("depth")));
                    }
                    if (params.has("forbiddenId") && (params.getString("forbiddenId") != null) && (!params.getString("forbiddenId").isEmpty()) ) {
                        // Param: forbiddenId, Type: List
                        stopPointsRequestBuilder.withForbiddenId(jsonArrayToStringList(params.getJSONArray("forbiddenId")));
                    }
                    if (params.has("forbiddenUris") && (params.getString("forbiddenUris") != null) && (!params.getString("forbiddenUris").isEmpty()) ) {
                        // Param: forbiddenUris, Type: List
                        stopPointsRequestBuilder.withForbiddenUris(jsonArrayToStringList(params.getJSONArray("forbiddenUris")));
                    }
                    if (params.has("externalCode") && (params.getString("externalCode") != null) && (!params.getString("externalCode").isEmpty()) ) {
                        // Param: externalCode, Type: String
                        stopPointsRequestBuilder.withExternalCode(stringStraightPass(params.getString("externalCode")));
                    }
                    if (params.has("headsign") && (params.getString("headsign") != null) && (!params.getString("headsign").isEmpty()) ) {
                        // Param: headsign, Type: String
                        stopPointsRequestBuilder.withHeadsign(stringStraightPass(params.getString("headsign")));
                    }
                    if (params.has("showCodes") && (params.getString("showCodes") != null) && (!params.getString("showCodes").isEmpty()) ) {
                        // Param: showCodes, Type: Boolean
                        stopPointsRequestBuilder.withShowCodes(booleanStraightPass(params.getBoolean("showCodes")));
                    }
                    if (params.has("odtLevel") && (params.getString("odtLevel") != null) && (!params.getString("odtLevel").isEmpty()) ) {
                        // Param: odtLevel, Type: String
                        stopPointsRequestBuilder.withOdtLevel(stringStraightPass(params.getString("odtLevel")));
                    }
                    if (params.has("dataFreshness") && (params.getString("dataFreshness") != null) && (!params.getString("dataFreshness").isEmpty()) ) {
                        // Param: dataFreshness, Type: String
                        stopPointsRequestBuilder.withDataFreshness(stringStraightPass(params.getString("dataFreshness")));
                    }
                    if (params.has("distance") && (params.getString("distance") != null) && (!params.getString("distance").isEmpty()) ) {
                        // Param: distance, Type: Integer
                        stopPointsRequestBuilder.withDistance(integerStraightPass(params.getInt("distance")));
                    }
                    if (params.has("since") && (params.getString("since") != null) && (!params.getString("since").isEmpty()) ) {
                        // Param: since, Type: Date
                        stopPointsRequestBuilder.withSince(stringToDateTime(params.getString("since")));
                    }
                    if (params.has("until") && (params.getString("until") != null) && (!params.getString("until").isEmpty()) ) {
                        // Param: until, Type: Date
                        stopPointsRequestBuilder.withUntil(stringToDateTime(params.getString("until")));
                    }
                    if (params.has("disableGeojson") && (params.getString("disableGeojson") != null) && (!params.getString("disableGeojson").isEmpty()) ) {
                        // Param: disableGeojson, Type: Boolean
                        stopPointsRequestBuilder.withDisableGeojson(booleanStraightPass(params.getBoolean("disableGeojson")));
                    }
                    if (params.has("disableDisruption") && (params.getString("disableDisruption") != null) && (!params.getString("disableDisruption").isEmpty()) ) {
                        // Param: disableDisruption, Type: Boolean
                        stopPointsRequestBuilder.withDisableDisruption(booleanStraightPass(params.getBoolean("disableDisruption")));
                    }
                    if (params.has("tags") && (params.getString("tags") != null) && (!params.getString("tags").isEmpty()) ) {
                        // Param: tags, Type: List
                        stopPointsRequestBuilder.withTags(jsonArrayToStringList(params.getJSONArray("tags")));
                    }
                    if (params.has("originalId") && (params.getString("originalId") != null) && (!params.getString("originalId").isEmpty()) ) {
                        // Param: originalId, Type: String
                        stopPointsRequestBuilder.withOriginalId(stringStraightPass(params.getString("originalId")));
                    }
                    
                    stopPointsRequestBuilder.rawGet(new ApiCallback<String>() {
                        @Override
                        public void onFailure(ApiException e, int statusCode, Map<String, List<String>> responseHeaders) {
                            callbackContext.error("Problem during request call | " + e.getMessage());
                        }

                        @Override
                        public void onSuccess(String result, int statusCode, Map<String, List<String>> responseHeaders) {
                            JSONObject jsonObject = null;
                            try {
                                jsonObject = new JSONObject(result);
                                callbackContext.success(jsonObject);
                            } catch (Exception e) {
                                String errorMessage = "Problem during response parsing | " + String.valueOf(e.hashCode()) + ": " + e.getMessage();
                                callbackContext.error(errorMessage);
                            }
                        }

                        @Override
                        public void onUploadProgress(long bytesWritten, long contentLength, boolean done) {
                        }

                        @Override
                        public void onDownloadProgress(long bytesRead, long contentLength, boolean done) {
                        }
                    });
                } catch (Exception e) {
                    String errorMessage = "Problem during request building | " + String.valueOf(e.hashCode()) + ": " + e.getMessage();
                    callbackContext.error(errorMessage);
                }
            }
        });
    }
    final private void coverageRegionUriStopPoints(final JSONObject params, final CallbackContext callbackContext) {
        if (this.navitiaSdk == null) {
            callbackContext.error("NavitiaSDK is not instanciated");
            return;
        }

        final StopPointsApi.CoverageRegionUriStopPointsRequestBuilder stopPointsRequestBuilder = this.navitiaSdk.stopPointsApi.newCoverageRegionUriStopPointsRequestBuilder();
        cordova.getThreadPool().execute(new Runnable() {
            @Override
            public void run() {
                try {
                    if (params.has("region") && (params.getString("region") != null) && (!params.getString("region").isEmpty()) ) {
                        // Param: region, Type: String
                        stopPointsRequestBuilder.withRegion(stringStraightPass(params.getString("region")));
                    }
                    if (params.has("uri") && (params.getString("uri") != null) && (!params.getString("uri").isEmpty()) ) {
                        // Param: uri, Type: String
                        stopPointsRequestBuilder.withUri(stringStraightPass(params.getString("uri")));
                    }
                    if (params.has("startPage") && (params.getString("startPage") != null) && (!params.getString("startPage").isEmpty()) ) {
                        // Param: startPage, Type: Integer
                        stopPointsRequestBuilder.withStartPage(integerStraightPass(params.getInt("startPage")));
                    }
                    if (params.has("count") && (params.getString("count") != null) && (!params.getString("count").isEmpty()) ) {
                        // Param: count, Type: Integer
                        stopPointsRequestBuilder.withCount(integerStraightPass(params.getInt("count")));
                    }
                    if (params.has("depth") && (params.getString("depth") != null) && (!params.getString("depth").isEmpty()) ) {
                        // Param: depth, Type: Integer
                        stopPointsRequestBuilder.withDepth(integerStraightPass(params.getInt("depth")));
                    }
                    if (params.has("forbiddenId") && (params.getString("forbiddenId") != null) && (!params.getString("forbiddenId").isEmpty()) ) {
                        // Param: forbiddenId, Type: List
                        stopPointsRequestBuilder.withForbiddenId(jsonArrayToStringList(params.getJSONArray("forbiddenId")));
                    }
                    if (params.has("forbiddenUris") && (params.getString("forbiddenUris") != null) && (!params.getString("forbiddenUris").isEmpty()) ) {
                        // Param: forbiddenUris, Type: List
                        stopPointsRequestBuilder.withForbiddenUris(jsonArrayToStringList(params.getJSONArray("forbiddenUris")));
                    }
                    if (params.has("externalCode") && (params.getString("externalCode") != null) && (!params.getString("externalCode").isEmpty()) ) {
                        // Param: externalCode, Type: String
                        stopPointsRequestBuilder.withExternalCode(stringStraightPass(params.getString("externalCode")));
                    }
                    if (params.has("headsign") && (params.getString("headsign") != null) && (!params.getString("headsign").isEmpty()) ) {
                        // Param: headsign, Type: String
                        stopPointsRequestBuilder.withHeadsign(stringStraightPass(params.getString("headsign")));
                    }
                    if (params.has("showCodes") && (params.getString("showCodes") != null) && (!params.getString("showCodes").isEmpty()) ) {
                        // Param: showCodes, Type: Boolean
                        stopPointsRequestBuilder.withShowCodes(booleanStraightPass(params.getBoolean("showCodes")));
                    }
                    if (params.has("odtLevel") && (params.getString("odtLevel") != null) && (!params.getString("odtLevel").isEmpty()) ) {
                        // Param: odtLevel, Type: String
                        stopPointsRequestBuilder.withOdtLevel(stringStraightPass(params.getString("odtLevel")));
                    }
                    if (params.has("dataFreshness") && (params.getString("dataFreshness") != null) && (!params.getString("dataFreshness").isEmpty()) ) {
                        // Param: dataFreshness, Type: String
                        stopPointsRequestBuilder.withDataFreshness(stringStraightPass(params.getString("dataFreshness")));
                    }
                    if (params.has("distance") && (params.getString("distance") != null) && (!params.getString("distance").isEmpty()) ) {
                        // Param: distance, Type: Integer
                        stopPointsRequestBuilder.withDistance(integerStraightPass(params.getInt("distance")));
                    }
                    if (params.has("since") && (params.getString("since") != null) && (!params.getString("since").isEmpty()) ) {
                        // Param: since, Type: Date
                        stopPointsRequestBuilder.withSince(stringToDateTime(params.getString("since")));
                    }
                    if (params.has("until") && (params.getString("until") != null) && (!params.getString("until").isEmpty()) ) {
                        // Param: until, Type: Date
                        stopPointsRequestBuilder.withUntil(stringToDateTime(params.getString("until")));
                    }
                    if (params.has("disableGeojson") && (params.getString("disableGeojson") != null) && (!params.getString("disableGeojson").isEmpty()) ) {
                        // Param: disableGeojson, Type: Boolean
                        stopPointsRequestBuilder.withDisableGeojson(booleanStraightPass(params.getBoolean("disableGeojson")));
                    }
                    if (params.has("disableDisruption") && (params.getString("disableDisruption") != null) && (!params.getString("disableDisruption").isEmpty()) ) {
                        // Param: disableDisruption, Type: Boolean
                        stopPointsRequestBuilder.withDisableDisruption(booleanStraightPass(params.getBoolean("disableDisruption")));
                    }
                    if (params.has("filter") && (params.getString("filter") != null) && (!params.getString("filter").isEmpty()) ) {
                        // Param: filter, Type: String
                        stopPointsRequestBuilder.withFilter(stringStraightPass(params.getString("filter")));
                    }
                    if (params.has("tags") && (params.getString("tags") != null) && (!params.getString("tags").isEmpty()) ) {
                        // Param: tags, Type: List
                        stopPointsRequestBuilder.withTags(jsonArrayToStringList(params.getJSONArray("tags")));
                    }
                    if (params.has("originalId") && (params.getString("originalId") != null) && (!params.getString("originalId").isEmpty()) ) {
                        // Param: originalId, Type: String
                        stopPointsRequestBuilder.withOriginalId(stringStraightPass(params.getString("originalId")));
                    }
                    
                    stopPointsRequestBuilder.rawGet(new ApiCallback<String>() {
                        @Override
                        public void onFailure(ApiException e, int statusCode, Map<String, List<String>> responseHeaders) {
                            callbackContext.error("Problem during request call | " + e.getMessage());
                        }

                        @Override
                        public void onSuccess(String result, int statusCode, Map<String, List<String>> responseHeaders) {
                            JSONObject jsonObject = null;
                            try {
                                jsonObject = new JSONObject(result);
                                callbackContext.success(jsonObject);
                            } catch (Exception e) {
                                String errorMessage = "Problem during response parsing | " + String.valueOf(e.hashCode()) + ": " + e.getMessage();
                                callbackContext.error(errorMessage);
                            }
                        }

                        @Override
                        public void onUploadProgress(long bytesWritten, long contentLength, boolean done) {
                        }

                        @Override
                        public void onDownloadProgress(long bytesRead, long contentLength, boolean done) {
                        }
                    });
                } catch (Exception e) {
                    String errorMessage = "Problem during request building | " + String.valueOf(e.hashCode()) + ": " + e.getMessage();
                    callbackContext.error(errorMessage);
                }
            }
        });
    }
    final private void coverageRegionUriStopPointsId(final JSONObject params, final CallbackContext callbackContext) {
        if (this.navitiaSdk == null) {
            callbackContext.error("NavitiaSDK is not instanciated");
            return;
        }

        final StopPointsApi.CoverageRegionUriStopPointsIdRequestBuilder stopPointsRequestBuilder = this.navitiaSdk.stopPointsApi.newCoverageRegionUriStopPointsIdRequestBuilder();
        cordova.getThreadPool().execute(new Runnable() {
            @Override
            public void run() {
                try {
                    if (params.has("region") && (params.getString("region") != null) && (!params.getString("region").isEmpty()) ) {
                        // Param: region, Type: String
                        stopPointsRequestBuilder.withRegion(stringStraightPass(params.getString("region")));
                    }
                    if (params.has("uri") && (params.getString("uri") != null) && (!params.getString("uri").isEmpty()) ) {
                        // Param: uri, Type: String
                        stopPointsRequestBuilder.withUri(stringStraightPass(params.getString("uri")));
                    }
                    if (params.has("id") && (params.getString("id") != null) && (!params.getString("id").isEmpty()) ) {
                        // Param: id, Type: String
                        stopPointsRequestBuilder.withId(stringStraightPass(params.getString("id")));
                    }
                    if (params.has("startPage") && (params.getString("startPage") != null) && (!params.getString("startPage").isEmpty()) ) {
                        // Param: startPage, Type: Integer
                        stopPointsRequestBuilder.withStartPage(integerStraightPass(params.getInt("startPage")));
                    }
                    if (params.has("count") && (params.getString("count") != null) && (!params.getString("count").isEmpty()) ) {
                        // Param: count, Type: Integer
                        stopPointsRequestBuilder.withCount(integerStraightPass(params.getInt("count")));
                    }
                    if (params.has("depth") && (params.getString("depth") != null) && (!params.getString("depth").isEmpty()) ) {
                        // Param: depth, Type: Integer
                        stopPointsRequestBuilder.withDepth(integerStraightPass(params.getInt("depth")));
                    }
                    if (params.has("forbiddenId") && (params.getString("forbiddenId") != null) && (!params.getString("forbiddenId").isEmpty()) ) {
                        // Param: forbiddenId, Type: List
                        stopPointsRequestBuilder.withForbiddenId(jsonArrayToStringList(params.getJSONArray("forbiddenId")));
                    }
                    if (params.has("forbiddenUris") && (params.getString("forbiddenUris") != null) && (!params.getString("forbiddenUris").isEmpty()) ) {
                        // Param: forbiddenUris, Type: List
                        stopPointsRequestBuilder.withForbiddenUris(jsonArrayToStringList(params.getJSONArray("forbiddenUris")));
                    }
                    if (params.has("externalCode") && (params.getString("externalCode") != null) && (!params.getString("externalCode").isEmpty()) ) {
                        // Param: externalCode, Type: String
                        stopPointsRequestBuilder.withExternalCode(stringStraightPass(params.getString("externalCode")));
                    }
                    if (params.has("headsign") && (params.getString("headsign") != null) && (!params.getString("headsign").isEmpty()) ) {
                        // Param: headsign, Type: String
                        stopPointsRequestBuilder.withHeadsign(stringStraightPass(params.getString("headsign")));
                    }
                    if (params.has("showCodes") && (params.getString("showCodes") != null) && (!params.getString("showCodes").isEmpty()) ) {
                        // Param: showCodes, Type: Boolean
                        stopPointsRequestBuilder.withShowCodes(booleanStraightPass(params.getBoolean("showCodes")));
                    }
                    if (params.has("odtLevel") && (params.getString("odtLevel") != null) && (!params.getString("odtLevel").isEmpty()) ) {
                        // Param: odtLevel, Type: String
                        stopPointsRequestBuilder.withOdtLevel(stringStraightPass(params.getString("odtLevel")));
                    }
                    if (params.has("dataFreshness") && (params.getString("dataFreshness") != null) && (!params.getString("dataFreshness").isEmpty()) ) {
                        // Param: dataFreshness, Type: String
                        stopPointsRequestBuilder.withDataFreshness(stringStraightPass(params.getString("dataFreshness")));
                    }
                    if (params.has("distance") && (params.getString("distance") != null) && (!params.getString("distance").isEmpty()) ) {
                        // Param: distance, Type: Integer
                        stopPointsRequestBuilder.withDistance(integerStraightPass(params.getInt("distance")));
                    }
                    if (params.has("since") && (params.getString("since") != null) && (!params.getString("since").isEmpty()) ) {
                        // Param: since, Type: Date
                        stopPointsRequestBuilder.withSince(stringToDateTime(params.getString("since")));
                    }
                    if (params.has("until") && (params.getString("until") != null) && (!params.getString("until").isEmpty()) ) {
                        // Param: until, Type: Date
                        stopPointsRequestBuilder.withUntil(stringToDateTime(params.getString("until")));
                    }
                    if (params.has("disableGeojson") && (params.getString("disableGeojson") != null) && (!params.getString("disableGeojson").isEmpty()) ) {
                        // Param: disableGeojson, Type: Boolean
                        stopPointsRequestBuilder.withDisableGeojson(booleanStraightPass(params.getBoolean("disableGeojson")));
                    }
                    if (params.has("disableDisruption") && (params.getString("disableDisruption") != null) && (!params.getString("disableDisruption").isEmpty()) ) {
                        // Param: disableDisruption, Type: Boolean
                        stopPointsRequestBuilder.withDisableDisruption(booleanStraightPass(params.getBoolean("disableDisruption")));
                    }
                    if (params.has("tags") && (params.getString("tags") != null) && (!params.getString("tags").isEmpty()) ) {
                        // Param: tags, Type: List
                        stopPointsRequestBuilder.withTags(jsonArrayToStringList(params.getJSONArray("tags")));
                    }
                    if (params.has("originalId") && (params.getString("originalId") != null) && (!params.getString("originalId").isEmpty()) ) {
                        // Param: originalId, Type: String
                        stopPointsRequestBuilder.withOriginalId(stringStraightPass(params.getString("originalId")));
                    }
                    
                    stopPointsRequestBuilder.rawGet(new ApiCallback<String>() {
                        @Override
                        public void onFailure(ApiException e, int statusCode, Map<String, List<String>> responseHeaders) {
                            callbackContext.error("Problem during request call | " + e.getMessage());
                        }

                        @Override
                        public void onSuccess(String result, int statusCode, Map<String, List<String>> responseHeaders) {
                            JSONObject jsonObject = null;
                            try {
                                jsonObject = new JSONObject(result);
                                callbackContext.success(jsonObject);
                            } catch (Exception e) {
                                String errorMessage = "Problem during response parsing | " + String.valueOf(e.hashCode()) + ": " + e.getMessage();
                                callbackContext.error(errorMessage);
                            }
                        }

                        @Override
                        public void onUploadProgress(long bytesWritten, long contentLength, boolean done) {
                        }

                        @Override
                        public void onDownloadProgress(long bytesRead, long contentLength, boolean done) {
                        }
                    });
                } catch (Exception e) {
                    String errorMessage = "Problem during request building | " + String.valueOf(e.hashCode()) + ": " + e.getMessage();
                    callbackContext.error(errorMessage);
                }
            }
        });
    }
    final private void stopPoints(final JSONObject params, final CallbackContext callbackContext) {
        if (this.navitiaSdk == null) {
            callbackContext.error("NavitiaSDK is not instanciated");
            return;
        }

        final StopPointsApi.StopPointsRequestBuilder stopPointsRequestBuilder = this.navitiaSdk.stopPointsApi.newStopPointsRequestBuilder();
        cordova.getThreadPool().execute(new Runnable() {
            @Override
            public void run() {
                try {
                    if (params.has("externalCode") && (params.getString("externalCode") != null) && (!params.getString("externalCode").isEmpty()) ) {
                        // Param: externalCode, Type: String
                        stopPointsRequestBuilder.withExternalCode(stringStraightPass(params.getString("externalCode")));
                    }
                    if (params.has("startPage") && (params.getString("startPage") != null) && (!params.getString("startPage").isEmpty()) ) {
                        // Param: startPage, Type: Integer
                        stopPointsRequestBuilder.withStartPage(integerStraightPass(params.getInt("startPage")));
                    }
                    if (params.has("count") && (params.getString("count") != null) && (!params.getString("count").isEmpty()) ) {
                        // Param: count, Type: Integer
                        stopPointsRequestBuilder.withCount(integerStraightPass(params.getInt("count")));
                    }
                    if (params.has("depth") && (params.getString("depth") != null) && (!params.getString("depth").isEmpty()) ) {
                        // Param: depth, Type: Integer
                        stopPointsRequestBuilder.withDepth(integerStraightPass(params.getInt("depth")));
                    }
                    if (params.has("forbiddenId") && (params.getString("forbiddenId") != null) && (!params.getString("forbiddenId").isEmpty()) ) {
                        // Param: forbiddenId, Type: List
                        stopPointsRequestBuilder.withForbiddenId(jsonArrayToStringList(params.getJSONArray("forbiddenId")));
                    }
                    if (params.has("forbiddenUris") && (params.getString("forbiddenUris") != null) && (!params.getString("forbiddenUris").isEmpty()) ) {
                        // Param: forbiddenUris, Type: List
                        stopPointsRequestBuilder.withForbiddenUris(jsonArrayToStringList(params.getJSONArray("forbiddenUris")));
                    }
                    if (params.has("headsign") && (params.getString("headsign") != null) && (!params.getString("headsign").isEmpty()) ) {
                        // Param: headsign, Type: String
                        stopPointsRequestBuilder.withHeadsign(stringStraightPass(params.getString("headsign")));
                    }
                    if (params.has("showCodes") && (params.getString("showCodes") != null) && (!params.getString("showCodes").isEmpty()) ) {
                        // Param: showCodes, Type: Boolean
                        stopPointsRequestBuilder.withShowCodes(booleanStraightPass(params.getBoolean("showCodes")));
                    }
                    if (params.has("odtLevel") && (params.getString("odtLevel") != null) && (!params.getString("odtLevel").isEmpty()) ) {
                        // Param: odtLevel, Type: String
                        stopPointsRequestBuilder.withOdtLevel(stringStraightPass(params.getString("odtLevel")));
                    }
                    if (params.has("dataFreshness") && (params.getString("dataFreshness") != null) && (!params.getString("dataFreshness").isEmpty()) ) {
                        // Param: dataFreshness, Type: String
                        stopPointsRequestBuilder.withDataFreshness(stringStraightPass(params.getString("dataFreshness")));
                    }
                    if (params.has("distance") && (params.getString("distance") != null) && (!params.getString("distance").isEmpty()) ) {
                        // Param: distance, Type: Integer
                        stopPointsRequestBuilder.withDistance(integerStraightPass(params.getInt("distance")));
                    }
                    if (params.has("since") && (params.getString("since") != null) && (!params.getString("since").isEmpty()) ) {
                        // Param: since, Type: Date
                        stopPointsRequestBuilder.withSince(stringToDateTime(params.getString("since")));
                    }
                    if (params.has("until") && (params.getString("until") != null) && (!params.getString("until").isEmpty()) ) {
                        // Param: until, Type: Date
                        stopPointsRequestBuilder.withUntil(stringToDateTime(params.getString("until")));
                    }
                    if (params.has("disableGeojson") && (params.getString("disableGeojson") != null) && (!params.getString("disableGeojson").isEmpty()) ) {
                        // Param: disableGeojson, Type: Boolean
                        stopPointsRequestBuilder.withDisableGeojson(booleanStraightPass(params.getBoolean("disableGeojson")));
                    }
                    if (params.has("disableDisruption") && (params.getString("disableDisruption") != null) && (!params.getString("disableDisruption").isEmpty()) ) {
                        // Param: disableDisruption, Type: Boolean
                        stopPointsRequestBuilder.withDisableDisruption(booleanStraightPass(params.getBoolean("disableDisruption")));
                    }
                    if (params.has("filter") && (params.getString("filter") != null) && (!params.getString("filter").isEmpty()) ) {
                        // Param: filter, Type: String
                        stopPointsRequestBuilder.withFilter(stringStraightPass(params.getString("filter")));
                    }
                    if (params.has("tags") && (params.getString("tags") != null) && (!params.getString("tags").isEmpty()) ) {
                        // Param: tags, Type: List
                        stopPointsRequestBuilder.withTags(jsonArrayToStringList(params.getJSONArray("tags")));
                    }
                    if (params.has("originalId") && (params.getString("originalId") != null) && (!params.getString("originalId").isEmpty()) ) {
                        // Param: originalId, Type: String
                        stopPointsRequestBuilder.withOriginalId(stringStraightPass(params.getString("originalId")));
                    }
                    
                    stopPointsRequestBuilder.rawGet(new ApiCallback<String>() {
                        @Override
                        public void onFailure(ApiException e, int statusCode, Map<String, List<String>> responseHeaders) {
                            callbackContext.error("Problem during request call | " + e.getMessage());
                        }

                        @Override
                        public void onSuccess(String result, int statusCode, Map<String, List<String>> responseHeaders) {
                            JSONObject jsonObject = null;
                            try {
                                jsonObject = new JSONObject(result);
                                callbackContext.success(jsonObject);
                            } catch (Exception e) {
                                String errorMessage = "Problem during response parsing | " + String.valueOf(e.hashCode()) + ": " + e.getMessage();
                                callbackContext.error(errorMessage);
                            }
                        }

                        @Override
                        public void onUploadProgress(long bytesWritten, long contentLength, boolean done) {
                        }

                        @Override
                        public void onDownloadProgress(long bytesRead, long contentLength, boolean done) {
                        }
                    });
                } catch (Exception e) {
                    String errorMessage = "Problem during request building | " + String.valueOf(e.hashCode()) + ": " + e.getMessage();
                    callbackContext.error(errorMessage);
                }
            }
        });
    }
    final private void coverageLonLatUriStopSchedules(final JSONObject params, final CallbackContext callbackContext) {
        if (this.navitiaSdk == null) {
            callbackContext.error("NavitiaSDK is not instanciated");
            return;
        }

        final StopSchedulesApi.CoverageLonLatUriStopSchedulesRequestBuilder stopSchedulesRequestBuilder = this.navitiaSdk.stopSchedulesApi.newCoverageLonLatUriStopSchedulesRequestBuilder();
        cordova.getThreadPool().execute(new Runnable() {
            @Override
            public void run() {
                try {
                    if (params.has("lat") && (params.getString("lat") != null) && (!params.getString("lat").isEmpty()) ) {
                        // Param: lat, Type: BigDecimal
                        stopSchedulesRequestBuilder.withLat(longToBigDecimal(params.getLong("lat")));
                    }
                    if (params.has("lon") && (params.getString("lon") != null) && (!params.getString("lon").isEmpty()) ) {
                        // Param: lon, Type: BigDecimal
                        stopSchedulesRequestBuilder.withLon(longToBigDecimal(params.getLong("lon")));
                    }
                    if (params.has("uri") && (params.getString("uri") != null) && (!params.getString("uri").isEmpty()) ) {
                        // Param: uri, Type: String
                        stopSchedulesRequestBuilder.withUri(stringStraightPass(params.getString("uri")));
                    }
                    if (params.has("filter") && (params.getString("filter") != null) && (!params.getString("filter").isEmpty()) ) {
                        // Param: filter, Type: String
                        stopSchedulesRequestBuilder.withFilter(stringStraightPass(params.getString("filter")));
                    }
                    if (params.has("fromDatetime") && (params.getString("fromDatetime") != null) && (!params.getString("fromDatetime").isEmpty()) ) {
                        // Param: fromDatetime, Type: Date
                        stopSchedulesRequestBuilder.withFromDatetime(stringToDateTime(params.getString("fromDatetime")));
                    }
                    if (params.has("untilDatetime") && (params.getString("untilDatetime") != null) && (!params.getString("untilDatetime").isEmpty()) ) {
                        // Param: untilDatetime, Type: Date
                        stopSchedulesRequestBuilder.withUntilDatetime(stringToDateTime(params.getString("untilDatetime")));
                    }
                    if (params.has("duration") && (params.getString("duration") != null) && (!params.getString("duration").isEmpty()) ) {
                        // Param: duration, Type: Integer
                        stopSchedulesRequestBuilder.withDuration(integerStraightPass(params.getInt("duration")));
                    }
                    if (params.has("depth") && (params.getString("depth") != null) && (!params.getString("depth").isEmpty()) ) {
                        // Param: depth, Type: Integer
                        stopSchedulesRequestBuilder.withDepth(integerStraightPass(params.getInt("depth")));
                    }
                    if (params.has("count") && (params.getString("count") != null) && (!params.getString("count").isEmpty()) ) {
                        // Param: count, Type: Integer
                        stopSchedulesRequestBuilder.withCount(integerStraightPass(params.getInt("count")));
                    }
                    if (params.has("startPage") && (params.getString("startPage") != null) && (!params.getString("startPage").isEmpty()) ) {
                        // Param: startPage, Type: Integer
                        stopSchedulesRequestBuilder.withStartPage(integerStraightPass(params.getInt("startPage")));
                    }
                    if (params.has("maxDateTimes") && (params.getString("maxDateTimes") != null) && (!params.getString("maxDateTimes").isEmpty()) ) {
                        // Param: maxDateTimes, Type: Integer
                        stopSchedulesRequestBuilder.withMaxDateTimes(integerStraightPass(params.getInt("maxDateTimes")));
                    }
                    if (params.has("forbiddenId") && (params.getString("forbiddenId") != null) && (!params.getString("forbiddenId").isEmpty()) ) {
                        // Param: forbiddenId, Type: List
                        stopSchedulesRequestBuilder.withForbiddenId(jsonArrayToStringList(params.getJSONArray("forbiddenId")));
                    }
                    if (params.has("forbiddenUris") && (params.getString("forbiddenUris") != null) && (!params.getString("forbiddenUris").isEmpty()) ) {
                        // Param: forbiddenUris, Type: List
                        stopSchedulesRequestBuilder.withForbiddenUris(jsonArrayToStringList(params.getJSONArray("forbiddenUris")));
                    }
                    if (params.has("calendar") && (params.getString("calendar") != null) && (!params.getString("calendar").isEmpty()) ) {
                        // Param: calendar, Type: String
                        stopSchedulesRequestBuilder.withCalendar(stringStraightPass(params.getString("calendar")));
                    }
                    if (params.has("distance") && (params.getString("distance") != null) && (!params.getString("distance").isEmpty()) ) {
                        // Param: distance, Type: Integer
                        stopSchedulesRequestBuilder.withDistance(integerStraightPass(params.getInt("distance")));
                    }
                    if (params.has("showCodes") && (params.getString("showCodes") != null) && (!params.getString("showCodes").isEmpty()) ) {
                        // Param: showCodes, Type: Boolean
                        stopSchedulesRequestBuilder.withShowCodes(booleanStraightPass(params.getBoolean("showCodes")));
                    }
                    if (params.has("dataFreshness") && (params.getString("dataFreshness") != null) && (!params.getString("dataFreshness").isEmpty()) ) {
                        // Param: dataFreshness, Type: String
                        stopSchedulesRequestBuilder.withDataFreshness(stringStraightPass(params.getString("dataFreshness")));
                    }
                    if (params.has("itemsPerSchedule") && (params.getString("itemsPerSchedule") != null) && (!params.getString("itemsPerSchedule").isEmpty()) ) {
                        // Param: itemsPerSchedule, Type: Integer
                        stopSchedulesRequestBuilder.withItemsPerSchedule(integerStraightPass(params.getInt("itemsPerSchedule")));
                    }
                    if (params.has("disableGeojson") && (params.getString("disableGeojson") != null) && (!params.getString("disableGeojson").isEmpty()) ) {
                        // Param: disableGeojson, Type: Boolean
                        stopSchedulesRequestBuilder.withDisableGeojson(booleanStraightPass(params.getBoolean("disableGeojson")));
                    }
                    if (params.has("directionType") && (params.getString("directionType") != null) && (!params.getString("directionType").isEmpty()) ) {
                        // Param: directionType, Type: String
                        stopSchedulesRequestBuilder.withDirectionType(stringStraightPass(params.getString("directionType")));
                    }
                    
                    stopSchedulesRequestBuilder.rawGet(new ApiCallback<String>() {
                        @Override
                        public void onFailure(ApiException e, int statusCode, Map<String, List<String>> responseHeaders) {
                            callbackContext.error("Problem during request call | " + e.getMessage());
                        }

                        @Override
                        public void onSuccess(String result, int statusCode, Map<String, List<String>> responseHeaders) {
                            JSONObject jsonObject = null;
                            try {
                                jsonObject = new JSONObject(result);
                                callbackContext.success(jsonObject);
                            } catch (Exception e) {
                                String errorMessage = "Problem during response parsing | " + String.valueOf(e.hashCode()) + ": " + e.getMessage();
                                callbackContext.error(errorMessage);
                            }
                        }

                        @Override
                        public void onUploadProgress(long bytesWritten, long contentLength, boolean done) {
                        }

                        @Override
                        public void onDownloadProgress(long bytesRead, long contentLength, boolean done) {
                        }
                    });
                } catch (Exception e) {
                    String errorMessage = "Problem during request building | " + String.valueOf(e.hashCode()) + ": " + e.getMessage();
                    callbackContext.error(errorMessage);
                }
            }
        });
    }
    final private void coverageRegionUriStopSchedules(final JSONObject params, final CallbackContext callbackContext) {
        if (this.navitiaSdk == null) {
            callbackContext.error("NavitiaSDK is not instanciated");
            return;
        }

        final StopSchedulesApi.CoverageRegionUriStopSchedulesRequestBuilder stopSchedulesRequestBuilder = this.navitiaSdk.stopSchedulesApi.newCoverageRegionUriStopSchedulesRequestBuilder();
        cordova.getThreadPool().execute(new Runnable() {
            @Override
            public void run() {
                try {
                    if (params.has("region") && (params.getString("region") != null) && (!params.getString("region").isEmpty()) ) {
                        // Param: region, Type: String
                        stopSchedulesRequestBuilder.withRegion(stringStraightPass(params.getString("region")));
                    }
                    if (params.has("uri") && (params.getString("uri") != null) && (!params.getString("uri").isEmpty()) ) {
                        // Param: uri, Type: String
                        stopSchedulesRequestBuilder.withUri(stringStraightPass(params.getString("uri")));
                    }
                    if (params.has("filter") && (params.getString("filter") != null) && (!params.getString("filter").isEmpty()) ) {
                        // Param: filter, Type: String
                        stopSchedulesRequestBuilder.withFilter(stringStraightPass(params.getString("filter")));
                    }
                    if (params.has("fromDatetime") && (params.getString("fromDatetime") != null) && (!params.getString("fromDatetime").isEmpty()) ) {
                        // Param: fromDatetime, Type: Date
                        stopSchedulesRequestBuilder.withFromDatetime(stringToDateTime(params.getString("fromDatetime")));
                    }
                    if (params.has("untilDatetime") && (params.getString("untilDatetime") != null) && (!params.getString("untilDatetime").isEmpty()) ) {
                        // Param: untilDatetime, Type: Date
                        stopSchedulesRequestBuilder.withUntilDatetime(stringToDateTime(params.getString("untilDatetime")));
                    }
                    if (params.has("duration") && (params.getString("duration") != null) && (!params.getString("duration").isEmpty()) ) {
                        // Param: duration, Type: Integer
                        stopSchedulesRequestBuilder.withDuration(integerStraightPass(params.getInt("duration")));
                    }
                    if (params.has("depth") && (params.getString("depth") != null) && (!params.getString("depth").isEmpty()) ) {
                        // Param: depth, Type: Integer
                        stopSchedulesRequestBuilder.withDepth(integerStraightPass(params.getInt("depth")));
                    }
                    if (params.has("count") && (params.getString("count") != null) && (!params.getString("count").isEmpty()) ) {
                        // Param: count, Type: Integer
                        stopSchedulesRequestBuilder.withCount(integerStraightPass(params.getInt("count")));
                    }
                    if (params.has("startPage") && (params.getString("startPage") != null) && (!params.getString("startPage").isEmpty()) ) {
                        // Param: startPage, Type: Integer
                        stopSchedulesRequestBuilder.withStartPage(integerStraightPass(params.getInt("startPage")));
                    }
                    if (params.has("maxDateTimes") && (params.getString("maxDateTimes") != null) && (!params.getString("maxDateTimes").isEmpty()) ) {
                        // Param: maxDateTimes, Type: Integer
                        stopSchedulesRequestBuilder.withMaxDateTimes(integerStraightPass(params.getInt("maxDateTimes")));
                    }
                    if (params.has("forbiddenId") && (params.getString("forbiddenId") != null) && (!params.getString("forbiddenId").isEmpty()) ) {
                        // Param: forbiddenId, Type: List
                        stopSchedulesRequestBuilder.withForbiddenId(jsonArrayToStringList(params.getJSONArray("forbiddenId")));
                    }
                    if (params.has("forbiddenUris") && (params.getString("forbiddenUris") != null) && (!params.getString("forbiddenUris").isEmpty()) ) {
                        // Param: forbiddenUris, Type: List
                        stopSchedulesRequestBuilder.withForbiddenUris(jsonArrayToStringList(params.getJSONArray("forbiddenUris")));
                    }
                    if (params.has("calendar") && (params.getString("calendar") != null) && (!params.getString("calendar").isEmpty()) ) {
                        // Param: calendar, Type: String
                        stopSchedulesRequestBuilder.withCalendar(stringStraightPass(params.getString("calendar")));
                    }
                    if (params.has("distance") && (params.getString("distance") != null) && (!params.getString("distance").isEmpty()) ) {
                        // Param: distance, Type: Integer
                        stopSchedulesRequestBuilder.withDistance(integerStraightPass(params.getInt("distance")));
                    }
                    if (params.has("showCodes") && (params.getString("showCodes") != null) && (!params.getString("showCodes").isEmpty()) ) {
                        // Param: showCodes, Type: Boolean
                        stopSchedulesRequestBuilder.withShowCodes(booleanStraightPass(params.getBoolean("showCodes")));
                    }
                    if (params.has("dataFreshness") && (params.getString("dataFreshness") != null) && (!params.getString("dataFreshness").isEmpty()) ) {
                        // Param: dataFreshness, Type: String
                        stopSchedulesRequestBuilder.withDataFreshness(stringStraightPass(params.getString("dataFreshness")));
                    }
                    if (params.has("itemsPerSchedule") && (params.getString("itemsPerSchedule") != null) && (!params.getString("itemsPerSchedule").isEmpty()) ) {
                        // Param: itemsPerSchedule, Type: Integer
                        stopSchedulesRequestBuilder.withItemsPerSchedule(integerStraightPass(params.getInt("itemsPerSchedule")));
                    }
                    if (params.has("disableGeojson") && (params.getString("disableGeojson") != null) && (!params.getString("disableGeojson").isEmpty()) ) {
                        // Param: disableGeojson, Type: Boolean
                        stopSchedulesRequestBuilder.withDisableGeojson(booleanStraightPass(params.getBoolean("disableGeojson")));
                    }
                    if (params.has("directionType") && (params.getString("directionType") != null) && (!params.getString("directionType").isEmpty()) ) {
                        // Param: directionType, Type: String
                        stopSchedulesRequestBuilder.withDirectionType(stringStraightPass(params.getString("directionType")));
                    }
                    
                    stopSchedulesRequestBuilder.rawGet(new ApiCallback<String>() {
                        @Override
                        public void onFailure(ApiException e, int statusCode, Map<String, List<String>> responseHeaders) {
                            callbackContext.error("Problem during request call | " + e.getMessage());
                        }

                        @Override
                        public void onSuccess(String result, int statusCode, Map<String, List<String>> responseHeaders) {
                            JSONObject jsonObject = null;
                            try {
                                jsonObject = new JSONObject(result);
                                callbackContext.success(jsonObject);
                            } catch (Exception e) {
                                String errorMessage = "Problem during response parsing | " + String.valueOf(e.hashCode()) + ": " + e.getMessage();
                                callbackContext.error(errorMessage);
                            }
                        }

                        @Override
                        public void onUploadProgress(long bytesWritten, long contentLength, boolean done) {
                        }

                        @Override
                        public void onDownloadProgress(long bytesRead, long contentLength, boolean done) {
                        }
                    });
                } catch (Exception e) {
                    String errorMessage = "Problem during request building | " + String.valueOf(e.hashCode()) + ": " + e.getMessage();
                    callbackContext.error(errorMessage);
                }
            }
        });
    }
    final private void stopSchedules(final JSONObject params, final CallbackContext callbackContext) {
        if (this.navitiaSdk == null) {
            callbackContext.error("NavitiaSDK is not instanciated");
            return;
        }

        final StopSchedulesApi.StopSchedulesRequestBuilder stopSchedulesRequestBuilder = this.navitiaSdk.stopSchedulesApi.newStopSchedulesRequestBuilder();
        cordova.getThreadPool().execute(new Runnable() {
            @Override
            public void run() {
                try {
                    if (params.has("filter") && (params.getString("filter") != null) && (!params.getString("filter").isEmpty()) ) {
                        // Param: filter, Type: String
                        stopSchedulesRequestBuilder.withFilter(stringStraightPass(params.getString("filter")));
                    }
                    if (params.has("fromDatetime") && (params.getString("fromDatetime") != null) && (!params.getString("fromDatetime").isEmpty()) ) {
                        // Param: fromDatetime, Type: Date
                        stopSchedulesRequestBuilder.withFromDatetime(stringToDateTime(params.getString("fromDatetime")));
                    }
                    if (params.has("untilDatetime") && (params.getString("untilDatetime") != null) && (!params.getString("untilDatetime").isEmpty()) ) {
                        // Param: untilDatetime, Type: Date
                        stopSchedulesRequestBuilder.withUntilDatetime(stringToDateTime(params.getString("untilDatetime")));
                    }
                    if (params.has("duration") && (params.getString("duration") != null) && (!params.getString("duration").isEmpty()) ) {
                        // Param: duration, Type: Integer
                        stopSchedulesRequestBuilder.withDuration(integerStraightPass(params.getInt("duration")));
                    }
                    if (params.has("depth") && (params.getString("depth") != null) && (!params.getString("depth").isEmpty()) ) {
                        // Param: depth, Type: Integer
                        stopSchedulesRequestBuilder.withDepth(integerStraightPass(params.getInt("depth")));
                    }
                    if (params.has("count") && (params.getString("count") != null) && (!params.getString("count").isEmpty()) ) {
                        // Param: count, Type: Integer
                        stopSchedulesRequestBuilder.withCount(integerStraightPass(params.getInt("count")));
                    }
                    if (params.has("startPage") && (params.getString("startPage") != null) && (!params.getString("startPage").isEmpty()) ) {
                        // Param: startPage, Type: Integer
                        stopSchedulesRequestBuilder.withStartPage(integerStraightPass(params.getInt("startPage")));
                    }
                    if (params.has("maxDateTimes") && (params.getString("maxDateTimes") != null) && (!params.getString("maxDateTimes").isEmpty()) ) {
                        // Param: maxDateTimes, Type: Integer
                        stopSchedulesRequestBuilder.withMaxDateTimes(integerStraightPass(params.getInt("maxDateTimes")));
                    }
                    if (params.has("forbiddenId") && (params.getString("forbiddenId") != null) && (!params.getString("forbiddenId").isEmpty()) ) {
                        // Param: forbiddenId, Type: List
                        stopSchedulesRequestBuilder.withForbiddenId(jsonArrayToStringList(params.getJSONArray("forbiddenId")));
                    }
                    if (params.has("forbiddenUris") && (params.getString("forbiddenUris") != null) && (!params.getString("forbiddenUris").isEmpty()) ) {
                        // Param: forbiddenUris, Type: List
                        stopSchedulesRequestBuilder.withForbiddenUris(jsonArrayToStringList(params.getJSONArray("forbiddenUris")));
                    }
                    if (params.has("calendar") && (params.getString("calendar") != null) && (!params.getString("calendar").isEmpty()) ) {
                        // Param: calendar, Type: String
                        stopSchedulesRequestBuilder.withCalendar(stringStraightPass(params.getString("calendar")));
                    }
                    if (params.has("distance") && (params.getString("distance") != null) && (!params.getString("distance").isEmpty()) ) {
                        // Param: distance, Type: Integer
                        stopSchedulesRequestBuilder.withDistance(integerStraightPass(params.getInt("distance")));
                    }
                    if (params.has("showCodes") && (params.getString("showCodes") != null) && (!params.getString("showCodes").isEmpty()) ) {
                        // Param: showCodes, Type: Boolean
                        stopSchedulesRequestBuilder.withShowCodes(booleanStraightPass(params.getBoolean("showCodes")));
                    }
                    if (params.has("dataFreshness") && (params.getString("dataFreshness") != null) && (!params.getString("dataFreshness").isEmpty()) ) {
                        // Param: dataFreshness, Type: String
                        stopSchedulesRequestBuilder.withDataFreshness(stringStraightPass(params.getString("dataFreshness")));
                    }
                    if (params.has("itemsPerSchedule") && (params.getString("itemsPerSchedule") != null) && (!params.getString("itemsPerSchedule").isEmpty()) ) {
                        // Param: itemsPerSchedule, Type: Integer
                        stopSchedulesRequestBuilder.withItemsPerSchedule(integerStraightPass(params.getInt("itemsPerSchedule")));
                    }
                    if (params.has("disableGeojson") && (params.getString("disableGeojson") != null) && (!params.getString("disableGeojson").isEmpty()) ) {
                        // Param: disableGeojson, Type: Boolean
                        stopSchedulesRequestBuilder.withDisableGeojson(booleanStraightPass(params.getBoolean("disableGeojson")));
                    }
                    if (params.has("directionType") && (params.getString("directionType") != null) && (!params.getString("directionType").isEmpty()) ) {
                        // Param: directionType, Type: String
                        stopSchedulesRequestBuilder.withDirectionType(stringStraightPass(params.getString("directionType")));
                    }
                    
                    stopSchedulesRequestBuilder.rawGet(new ApiCallback<String>() {
                        @Override
                        public void onFailure(ApiException e, int statusCode, Map<String, List<String>> responseHeaders) {
                            callbackContext.error("Problem during request call | " + e.getMessage());
                        }

                        @Override
                        public void onSuccess(String result, int statusCode, Map<String, List<String>> responseHeaders) {
                            JSONObject jsonObject = null;
                            try {
                                jsonObject = new JSONObject(result);
                                callbackContext.success(jsonObject);
                            } catch (Exception e) {
                                String errorMessage = "Problem during response parsing | " + String.valueOf(e.hashCode()) + ": " + e.getMessage();
                                callbackContext.error(errorMessage);
                            }
                        }

                        @Override
                        public void onUploadProgress(long bytesWritten, long contentLength, boolean done) {
                        }

                        @Override
                        public void onDownloadProgress(long bytesRead, long contentLength, boolean done) {
                        }
                    });
                } catch (Exception e) {
                    String errorMessage = "Problem during request building | " + String.valueOf(e.hashCode()) + ": " + e.getMessage();
                    callbackContext.error(errorMessage);
                }
            }
        });
    }
    final private void coverageLonLatUriTerminusSchedules(final JSONObject params, final CallbackContext callbackContext) {
        if (this.navitiaSdk == null) {
            callbackContext.error("NavitiaSDK is not instanciated");
            return;
        }

        final TerminusSchedulesApi.CoverageLonLatUriTerminusSchedulesRequestBuilder terminusSchedulesRequestBuilder = this.navitiaSdk.terminusSchedulesApi.newCoverageLonLatUriTerminusSchedulesRequestBuilder();
        cordova.getThreadPool().execute(new Runnable() {
            @Override
            public void run() {
                try {
                    if (params.has("lat") && (params.getString("lat") != null) && (!params.getString("lat").isEmpty()) ) {
                        // Param: lat, Type: BigDecimal
                        terminusSchedulesRequestBuilder.withLat(longToBigDecimal(params.getLong("lat")));
                    }
                    if (params.has("lon") && (params.getString("lon") != null) && (!params.getString("lon").isEmpty()) ) {
                        // Param: lon, Type: BigDecimal
                        terminusSchedulesRequestBuilder.withLon(longToBigDecimal(params.getLong("lon")));
                    }
                    if (params.has("uri") && (params.getString("uri") != null) && (!params.getString("uri").isEmpty()) ) {
                        // Param: uri, Type: String
                        terminusSchedulesRequestBuilder.withUri(stringStraightPass(params.getString("uri")));
                    }
                    if (params.has("filter") && (params.getString("filter") != null) && (!params.getString("filter").isEmpty()) ) {
                        // Param: filter, Type: String
                        terminusSchedulesRequestBuilder.withFilter(stringStraightPass(params.getString("filter")));
                    }
                    if (params.has("fromDatetime") && (params.getString("fromDatetime") != null) && (!params.getString("fromDatetime").isEmpty()) ) {
                        // Param: fromDatetime, Type: Date
                        terminusSchedulesRequestBuilder.withFromDatetime(stringToDateTime(params.getString("fromDatetime")));
                    }
                    if (params.has("untilDatetime") && (params.getString("untilDatetime") != null) && (!params.getString("untilDatetime").isEmpty()) ) {
                        // Param: untilDatetime, Type: Date
                        terminusSchedulesRequestBuilder.withUntilDatetime(stringToDateTime(params.getString("untilDatetime")));
                    }
                    if (params.has("duration") && (params.getString("duration") != null) && (!params.getString("duration").isEmpty()) ) {
                        // Param: duration, Type: Integer
                        terminusSchedulesRequestBuilder.withDuration(integerStraightPass(params.getInt("duration")));
                    }
                    if (params.has("depth") && (params.getString("depth") != null) && (!params.getString("depth").isEmpty()) ) {
                        // Param: depth, Type: Integer
                        terminusSchedulesRequestBuilder.withDepth(integerStraightPass(params.getInt("depth")));
                    }
                    if (params.has("count") && (params.getString("count") != null) && (!params.getString("count").isEmpty()) ) {
                        // Param: count, Type: Integer
                        terminusSchedulesRequestBuilder.withCount(integerStraightPass(params.getInt("count")));
                    }
                    if (params.has("startPage") && (params.getString("startPage") != null) && (!params.getString("startPage").isEmpty()) ) {
                        // Param: startPage, Type: Integer
                        terminusSchedulesRequestBuilder.withStartPage(integerStraightPass(params.getInt("startPage")));
                    }
                    if (params.has("maxDateTimes") && (params.getString("maxDateTimes") != null) && (!params.getString("maxDateTimes").isEmpty()) ) {
                        // Param: maxDateTimes, Type: Integer
                        terminusSchedulesRequestBuilder.withMaxDateTimes(integerStraightPass(params.getInt("maxDateTimes")));
                    }
                    if (params.has("forbiddenId") && (params.getString("forbiddenId") != null) && (!params.getString("forbiddenId").isEmpty()) ) {
                        // Param: forbiddenId, Type: List
                        terminusSchedulesRequestBuilder.withForbiddenId(jsonArrayToStringList(params.getJSONArray("forbiddenId")));
                    }
                    if (params.has("forbiddenUris") && (params.getString("forbiddenUris") != null) && (!params.getString("forbiddenUris").isEmpty()) ) {
                        // Param: forbiddenUris, Type: List
                        terminusSchedulesRequestBuilder.withForbiddenUris(jsonArrayToStringList(params.getJSONArray("forbiddenUris")));
                    }
                    if (params.has("calendar") && (params.getString("calendar") != null) && (!params.getString("calendar").isEmpty()) ) {
                        // Param: calendar, Type: String
                        terminusSchedulesRequestBuilder.withCalendar(stringStraightPass(params.getString("calendar")));
                    }
                    if (params.has("distance") && (params.getString("distance") != null) && (!params.getString("distance").isEmpty()) ) {
                        // Param: distance, Type: Integer
                        terminusSchedulesRequestBuilder.withDistance(integerStraightPass(params.getInt("distance")));
                    }
                    if (params.has("showCodes") && (params.getString("showCodes") != null) && (!params.getString("showCodes").isEmpty()) ) {
                        // Param: showCodes, Type: Boolean
                        terminusSchedulesRequestBuilder.withShowCodes(booleanStraightPass(params.getBoolean("showCodes")));
                    }
                    if (params.has("dataFreshness") && (params.getString("dataFreshness") != null) && (!params.getString("dataFreshness").isEmpty()) ) {
                        // Param: dataFreshness, Type: String
                        terminusSchedulesRequestBuilder.withDataFreshness(stringStraightPass(params.getString("dataFreshness")));
                    }
                    if (params.has("itemsPerSchedule") && (params.getString("itemsPerSchedule") != null) && (!params.getString("itemsPerSchedule").isEmpty()) ) {
                        // Param: itemsPerSchedule, Type: Integer
                        terminusSchedulesRequestBuilder.withItemsPerSchedule(integerStraightPass(params.getInt("itemsPerSchedule")));
                    }
                    if (params.has("disableGeojson") && (params.getString("disableGeojson") != null) && (!params.getString("disableGeojson").isEmpty()) ) {
                        // Param: disableGeojson, Type: Boolean
                        terminusSchedulesRequestBuilder.withDisableGeojson(booleanStraightPass(params.getBoolean("disableGeojson")));
                    }
                    if (params.has("directionType") && (params.getString("directionType") != null) && (!params.getString("directionType").isEmpty()) ) {
                        // Param: directionType, Type: String
                        terminusSchedulesRequestBuilder.withDirectionType(stringStraightPass(params.getString("directionType")));
                    }
                    
                    terminusSchedulesRequestBuilder.rawGet(new ApiCallback<String>() {
                        @Override
                        public void onFailure(ApiException e, int statusCode, Map<String, List<String>> responseHeaders) {
                            callbackContext.error("Problem during request call | " + e.getMessage());
                        }

                        @Override
                        public void onSuccess(String result, int statusCode, Map<String, List<String>> responseHeaders) {
                            JSONObject jsonObject = null;
                            try {
                                jsonObject = new JSONObject(result);
                                callbackContext.success(jsonObject);
                            } catch (Exception e) {
                                String errorMessage = "Problem during response parsing | " + String.valueOf(e.hashCode()) + ": " + e.getMessage();
                                callbackContext.error(errorMessage);
                            }
                        }

                        @Override
                        public void onUploadProgress(long bytesWritten, long contentLength, boolean done) {
                        }

                        @Override
                        public void onDownloadProgress(long bytesRead, long contentLength, boolean done) {
                        }
                    });
                } catch (Exception e) {
                    String errorMessage = "Problem during request building | " + String.valueOf(e.hashCode()) + ": " + e.getMessage();
                    callbackContext.error(errorMessage);
                }
            }
        });
    }
    final private void coverageRegionUriTerminusSchedules(final JSONObject params, final CallbackContext callbackContext) {
        if (this.navitiaSdk == null) {
            callbackContext.error("NavitiaSDK is not instanciated");
            return;
        }

        final TerminusSchedulesApi.CoverageRegionUriTerminusSchedulesRequestBuilder terminusSchedulesRequestBuilder = this.navitiaSdk.terminusSchedulesApi.newCoverageRegionUriTerminusSchedulesRequestBuilder();
        cordova.getThreadPool().execute(new Runnable() {
            @Override
            public void run() {
                try {
                    if (params.has("region") && (params.getString("region") != null) && (!params.getString("region").isEmpty()) ) {
                        // Param: region, Type: String
                        terminusSchedulesRequestBuilder.withRegion(stringStraightPass(params.getString("region")));
                    }
                    if (params.has("uri") && (params.getString("uri") != null) && (!params.getString("uri").isEmpty()) ) {
                        // Param: uri, Type: String
                        terminusSchedulesRequestBuilder.withUri(stringStraightPass(params.getString("uri")));
                    }
                    if (params.has("filter") && (params.getString("filter") != null) && (!params.getString("filter").isEmpty()) ) {
                        // Param: filter, Type: String
                        terminusSchedulesRequestBuilder.withFilter(stringStraightPass(params.getString("filter")));
                    }
                    if (params.has("fromDatetime") && (params.getString("fromDatetime") != null) && (!params.getString("fromDatetime").isEmpty()) ) {
                        // Param: fromDatetime, Type: Date
                        terminusSchedulesRequestBuilder.withFromDatetime(stringToDateTime(params.getString("fromDatetime")));
                    }
                    if (params.has("untilDatetime") && (params.getString("untilDatetime") != null) && (!params.getString("untilDatetime").isEmpty()) ) {
                        // Param: untilDatetime, Type: Date
                        terminusSchedulesRequestBuilder.withUntilDatetime(stringToDateTime(params.getString("untilDatetime")));
                    }
                    if (params.has("duration") && (params.getString("duration") != null) && (!params.getString("duration").isEmpty()) ) {
                        // Param: duration, Type: Integer
                        terminusSchedulesRequestBuilder.withDuration(integerStraightPass(params.getInt("duration")));
                    }
                    if (params.has("depth") && (params.getString("depth") != null) && (!params.getString("depth").isEmpty()) ) {
                        // Param: depth, Type: Integer
                        terminusSchedulesRequestBuilder.withDepth(integerStraightPass(params.getInt("depth")));
                    }
                    if (params.has("count") && (params.getString("count") != null) && (!params.getString("count").isEmpty()) ) {
                        // Param: count, Type: Integer
                        terminusSchedulesRequestBuilder.withCount(integerStraightPass(params.getInt("count")));
                    }
                    if (params.has("startPage") && (params.getString("startPage") != null) && (!params.getString("startPage").isEmpty()) ) {
                        // Param: startPage, Type: Integer
                        terminusSchedulesRequestBuilder.withStartPage(integerStraightPass(params.getInt("startPage")));
                    }
                    if (params.has("maxDateTimes") && (params.getString("maxDateTimes") != null) && (!params.getString("maxDateTimes").isEmpty()) ) {
                        // Param: maxDateTimes, Type: Integer
                        terminusSchedulesRequestBuilder.withMaxDateTimes(integerStraightPass(params.getInt("maxDateTimes")));
                    }
                    if (params.has("forbiddenId") && (params.getString("forbiddenId") != null) && (!params.getString("forbiddenId").isEmpty()) ) {
                        // Param: forbiddenId, Type: List
                        terminusSchedulesRequestBuilder.withForbiddenId(jsonArrayToStringList(params.getJSONArray("forbiddenId")));
                    }
                    if (params.has("forbiddenUris") && (params.getString("forbiddenUris") != null) && (!params.getString("forbiddenUris").isEmpty()) ) {
                        // Param: forbiddenUris, Type: List
                        terminusSchedulesRequestBuilder.withForbiddenUris(jsonArrayToStringList(params.getJSONArray("forbiddenUris")));
                    }
                    if (params.has("calendar") && (params.getString("calendar") != null) && (!params.getString("calendar").isEmpty()) ) {
                        // Param: calendar, Type: String
                        terminusSchedulesRequestBuilder.withCalendar(stringStraightPass(params.getString("calendar")));
                    }
                    if (params.has("distance") && (params.getString("distance") != null) && (!params.getString("distance").isEmpty()) ) {
                        // Param: distance, Type: Integer
                        terminusSchedulesRequestBuilder.withDistance(integerStraightPass(params.getInt("distance")));
                    }
                    if (params.has("showCodes") && (params.getString("showCodes") != null) && (!params.getString("showCodes").isEmpty()) ) {
                        // Param: showCodes, Type: Boolean
                        terminusSchedulesRequestBuilder.withShowCodes(booleanStraightPass(params.getBoolean("showCodes")));
                    }
                    if (params.has("dataFreshness") && (params.getString("dataFreshness") != null) && (!params.getString("dataFreshness").isEmpty()) ) {
                        // Param: dataFreshness, Type: String
                        terminusSchedulesRequestBuilder.withDataFreshness(stringStraightPass(params.getString("dataFreshness")));
                    }
                    if (params.has("itemsPerSchedule") && (params.getString("itemsPerSchedule") != null) && (!params.getString("itemsPerSchedule").isEmpty()) ) {
                        // Param: itemsPerSchedule, Type: Integer
                        terminusSchedulesRequestBuilder.withItemsPerSchedule(integerStraightPass(params.getInt("itemsPerSchedule")));
                    }
                    if (params.has("disableGeojson") && (params.getString("disableGeojson") != null) && (!params.getString("disableGeojson").isEmpty()) ) {
                        // Param: disableGeojson, Type: Boolean
                        terminusSchedulesRequestBuilder.withDisableGeojson(booleanStraightPass(params.getBoolean("disableGeojson")));
                    }
                    if (params.has("directionType") && (params.getString("directionType") != null) && (!params.getString("directionType").isEmpty()) ) {
                        // Param: directionType, Type: String
                        terminusSchedulesRequestBuilder.withDirectionType(stringStraightPass(params.getString("directionType")));
                    }
                    
                    terminusSchedulesRequestBuilder.rawGet(new ApiCallback<String>() {
                        @Override
                        public void onFailure(ApiException e, int statusCode, Map<String, List<String>> responseHeaders) {
                            callbackContext.error("Problem during request call | " + e.getMessage());
                        }

                        @Override
                        public void onSuccess(String result, int statusCode, Map<String, List<String>> responseHeaders) {
                            JSONObject jsonObject = null;
                            try {
                                jsonObject = new JSONObject(result);
                                callbackContext.success(jsonObject);
                            } catch (Exception e) {
                                String errorMessage = "Problem during response parsing | " + String.valueOf(e.hashCode()) + ": " + e.getMessage();
                                callbackContext.error(errorMessage);
                            }
                        }

                        @Override
                        public void onUploadProgress(long bytesWritten, long contentLength, boolean done) {
                        }

                        @Override
                        public void onDownloadProgress(long bytesRead, long contentLength, boolean done) {
                        }
                    });
                } catch (Exception e) {
                    String errorMessage = "Problem during request building | " + String.valueOf(e.hashCode()) + ": " + e.getMessage();
                    callbackContext.error(errorMessage);
                }
            }
        });
    }
    final private void terminusSchedules(final JSONObject params, final CallbackContext callbackContext) {
        if (this.navitiaSdk == null) {
            callbackContext.error("NavitiaSDK is not instanciated");
            return;
        }

        final TerminusSchedulesApi.TerminusSchedulesRequestBuilder terminusSchedulesRequestBuilder = this.navitiaSdk.terminusSchedulesApi.newTerminusSchedulesRequestBuilder();
        cordova.getThreadPool().execute(new Runnable() {
            @Override
            public void run() {
                try {
                    if (params.has("filter") && (params.getString("filter") != null) && (!params.getString("filter").isEmpty()) ) {
                        // Param: filter, Type: String
                        terminusSchedulesRequestBuilder.withFilter(stringStraightPass(params.getString("filter")));
                    }
                    if (params.has("fromDatetime") && (params.getString("fromDatetime") != null) && (!params.getString("fromDatetime").isEmpty()) ) {
                        // Param: fromDatetime, Type: Date
                        terminusSchedulesRequestBuilder.withFromDatetime(stringToDateTime(params.getString("fromDatetime")));
                    }
                    if (params.has("untilDatetime") && (params.getString("untilDatetime") != null) && (!params.getString("untilDatetime").isEmpty()) ) {
                        // Param: untilDatetime, Type: Date
                        terminusSchedulesRequestBuilder.withUntilDatetime(stringToDateTime(params.getString("untilDatetime")));
                    }
                    if (params.has("duration") && (params.getString("duration") != null) && (!params.getString("duration").isEmpty()) ) {
                        // Param: duration, Type: Integer
                        terminusSchedulesRequestBuilder.withDuration(integerStraightPass(params.getInt("duration")));
                    }
                    if (params.has("depth") && (params.getString("depth") != null) && (!params.getString("depth").isEmpty()) ) {
                        // Param: depth, Type: Integer
                        terminusSchedulesRequestBuilder.withDepth(integerStraightPass(params.getInt("depth")));
                    }
                    if (params.has("count") && (params.getString("count") != null) && (!params.getString("count").isEmpty()) ) {
                        // Param: count, Type: Integer
                        terminusSchedulesRequestBuilder.withCount(integerStraightPass(params.getInt("count")));
                    }
                    if (params.has("startPage") && (params.getString("startPage") != null) && (!params.getString("startPage").isEmpty()) ) {
                        // Param: startPage, Type: Integer
                        terminusSchedulesRequestBuilder.withStartPage(integerStraightPass(params.getInt("startPage")));
                    }
                    if (params.has("maxDateTimes") && (params.getString("maxDateTimes") != null) && (!params.getString("maxDateTimes").isEmpty()) ) {
                        // Param: maxDateTimes, Type: Integer
                        terminusSchedulesRequestBuilder.withMaxDateTimes(integerStraightPass(params.getInt("maxDateTimes")));
                    }
                    if (params.has("forbiddenId") && (params.getString("forbiddenId") != null) && (!params.getString("forbiddenId").isEmpty()) ) {
                        // Param: forbiddenId, Type: List
                        terminusSchedulesRequestBuilder.withForbiddenId(jsonArrayToStringList(params.getJSONArray("forbiddenId")));
                    }
                    if (params.has("forbiddenUris") && (params.getString("forbiddenUris") != null) && (!params.getString("forbiddenUris").isEmpty()) ) {
                        // Param: forbiddenUris, Type: List
                        terminusSchedulesRequestBuilder.withForbiddenUris(jsonArrayToStringList(params.getJSONArray("forbiddenUris")));
                    }
                    if (params.has("calendar") && (params.getString("calendar") != null) && (!params.getString("calendar").isEmpty()) ) {
                        // Param: calendar, Type: String
                        terminusSchedulesRequestBuilder.withCalendar(stringStraightPass(params.getString("calendar")));
                    }
                    if (params.has("distance") && (params.getString("distance") != null) && (!params.getString("distance").isEmpty()) ) {
                        // Param: distance, Type: Integer
                        terminusSchedulesRequestBuilder.withDistance(integerStraightPass(params.getInt("distance")));
                    }
                    if (params.has("showCodes") && (params.getString("showCodes") != null) && (!params.getString("showCodes").isEmpty()) ) {
                        // Param: showCodes, Type: Boolean
                        terminusSchedulesRequestBuilder.withShowCodes(booleanStraightPass(params.getBoolean("showCodes")));
                    }
                    if (params.has("dataFreshness") && (params.getString("dataFreshness") != null) && (!params.getString("dataFreshness").isEmpty()) ) {
                        // Param: dataFreshness, Type: String
                        terminusSchedulesRequestBuilder.withDataFreshness(stringStraightPass(params.getString("dataFreshness")));
                    }
                    if (params.has("itemsPerSchedule") && (params.getString("itemsPerSchedule") != null) && (!params.getString("itemsPerSchedule").isEmpty()) ) {
                        // Param: itemsPerSchedule, Type: Integer
                        terminusSchedulesRequestBuilder.withItemsPerSchedule(integerStraightPass(params.getInt("itemsPerSchedule")));
                    }
                    if (params.has("disableGeojson") && (params.getString("disableGeojson") != null) && (!params.getString("disableGeojson").isEmpty()) ) {
                        // Param: disableGeojson, Type: Boolean
                        terminusSchedulesRequestBuilder.withDisableGeojson(booleanStraightPass(params.getBoolean("disableGeojson")));
                    }
                    if (params.has("directionType") && (params.getString("directionType") != null) && (!params.getString("directionType").isEmpty()) ) {
                        // Param: directionType, Type: String
                        terminusSchedulesRequestBuilder.withDirectionType(stringStraightPass(params.getString("directionType")));
                    }
                    
                    terminusSchedulesRequestBuilder.rawGet(new ApiCallback<String>() {
                        @Override
                        public void onFailure(ApiException e, int statusCode, Map<String, List<String>> responseHeaders) {
                            callbackContext.error("Problem during request call | " + e.getMessage());
                        }

                        @Override
                        public void onSuccess(String result, int statusCode, Map<String, List<String>> responseHeaders) {
                            JSONObject jsonObject = null;
                            try {
                                jsonObject = new JSONObject(result);
                                callbackContext.success(jsonObject);
                            } catch (Exception e) {
                                String errorMessage = "Problem during response parsing | " + String.valueOf(e.hashCode()) + ": " + e.getMessage();
                                callbackContext.error(errorMessage);
                            }
                        }

                        @Override
                        public void onUploadProgress(long bytesWritten, long contentLength, boolean done) {
                        }

                        @Override
                        public void onDownloadProgress(long bytesRead, long contentLength, boolean done) {
                        }
                    });
                } catch (Exception e) {
                    String errorMessage = "Problem during request building | " + String.valueOf(e.hashCode()) + ": " + e.getMessage();
                    callbackContext.error(errorMessage);
                }
            }
        });
    }
    final private void coverageLonLatTrafficReports(final JSONObject params, final CallbackContext callbackContext) {
        if (this.navitiaSdk == null) {
            callbackContext.error("NavitiaSDK is not instanciated");
            return;
        }

        final TrafficReportApi.CoverageLonLatTrafficReportsRequestBuilder trafficReportRequestBuilder = this.navitiaSdk.trafficReportApi.newCoverageLonLatTrafficReportsRequestBuilder();
        cordova.getThreadPool().execute(new Runnable() {
            @Override
            public void run() {
                try {
                    if (params.has("lat") && (params.getString("lat") != null) && (!params.getString("lat").isEmpty()) ) {
                        // Param: lat, Type: BigDecimal
                        trafficReportRequestBuilder.withLat(longToBigDecimal(params.getLong("lat")));
                    }
                    if (params.has("lon") && (params.getString("lon") != null) && (!params.getString("lon").isEmpty()) ) {
                        // Param: lon, Type: BigDecimal
                        trafficReportRequestBuilder.withLon(longToBigDecimal(params.getLong("lon")));
                    }
                    if (params.has("depth") && (params.getString("depth") != null) && (!params.getString("depth").isEmpty()) ) {
                        // Param: depth, Type: Integer
                        trafficReportRequestBuilder.withDepth(integerStraightPass(params.getInt("depth")));
                    }
                    if (params.has("count") && (params.getString("count") != null) && (!params.getString("count").isEmpty()) ) {
                        // Param: count, Type: Integer
                        trafficReportRequestBuilder.withCount(integerStraightPass(params.getInt("count")));
                    }
                    if (params.has("startPage") && (params.getString("startPage") != null) && (!params.getString("startPage").isEmpty()) ) {
                        // Param: startPage, Type: Integer
                        trafficReportRequestBuilder.withStartPage(integerStraightPass(params.getInt("startPage")));
                    }
                    if (params.has("forbiddenId") && (params.getString("forbiddenId") != null) && (!params.getString("forbiddenId").isEmpty()) ) {
                        // Param: forbiddenId, Type: List
                        trafficReportRequestBuilder.withForbiddenId(jsonArrayToStringList(params.getJSONArray("forbiddenId")));
                    }
                    if (params.has("forbiddenUris") && (params.getString("forbiddenUris") != null) && (!params.getString("forbiddenUris").isEmpty()) ) {
                        // Param: forbiddenUris, Type: List
                        trafficReportRequestBuilder.withForbiddenUris(jsonArrayToStringList(params.getJSONArray("forbiddenUris")));
                    }
                    if (params.has("distance") && (params.getString("distance") != null) && (!params.getString("distance").isEmpty()) ) {
                        // Param: distance, Type: Integer
                        trafficReportRequestBuilder.withDistance(integerStraightPass(params.getInt("distance")));
                    }
                    if (params.has("disableGeojson") && (params.getString("disableGeojson") != null) && (!params.getString("disableGeojson").isEmpty()) ) {
                        // Param: disableGeojson, Type: Boolean
                        trafficReportRequestBuilder.withDisableGeojson(booleanStraightPass(params.getBoolean("disableGeojson")));
                    }
                    if (params.has("since") && (params.getString("since") != null) && (!params.getString("since").isEmpty()) ) {
                        // Param: since, Type: Date
                        trafficReportRequestBuilder.withSince(stringToDateTime(params.getString("since")));
                    }
                    if (params.has("until") && (params.getString("until") != null) && (!params.getString("until").isEmpty()) ) {
                        // Param: until, Type: Date
                        trafficReportRequestBuilder.withUntil(stringToDateTime(params.getString("until")));
                    }
                    
                    trafficReportRequestBuilder.rawGet(new ApiCallback<String>() {
                        @Override
                        public void onFailure(ApiException e, int statusCode, Map<String, List<String>> responseHeaders) {
                            callbackContext.error("Problem during request call | " + e.getMessage());
                        }

                        @Override
                        public void onSuccess(String result, int statusCode, Map<String, List<String>> responseHeaders) {
                            JSONObject jsonObject = null;
                            try {
                                jsonObject = new JSONObject(result);
                                callbackContext.success(jsonObject);
                            } catch (Exception e) {
                                String errorMessage = "Problem during response parsing | " + String.valueOf(e.hashCode()) + ": " + e.getMessage();
                                callbackContext.error(errorMessage);
                            }
                        }

                        @Override
                        public void onUploadProgress(long bytesWritten, long contentLength, boolean done) {
                        }

                        @Override
                        public void onDownloadProgress(long bytesRead, long contentLength, boolean done) {
                        }
                    });
                } catch (Exception e) {
                    String errorMessage = "Problem during request building | " + String.valueOf(e.hashCode()) + ": " + e.getMessage();
                    callbackContext.error(errorMessage);
                }
            }
        });
    }
    final private void coverageLonLatUriTrafficReports(final JSONObject params, final CallbackContext callbackContext) {
        if (this.navitiaSdk == null) {
            callbackContext.error("NavitiaSDK is not instanciated");
            return;
        }

        final TrafficReportApi.CoverageLonLatUriTrafficReportsRequestBuilder trafficReportRequestBuilder = this.navitiaSdk.trafficReportApi.newCoverageLonLatUriTrafficReportsRequestBuilder();
        cordova.getThreadPool().execute(new Runnable() {
            @Override
            public void run() {
                try {
                    if (params.has("lat") && (params.getString("lat") != null) && (!params.getString("lat").isEmpty()) ) {
                        // Param: lat, Type: BigDecimal
                        trafficReportRequestBuilder.withLat(longToBigDecimal(params.getLong("lat")));
                    }
                    if (params.has("lon") && (params.getString("lon") != null) && (!params.getString("lon").isEmpty()) ) {
                        // Param: lon, Type: BigDecimal
                        trafficReportRequestBuilder.withLon(longToBigDecimal(params.getLong("lon")));
                    }
                    if (params.has("uri") && (params.getString("uri") != null) && (!params.getString("uri").isEmpty()) ) {
                        // Param: uri, Type: String
                        trafficReportRequestBuilder.withUri(stringStraightPass(params.getString("uri")));
                    }
                    if (params.has("depth") && (params.getString("depth") != null) && (!params.getString("depth").isEmpty()) ) {
                        // Param: depth, Type: Integer
                        trafficReportRequestBuilder.withDepth(integerStraightPass(params.getInt("depth")));
                    }
                    if (params.has("count") && (params.getString("count") != null) && (!params.getString("count").isEmpty()) ) {
                        // Param: count, Type: Integer
                        trafficReportRequestBuilder.withCount(integerStraightPass(params.getInt("count")));
                    }
                    if (params.has("startPage") && (params.getString("startPage") != null) && (!params.getString("startPage").isEmpty()) ) {
                        // Param: startPage, Type: Integer
                        trafficReportRequestBuilder.withStartPage(integerStraightPass(params.getInt("startPage")));
                    }
                    if (params.has("forbiddenId") && (params.getString("forbiddenId") != null) && (!params.getString("forbiddenId").isEmpty()) ) {
                        // Param: forbiddenId, Type: List
                        trafficReportRequestBuilder.withForbiddenId(jsonArrayToStringList(params.getJSONArray("forbiddenId")));
                    }
                    if (params.has("forbiddenUris") && (params.getString("forbiddenUris") != null) && (!params.getString("forbiddenUris").isEmpty()) ) {
                        // Param: forbiddenUris, Type: List
                        trafficReportRequestBuilder.withForbiddenUris(jsonArrayToStringList(params.getJSONArray("forbiddenUris")));
                    }
                    if (params.has("distance") && (params.getString("distance") != null) && (!params.getString("distance").isEmpty()) ) {
                        // Param: distance, Type: Integer
                        trafficReportRequestBuilder.withDistance(integerStraightPass(params.getInt("distance")));
                    }
                    if (params.has("disableGeojson") && (params.getString("disableGeojson") != null) && (!params.getString("disableGeojson").isEmpty()) ) {
                        // Param: disableGeojson, Type: Boolean
                        trafficReportRequestBuilder.withDisableGeojson(booleanStraightPass(params.getBoolean("disableGeojson")));
                    }
                    if (params.has("since") && (params.getString("since") != null) && (!params.getString("since").isEmpty()) ) {
                        // Param: since, Type: Date
                        trafficReportRequestBuilder.withSince(stringToDateTime(params.getString("since")));
                    }
                    if (params.has("until") && (params.getString("until") != null) && (!params.getString("until").isEmpty()) ) {
                        // Param: until, Type: Date
                        trafficReportRequestBuilder.withUntil(stringToDateTime(params.getString("until")));
                    }
                    
                    trafficReportRequestBuilder.rawGet(new ApiCallback<String>() {
                        @Override
                        public void onFailure(ApiException e, int statusCode, Map<String, List<String>> responseHeaders) {
                            callbackContext.error("Problem during request call | " + e.getMessage());
                        }

                        @Override
                        public void onSuccess(String result, int statusCode, Map<String, List<String>> responseHeaders) {
                            JSONObject jsonObject = null;
                            try {
                                jsonObject = new JSONObject(result);
                                callbackContext.success(jsonObject);
                            } catch (Exception e) {
                                String errorMessage = "Problem during response parsing | " + String.valueOf(e.hashCode()) + ": " + e.getMessage();
                                callbackContext.error(errorMessage);
                            }
                        }

                        @Override
                        public void onUploadProgress(long bytesWritten, long contentLength, boolean done) {
                        }

                        @Override
                        public void onDownloadProgress(long bytesRead, long contentLength, boolean done) {
                        }
                    });
                } catch (Exception e) {
                    String errorMessage = "Problem during request building | " + String.valueOf(e.hashCode()) + ": " + e.getMessage();
                    callbackContext.error(errorMessage);
                }
            }
        });
    }
    final private void coverageRegionTrafficReports(final JSONObject params, final CallbackContext callbackContext) {
        if (this.navitiaSdk == null) {
            callbackContext.error("NavitiaSDK is not instanciated");
            return;
        }

        final TrafficReportApi.CoverageRegionTrafficReportsRequestBuilder trafficReportRequestBuilder = this.navitiaSdk.trafficReportApi.newCoverageRegionTrafficReportsRequestBuilder();
        cordova.getThreadPool().execute(new Runnable() {
            @Override
            public void run() {
                try {
                    if (params.has("region") && (params.getString("region") != null) && (!params.getString("region").isEmpty()) ) {
                        // Param: region, Type: String
                        trafficReportRequestBuilder.withRegion(stringStraightPass(params.getString("region")));
                    }
                    if (params.has("depth") && (params.getString("depth") != null) && (!params.getString("depth").isEmpty()) ) {
                        // Param: depth, Type: Integer
                        trafficReportRequestBuilder.withDepth(integerStraightPass(params.getInt("depth")));
                    }
                    if (params.has("count") && (params.getString("count") != null) && (!params.getString("count").isEmpty()) ) {
                        // Param: count, Type: Integer
                        trafficReportRequestBuilder.withCount(integerStraightPass(params.getInt("count")));
                    }
                    if (params.has("startPage") && (params.getString("startPage") != null) && (!params.getString("startPage").isEmpty()) ) {
                        // Param: startPage, Type: Integer
                        trafficReportRequestBuilder.withStartPage(integerStraightPass(params.getInt("startPage")));
                    }
                    if (params.has("forbiddenId") && (params.getString("forbiddenId") != null) && (!params.getString("forbiddenId").isEmpty()) ) {
                        // Param: forbiddenId, Type: List
                        trafficReportRequestBuilder.withForbiddenId(jsonArrayToStringList(params.getJSONArray("forbiddenId")));
                    }
                    if (params.has("forbiddenUris") && (params.getString("forbiddenUris") != null) && (!params.getString("forbiddenUris").isEmpty()) ) {
                        // Param: forbiddenUris, Type: List
                        trafficReportRequestBuilder.withForbiddenUris(jsonArrayToStringList(params.getJSONArray("forbiddenUris")));
                    }
                    if (params.has("distance") && (params.getString("distance") != null) && (!params.getString("distance").isEmpty()) ) {
                        // Param: distance, Type: Integer
                        trafficReportRequestBuilder.withDistance(integerStraightPass(params.getInt("distance")));
                    }
                    if (params.has("disableGeojson") && (params.getString("disableGeojson") != null) && (!params.getString("disableGeojson").isEmpty()) ) {
                        // Param: disableGeojson, Type: Boolean
                        trafficReportRequestBuilder.withDisableGeojson(booleanStraightPass(params.getBoolean("disableGeojson")));
                    }
                    if (params.has("since") && (params.getString("since") != null) && (!params.getString("since").isEmpty()) ) {
                        // Param: since, Type: Date
                        trafficReportRequestBuilder.withSince(stringToDateTime(params.getString("since")));
                    }
                    if (params.has("until") && (params.getString("until") != null) && (!params.getString("until").isEmpty()) ) {
                        // Param: until, Type: Date
                        trafficReportRequestBuilder.withUntil(stringToDateTime(params.getString("until")));
                    }
                    
                    trafficReportRequestBuilder.rawGet(new ApiCallback<String>() {
                        @Override
                        public void onFailure(ApiException e, int statusCode, Map<String, List<String>> responseHeaders) {
                            callbackContext.error("Problem during request call | " + e.getMessage());
                        }

                        @Override
                        public void onSuccess(String result, int statusCode, Map<String, List<String>> responseHeaders) {
                            JSONObject jsonObject = null;
                            try {
                                jsonObject = new JSONObject(result);
                                callbackContext.success(jsonObject);
                            } catch (Exception e) {
                                String errorMessage = "Problem during response parsing | " + String.valueOf(e.hashCode()) + ": " + e.getMessage();
                                callbackContext.error(errorMessage);
                            }
                        }

                        @Override
                        public void onUploadProgress(long bytesWritten, long contentLength, boolean done) {
                        }

                        @Override
                        public void onDownloadProgress(long bytesRead, long contentLength, boolean done) {
                        }
                    });
                } catch (Exception e) {
                    String errorMessage = "Problem during request building | " + String.valueOf(e.hashCode()) + ": " + e.getMessage();
                    callbackContext.error(errorMessage);
                }
            }
        });
    }
    final private void coverageRegionUriTrafficReports(final JSONObject params, final CallbackContext callbackContext) {
        if (this.navitiaSdk == null) {
            callbackContext.error("NavitiaSDK is not instanciated");
            return;
        }

        final TrafficReportApi.CoverageRegionUriTrafficReportsRequestBuilder trafficReportRequestBuilder = this.navitiaSdk.trafficReportApi.newCoverageRegionUriTrafficReportsRequestBuilder();
        cordova.getThreadPool().execute(new Runnable() {
            @Override
            public void run() {
                try {
                    if (params.has("region") && (params.getString("region") != null) && (!params.getString("region").isEmpty()) ) {
                        // Param: region, Type: String
                        trafficReportRequestBuilder.withRegion(stringStraightPass(params.getString("region")));
                    }
                    if (params.has("uri") && (params.getString("uri") != null) && (!params.getString("uri").isEmpty()) ) {
                        // Param: uri, Type: String
                        trafficReportRequestBuilder.withUri(stringStraightPass(params.getString("uri")));
                    }
                    if (params.has("depth") && (params.getString("depth") != null) && (!params.getString("depth").isEmpty()) ) {
                        // Param: depth, Type: Integer
                        trafficReportRequestBuilder.withDepth(integerStraightPass(params.getInt("depth")));
                    }
                    if (params.has("count") && (params.getString("count") != null) && (!params.getString("count").isEmpty()) ) {
                        // Param: count, Type: Integer
                        trafficReportRequestBuilder.withCount(integerStraightPass(params.getInt("count")));
                    }
                    if (params.has("startPage") && (params.getString("startPage") != null) && (!params.getString("startPage").isEmpty()) ) {
                        // Param: startPage, Type: Integer
                        trafficReportRequestBuilder.withStartPage(integerStraightPass(params.getInt("startPage")));
                    }
                    if (params.has("forbiddenId") && (params.getString("forbiddenId") != null) && (!params.getString("forbiddenId").isEmpty()) ) {
                        // Param: forbiddenId, Type: List
                        trafficReportRequestBuilder.withForbiddenId(jsonArrayToStringList(params.getJSONArray("forbiddenId")));
                    }
                    if (params.has("forbiddenUris") && (params.getString("forbiddenUris") != null) && (!params.getString("forbiddenUris").isEmpty()) ) {
                        // Param: forbiddenUris, Type: List
                        trafficReportRequestBuilder.withForbiddenUris(jsonArrayToStringList(params.getJSONArray("forbiddenUris")));
                    }
                    if (params.has("distance") && (params.getString("distance") != null) && (!params.getString("distance").isEmpty()) ) {
                        // Param: distance, Type: Integer
                        trafficReportRequestBuilder.withDistance(integerStraightPass(params.getInt("distance")));
                    }
                    if (params.has("disableGeojson") && (params.getString("disableGeojson") != null) && (!params.getString("disableGeojson").isEmpty()) ) {
                        // Param: disableGeojson, Type: Boolean
                        trafficReportRequestBuilder.withDisableGeojson(booleanStraightPass(params.getBoolean("disableGeojson")));
                    }
                    if (params.has("since") && (params.getString("since") != null) && (!params.getString("since").isEmpty()) ) {
                        // Param: since, Type: Date
                        trafficReportRequestBuilder.withSince(stringToDateTime(params.getString("since")));
                    }
                    if (params.has("until") && (params.getString("until") != null) && (!params.getString("until").isEmpty()) ) {
                        // Param: until, Type: Date
                        trafficReportRequestBuilder.withUntil(stringToDateTime(params.getString("until")));
                    }
                    
                    trafficReportRequestBuilder.rawGet(new ApiCallback<String>() {
                        @Override
                        public void onFailure(ApiException e, int statusCode, Map<String, List<String>> responseHeaders) {
                            callbackContext.error("Problem during request call | " + e.getMessage());
                        }

                        @Override
                        public void onSuccess(String result, int statusCode, Map<String, List<String>> responseHeaders) {
                            JSONObject jsonObject = null;
                            try {
                                jsonObject = new JSONObject(result);
                                callbackContext.success(jsonObject);
                            } catch (Exception e) {
                                String errorMessage = "Problem during response parsing | " + String.valueOf(e.hashCode()) + ": " + e.getMessage();
                                callbackContext.error(errorMessage);
                            }
                        }

                        @Override
                        public void onUploadProgress(long bytesWritten, long contentLength, boolean done) {
                        }

                        @Override
                        public void onDownloadProgress(long bytesRead, long contentLength, boolean done) {
                        }
                    });
                } catch (Exception e) {
                    String errorMessage = "Problem during request building | " + String.valueOf(e.hashCode()) + ": " + e.getMessage();
                    callbackContext.error(errorMessage);
                }
            }
        });
    }
    final private void coverageLonLatTrips(final JSONObject params, final CallbackContext callbackContext) {
        if (this.navitiaSdk == null) {
            callbackContext.error("NavitiaSDK is not instanciated");
            return;
        }

        final TripsApi.CoverageLonLatTripsRequestBuilder tripsRequestBuilder = this.navitiaSdk.tripsApi.newCoverageLonLatTripsRequestBuilder();
        cordova.getThreadPool().execute(new Runnable() {
            @Override
            public void run() {
                try {
                    if (params.has("lat") && (params.getString("lat") != null) && (!params.getString("lat").isEmpty()) ) {
                        // Param: lat, Type: BigDecimal
                        tripsRequestBuilder.withLat(longToBigDecimal(params.getLong("lat")));
                    }
                    if (params.has("lon") && (params.getString("lon") != null) && (!params.getString("lon").isEmpty()) ) {
                        // Param: lon, Type: BigDecimal
                        tripsRequestBuilder.withLon(longToBigDecimal(params.getLong("lon")));
                    }
                    if (params.has("startPage") && (params.getString("startPage") != null) && (!params.getString("startPage").isEmpty()) ) {
                        // Param: startPage, Type: Integer
                        tripsRequestBuilder.withStartPage(integerStraightPass(params.getInt("startPage")));
                    }
                    if (params.has("count") && (params.getString("count") != null) && (!params.getString("count").isEmpty()) ) {
                        // Param: count, Type: Integer
                        tripsRequestBuilder.withCount(integerStraightPass(params.getInt("count")));
                    }
                    if (params.has("depth") && (params.getString("depth") != null) && (!params.getString("depth").isEmpty()) ) {
                        // Param: depth, Type: Integer
                        tripsRequestBuilder.withDepth(integerStraightPass(params.getInt("depth")));
                    }
                    if (params.has("forbiddenId") && (params.getString("forbiddenId") != null) && (!params.getString("forbiddenId").isEmpty()) ) {
                        // Param: forbiddenId, Type: List
                        tripsRequestBuilder.withForbiddenId(jsonArrayToStringList(params.getJSONArray("forbiddenId")));
                    }
                    if (params.has("forbiddenUris") && (params.getString("forbiddenUris") != null) && (!params.getString("forbiddenUris").isEmpty()) ) {
                        // Param: forbiddenUris, Type: List
                        tripsRequestBuilder.withForbiddenUris(jsonArrayToStringList(params.getJSONArray("forbiddenUris")));
                    }
                    if (params.has("externalCode") && (params.getString("externalCode") != null) && (!params.getString("externalCode").isEmpty()) ) {
                        // Param: externalCode, Type: String
                        tripsRequestBuilder.withExternalCode(stringStraightPass(params.getString("externalCode")));
                    }
                    if (params.has("headsign") && (params.getString("headsign") != null) && (!params.getString("headsign").isEmpty()) ) {
                        // Param: headsign, Type: String
                        tripsRequestBuilder.withHeadsign(stringStraightPass(params.getString("headsign")));
                    }
                    if (params.has("showCodes") && (params.getString("showCodes") != null) && (!params.getString("showCodes").isEmpty()) ) {
                        // Param: showCodes, Type: Boolean
                        tripsRequestBuilder.withShowCodes(booleanStraightPass(params.getBoolean("showCodes")));
                    }
                    if (params.has("odtLevel") && (params.getString("odtLevel") != null) && (!params.getString("odtLevel").isEmpty()) ) {
                        // Param: odtLevel, Type: String
                        tripsRequestBuilder.withOdtLevel(stringStraightPass(params.getString("odtLevel")));
                    }
                    if (params.has("dataFreshness") && (params.getString("dataFreshness") != null) && (!params.getString("dataFreshness").isEmpty()) ) {
                        // Param: dataFreshness, Type: String
                        tripsRequestBuilder.withDataFreshness(stringStraightPass(params.getString("dataFreshness")));
                    }
                    if (params.has("distance") && (params.getString("distance") != null) && (!params.getString("distance").isEmpty()) ) {
                        // Param: distance, Type: Integer
                        tripsRequestBuilder.withDistance(integerStraightPass(params.getInt("distance")));
                    }
                    if (params.has("since") && (params.getString("since") != null) && (!params.getString("since").isEmpty()) ) {
                        // Param: since, Type: Date
                        tripsRequestBuilder.withSince(stringToDateTime(params.getString("since")));
                    }
                    if (params.has("until") && (params.getString("until") != null) && (!params.getString("until").isEmpty()) ) {
                        // Param: until, Type: Date
                        tripsRequestBuilder.withUntil(stringToDateTime(params.getString("until")));
                    }
                    if (params.has("disableGeojson") && (params.getString("disableGeojson") != null) && (!params.getString("disableGeojson").isEmpty()) ) {
                        // Param: disableGeojson, Type: Boolean
                        tripsRequestBuilder.withDisableGeojson(booleanStraightPass(params.getBoolean("disableGeojson")));
                    }
                    if (params.has("disableDisruption") && (params.getString("disableDisruption") != null) && (!params.getString("disableDisruption").isEmpty()) ) {
                        // Param: disableDisruption, Type: Boolean
                        tripsRequestBuilder.withDisableDisruption(booleanStraightPass(params.getBoolean("disableDisruption")));
                    }
                    if (params.has("filter") && (params.getString("filter") != null) && (!params.getString("filter").isEmpty()) ) {
                        // Param: filter, Type: String
                        tripsRequestBuilder.withFilter(stringStraightPass(params.getString("filter")));
                    }
                    if (params.has("tags") && (params.getString("tags") != null) && (!params.getString("tags").isEmpty()) ) {
                        // Param: tags, Type: List
                        tripsRequestBuilder.withTags(jsonArrayToStringList(params.getJSONArray("tags")));
                    }
                    
                    tripsRequestBuilder.rawGet(new ApiCallback<String>() {
                        @Override
                        public void onFailure(ApiException e, int statusCode, Map<String, List<String>> responseHeaders) {
                            callbackContext.error("Problem during request call | " + e.getMessage());
                        }

                        @Override
                        public void onSuccess(String result, int statusCode, Map<String, List<String>> responseHeaders) {
                            JSONObject jsonObject = null;
                            try {
                                jsonObject = new JSONObject(result);
                                callbackContext.success(jsonObject);
                            } catch (Exception e) {
                                String errorMessage = "Problem during response parsing | " + String.valueOf(e.hashCode()) + ": " + e.getMessage();
                                callbackContext.error(errorMessage);
                            }
                        }

                        @Override
                        public void onUploadProgress(long bytesWritten, long contentLength, boolean done) {
                        }

                        @Override
                        public void onDownloadProgress(long bytesRead, long contentLength, boolean done) {
                        }
                    });
                } catch (Exception e) {
                    String errorMessage = "Problem during request building | " + String.valueOf(e.hashCode()) + ": " + e.getMessage();
                    callbackContext.error(errorMessage);
                }
            }
        });
    }
    final private void coverageLonLatTripsId(final JSONObject params, final CallbackContext callbackContext) {
        if (this.navitiaSdk == null) {
            callbackContext.error("NavitiaSDK is not instanciated");
            return;
        }

        final TripsApi.CoverageLonLatTripsIdRequestBuilder tripsRequestBuilder = this.navitiaSdk.tripsApi.newCoverageLonLatTripsIdRequestBuilder();
        cordova.getThreadPool().execute(new Runnable() {
            @Override
            public void run() {
                try {
                    if (params.has("lat") && (params.getString("lat") != null) && (!params.getString("lat").isEmpty()) ) {
                        // Param: lat, Type: BigDecimal
                        tripsRequestBuilder.withLat(longToBigDecimal(params.getLong("lat")));
                    }
                    if (params.has("lon") && (params.getString("lon") != null) && (!params.getString("lon").isEmpty()) ) {
                        // Param: lon, Type: BigDecimal
                        tripsRequestBuilder.withLon(longToBigDecimal(params.getLong("lon")));
                    }
                    if (params.has("id") && (params.getString("id") != null) && (!params.getString("id").isEmpty()) ) {
                        // Param: id, Type: String
                        tripsRequestBuilder.withId(stringStraightPass(params.getString("id")));
                    }
                    if (params.has("startPage") && (params.getString("startPage") != null) && (!params.getString("startPage").isEmpty()) ) {
                        // Param: startPage, Type: Integer
                        tripsRequestBuilder.withStartPage(integerStraightPass(params.getInt("startPage")));
                    }
                    if (params.has("count") && (params.getString("count") != null) && (!params.getString("count").isEmpty()) ) {
                        // Param: count, Type: Integer
                        tripsRequestBuilder.withCount(integerStraightPass(params.getInt("count")));
                    }
                    if (params.has("depth") && (params.getString("depth") != null) && (!params.getString("depth").isEmpty()) ) {
                        // Param: depth, Type: Integer
                        tripsRequestBuilder.withDepth(integerStraightPass(params.getInt("depth")));
                    }
                    if (params.has("forbiddenId") && (params.getString("forbiddenId") != null) && (!params.getString("forbiddenId").isEmpty()) ) {
                        // Param: forbiddenId, Type: List
                        tripsRequestBuilder.withForbiddenId(jsonArrayToStringList(params.getJSONArray("forbiddenId")));
                    }
                    if (params.has("forbiddenUris") && (params.getString("forbiddenUris") != null) && (!params.getString("forbiddenUris").isEmpty()) ) {
                        // Param: forbiddenUris, Type: List
                        tripsRequestBuilder.withForbiddenUris(jsonArrayToStringList(params.getJSONArray("forbiddenUris")));
                    }
                    if (params.has("externalCode") && (params.getString("externalCode") != null) && (!params.getString("externalCode").isEmpty()) ) {
                        // Param: externalCode, Type: String
                        tripsRequestBuilder.withExternalCode(stringStraightPass(params.getString("externalCode")));
                    }
                    if (params.has("headsign") && (params.getString("headsign") != null) && (!params.getString("headsign").isEmpty()) ) {
                        // Param: headsign, Type: String
                        tripsRequestBuilder.withHeadsign(stringStraightPass(params.getString("headsign")));
                    }
                    if (params.has("showCodes") && (params.getString("showCodes") != null) && (!params.getString("showCodes").isEmpty()) ) {
                        // Param: showCodes, Type: Boolean
                        tripsRequestBuilder.withShowCodes(booleanStraightPass(params.getBoolean("showCodes")));
                    }
                    if (params.has("odtLevel") && (params.getString("odtLevel") != null) && (!params.getString("odtLevel").isEmpty()) ) {
                        // Param: odtLevel, Type: String
                        tripsRequestBuilder.withOdtLevel(stringStraightPass(params.getString("odtLevel")));
                    }
                    if (params.has("dataFreshness") && (params.getString("dataFreshness") != null) && (!params.getString("dataFreshness").isEmpty()) ) {
                        // Param: dataFreshness, Type: String
                        tripsRequestBuilder.withDataFreshness(stringStraightPass(params.getString("dataFreshness")));
                    }
                    if (params.has("distance") && (params.getString("distance") != null) && (!params.getString("distance").isEmpty()) ) {
                        // Param: distance, Type: Integer
                        tripsRequestBuilder.withDistance(integerStraightPass(params.getInt("distance")));
                    }
                    if (params.has("since") && (params.getString("since") != null) && (!params.getString("since").isEmpty()) ) {
                        // Param: since, Type: Date
                        tripsRequestBuilder.withSince(stringToDateTime(params.getString("since")));
                    }
                    if (params.has("until") && (params.getString("until") != null) && (!params.getString("until").isEmpty()) ) {
                        // Param: until, Type: Date
                        tripsRequestBuilder.withUntil(stringToDateTime(params.getString("until")));
                    }
                    if (params.has("disableGeojson") && (params.getString("disableGeojson") != null) && (!params.getString("disableGeojson").isEmpty()) ) {
                        // Param: disableGeojson, Type: Boolean
                        tripsRequestBuilder.withDisableGeojson(booleanStraightPass(params.getBoolean("disableGeojson")));
                    }
                    if (params.has("disableDisruption") && (params.getString("disableDisruption") != null) && (!params.getString("disableDisruption").isEmpty()) ) {
                        // Param: disableDisruption, Type: Boolean
                        tripsRequestBuilder.withDisableDisruption(booleanStraightPass(params.getBoolean("disableDisruption")));
                    }
                    if (params.has("tags") && (params.getString("tags") != null) && (!params.getString("tags").isEmpty()) ) {
                        // Param: tags, Type: List
                        tripsRequestBuilder.withTags(jsonArrayToStringList(params.getJSONArray("tags")));
                    }
                    
                    tripsRequestBuilder.rawGet(new ApiCallback<String>() {
                        @Override
                        public void onFailure(ApiException e, int statusCode, Map<String, List<String>> responseHeaders) {
                            callbackContext.error("Problem during request call | " + e.getMessage());
                        }

                        @Override
                        public void onSuccess(String result, int statusCode, Map<String, List<String>> responseHeaders) {
                            JSONObject jsonObject = null;
                            try {
                                jsonObject = new JSONObject(result);
                                callbackContext.success(jsonObject);
                            } catch (Exception e) {
                                String errorMessage = "Problem during response parsing | " + String.valueOf(e.hashCode()) + ": " + e.getMessage();
                                callbackContext.error(errorMessage);
                            }
                        }

                        @Override
                        public void onUploadProgress(long bytesWritten, long contentLength, boolean done) {
                        }

                        @Override
                        public void onDownloadProgress(long bytesRead, long contentLength, boolean done) {
                        }
                    });
                } catch (Exception e) {
                    String errorMessage = "Problem during request building | " + String.valueOf(e.hashCode()) + ": " + e.getMessage();
                    callbackContext.error(errorMessage);
                }
            }
        });
    }
    final private void coverageLonLatUriTrips(final JSONObject params, final CallbackContext callbackContext) {
        if (this.navitiaSdk == null) {
            callbackContext.error("NavitiaSDK is not instanciated");
            return;
        }

        final TripsApi.CoverageLonLatUriTripsRequestBuilder tripsRequestBuilder = this.navitiaSdk.tripsApi.newCoverageLonLatUriTripsRequestBuilder();
        cordova.getThreadPool().execute(new Runnable() {
            @Override
            public void run() {
                try {
                    if (params.has("lat") && (params.getString("lat") != null) && (!params.getString("lat").isEmpty()) ) {
                        // Param: lat, Type: BigDecimal
                        tripsRequestBuilder.withLat(longToBigDecimal(params.getLong("lat")));
                    }
                    if (params.has("lon") && (params.getString("lon") != null) && (!params.getString("lon").isEmpty()) ) {
                        // Param: lon, Type: BigDecimal
                        tripsRequestBuilder.withLon(longToBigDecimal(params.getLong("lon")));
                    }
                    if (params.has("uri") && (params.getString("uri") != null) && (!params.getString("uri").isEmpty()) ) {
                        // Param: uri, Type: String
                        tripsRequestBuilder.withUri(stringStraightPass(params.getString("uri")));
                    }
                    if (params.has("startPage") && (params.getString("startPage") != null) && (!params.getString("startPage").isEmpty()) ) {
                        // Param: startPage, Type: Integer
                        tripsRequestBuilder.withStartPage(integerStraightPass(params.getInt("startPage")));
                    }
                    if (params.has("count") && (params.getString("count") != null) && (!params.getString("count").isEmpty()) ) {
                        // Param: count, Type: Integer
                        tripsRequestBuilder.withCount(integerStraightPass(params.getInt("count")));
                    }
                    if (params.has("depth") && (params.getString("depth") != null) && (!params.getString("depth").isEmpty()) ) {
                        // Param: depth, Type: Integer
                        tripsRequestBuilder.withDepth(integerStraightPass(params.getInt("depth")));
                    }
                    if (params.has("forbiddenId") && (params.getString("forbiddenId") != null) && (!params.getString("forbiddenId").isEmpty()) ) {
                        // Param: forbiddenId, Type: List
                        tripsRequestBuilder.withForbiddenId(jsonArrayToStringList(params.getJSONArray("forbiddenId")));
                    }
                    if (params.has("forbiddenUris") && (params.getString("forbiddenUris") != null) && (!params.getString("forbiddenUris").isEmpty()) ) {
                        // Param: forbiddenUris, Type: List
                        tripsRequestBuilder.withForbiddenUris(jsonArrayToStringList(params.getJSONArray("forbiddenUris")));
                    }
                    if (params.has("externalCode") && (params.getString("externalCode") != null) && (!params.getString("externalCode").isEmpty()) ) {
                        // Param: externalCode, Type: String
                        tripsRequestBuilder.withExternalCode(stringStraightPass(params.getString("externalCode")));
                    }
                    if (params.has("headsign") && (params.getString("headsign") != null) && (!params.getString("headsign").isEmpty()) ) {
                        // Param: headsign, Type: String
                        tripsRequestBuilder.withHeadsign(stringStraightPass(params.getString("headsign")));
                    }
                    if (params.has("showCodes") && (params.getString("showCodes") != null) && (!params.getString("showCodes").isEmpty()) ) {
                        // Param: showCodes, Type: Boolean
                        tripsRequestBuilder.withShowCodes(booleanStraightPass(params.getBoolean("showCodes")));
                    }
                    if (params.has("odtLevel") && (params.getString("odtLevel") != null) && (!params.getString("odtLevel").isEmpty()) ) {
                        // Param: odtLevel, Type: String
                        tripsRequestBuilder.withOdtLevel(stringStraightPass(params.getString("odtLevel")));
                    }
                    if (params.has("dataFreshness") && (params.getString("dataFreshness") != null) && (!params.getString("dataFreshness").isEmpty()) ) {
                        // Param: dataFreshness, Type: String
                        tripsRequestBuilder.withDataFreshness(stringStraightPass(params.getString("dataFreshness")));
                    }
                    if (params.has("distance") && (params.getString("distance") != null) && (!params.getString("distance").isEmpty()) ) {
                        // Param: distance, Type: Integer
                        tripsRequestBuilder.withDistance(integerStraightPass(params.getInt("distance")));
                    }
                    if (params.has("since") && (params.getString("since") != null) && (!params.getString("since").isEmpty()) ) {
                        // Param: since, Type: Date
                        tripsRequestBuilder.withSince(stringToDateTime(params.getString("since")));
                    }
                    if (params.has("until") && (params.getString("until") != null) && (!params.getString("until").isEmpty()) ) {
                        // Param: until, Type: Date
                        tripsRequestBuilder.withUntil(stringToDateTime(params.getString("until")));
                    }
                    if (params.has("disableGeojson") && (params.getString("disableGeojson") != null) && (!params.getString("disableGeojson").isEmpty()) ) {
                        // Param: disableGeojson, Type: Boolean
                        tripsRequestBuilder.withDisableGeojson(booleanStraightPass(params.getBoolean("disableGeojson")));
                    }
                    if (params.has("disableDisruption") && (params.getString("disableDisruption") != null) && (!params.getString("disableDisruption").isEmpty()) ) {
                        // Param: disableDisruption, Type: Boolean
                        tripsRequestBuilder.withDisableDisruption(booleanStraightPass(params.getBoolean("disableDisruption")));
                    }
                    if (params.has("filter") && (params.getString("filter") != null) && (!params.getString("filter").isEmpty()) ) {
                        // Param: filter, Type: String
                        tripsRequestBuilder.withFilter(stringStraightPass(params.getString("filter")));
                    }
                    if (params.has("tags") && (params.getString("tags") != null) && (!params.getString("tags").isEmpty()) ) {
                        // Param: tags, Type: List
                        tripsRequestBuilder.withTags(jsonArrayToStringList(params.getJSONArray("tags")));
                    }
                    
                    tripsRequestBuilder.rawGet(new ApiCallback<String>() {
                        @Override
                        public void onFailure(ApiException e, int statusCode, Map<String, List<String>> responseHeaders) {
                            callbackContext.error("Problem during request call | " + e.getMessage());
                        }

                        @Override
                        public void onSuccess(String result, int statusCode, Map<String, List<String>> responseHeaders) {
                            JSONObject jsonObject = null;
                            try {
                                jsonObject = new JSONObject(result);
                                callbackContext.success(jsonObject);
                            } catch (Exception e) {
                                String errorMessage = "Problem during response parsing | " + String.valueOf(e.hashCode()) + ": " + e.getMessage();
                                callbackContext.error(errorMessage);
                            }
                        }

                        @Override
                        public void onUploadProgress(long bytesWritten, long contentLength, boolean done) {
                        }

                        @Override
                        public void onDownloadProgress(long bytesRead, long contentLength, boolean done) {
                        }
                    });
                } catch (Exception e) {
                    String errorMessage = "Problem during request building | " + String.valueOf(e.hashCode()) + ": " + e.getMessage();
                    callbackContext.error(errorMessage);
                }
            }
        });
    }
    final private void coverageLonLatUriTripsId(final JSONObject params, final CallbackContext callbackContext) {
        if (this.navitiaSdk == null) {
            callbackContext.error("NavitiaSDK is not instanciated");
            return;
        }

        final TripsApi.CoverageLonLatUriTripsIdRequestBuilder tripsRequestBuilder = this.navitiaSdk.tripsApi.newCoverageLonLatUriTripsIdRequestBuilder();
        cordova.getThreadPool().execute(new Runnable() {
            @Override
            public void run() {
                try {
                    if (params.has("lat") && (params.getString("lat") != null) && (!params.getString("lat").isEmpty()) ) {
                        // Param: lat, Type: BigDecimal
                        tripsRequestBuilder.withLat(longToBigDecimal(params.getLong("lat")));
                    }
                    if (params.has("lon") && (params.getString("lon") != null) && (!params.getString("lon").isEmpty()) ) {
                        // Param: lon, Type: BigDecimal
                        tripsRequestBuilder.withLon(longToBigDecimal(params.getLong("lon")));
                    }
                    if (params.has("uri") && (params.getString("uri") != null) && (!params.getString("uri").isEmpty()) ) {
                        // Param: uri, Type: String
                        tripsRequestBuilder.withUri(stringStraightPass(params.getString("uri")));
                    }
                    if (params.has("id") && (params.getString("id") != null) && (!params.getString("id").isEmpty()) ) {
                        // Param: id, Type: String
                        tripsRequestBuilder.withId(stringStraightPass(params.getString("id")));
                    }
                    if (params.has("startPage") && (params.getString("startPage") != null) && (!params.getString("startPage").isEmpty()) ) {
                        // Param: startPage, Type: Integer
                        tripsRequestBuilder.withStartPage(integerStraightPass(params.getInt("startPage")));
                    }
                    if (params.has("count") && (params.getString("count") != null) && (!params.getString("count").isEmpty()) ) {
                        // Param: count, Type: Integer
                        tripsRequestBuilder.withCount(integerStraightPass(params.getInt("count")));
                    }
                    if (params.has("depth") && (params.getString("depth") != null) && (!params.getString("depth").isEmpty()) ) {
                        // Param: depth, Type: Integer
                        tripsRequestBuilder.withDepth(integerStraightPass(params.getInt("depth")));
                    }
                    if (params.has("forbiddenId") && (params.getString("forbiddenId") != null) && (!params.getString("forbiddenId").isEmpty()) ) {
                        // Param: forbiddenId, Type: List
                        tripsRequestBuilder.withForbiddenId(jsonArrayToStringList(params.getJSONArray("forbiddenId")));
                    }
                    if (params.has("forbiddenUris") && (params.getString("forbiddenUris") != null) && (!params.getString("forbiddenUris").isEmpty()) ) {
                        // Param: forbiddenUris, Type: List
                        tripsRequestBuilder.withForbiddenUris(jsonArrayToStringList(params.getJSONArray("forbiddenUris")));
                    }
                    if (params.has("externalCode") && (params.getString("externalCode") != null) && (!params.getString("externalCode").isEmpty()) ) {
                        // Param: externalCode, Type: String
                        tripsRequestBuilder.withExternalCode(stringStraightPass(params.getString("externalCode")));
                    }
                    if (params.has("headsign") && (params.getString("headsign") != null) && (!params.getString("headsign").isEmpty()) ) {
                        // Param: headsign, Type: String
                        tripsRequestBuilder.withHeadsign(stringStraightPass(params.getString("headsign")));
                    }
                    if (params.has("showCodes") && (params.getString("showCodes") != null) && (!params.getString("showCodes").isEmpty()) ) {
                        // Param: showCodes, Type: Boolean
                        tripsRequestBuilder.withShowCodes(booleanStraightPass(params.getBoolean("showCodes")));
                    }
                    if (params.has("odtLevel") && (params.getString("odtLevel") != null) && (!params.getString("odtLevel").isEmpty()) ) {
                        // Param: odtLevel, Type: String
                        tripsRequestBuilder.withOdtLevel(stringStraightPass(params.getString("odtLevel")));
                    }
                    if (params.has("dataFreshness") && (params.getString("dataFreshness") != null) && (!params.getString("dataFreshness").isEmpty()) ) {
                        // Param: dataFreshness, Type: String
                        tripsRequestBuilder.withDataFreshness(stringStraightPass(params.getString("dataFreshness")));
                    }
                    if (params.has("distance") && (params.getString("distance") != null) && (!params.getString("distance").isEmpty()) ) {
                        // Param: distance, Type: Integer
                        tripsRequestBuilder.withDistance(integerStraightPass(params.getInt("distance")));
                    }
                    if (params.has("since") && (params.getString("since") != null) && (!params.getString("since").isEmpty()) ) {
                        // Param: since, Type: Date
                        tripsRequestBuilder.withSince(stringToDateTime(params.getString("since")));
                    }
                    if (params.has("until") && (params.getString("until") != null) && (!params.getString("until").isEmpty()) ) {
                        // Param: until, Type: Date
                        tripsRequestBuilder.withUntil(stringToDateTime(params.getString("until")));
                    }
                    if (params.has("disableGeojson") && (params.getString("disableGeojson") != null) && (!params.getString("disableGeojson").isEmpty()) ) {
                        // Param: disableGeojson, Type: Boolean
                        tripsRequestBuilder.withDisableGeojson(booleanStraightPass(params.getBoolean("disableGeojson")));
                    }
                    if (params.has("disableDisruption") && (params.getString("disableDisruption") != null) && (!params.getString("disableDisruption").isEmpty()) ) {
                        // Param: disableDisruption, Type: Boolean
                        tripsRequestBuilder.withDisableDisruption(booleanStraightPass(params.getBoolean("disableDisruption")));
                    }
                    if (params.has("tags") && (params.getString("tags") != null) && (!params.getString("tags").isEmpty()) ) {
                        // Param: tags, Type: List
                        tripsRequestBuilder.withTags(jsonArrayToStringList(params.getJSONArray("tags")));
                    }
                    
                    tripsRequestBuilder.rawGet(new ApiCallback<String>() {
                        @Override
                        public void onFailure(ApiException e, int statusCode, Map<String, List<String>> responseHeaders) {
                            callbackContext.error("Problem during request call | " + e.getMessage());
                        }

                        @Override
                        public void onSuccess(String result, int statusCode, Map<String, List<String>> responseHeaders) {
                            JSONObject jsonObject = null;
                            try {
                                jsonObject = new JSONObject(result);
                                callbackContext.success(jsonObject);
                            } catch (Exception e) {
                                String errorMessage = "Problem during response parsing | " + String.valueOf(e.hashCode()) + ": " + e.getMessage();
                                callbackContext.error(errorMessage);
                            }
                        }

                        @Override
                        public void onUploadProgress(long bytesWritten, long contentLength, boolean done) {
                        }

                        @Override
                        public void onDownloadProgress(long bytesRead, long contentLength, boolean done) {
                        }
                    });
                } catch (Exception e) {
                    String errorMessage = "Problem during request building | " + String.valueOf(e.hashCode()) + ": " + e.getMessage();
                    callbackContext.error(errorMessage);
                }
            }
        });
    }
    final private void coverageRegionTrips(final JSONObject params, final CallbackContext callbackContext) {
        if (this.navitiaSdk == null) {
            callbackContext.error("NavitiaSDK is not instanciated");
            return;
        }

        final TripsApi.CoverageRegionTripsRequestBuilder tripsRequestBuilder = this.navitiaSdk.tripsApi.newCoverageRegionTripsRequestBuilder();
        cordova.getThreadPool().execute(new Runnable() {
            @Override
            public void run() {
                try {
                    if (params.has("region") && (params.getString("region") != null) && (!params.getString("region").isEmpty()) ) {
                        // Param: region, Type: String
                        tripsRequestBuilder.withRegion(stringStraightPass(params.getString("region")));
                    }
                    if (params.has("startPage") && (params.getString("startPage") != null) && (!params.getString("startPage").isEmpty()) ) {
                        // Param: startPage, Type: Integer
                        tripsRequestBuilder.withStartPage(integerStraightPass(params.getInt("startPage")));
                    }
                    if (params.has("count") && (params.getString("count") != null) && (!params.getString("count").isEmpty()) ) {
                        // Param: count, Type: Integer
                        tripsRequestBuilder.withCount(integerStraightPass(params.getInt("count")));
                    }
                    if (params.has("depth") && (params.getString("depth") != null) && (!params.getString("depth").isEmpty()) ) {
                        // Param: depth, Type: Integer
                        tripsRequestBuilder.withDepth(integerStraightPass(params.getInt("depth")));
                    }
                    if (params.has("forbiddenId") && (params.getString("forbiddenId") != null) && (!params.getString("forbiddenId").isEmpty()) ) {
                        // Param: forbiddenId, Type: List
                        tripsRequestBuilder.withForbiddenId(jsonArrayToStringList(params.getJSONArray("forbiddenId")));
                    }
                    if (params.has("forbiddenUris") && (params.getString("forbiddenUris") != null) && (!params.getString("forbiddenUris").isEmpty()) ) {
                        // Param: forbiddenUris, Type: List
                        tripsRequestBuilder.withForbiddenUris(jsonArrayToStringList(params.getJSONArray("forbiddenUris")));
                    }
                    if (params.has("externalCode") && (params.getString("externalCode") != null) && (!params.getString("externalCode").isEmpty()) ) {
                        // Param: externalCode, Type: String
                        tripsRequestBuilder.withExternalCode(stringStraightPass(params.getString("externalCode")));
                    }
                    if (params.has("headsign") && (params.getString("headsign") != null) && (!params.getString("headsign").isEmpty()) ) {
                        // Param: headsign, Type: String
                        tripsRequestBuilder.withHeadsign(stringStraightPass(params.getString("headsign")));
                    }
                    if (params.has("showCodes") && (params.getString("showCodes") != null) && (!params.getString("showCodes").isEmpty()) ) {
                        // Param: showCodes, Type: Boolean
                        tripsRequestBuilder.withShowCodes(booleanStraightPass(params.getBoolean("showCodes")));
                    }
                    if (params.has("odtLevel") && (params.getString("odtLevel") != null) && (!params.getString("odtLevel").isEmpty()) ) {
                        // Param: odtLevel, Type: String
                        tripsRequestBuilder.withOdtLevel(stringStraightPass(params.getString("odtLevel")));
                    }
                    if (params.has("dataFreshness") && (params.getString("dataFreshness") != null) && (!params.getString("dataFreshness").isEmpty()) ) {
                        // Param: dataFreshness, Type: String
                        tripsRequestBuilder.withDataFreshness(stringStraightPass(params.getString("dataFreshness")));
                    }
                    if (params.has("distance") && (params.getString("distance") != null) && (!params.getString("distance").isEmpty()) ) {
                        // Param: distance, Type: Integer
                        tripsRequestBuilder.withDistance(integerStraightPass(params.getInt("distance")));
                    }
                    if (params.has("since") && (params.getString("since") != null) && (!params.getString("since").isEmpty()) ) {
                        // Param: since, Type: Date
                        tripsRequestBuilder.withSince(stringToDateTime(params.getString("since")));
                    }
                    if (params.has("until") && (params.getString("until") != null) && (!params.getString("until").isEmpty()) ) {
                        // Param: until, Type: Date
                        tripsRequestBuilder.withUntil(stringToDateTime(params.getString("until")));
                    }
                    if (params.has("disableGeojson") && (params.getString("disableGeojson") != null) && (!params.getString("disableGeojson").isEmpty()) ) {
                        // Param: disableGeojson, Type: Boolean
                        tripsRequestBuilder.withDisableGeojson(booleanStraightPass(params.getBoolean("disableGeojson")));
                    }
                    if (params.has("disableDisruption") && (params.getString("disableDisruption") != null) && (!params.getString("disableDisruption").isEmpty()) ) {
                        // Param: disableDisruption, Type: Boolean
                        tripsRequestBuilder.withDisableDisruption(booleanStraightPass(params.getBoolean("disableDisruption")));
                    }
                    if (params.has("filter") && (params.getString("filter") != null) && (!params.getString("filter").isEmpty()) ) {
                        // Param: filter, Type: String
                        tripsRequestBuilder.withFilter(stringStraightPass(params.getString("filter")));
                    }
                    if (params.has("tags") && (params.getString("tags") != null) && (!params.getString("tags").isEmpty()) ) {
                        // Param: tags, Type: List
                        tripsRequestBuilder.withTags(jsonArrayToStringList(params.getJSONArray("tags")));
                    }
                    
                    tripsRequestBuilder.rawGet(new ApiCallback<String>() {
                        @Override
                        public void onFailure(ApiException e, int statusCode, Map<String, List<String>> responseHeaders) {
                            callbackContext.error("Problem during request call | " + e.getMessage());
                        }

                        @Override
                        public void onSuccess(String result, int statusCode, Map<String, List<String>> responseHeaders) {
                            JSONObject jsonObject = null;
                            try {
                                jsonObject = new JSONObject(result);
                                callbackContext.success(jsonObject);
                            } catch (Exception e) {
                                String errorMessage = "Problem during response parsing | " + String.valueOf(e.hashCode()) + ": " + e.getMessage();
                                callbackContext.error(errorMessage);
                            }
                        }

                        @Override
                        public void onUploadProgress(long bytesWritten, long contentLength, boolean done) {
                        }

                        @Override
                        public void onDownloadProgress(long bytesRead, long contentLength, boolean done) {
                        }
                    });
                } catch (Exception e) {
                    String errorMessage = "Problem during request building | " + String.valueOf(e.hashCode()) + ": " + e.getMessage();
                    callbackContext.error(errorMessage);
                }
            }
        });
    }
    final private void coverageRegionTripsId(final JSONObject params, final CallbackContext callbackContext) {
        if (this.navitiaSdk == null) {
            callbackContext.error("NavitiaSDK is not instanciated");
            return;
        }

        final TripsApi.CoverageRegionTripsIdRequestBuilder tripsRequestBuilder = this.navitiaSdk.tripsApi.newCoverageRegionTripsIdRequestBuilder();
        cordova.getThreadPool().execute(new Runnable() {
            @Override
            public void run() {
                try {
                    if (params.has("region") && (params.getString("region") != null) && (!params.getString("region").isEmpty()) ) {
                        // Param: region, Type: String
                        tripsRequestBuilder.withRegion(stringStraightPass(params.getString("region")));
                    }
                    if (params.has("id") && (params.getString("id") != null) && (!params.getString("id").isEmpty()) ) {
                        // Param: id, Type: String
                        tripsRequestBuilder.withId(stringStraightPass(params.getString("id")));
                    }
                    if (params.has("startPage") && (params.getString("startPage") != null) && (!params.getString("startPage").isEmpty()) ) {
                        // Param: startPage, Type: Integer
                        tripsRequestBuilder.withStartPage(integerStraightPass(params.getInt("startPage")));
                    }
                    if (params.has("count") && (params.getString("count") != null) && (!params.getString("count").isEmpty()) ) {
                        // Param: count, Type: Integer
                        tripsRequestBuilder.withCount(integerStraightPass(params.getInt("count")));
                    }
                    if (params.has("depth") && (params.getString("depth") != null) && (!params.getString("depth").isEmpty()) ) {
                        // Param: depth, Type: Integer
                        tripsRequestBuilder.withDepth(integerStraightPass(params.getInt("depth")));
                    }
                    if (params.has("forbiddenId") && (params.getString("forbiddenId") != null) && (!params.getString("forbiddenId").isEmpty()) ) {
                        // Param: forbiddenId, Type: List
                        tripsRequestBuilder.withForbiddenId(jsonArrayToStringList(params.getJSONArray("forbiddenId")));
                    }
                    if (params.has("forbiddenUris") && (params.getString("forbiddenUris") != null) && (!params.getString("forbiddenUris").isEmpty()) ) {
                        // Param: forbiddenUris, Type: List
                        tripsRequestBuilder.withForbiddenUris(jsonArrayToStringList(params.getJSONArray("forbiddenUris")));
                    }
                    if (params.has("externalCode") && (params.getString("externalCode") != null) && (!params.getString("externalCode").isEmpty()) ) {
                        // Param: externalCode, Type: String
                        tripsRequestBuilder.withExternalCode(stringStraightPass(params.getString("externalCode")));
                    }
                    if (params.has("headsign") && (params.getString("headsign") != null) && (!params.getString("headsign").isEmpty()) ) {
                        // Param: headsign, Type: String
                        tripsRequestBuilder.withHeadsign(stringStraightPass(params.getString("headsign")));
                    }
                    if (params.has("showCodes") && (params.getString("showCodes") != null) && (!params.getString("showCodes").isEmpty()) ) {
                        // Param: showCodes, Type: Boolean
                        tripsRequestBuilder.withShowCodes(booleanStraightPass(params.getBoolean("showCodes")));
                    }
                    if (params.has("odtLevel") && (params.getString("odtLevel") != null) && (!params.getString("odtLevel").isEmpty()) ) {
                        // Param: odtLevel, Type: String
                        tripsRequestBuilder.withOdtLevel(stringStraightPass(params.getString("odtLevel")));
                    }
                    if (params.has("dataFreshness") && (params.getString("dataFreshness") != null) && (!params.getString("dataFreshness").isEmpty()) ) {
                        // Param: dataFreshness, Type: String
                        tripsRequestBuilder.withDataFreshness(stringStraightPass(params.getString("dataFreshness")));
                    }
                    if (params.has("distance") && (params.getString("distance") != null) && (!params.getString("distance").isEmpty()) ) {
                        // Param: distance, Type: Integer
                        tripsRequestBuilder.withDistance(integerStraightPass(params.getInt("distance")));
                    }
                    if (params.has("since") && (params.getString("since") != null) && (!params.getString("since").isEmpty()) ) {
                        // Param: since, Type: Date
                        tripsRequestBuilder.withSince(stringToDateTime(params.getString("since")));
                    }
                    if (params.has("until") && (params.getString("until") != null) && (!params.getString("until").isEmpty()) ) {
                        // Param: until, Type: Date
                        tripsRequestBuilder.withUntil(stringToDateTime(params.getString("until")));
                    }
                    if (params.has("disableGeojson") && (params.getString("disableGeojson") != null) && (!params.getString("disableGeojson").isEmpty()) ) {
                        // Param: disableGeojson, Type: Boolean
                        tripsRequestBuilder.withDisableGeojson(booleanStraightPass(params.getBoolean("disableGeojson")));
                    }
                    if (params.has("disableDisruption") && (params.getString("disableDisruption") != null) && (!params.getString("disableDisruption").isEmpty()) ) {
                        // Param: disableDisruption, Type: Boolean
                        tripsRequestBuilder.withDisableDisruption(booleanStraightPass(params.getBoolean("disableDisruption")));
                    }
                    if (params.has("tags") && (params.getString("tags") != null) && (!params.getString("tags").isEmpty()) ) {
                        // Param: tags, Type: List
                        tripsRequestBuilder.withTags(jsonArrayToStringList(params.getJSONArray("tags")));
                    }
                    
                    tripsRequestBuilder.rawGet(new ApiCallback<String>() {
                        @Override
                        public void onFailure(ApiException e, int statusCode, Map<String, List<String>> responseHeaders) {
                            callbackContext.error("Problem during request call | " + e.getMessage());
                        }

                        @Override
                        public void onSuccess(String result, int statusCode, Map<String, List<String>> responseHeaders) {
                            JSONObject jsonObject = null;
                            try {
                                jsonObject = new JSONObject(result);
                                callbackContext.success(jsonObject);
                            } catch (Exception e) {
                                String errorMessage = "Problem during response parsing | " + String.valueOf(e.hashCode()) + ": " + e.getMessage();
                                callbackContext.error(errorMessage);
                            }
                        }

                        @Override
                        public void onUploadProgress(long bytesWritten, long contentLength, boolean done) {
                        }

                        @Override
                        public void onDownloadProgress(long bytesRead, long contentLength, boolean done) {
                        }
                    });
                } catch (Exception e) {
                    String errorMessage = "Problem during request building | " + String.valueOf(e.hashCode()) + ": " + e.getMessage();
                    callbackContext.error(errorMessage);
                }
            }
        });
    }
    final private void coverageRegionUriTrips(final JSONObject params, final CallbackContext callbackContext) {
        if (this.navitiaSdk == null) {
            callbackContext.error("NavitiaSDK is not instanciated");
            return;
        }

        final TripsApi.CoverageRegionUriTripsRequestBuilder tripsRequestBuilder = this.navitiaSdk.tripsApi.newCoverageRegionUriTripsRequestBuilder();
        cordova.getThreadPool().execute(new Runnable() {
            @Override
            public void run() {
                try {
                    if (params.has("region") && (params.getString("region") != null) && (!params.getString("region").isEmpty()) ) {
                        // Param: region, Type: String
                        tripsRequestBuilder.withRegion(stringStraightPass(params.getString("region")));
                    }
                    if (params.has("uri") && (params.getString("uri") != null) && (!params.getString("uri").isEmpty()) ) {
                        // Param: uri, Type: String
                        tripsRequestBuilder.withUri(stringStraightPass(params.getString("uri")));
                    }
                    if (params.has("startPage") && (params.getString("startPage") != null) && (!params.getString("startPage").isEmpty()) ) {
                        // Param: startPage, Type: Integer
                        tripsRequestBuilder.withStartPage(integerStraightPass(params.getInt("startPage")));
                    }
                    if (params.has("count") && (params.getString("count") != null) && (!params.getString("count").isEmpty()) ) {
                        // Param: count, Type: Integer
                        tripsRequestBuilder.withCount(integerStraightPass(params.getInt("count")));
                    }
                    if (params.has("depth") && (params.getString("depth") != null) && (!params.getString("depth").isEmpty()) ) {
                        // Param: depth, Type: Integer
                        tripsRequestBuilder.withDepth(integerStraightPass(params.getInt("depth")));
                    }
                    if (params.has("forbiddenId") && (params.getString("forbiddenId") != null) && (!params.getString("forbiddenId").isEmpty()) ) {
                        // Param: forbiddenId, Type: List
                        tripsRequestBuilder.withForbiddenId(jsonArrayToStringList(params.getJSONArray("forbiddenId")));
                    }
                    if (params.has("forbiddenUris") && (params.getString("forbiddenUris") != null) && (!params.getString("forbiddenUris").isEmpty()) ) {
                        // Param: forbiddenUris, Type: List
                        tripsRequestBuilder.withForbiddenUris(jsonArrayToStringList(params.getJSONArray("forbiddenUris")));
                    }
                    if (params.has("externalCode") && (params.getString("externalCode") != null) && (!params.getString("externalCode").isEmpty()) ) {
                        // Param: externalCode, Type: String
                        tripsRequestBuilder.withExternalCode(stringStraightPass(params.getString("externalCode")));
                    }
                    if (params.has("headsign") && (params.getString("headsign") != null) && (!params.getString("headsign").isEmpty()) ) {
                        // Param: headsign, Type: String
                        tripsRequestBuilder.withHeadsign(stringStraightPass(params.getString("headsign")));
                    }
                    if (params.has("showCodes") && (params.getString("showCodes") != null) && (!params.getString("showCodes").isEmpty()) ) {
                        // Param: showCodes, Type: Boolean
                        tripsRequestBuilder.withShowCodes(booleanStraightPass(params.getBoolean("showCodes")));
                    }
                    if (params.has("odtLevel") && (params.getString("odtLevel") != null) && (!params.getString("odtLevel").isEmpty()) ) {
                        // Param: odtLevel, Type: String
                        tripsRequestBuilder.withOdtLevel(stringStraightPass(params.getString("odtLevel")));
                    }
                    if (params.has("dataFreshness") && (params.getString("dataFreshness") != null) && (!params.getString("dataFreshness").isEmpty()) ) {
                        // Param: dataFreshness, Type: String
                        tripsRequestBuilder.withDataFreshness(stringStraightPass(params.getString("dataFreshness")));
                    }
                    if (params.has("distance") && (params.getString("distance") != null) && (!params.getString("distance").isEmpty()) ) {
                        // Param: distance, Type: Integer
                        tripsRequestBuilder.withDistance(integerStraightPass(params.getInt("distance")));
                    }
                    if (params.has("since") && (params.getString("since") != null) && (!params.getString("since").isEmpty()) ) {
                        // Param: since, Type: Date
                        tripsRequestBuilder.withSince(stringToDateTime(params.getString("since")));
                    }
                    if (params.has("until") && (params.getString("until") != null) && (!params.getString("until").isEmpty()) ) {
                        // Param: until, Type: Date
                        tripsRequestBuilder.withUntil(stringToDateTime(params.getString("until")));
                    }
                    if (params.has("disableGeojson") && (params.getString("disableGeojson") != null) && (!params.getString("disableGeojson").isEmpty()) ) {
                        // Param: disableGeojson, Type: Boolean
                        tripsRequestBuilder.withDisableGeojson(booleanStraightPass(params.getBoolean("disableGeojson")));
                    }
                    if (params.has("disableDisruption") && (params.getString("disableDisruption") != null) && (!params.getString("disableDisruption").isEmpty()) ) {
                        // Param: disableDisruption, Type: Boolean
                        tripsRequestBuilder.withDisableDisruption(booleanStraightPass(params.getBoolean("disableDisruption")));
                    }
                    if (params.has("filter") && (params.getString("filter") != null) && (!params.getString("filter").isEmpty()) ) {
                        // Param: filter, Type: String
                        tripsRequestBuilder.withFilter(stringStraightPass(params.getString("filter")));
                    }
                    if (params.has("tags") && (params.getString("tags") != null) && (!params.getString("tags").isEmpty()) ) {
                        // Param: tags, Type: List
                        tripsRequestBuilder.withTags(jsonArrayToStringList(params.getJSONArray("tags")));
                    }
                    
                    tripsRequestBuilder.rawGet(new ApiCallback<String>() {
                        @Override
                        public void onFailure(ApiException e, int statusCode, Map<String, List<String>> responseHeaders) {
                            callbackContext.error("Problem during request call | " + e.getMessage());
                        }

                        @Override
                        public void onSuccess(String result, int statusCode, Map<String, List<String>> responseHeaders) {
                            JSONObject jsonObject = null;
                            try {
                                jsonObject = new JSONObject(result);
                                callbackContext.success(jsonObject);
                            } catch (Exception e) {
                                String errorMessage = "Problem during response parsing | " + String.valueOf(e.hashCode()) + ": " + e.getMessage();
                                callbackContext.error(errorMessage);
                            }
                        }

                        @Override
                        public void onUploadProgress(long bytesWritten, long contentLength, boolean done) {
                        }

                        @Override
                        public void onDownloadProgress(long bytesRead, long contentLength, boolean done) {
                        }
                    });
                } catch (Exception e) {
                    String errorMessage = "Problem during request building | " + String.valueOf(e.hashCode()) + ": " + e.getMessage();
                    callbackContext.error(errorMessage);
                }
            }
        });
    }
    final private void coverageRegionUriTripsId(final JSONObject params, final CallbackContext callbackContext) {
        if (this.navitiaSdk == null) {
            callbackContext.error("NavitiaSDK is not instanciated");
            return;
        }

        final TripsApi.CoverageRegionUriTripsIdRequestBuilder tripsRequestBuilder = this.navitiaSdk.tripsApi.newCoverageRegionUriTripsIdRequestBuilder();
        cordova.getThreadPool().execute(new Runnable() {
            @Override
            public void run() {
                try {
                    if (params.has("region") && (params.getString("region") != null) && (!params.getString("region").isEmpty()) ) {
                        // Param: region, Type: String
                        tripsRequestBuilder.withRegion(stringStraightPass(params.getString("region")));
                    }
                    if (params.has("uri") && (params.getString("uri") != null) && (!params.getString("uri").isEmpty()) ) {
                        // Param: uri, Type: String
                        tripsRequestBuilder.withUri(stringStraightPass(params.getString("uri")));
                    }
                    if (params.has("id") && (params.getString("id") != null) && (!params.getString("id").isEmpty()) ) {
                        // Param: id, Type: String
                        tripsRequestBuilder.withId(stringStraightPass(params.getString("id")));
                    }
                    if (params.has("startPage") && (params.getString("startPage") != null) && (!params.getString("startPage").isEmpty()) ) {
                        // Param: startPage, Type: Integer
                        tripsRequestBuilder.withStartPage(integerStraightPass(params.getInt("startPage")));
                    }
                    if (params.has("count") && (params.getString("count") != null) && (!params.getString("count").isEmpty()) ) {
                        // Param: count, Type: Integer
                        tripsRequestBuilder.withCount(integerStraightPass(params.getInt("count")));
                    }
                    if (params.has("depth") && (params.getString("depth") != null) && (!params.getString("depth").isEmpty()) ) {
                        // Param: depth, Type: Integer
                        tripsRequestBuilder.withDepth(integerStraightPass(params.getInt("depth")));
                    }
                    if (params.has("forbiddenId") && (params.getString("forbiddenId") != null) && (!params.getString("forbiddenId").isEmpty()) ) {
                        // Param: forbiddenId, Type: List
                        tripsRequestBuilder.withForbiddenId(jsonArrayToStringList(params.getJSONArray("forbiddenId")));
                    }
                    if (params.has("forbiddenUris") && (params.getString("forbiddenUris") != null) && (!params.getString("forbiddenUris").isEmpty()) ) {
                        // Param: forbiddenUris, Type: List
                        tripsRequestBuilder.withForbiddenUris(jsonArrayToStringList(params.getJSONArray("forbiddenUris")));
                    }
                    if (params.has("externalCode") && (params.getString("externalCode") != null) && (!params.getString("externalCode").isEmpty()) ) {
                        // Param: externalCode, Type: String
                        tripsRequestBuilder.withExternalCode(stringStraightPass(params.getString("externalCode")));
                    }
                    if (params.has("headsign") && (params.getString("headsign") != null) && (!params.getString("headsign").isEmpty()) ) {
                        // Param: headsign, Type: String
                        tripsRequestBuilder.withHeadsign(stringStraightPass(params.getString("headsign")));
                    }
                    if (params.has("showCodes") && (params.getString("showCodes") != null) && (!params.getString("showCodes").isEmpty()) ) {
                        // Param: showCodes, Type: Boolean
                        tripsRequestBuilder.withShowCodes(booleanStraightPass(params.getBoolean("showCodes")));
                    }
                    if (params.has("odtLevel") && (params.getString("odtLevel") != null) && (!params.getString("odtLevel").isEmpty()) ) {
                        // Param: odtLevel, Type: String
                        tripsRequestBuilder.withOdtLevel(stringStraightPass(params.getString("odtLevel")));
                    }
                    if (params.has("dataFreshness") && (params.getString("dataFreshness") != null) && (!params.getString("dataFreshness").isEmpty()) ) {
                        // Param: dataFreshness, Type: String
                        tripsRequestBuilder.withDataFreshness(stringStraightPass(params.getString("dataFreshness")));
                    }
                    if (params.has("distance") && (params.getString("distance") != null) && (!params.getString("distance").isEmpty()) ) {
                        // Param: distance, Type: Integer
                        tripsRequestBuilder.withDistance(integerStraightPass(params.getInt("distance")));
                    }
                    if (params.has("since") && (params.getString("since") != null) && (!params.getString("since").isEmpty()) ) {
                        // Param: since, Type: Date
                        tripsRequestBuilder.withSince(stringToDateTime(params.getString("since")));
                    }
                    if (params.has("until") && (params.getString("until") != null) && (!params.getString("until").isEmpty()) ) {
                        // Param: until, Type: Date
                        tripsRequestBuilder.withUntil(stringToDateTime(params.getString("until")));
                    }
                    if (params.has("disableGeojson") && (params.getString("disableGeojson") != null) && (!params.getString("disableGeojson").isEmpty()) ) {
                        // Param: disableGeojson, Type: Boolean
                        tripsRequestBuilder.withDisableGeojson(booleanStraightPass(params.getBoolean("disableGeojson")));
                    }
                    if (params.has("disableDisruption") && (params.getString("disableDisruption") != null) && (!params.getString("disableDisruption").isEmpty()) ) {
                        // Param: disableDisruption, Type: Boolean
                        tripsRequestBuilder.withDisableDisruption(booleanStraightPass(params.getBoolean("disableDisruption")));
                    }
                    if (params.has("tags") && (params.getString("tags") != null) && (!params.getString("tags").isEmpty()) ) {
                        // Param: tags, Type: List
                        tripsRequestBuilder.withTags(jsonArrayToStringList(params.getJSONArray("tags")));
                    }
                    
                    tripsRequestBuilder.rawGet(new ApiCallback<String>() {
                        @Override
                        public void onFailure(ApiException e, int statusCode, Map<String, List<String>> responseHeaders) {
                            callbackContext.error("Problem during request call | " + e.getMessage());
                        }

                        @Override
                        public void onSuccess(String result, int statusCode, Map<String, List<String>> responseHeaders) {
                            JSONObject jsonObject = null;
                            try {
                                jsonObject = new JSONObject(result);
                                callbackContext.success(jsonObject);
                            } catch (Exception e) {
                                String errorMessage = "Problem during response parsing | " + String.valueOf(e.hashCode()) + ": " + e.getMessage();
                                callbackContext.error(errorMessage);
                            }
                        }

                        @Override
                        public void onUploadProgress(long bytesWritten, long contentLength, boolean done) {
                        }

                        @Override
                        public void onDownloadProgress(long bytesRead, long contentLength, boolean done) {
                        }
                    });
                } catch (Exception e) {
                    String errorMessage = "Problem during request building | " + String.valueOf(e.hashCode()) + ": " + e.getMessage();
                    callbackContext.error(errorMessage);
                }
            }
        });
    }
    final private void coverageLonLatUriVehicleJourneys(final JSONObject params, final CallbackContext callbackContext) {
        if (this.navitiaSdk == null) {
            callbackContext.error("NavitiaSDK is not instanciated");
            return;
        }

        final VehicleJourneysApi.CoverageLonLatUriVehicleJourneysRequestBuilder vehicleJourneysRequestBuilder = this.navitiaSdk.vehicleJourneysApi.newCoverageLonLatUriVehicleJourneysRequestBuilder();
        cordova.getThreadPool().execute(new Runnable() {
            @Override
            public void run() {
                try {
                    if (params.has("lat") && (params.getString("lat") != null) && (!params.getString("lat").isEmpty()) ) {
                        // Param: lat, Type: BigDecimal
                        vehicleJourneysRequestBuilder.withLat(longToBigDecimal(params.getLong("lat")));
                    }
                    if (params.has("lon") && (params.getString("lon") != null) && (!params.getString("lon").isEmpty()) ) {
                        // Param: lon, Type: BigDecimal
                        vehicleJourneysRequestBuilder.withLon(longToBigDecimal(params.getLong("lon")));
                    }
                    if (params.has("uri") && (params.getString("uri") != null) && (!params.getString("uri").isEmpty()) ) {
                        // Param: uri, Type: String
                        vehicleJourneysRequestBuilder.withUri(stringStraightPass(params.getString("uri")));
                    }
                    if (params.has("startPage") && (params.getString("startPage") != null) && (!params.getString("startPage").isEmpty()) ) {
                        // Param: startPage, Type: Integer
                        vehicleJourneysRequestBuilder.withStartPage(integerStraightPass(params.getInt("startPage")));
                    }
                    if (params.has("count") && (params.getString("count") != null) && (!params.getString("count").isEmpty()) ) {
                        // Param: count, Type: Integer
                        vehicleJourneysRequestBuilder.withCount(integerStraightPass(params.getInt("count")));
                    }
                    if (params.has("depth") && (params.getString("depth") != null) && (!params.getString("depth").isEmpty()) ) {
                        // Param: depth, Type: Integer
                        vehicleJourneysRequestBuilder.withDepth(integerStraightPass(params.getInt("depth")));
                    }
                    if (params.has("forbiddenId") && (params.getString("forbiddenId") != null) && (!params.getString("forbiddenId").isEmpty()) ) {
                        // Param: forbiddenId, Type: List
                        vehicleJourneysRequestBuilder.withForbiddenId(jsonArrayToStringList(params.getJSONArray("forbiddenId")));
                    }
                    if (params.has("forbiddenUris") && (params.getString("forbiddenUris") != null) && (!params.getString("forbiddenUris").isEmpty()) ) {
                        // Param: forbiddenUris, Type: List
                        vehicleJourneysRequestBuilder.withForbiddenUris(jsonArrayToStringList(params.getJSONArray("forbiddenUris")));
                    }
                    if (params.has("externalCode") && (params.getString("externalCode") != null) && (!params.getString("externalCode").isEmpty()) ) {
                        // Param: externalCode, Type: String
                        vehicleJourneysRequestBuilder.withExternalCode(stringStraightPass(params.getString("externalCode")));
                    }
                    if (params.has("headsign") && (params.getString("headsign") != null) && (!params.getString("headsign").isEmpty()) ) {
                        // Param: headsign, Type: String
                        vehicleJourneysRequestBuilder.withHeadsign(stringStraightPass(params.getString("headsign")));
                    }
                    if (params.has("showCodes") && (params.getString("showCodes") != null) && (!params.getString("showCodes").isEmpty()) ) {
                        // Param: showCodes, Type: Boolean
                        vehicleJourneysRequestBuilder.withShowCodes(booleanStraightPass(params.getBoolean("showCodes")));
                    }
                    if (params.has("odtLevel") && (params.getString("odtLevel") != null) && (!params.getString("odtLevel").isEmpty()) ) {
                        // Param: odtLevel, Type: String
                        vehicleJourneysRequestBuilder.withOdtLevel(stringStraightPass(params.getString("odtLevel")));
                    }
                    if (params.has("dataFreshness") && (params.getString("dataFreshness") != null) && (!params.getString("dataFreshness").isEmpty()) ) {
                        // Param: dataFreshness, Type: String
                        vehicleJourneysRequestBuilder.withDataFreshness(stringStraightPass(params.getString("dataFreshness")));
                    }
                    if (params.has("distance") && (params.getString("distance") != null) && (!params.getString("distance").isEmpty()) ) {
                        // Param: distance, Type: Integer
                        vehicleJourneysRequestBuilder.withDistance(integerStraightPass(params.getInt("distance")));
                    }
                    if (params.has("since") && (params.getString("since") != null) && (!params.getString("since").isEmpty()) ) {
                        // Param: since, Type: Date
                        vehicleJourneysRequestBuilder.withSince(stringToDateTime(params.getString("since")));
                    }
                    if (params.has("until") && (params.getString("until") != null) && (!params.getString("until").isEmpty()) ) {
                        // Param: until, Type: Date
                        vehicleJourneysRequestBuilder.withUntil(stringToDateTime(params.getString("until")));
                    }
                    if (params.has("disableGeojson") && (params.getString("disableGeojson") != null) && (!params.getString("disableGeojson").isEmpty()) ) {
                        // Param: disableGeojson, Type: Boolean
                        vehicleJourneysRequestBuilder.withDisableGeojson(booleanStraightPass(params.getBoolean("disableGeojson")));
                    }
                    if (params.has("disableDisruption") && (params.getString("disableDisruption") != null) && (!params.getString("disableDisruption").isEmpty()) ) {
                        // Param: disableDisruption, Type: Boolean
                        vehicleJourneysRequestBuilder.withDisableDisruption(booleanStraightPass(params.getBoolean("disableDisruption")));
                    }
                    if (params.has("filter") && (params.getString("filter") != null) && (!params.getString("filter").isEmpty()) ) {
                        // Param: filter, Type: String
                        vehicleJourneysRequestBuilder.withFilter(stringStraightPass(params.getString("filter")));
                    }
                    if (params.has("tags") && (params.getString("tags") != null) && (!params.getString("tags").isEmpty()) ) {
                        // Param: tags, Type: List
                        vehicleJourneysRequestBuilder.withTags(jsonArrayToStringList(params.getJSONArray("tags")));
                    }
                    
                    vehicleJourneysRequestBuilder.rawGet(new ApiCallback<String>() {
                        @Override
                        public void onFailure(ApiException e, int statusCode, Map<String, List<String>> responseHeaders) {
                            callbackContext.error("Problem during request call | " + e.getMessage());
                        }

                        @Override
                        public void onSuccess(String result, int statusCode, Map<String, List<String>> responseHeaders) {
                            JSONObject jsonObject = null;
                            try {
                                jsonObject = new JSONObject(result);
                                callbackContext.success(jsonObject);
                            } catch (Exception e) {
                                String errorMessage = "Problem during response parsing | " + String.valueOf(e.hashCode()) + ": " + e.getMessage();
                                callbackContext.error(errorMessage);
                            }
                        }

                        @Override
                        public void onUploadProgress(long bytesWritten, long contentLength, boolean done) {
                        }

                        @Override
                        public void onDownloadProgress(long bytesRead, long contentLength, boolean done) {
                        }
                    });
                } catch (Exception e) {
                    String errorMessage = "Problem during request building | " + String.valueOf(e.hashCode()) + ": " + e.getMessage();
                    callbackContext.error(errorMessage);
                }
            }
        });
    }
    final private void coverageLonLatUriVehicleJourneysId(final JSONObject params, final CallbackContext callbackContext) {
        if (this.navitiaSdk == null) {
            callbackContext.error("NavitiaSDK is not instanciated");
            return;
        }

        final VehicleJourneysApi.CoverageLonLatUriVehicleJourneysIdRequestBuilder vehicleJourneysRequestBuilder = this.navitiaSdk.vehicleJourneysApi.newCoverageLonLatUriVehicleJourneysIdRequestBuilder();
        cordova.getThreadPool().execute(new Runnable() {
            @Override
            public void run() {
                try {
                    if (params.has("lat") && (params.getString("lat") != null) && (!params.getString("lat").isEmpty()) ) {
                        // Param: lat, Type: BigDecimal
                        vehicleJourneysRequestBuilder.withLat(longToBigDecimal(params.getLong("lat")));
                    }
                    if (params.has("lon") && (params.getString("lon") != null) && (!params.getString("lon").isEmpty()) ) {
                        // Param: lon, Type: BigDecimal
                        vehicleJourneysRequestBuilder.withLon(longToBigDecimal(params.getLong("lon")));
                    }
                    if (params.has("uri") && (params.getString("uri") != null) && (!params.getString("uri").isEmpty()) ) {
                        // Param: uri, Type: String
                        vehicleJourneysRequestBuilder.withUri(stringStraightPass(params.getString("uri")));
                    }
                    if (params.has("id") && (params.getString("id") != null) && (!params.getString("id").isEmpty()) ) {
                        // Param: id, Type: String
                        vehicleJourneysRequestBuilder.withId(stringStraightPass(params.getString("id")));
                    }
                    if (params.has("startPage") && (params.getString("startPage") != null) && (!params.getString("startPage").isEmpty()) ) {
                        // Param: startPage, Type: Integer
                        vehicleJourneysRequestBuilder.withStartPage(integerStraightPass(params.getInt("startPage")));
                    }
                    if (params.has("count") && (params.getString("count") != null) && (!params.getString("count").isEmpty()) ) {
                        // Param: count, Type: Integer
                        vehicleJourneysRequestBuilder.withCount(integerStraightPass(params.getInt("count")));
                    }
                    if (params.has("depth") && (params.getString("depth") != null) && (!params.getString("depth").isEmpty()) ) {
                        // Param: depth, Type: Integer
                        vehicleJourneysRequestBuilder.withDepth(integerStraightPass(params.getInt("depth")));
                    }
                    if (params.has("forbiddenId") && (params.getString("forbiddenId") != null) && (!params.getString("forbiddenId").isEmpty()) ) {
                        // Param: forbiddenId, Type: List
                        vehicleJourneysRequestBuilder.withForbiddenId(jsonArrayToStringList(params.getJSONArray("forbiddenId")));
                    }
                    if (params.has("forbiddenUris") && (params.getString("forbiddenUris") != null) && (!params.getString("forbiddenUris").isEmpty()) ) {
                        // Param: forbiddenUris, Type: List
                        vehicleJourneysRequestBuilder.withForbiddenUris(jsonArrayToStringList(params.getJSONArray("forbiddenUris")));
                    }
                    if (params.has("externalCode") && (params.getString("externalCode") != null) && (!params.getString("externalCode").isEmpty()) ) {
                        // Param: externalCode, Type: String
                        vehicleJourneysRequestBuilder.withExternalCode(stringStraightPass(params.getString("externalCode")));
                    }
                    if (params.has("headsign") && (params.getString("headsign") != null) && (!params.getString("headsign").isEmpty()) ) {
                        // Param: headsign, Type: String
                        vehicleJourneysRequestBuilder.withHeadsign(stringStraightPass(params.getString("headsign")));
                    }
                    if (params.has("showCodes") && (params.getString("showCodes") != null) && (!params.getString("showCodes").isEmpty()) ) {
                        // Param: showCodes, Type: Boolean
                        vehicleJourneysRequestBuilder.withShowCodes(booleanStraightPass(params.getBoolean("showCodes")));
                    }
                    if (params.has("odtLevel") && (params.getString("odtLevel") != null) && (!params.getString("odtLevel").isEmpty()) ) {
                        // Param: odtLevel, Type: String
                        vehicleJourneysRequestBuilder.withOdtLevel(stringStraightPass(params.getString("odtLevel")));
                    }
                    if (params.has("dataFreshness") && (params.getString("dataFreshness") != null) && (!params.getString("dataFreshness").isEmpty()) ) {
                        // Param: dataFreshness, Type: String
                        vehicleJourneysRequestBuilder.withDataFreshness(stringStraightPass(params.getString("dataFreshness")));
                    }
                    if (params.has("distance") && (params.getString("distance") != null) && (!params.getString("distance").isEmpty()) ) {
                        // Param: distance, Type: Integer
                        vehicleJourneysRequestBuilder.withDistance(integerStraightPass(params.getInt("distance")));
                    }
                    if (params.has("since") && (params.getString("since") != null) && (!params.getString("since").isEmpty()) ) {
                        // Param: since, Type: Date
                        vehicleJourneysRequestBuilder.withSince(stringToDateTime(params.getString("since")));
                    }
                    if (params.has("until") && (params.getString("until") != null) && (!params.getString("until").isEmpty()) ) {
                        // Param: until, Type: Date
                        vehicleJourneysRequestBuilder.withUntil(stringToDateTime(params.getString("until")));
                    }
                    if (params.has("disableGeojson") && (params.getString("disableGeojson") != null) && (!params.getString("disableGeojson").isEmpty()) ) {
                        // Param: disableGeojson, Type: Boolean
                        vehicleJourneysRequestBuilder.withDisableGeojson(booleanStraightPass(params.getBoolean("disableGeojson")));
                    }
                    if (params.has("disableDisruption") && (params.getString("disableDisruption") != null) && (!params.getString("disableDisruption").isEmpty()) ) {
                        // Param: disableDisruption, Type: Boolean
                        vehicleJourneysRequestBuilder.withDisableDisruption(booleanStraightPass(params.getBoolean("disableDisruption")));
                    }
                    if (params.has("tags") && (params.getString("tags") != null) && (!params.getString("tags").isEmpty()) ) {
                        // Param: tags, Type: List
                        vehicleJourneysRequestBuilder.withTags(jsonArrayToStringList(params.getJSONArray("tags")));
                    }
                    
                    vehicleJourneysRequestBuilder.rawGet(new ApiCallback<String>() {
                        @Override
                        public void onFailure(ApiException e, int statusCode, Map<String, List<String>> responseHeaders) {
                            callbackContext.error("Problem during request call | " + e.getMessage());
                        }

                        @Override
                        public void onSuccess(String result, int statusCode, Map<String, List<String>> responseHeaders) {
                            JSONObject jsonObject = null;
                            try {
                                jsonObject = new JSONObject(result);
                                callbackContext.success(jsonObject);
                            } catch (Exception e) {
                                String errorMessage = "Problem during response parsing | " + String.valueOf(e.hashCode()) + ": " + e.getMessage();
                                callbackContext.error(errorMessage);
                            }
                        }

                        @Override
                        public void onUploadProgress(long bytesWritten, long contentLength, boolean done) {
                        }

                        @Override
                        public void onDownloadProgress(long bytesRead, long contentLength, boolean done) {
                        }
                    });
                } catch (Exception e) {
                    String errorMessage = "Problem during request building | " + String.valueOf(e.hashCode()) + ": " + e.getMessage();
                    callbackContext.error(errorMessage);
                }
            }
        });
    }
    final private void coverageLonLatVehicleJourneys(final JSONObject params, final CallbackContext callbackContext) {
        if (this.navitiaSdk == null) {
            callbackContext.error("NavitiaSDK is not instanciated");
            return;
        }

        final VehicleJourneysApi.CoverageLonLatVehicleJourneysRequestBuilder vehicleJourneysRequestBuilder = this.navitiaSdk.vehicleJourneysApi.newCoverageLonLatVehicleJourneysRequestBuilder();
        cordova.getThreadPool().execute(new Runnable() {
            @Override
            public void run() {
                try {
                    if (params.has("lat") && (params.getString("lat") != null) && (!params.getString("lat").isEmpty()) ) {
                        // Param: lat, Type: BigDecimal
                        vehicleJourneysRequestBuilder.withLat(longToBigDecimal(params.getLong("lat")));
                    }
                    if (params.has("lon") && (params.getString("lon") != null) && (!params.getString("lon").isEmpty()) ) {
                        // Param: lon, Type: BigDecimal
                        vehicleJourneysRequestBuilder.withLon(longToBigDecimal(params.getLong("lon")));
                    }
                    if (params.has("startPage") && (params.getString("startPage") != null) && (!params.getString("startPage").isEmpty()) ) {
                        // Param: startPage, Type: Integer
                        vehicleJourneysRequestBuilder.withStartPage(integerStraightPass(params.getInt("startPage")));
                    }
                    if (params.has("count") && (params.getString("count") != null) && (!params.getString("count").isEmpty()) ) {
                        // Param: count, Type: Integer
                        vehicleJourneysRequestBuilder.withCount(integerStraightPass(params.getInt("count")));
                    }
                    if (params.has("depth") && (params.getString("depth") != null) && (!params.getString("depth").isEmpty()) ) {
                        // Param: depth, Type: Integer
                        vehicleJourneysRequestBuilder.withDepth(integerStraightPass(params.getInt("depth")));
                    }
                    if (params.has("forbiddenId") && (params.getString("forbiddenId") != null) && (!params.getString("forbiddenId").isEmpty()) ) {
                        // Param: forbiddenId, Type: List
                        vehicleJourneysRequestBuilder.withForbiddenId(jsonArrayToStringList(params.getJSONArray("forbiddenId")));
                    }
                    if (params.has("forbiddenUris") && (params.getString("forbiddenUris") != null) && (!params.getString("forbiddenUris").isEmpty()) ) {
                        // Param: forbiddenUris, Type: List
                        vehicleJourneysRequestBuilder.withForbiddenUris(jsonArrayToStringList(params.getJSONArray("forbiddenUris")));
                    }
                    if (params.has("externalCode") && (params.getString("externalCode") != null) && (!params.getString("externalCode").isEmpty()) ) {
                        // Param: externalCode, Type: String
                        vehicleJourneysRequestBuilder.withExternalCode(stringStraightPass(params.getString("externalCode")));
                    }
                    if (params.has("headsign") && (params.getString("headsign") != null) && (!params.getString("headsign").isEmpty()) ) {
                        // Param: headsign, Type: String
                        vehicleJourneysRequestBuilder.withHeadsign(stringStraightPass(params.getString("headsign")));
                    }
                    if (params.has("showCodes") && (params.getString("showCodes") != null) && (!params.getString("showCodes").isEmpty()) ) {
                        // Param: showCodes, Type: Boolean
                        vehicleJourneysRequestBuilder.withShowCodes(booleanStraightPass(params.getBoolean("showCodes")));
                    }
                    if (params.has("odtLevel") && (params.getString("odtLevel") != null) && (!params.getString("odtLevel").isEmpty()) ) {
                        // Param: odtLevel, Type: String
                        vehicleJourneysRequestBuilder.withOdtLevel(stringStraightPass(params.getString("odtLevel")));
                    }
                    if (params.has("dataFreshness") && (params.getString("dataFreshness") != null) && (!params.getString("dataFreshness").isEmpty()) ) {
                        // Param: dataFreshness, Type: String
                        vehicleJourneysRequestBuilder.withDataFreshness(stringStraightPass(params.getString("dataFreshness")));
                    }
                    if (params.has("distance") && (params.getString("distance") != null) && (!params.getString("distance").isEmpty()) ) {
                        // Param: distance, Type: Integer
                        vehicleJourneysRequestBuilder.withDistance(integerStraightPass(params.getInt("distance")));
                    }
                    if (params.has("since") && (params.getString("since") != null) && (!params.getString("since").isEmpty()) ) {
                        // Param: since, Type: Date
                        vehicleJourneysRequestBuilder.withSince(stringToDateTime(params.getString("since")));
                    }
                    if (params.has("until") && (params.getString("until") != null) && (!params.getString("until").isEmpty()) ) {
                        // Param: until, Type: Date
                        vehicleJourneysRequestBuilder.withUntil(stringToDateTime(params.getString("until")));
                    }
                    if (params.has("disableGeojson") && (params.getString("disableGeojson") != null) && (!params.getString("disableGeojson").isEmpty()) ) {
                        // Param: disableGeojson, Type: Boolean
                        vehicleJourneysRequestBuilder.withDisableGeojson(booleanStraightPass(params.getBoolean("disableGeojson")));
                    }
                    if (params.has("disableDisruption") && (params.getString("disableDisruption") != null) && (!params.getString("disableDisruption").isEmpty()) ) {
                        // Param: disableDisruption, Type: Boolean
                        vehicleJourneysRequestBuilder.withDisableDisruption(booleanStraightPass(params.getBoolean("disableDisruption")));
                    }
                    if (params.has("filter") && (params.getString("filter") != null) && (!params.getString("filter").isEmpty()) ) {
                        // Param: filter, Type: String
                        vehicleJourneysRequestBuilder.withFilter(stringStraightPass(params.getString("filter")));
                    }
                    if (params.has("tags") && (params.getString("tags") != null) && (!params.getString("tags").isEmpty()) ) {
                        // Param: tags, Type: List
                        vehicleJourneysRequestBuilder.withTags(jsonArrayToStringList(params.getJSONArray("tags")));
                    }
                    
                    vehicleJourneysRequestBuilder.rawGet(new ApiCallback<String>() {
                        @Override
                        public void onFailure(ApiException e, int statusCode, Map<String, List<String>> responseHeaders) {
                            callbackContext.error("Problem during request call | " + e.getMessage());
                        }

                        @Override
                        public void onSuccess(String result, int statusCode, Map<String, List<String>> responseHeaders) {
                            JSONObject jsonObject = null;
                            try {
                                jsonObject = new JSONObject(result);
                                callbackContext.success(jsonObject);
                            } catch (Exception e) {
                                String errorMessage = "Problem during response parsing | " + String.valueOf(e.hashCode()) + ": " + e.getMessage();
                                callbackContext.error(errorMessage);
                            }
                        }

                        @Override
                        public void onUploadProgress(long bytesWritten, long contentLength, boolean done) {
                        }

                        @Override
                        public void onDownloadProgress(long bytesRead, long contentLength, boolean done) {
                        }
                    });
                } catch (Exception e) {
                    String errorMessage = "Problem during request building | " + String.valueOf(e.hashCode()) + ": " + e.getMessage();
                    callbackContext.error(errorMessage);
                }
            }
        });
    }
    final private void coverageLonLatVehicleJourneysId(final JSONObject params, final CallbackContext callbackContext) {
        if (this.navitiaSdk == null) {
            callbackContext.error("NavitiaSDK is not instanciated");
            return;
        }

        final VehicleJourneysApi.CoverageLonLatVehicleJourneysIdRequestBuilder vehicleJourneysRequestBuilder = this.navitiaSdk.vehicleJourneysApi.newCoverageLonLatVehicleJourneysIdRequestBuilder();
        cordova.getThreadPool().execute(new Runnable() {
            @Override
            public void run() {
                try {
                    if (params.has("lat") && (params.getString("lat") != null) && (!params.getString("lat").isEmpty()) ) {
                        // Param: lat, Type: BigDecimal
                        vehicleJourneysRequestBuilder.withLat(longToBigDecimal(params.getLong("lat")));
                    }
                    if (params.has("lon") && (params.getString("lon") != null) && (!params.getString("lon").isEmpty()) ) {
                        // Param: lon, Type: BigDecimal
                        vehicleJourneysRequestBuilder.withLon(longToBigDecimal(params.getLong("lon")));
                    }
                    if (params.has("id") && (params.getString("id") != null) && (!params.getString("id").isEmpty()) ) {
                        // Param: id, Type: String
                        vehicleJourneysRequestBuilder.withId(stringStraightPass(params.getString("id")));
                    }
                    if (params.has("startPage") && (params.getString("startPage") != null) && (!params.getString("startPage").isEmpty()) ) {
                        // Param: startPage, Type: Integer
                        vehicleJourneysRequestBuilder.withStartPage(integerStraightPass(params.getInt("startPage")));
                    }
                    if (params.has("count") && (params.getString("count") != null) && (!params.getString("count").isEmpty()) ) {
                        // Param: count, Type: Integer
                        vehicleJourneysRequestBuilder.withCount(integerStraightPass(params.getInt("count")));
                    }
                    if (params.has("depth") && (params.getString("depth") != null) && (!params.getString("depth").isEmpty()) ) {
                        // Param: depth, Type: Integer
                        vehicleJourneysRequestBuilder.withDepth(integerStraightPass(params.getInt("depth")));
                    }
                    if (params.has("forbiddenId") && (params.getString("forbiddenId") != null) && (!params.getString("forbiddenId").isEmpty()) ) {
                        // Param: forbiddenId, Type: List
                        vehicleJourneysRequestBuilder.withForbiddenId(jsonArrayToStringList(params.getJSONArray("forbiddenId")));
                    }
                    if (params.has("forbiddenUris") && (params.getString("forbiddenUris") != null) && (!params.getString("forbiddenUris").isEmpty()) ) {
                        // Param: forbiddenUris, Type: List
                        vehicleJourneysRequestBuilder.withForbiddenUris(jsonArrayToStringList(params.getJSONArray("forbiddenUris")));
                    }
                    if (params.has("externalCode") && (params.getString("externalCode") != null) && (!params.getString("externalCode").isEmpty()) ) {
                        // Param: externalCode, Type: String
                        vehicleJourneysRequestBuilder.withExternalCode(stringStraightPass(params.getString("externalCode")));
                    }
                    if (params.has("headsign") && (params.getString("headsign") != null) && (!params.getString("headsign").isEmpty()) ) {
                        // Param: headsign, Type: String
                        vehicleJourneysRequestBuilder.withHeadsign(stringStraightPass(params.getString("headsign")));
                    }
                    if (params.has("showCodes") && (params.getString("showCodes") != null) && (!params.getString("showCodes").isEmpty()) ) {
                        // Param: showCodes, Type: Boolean
                        vehicleJourneysRequestBuilder.withShowCodes(booleanStraightPass(params.getBoolean("showCodes")));
                    }
                    if (params.has("odtLevel") && (params.getString("odtLevel") != null) && (!params.getString("odtLevel").isEmpty()) ) {
                        // Param: odtLevel, Type: String
                        vehicleJourneysRequestBuilder.withOdtLevel(stringStraightPass(params.getString("odtLevel")));
                    }
                    if (params.has("dataFreshness") && (params.getString("dataFreshness") != null) && (!params.getString("dataFreshness").isEmpty()) ) {
                        // Param: dataFreshness, Type: String
                        vehicleJourneysRequestBuilder.withDataFreshness(stringStraightPass(params.getString("dataFreshness")));
                    }
                    if (params.has("distance") && (params.getString("distance") != null) && (!params.getString("distance").isEmpty()) ) {
                        // Param: distance, Type: Integer
                        vehicleJourneysRequestBuilder.withDistance(integerStraightPass(params.getInt("distance")));
                    }
                    if (params.has("since") && (params.getString("since") != null) && (!params.getString("since").isEmpty()) ) {
                        // Param: since, Type: Date
                        vehicleJourneysRequestBuilder.withSince(stringToDateTime(params.getString("since")));
                    }
                    if (params.has("until") && (params.getString("until") != null) && (!params.getString("until").isEmpty()) ) {
                        // Param: until, Type: Date
                        vehicleJourneysRequestBuilder.withUntil(stringToDateTime(params.getString("until")));
                    }
                    if (params.has("disableGeojson") && (params.getString("disableGeojson") != null) && (!params.getString("disableGeojson").isEmpty()) ) {
                        // Param: disableGeojson, Type: Boolean
                        vehicleJourneysRequestBuilder.withDisableGeojson(booleanStraightPass(params.getBoolean("disableGeojson")));
                    }
                    if (params.has("disableDisruption") && (params.getString("disableDisruption") != null) && (!params.getString("disableDisruption").isEmpty()) ) {
                        // Param: disableDisruption, Type: Boolean
                        vehicleJourneysRequestBuilder.withDisableDisruption(booleanStraightPass(params.getBoolean("disableDisruption")));
                    }
                    if (params.has("tags") && (params.getString("tags") != null) && (!params.getString("tags").isEmpty()) ) {
                        // Param: tags, Type: List
                        vehicleJourneysRequestBuilder.withTags(jsonArrayToStringList(params.getJSONArray("tags")));
                    }
                    
                    vehicleJourneysRequestBuilder.rawGet(new ApiCallback<String>() {
                        @Override
                        public void onFailure(ApiException e, int statusCode, Map<String, List<String>> responseHeaders) {
                            callbackContext.error("Problem during request call | " + e.getMessage());
                        }

                        @Override
                        public void onSuccess(String result, int statusCode, Map<String, List<String>> responseHeaders) {
                            JSONObject jsonObject = null;
                            try {
                                jsonObject = new JSONObject(result);
                                callbackContext.success(jsonObject);
                            } catch (Exception e) {
                                String errorMessage = "Problem during response parsing | " + String.valueOf(e.hashCode()) + ": " + e.getMessage();
                                callbackContext.error(errorMessage);
                            }
                        }

                        @Override
                        public void onUploadProgress(long bytesWritten, long contentLength, boolean done) {
                        }

                        @Override
                        public void onDownloadProgress(long bytesRead, long contentLength, boolean done) {
                        }
                    });
                } catch (Exception e) {
                    String errorMessage = "Problem during request building | " + String.valueOf(e.hashCode()) + ": " + e.getMessage();
                    callbackContext.error(errorMessage);
                }
            }
        });
    }
    final private void coverageRegionUriVehicleJourneys(final JSONObject params, final CallbackContext callbackContext) {
        if (this.navitiaSdk == null) {
            callbackContext.error("NavitiaSDK is not instanciated");
            return;
        }

        final VehicleJourneysApi.CoverageRegionUriVehicleJourneysRequestBuilder vehicleJourneysRequestBuilder = this.navitiaSdk.vehicleJourneysApi.newCoverageRegionUriVehicleJourneysRequestBuilder();
        cordova.getThreadPool().execute(new Runnable() {
            @Override
            public void run() {
                try {
                    if (params.has("region") && (params.getString("region") != null) && (!params.getString("region").isEmpty()) ) {
                        // Param: region, Type: String
                        vehicleJourneysRequestBuilder.withRegion(stringStraightPass(params.getString("region")));
                    }
                    if (params.has("uri") && (params.getString("uri") != null) && (!params.getString("uri").isEmpty()) ) {
                        // Param: uri, Type: String
                        vehicleJourneysRequestBuilder.withUri(stringStraightPass(params.getString("uri")));
                    }
                    if (params.has("startPage") && (params.getString("startPage") != null) && (!params.getString("startPage").isEmpty()) ) {
                        // Param: startPage, Type: Integer
                        vehicleJourneysRequestBuilder.withStartPage(integerStraightPass(params.getInt("startPage")));
                    }
                    if (params.has("count") && (params.getString("count") != null) && (!params.getString("count").isEmpty()) ) {
                        // Param: count, Type: Integer
                        vehicleJourneysRequestBuilder.withCount(integerStraightPass(params.getInt("count")));
                    }
                    if (params.has("depth") && (params.getString("depth") != null) && (!params.getString("depth").isEmpty()) ) {
                        // Param: depth, Type: Integer
                        vehicleJourneysRequestBuilder.withDepth(integerStraightPass(params.getInt("depth")));
                    }
                    if (params.has("forbiddenId") && (params.getString("forbiddenId") != null) && (!params.getString("forbiddenId").isEmpty()) ) {
                        // Param: forbiddenId, Type: List
                        vehicleJourneysRequestBuilder.withForbiddenId(jsonArrayToStringList(params.getJSONArray("forbiddenId")));
                    }
                    if (params.has("forbiddenUris") && (params.getString("forbiddenUris") != null) && (!params.getString("forbiddenUris").isEmpty()) ) {
                        // Param: forbiddenUris, Type: List
                        vehicleJourneysRequestBuilder.withForbiddenUris(jsonArrayToStringList(params.getJSONArray("forbiddenUris")));
                    }
                    if (params.has("externalCode") && (params.getString("externalCode") != null) && (!params.getString("externalCode").isEmpty()) ) {
                        // Param: externalCode, Type: String
                        vehicleJourneysRequestBuilder.withExternalCode(stringStraightPass(params.getString("externalCode")));
                    }
                    if (params.has("headsign") && (params.getString("headsign") != null) && (!params.getString("headsign").isEmpty()) ) {
                        // Param: headsign, Type: String
                        vehicleJourneysRequestBuilder.withHeadsign(stringStraightPass(params.getString("headsign")));
                    }
                    if (params.has("showCodes") && (params.getString("showCodes") != null) && (!params.getString("showCodes").isEmpty()) ) {
                        // Param: showCodes, Type: Boolean
                        vehicleJourneysRequestBuilder.withShowCodes(booleanStraightPass(params.getBoolean("showCodes")));
                    }
                    if (params.has("odtLevel") && (params.getString("odtLevel") != null) && (!params.getString("odtLevel").isEmpty()) ) {
                        // Param: odtLevel, Type: String
                        vehicleJourneysRequestBuilder.withOdtLevel(stringStraightPass(params.getString("odtLevel")));
                    }
                    if (params.has("dataFreshness") && (params.getString("dataFreshness") != null) && (!params.getString("dataFreshness").isEmpty()) ) {
                        // Param: dataFreshness, Type: String
                        vehicleJourneysRequestBuilder.withDataFreshness(stringStraightPass(params.getString("dataFreshness")));
                    }
                    if (params.has("distance") && (params.getString("distance") != null) && (!params.getString("distance").isEmpty()) ) {
                        // Param: distance, Type: Integer
                        vehicleJourneysRequestBuilder.withDistance(integerStraightPass(params.getInt("distance")));
                    }
                    if (params.has("since") && (params.getString("since") != null) && (!params.getString("since").isEmpty()) ) {
                        // Param: since, Type: Date
                        vehicleJourneysRequestBuilder.withSince(stringToDateTime(params.getString("since")));
                    }
                    if (params.has("until") && (params.getString("until") != null) && (!params.getString("until").isEmpty()) ) {
                        // Param: until, Type: Date
                        vehicleJourneysRequestBuilder.withUntil(stringToDateTime(params.getString("until")));
                    }
                    if (params.has("disableGeojson") && (params.getString("disableGeojson") != null) && (!params.getString("disableGeojson").isEmpty()) ) {
                        // Param: disableGeojson, Type: Boolean
                        vehicleJourneysRequestBuilder.withDisableGeojson(booleanStraightPass(params.getBoolean("disableGeojson")));
                    }
                    if (params.has("disableDisruption") && (params.getString("disableDisruption") != null) && (!params.getString("disableDisruption").isEmpty()) ) {
                        // Param: disableDisruption, Type: Boolean
                        vehicleJourneysRequestBuilder.withDisableDisruption(booleanStraightPass(params.getBoolean("disableDisruption")));
                    }
                    if (params.has("filter") && (params.getString("filter") != null) && (!params.getString("filter").isEmpty()) ) {
                        // Param: filter, Type: String
                        vehicleJourneysRequestBuilder.withFilter(stringStraightPass(params.getString("filter")));
                    }
                    if (params.has("tags") && (params.getString("tags") != null) && (!params.getString("tags").isEmpty()) ) {
                        // Param: tags, Type: List
                        vehicleJourneysRequestBuilder.withTags(jsonArrayToStringList(params.getJSONArray("tags")));
                    }
                    
                    vehicleJourneysRequestBuilder.rawGet(new ApiCallback<String>() {
                        @Override
                        public void onFailure(ApiException e, int statusCode, Map<String, List<String>> responseHeaders) {
                            callbackContext.error("Problem during request call | " + e.getMessage());
                        }

                        @Override
                        public void onSuccess(String result, int statusCode, Map<String, List<String>> responseHeaders) {
                            JSONObject jsonObject = null;
                            try {
                                jsonObject = new JSONObject(result);
                                callbackContext.success(jsonObject);
                            } catch (Exception e) {
                                String errorMessage = "Problem during response parsing | " + String.valueOf(e.hashCode()) + ": " + e.getMessage();
                                callbackContext.error(errorMessage);
                            }
                        }

                        @Override
                        public void onUploadProgress(long bytesWritten, long contentLength, boolean done) {
                        }

                        @Override
                        public void onDownloadProgress(long bytesRead, long contentLength, boolean done) {
                        }
                    });
                } catch (Exception e) {
                    String errorMessage = "Problem during request building | " + String.valueOf(e.hashCode()) + ": " + e.getMessage();
                    callbackContext.error(errorMessage);
                }
            }
        });
    }
    final private void coverageRegionUriVehicleJourneysId(final JSONObject params, final CallbackContext callbackContext) {
        if (this.navitiaSdk == null) {
            callbackContext.error("NavitiaSDK is not instanciated");
            return;
        }

        final VehicleJourneysApi.CoverageRegionUriVehicleJourneysIdRequestBuilder vehicleJourneysRequestBuilder = this.navitiaSdk.vehicleJourneysApi.newCoverageRegionUriVehicleJourneysIdRequestBuilder();
        cordova.getThreadPool().execute(new Runnable() {
            @Override
            public void run() {
                try {
                    if (params.has("region") && (params.getString("region") != null) && (!params.getString("region").isEmpty()) ) {
                        // Param: region, Type: String
                        vehicleJourneysRequestBuilder.withRegion(stringStraightPass(params.getString("region")));
                    }
                    if (params.has("uri") && (params.getString("uri") != null) && (!params.getString("uri").isEmpty()) ) {
                        // Param: uri, Type: String
                        vehicleJourneysRequestBuilder.withUri(stringStraightPass(params.getString("uri")));
                    }
                    if (params.has("id") && (params.getString("id") != null) && (!params.getString("id").isEmpty()) ) {
                        // Param: id, Type: String
                        vehicleJourneysRequestBuilder.withId(stringStraightPass(params.getString("id")));
                    }
                    if (params.has("startPage") && (params.getString("startPage") != null) && (!params.getString("startPage").isEmpty()) ) {
                        // Param: startPage, Type: Integer
                        vehicleJourneysRequestBuilder.withStartPage(integerStraightPass(params.getInt("startPage")));
                    }
                    if (params.has("count") && (params.getString("count") != null) && (!params.getString("count").isEmpty()) ) {
                        // Param: count, Type: Integer
                        vehicleJourneysRequestBuilder.withCount(integerStraightPass(params.getInt("count")));
                    }
                    if (params.has("depth") && (params.getString("depth") != null) && (!params.getString("depth").isEmpty()) ) {
                        // Param: depth, Type: Integer
                        vehicleJourneysRequestBuilder.withDepth(integerStraightPass(params.getInt("depth")));
                    }
                    if (params.has("forbiddenId") && (params.getString("forbiddenId") != null) && (!params.getString("forbiddenId").isEmpty()) ) {
                        // Param: forbiddenId, Type: List
                        vehicleJourneysRequestBuilder.withForbiddenId(jsonArrayToStringList(params.getJSONArray("forbiddenId")));
                    }
                    if (params.has("forbiddenUris") && (params.getString("forbiddenUris") != null) && (!params.getString("forbiddenUris").isEmpty()) ) {
                        // Param: forbiddenUris, Type: List
                        vehicleJourneysRequestBuilder.withForbiddenUris(jsonArrayToStringList(params.getJSONArray("forbiddenUris")));
                    }
                    if (params.has("externalCode") && (params.getString("externalCode") != null) && (!params.getString("externalCode").isEmpty()) ) {
                        // Param: externalCode, Type: String
                        vehicleJourneysRequestBuilder.withExternalCode(stringStraightPass(params.getString("externalCode")));
                    }
                    if (params.has("headsign") && (params.getString("headsign") != null) && (!params.getString("headsign").isEmpty()) ) {
                        // Param: headsign, Type: String
                        vehicleJourneysRequestBuilder.withHeadsign(stringStraightPass(params.getString("headsign")));
                    }
                    if (params.has("showCodes") && (params.getString("showCodes") != null) && (!params.getString("showCodes").isEmpty()) ) {
                        // Param: showCodes, Type: Boolean
                        vehicleJourneysRequestBuilder.withShowCodes(booleanStraightPass(params.getBoolean("showCodes")));
                    }
                    if (params.has("odtLevel") && (params.getString("odtLevel") != null) && (!params.getString("odtLevel").isEmpty()) ) {
                        // Param: odtLevel, Type: String
                        vehicleJourneysRequestBuilder.withOdtLevel(stringStraightPass(params.getString("odtLevel")));
                    }
                    if (params.has("dataFreshness") && (params.getString("dataFreshness") != null) && (!params.getString("dataFreshness").isEmpty()) ) {
                        // Param: dataFreshness, Type: String
                        vehicleJourneysRequestBuilder.withDataFreshness(stringStraightPass(params.getString("dataFreshness")));
                    }
                    if (params.has("distance") && (params.getString("distance") != null) && (!params.getString("distance").isEmpty()) ) {
                        // Param: distance, Type: Integer
                        vehicleJourneysRequestBuilder.withDistance(integerStraightPass(params.getInt("distance")));
                    }
                    if (params.has("since") && (params.getString("since") != null) && (!params.getString("since").isEmpty()) ) {
                        // Param: since, Type: Date
                        vehicleJourneysRequestBuilder.withSince(stringToDateTime(params.getString("since")));
                    }
                    if (params.has("until") && (params.getString("until") != null) && (!params.getString("until").isEmpty()) ) {
                        // Param: until, Type: Date
                        vehicleJourneysRequestBuilder.withUntil(stringToDateTime(params.getString("until")));
                    }
                    if (params.has("disableGeojson") && (params.getString("disableGeojson") != null) && (!params.getString("disableGeojson").isEmpty()) ) {
                        // Param: disableGeojson, Type: Boolean
                        vehicleJourneysRequestBuilder.withDisableGeojson(booleanStraightPass(params.getBoolean("disableGeojson")));
                    }
                    if (params.has("disableDisruption") && (params.getString("disableDisruption") != null) && (!params.getString("disableDisruption").isEmpty()) ) {
                        // Param: disableDisruption, Type: Boolean
                        vehicleJourneysRequestBuilder.withDisableDisruption(booleanStraightPass(params.getBoolean("disableDisruption")));
                    }
                    if (params.has("tags") && (params.getString("tags") != null) && (!params.getString("tags").isEmpty()) ) {
                        // Param: tags, Type: List
                        vehicleJourneysRequestBuilder.withTags(jsonArrayToStringList(params.getJSONArray("tags")));
                    }
                    
                    vehicleJourneysRequestBuilder.rawGet(new ApiCallback<String>() {
                        @Override
                        public void onFailure(ApiException e, int statusCode, Map<String, List<String>> responseHeaders) {
                            callbackContext.error("Problem during request call | " + e.getMessage());
                        }

                        @Override
                        public void onSuccess(String result, int statusCode, Map<String, List<String>> responseHeaders) {
                            JSONObject jsonObject = null;
                            try {
                                jsonObject = new JSONObject(result);
                                callbackContext.success(jsonObject);
                            } catch (Exception e) {
                                String errorMessage = "Problem during response parsing | " + String.valueOf(e.hashCode()) + ": " + e.getMessage();
                                callbackContext.error(errorMessage);
                            }
                        }

                        @Override
                        public void onUploadProgress(long bytesWritten, long contentLength, boolean done) {
                        }

                        @Override
                        public void onDownloadProgress(long bytesRead, long contentLength, boolean done) {
                        }
                    });
                } catch (Exception e) {
                    String errorMessage = "Problem during request building | " + String.valueOf(e.hashCode()) + ": " + e.getMessage();
                    callbackContext.error(errorMessage);
                }
            }
        });
    }
    final private void coverageRegionVehicleJourneys(final JSONObject params, final CallbackContext callbackContext) {
        if (this.navitiaSdk == null) {
            callbackContext.error("NavitiaSDK is not instanciated");
            return;
        }

        final VehicleJourneysApi.CoverageRegionVehicleJourneysRequestBuilder vehicleJourneysRequestBuilder = this.navitiaSdk.vehicleJourneysApi.newCoverageRegionVehicleJourneysRequestBuilder();
        cordova.getThreadPool().execute(new Runnable() {
            @Override
            public void run() {
                try {
                    if (params.has("region") && (params.getString("region") != null) && (!params.getString("region").isEmpty()) ) {
                        // Param: region, Type: String
                        vehicleJourneysRequestBuilder.withRegion(stringStraightPass(params.getString("region")));
                    }
                    if (params.has("startPage") && (params.getString("startPage") != null) && (!params.getString("startPage").isEmpty()) ) {
                        // Param: startPage, Type: Integer
                        vehicleJourneysRequestBuilder.withStartPage(integerStraightPass(params.getInt("startPage")));
                    }
                    if (params.has("count") && (params.getString("count") != null) && (!params.getString("count").isEmpty()) ) {
                        // Param: count, Type: Integer
                        vehicleJourneysRequestBuilder.withCount(integerStraightPass(params.getInt("count")));
                    }
                    if (params.has("depth") && (params.getString("depth") != null) && (!params.getString("depth").isEmpty()) ) {
                        // Param: depth, Type: Integer
                        vehicleJourneysRequestBuilder.withDepth(integerStraightPass(params.getInt("depth")));
                    }
                    if (params.has("forbiddenId") && (params.getString("forbiddenId") != null) && (!params.getString("forbiddenId").isEmpty()) ) {
                        // Param: forbiddenId, Type: List
                        vehicleJourneysRequestBuilder.withForbiddenId(jsonArrayToStringList(params.getJSONArray("forbiddenId")));
                    }
                    if (params.has("forbiddenUris") && (params.getString("forbiddenUris") != null) && (!params.getString("forbiddenUris").isEmpty()) ) {
                        // Param: forbiddenUris, Type: List
                        vehicleJourneysRequestBuilder.withForbiddenUris(jsonArrayToStringList(params.getJSONArray("forbiddenUris")));
                    }
                    if (params.has("externalCode") && (params.getString("externalCode") != null) && (!params.getString("externalCode").isEmpty()) ) {
                        // Param: externalCode, Type: String
                        vehicleJourneysRequestBuilder.withExternalCode(stringStraightPass(params.getString("externalCode")));
                    }
                    if (params.has("headsign") && (params.getString("headsign") != null) && (!params.getString("headsign").isEmpty()) ) {
                        // Param: headsign, Type: String
                        vehicleJourneysRequestBuilder.withHeadsign(stringStraightPass(params.getString("headsign")));
                    }
                    if (params.has("showCodes") && (params.getString("showCodes") != null) && (!params.getString("showCodes").isEmpty()) ) {
                        // Param: showCodes, Type: Boolean
                        vehicleJourneysRequestBuilder.withShowCodes(booleanStraightPass(params.getBoolean("showCodes")));
                    }
                    if (params.has("odtLevel") && (params.getString("odtLevel") != null) && (!params.getString("odtLevel").isEmpty()) ) {
                        // Param: odtLevel, Type: String
                        vehicleJourneysRequestBuilder.withOdtLevel(stringStraightPass(params.getString("odtLevel")));
                    }
                    if (params.has("dataFreshness") && (params.getString("dataFreshness") != null) && (!params.getString("dataFreshness").isEmpty()) ) {
                        // Param: dataFreshness, Type: String
                        vehicleJourneysRequestBuilder.withDataFreshness(stringStraightPass(params.getString("dataFreshness")));
                    }
                    if (params.has("distance") && (params.getString("distance") != null) && (!params.getString("distance").isEmpty()) ) {
                        // Param: distance, Type: Integer
                        vehicleJourneysRequestBuilder.withDistance(integerStraightPass(params.getInt("distance")));
                    }
                    if (params.has("since") && (params.getString("since") != null) && (!params.getString("since").isEmpty()) ) {
                        // Param: since, Type: Date
                        vehicleJourneysRequestBuilder.withSince(stringToDateTime(params.getString("since")));
                    }
                    if (params.has("until") && (params.getString("until") != null) && (!params.getString("until").isEmpty()) ) {
                        // Param: until, Type: Date
                        vehicleJourneysRequestBuilder.withUntil(stringToDateTime(params.getString("until")));
                    }
                    if (params.has("disableGeojson") && (params.getString("disableGeojson") != null) && (!params.getString("disableGeojson").isEmpty()) ) {
                        // Param: disableGeojson, Type: Boolean
                        vehicleJourneysRequestBuilder.withDisableGeojson(booleanStraightPass(params.getBoolean("disableGeojson")));
                    }
                    if (params.has("disableDisruption") && (params.getString("disableDisruption") != null) && (!params.getString("disableDisruption").isEmpty()) ) {
                        // Param: disableDisruption, Type: Boolean
                        vehicleJourneysRequestBuilder.withDisableDisruption(booleanStraightPass(params.getBoolean("disableDisruption")));
                    }
                    if (params.has("filter") && (params.getString("filter") != null) && (!params.getString("filter").isEmpty()) ) {
                        // Param: filter, Type: String
                        vehicleJourneysRequestBuilder.withFilter(stringStraightPass(params.getString("filter")));
                    }
                    if (params.has("tags") && (params.getString("tags") != null) && (!params.getString("tags").isEmpty()) ) {
                        // Param: tags, Type: List
                        vehicleJourneysRequestBuilder.withTags(jsonArrayToStringList(params.getJSONArray("tags")));
                    }
                    
                    vehicleJourneysRequestBuilder.rawGet(new ApiCallback<String>() {
                        @Override
                        public void onFailure(ApiException e, int statusCode, Map<String, List<String>> responseHeaders) {
                            callbackContext.error("Problem during request call | " + e.getMessage());
                        }

                        @Override
                        public void onSuccess(String result, int statusCode, Map<String, List<String>> responseHeaders) {
                            JSONObject jsonObject = null;
                            try {
                                jsonObject = new JSONObject(result);
                                callbackContext.success(jsonObject);
                            } catch (Exception e) {
                                String errorMessage = "Problem during response parsing | " + String.valueOf(e.hashCode()) + ": " + e.getMessage();
                                callbackContext.error(errorMessage);
                            }
                        }

                        @Override
                        public void onUploadProgress(long bytesWritten, long contentLength, boolean done) {
                        }

                        @Override
                        public void onDownloadProgress(long bytesRead, long contentLength, boolean done) {
                        }
                    });
                } catch (Exception e) {
                    String errorMessage = "Problem during request building | " + String.valueOf(e.hashCode()) + ": " + e.getMessage();
                    callbackContext.error(errorMessage);
                }
            }
        });
    }
    final private void coverageRegionVehicleJourneysId(final JSONObject params, final CallbackContext callbackContext) {
        if (this.navitiaSdk == null) {
            callbackContext.error("NavitiaSDK is not instanciated");
            return;
        }

        final VehicleJourneysApi.CoverageRegionVehicleJourneysIdRequestBuilder vehicleJourneysRequestBuilder = this.navitiaSdk.vehicleJourneysApi.newCoverageRegionVehicleJourneysIdRequestBuilder();
        cordova.getThreadPool().execute(new Runnable() {
            @Override
            public void run() {
                try {
                    if (params.has("region") && (params.getString("region") != null) && (!params.getString("region").isEmpty()) ) {
                        // Param: region, Type: String
                        vehicleJourneysRequestBuilder.withRegion(stringStraightPass(params.getString("region")));
                    }
                    if (params.has("id") && (params.getString("id") != null) && (!params.getString("id").isEmpty()) ) {
                        // Param: id, Type: String
                        vehicleJourneysRequestBuilder.withId(stringStraightPass(params.getString("id")));
                    }
                    if (params.has("startPage") && (params.getString("startPage") != null) && (!params.getString("startPage").isEmpty()) ) {
                        // Param: startPage, Type: Integer
                        vehicleJourneysRequestBuilder.withStartPage(integerStraightPass(params.getInt("startPage")));
                    }
                    if (params.has("count") && (params.getString("count") != null) && (!params.getString("count").isEmpty()) ) {
                        // Param: count, Type: Integer
                        vehicleJourneysRequestBuilder.withCount(integerStraightPass(params.getInt("count")));
                    }
                    if (params.has("depth") && (params.getString("depth") != null) && (!params.getString("depth").isEmpty()) ) {
                        // Param: depth, Type: Integer
                        vehicleJourneysRequestBuilder.withDepth(integerStraightPass(params.getInt("depth")));
                    }
                    if (params.has("forbiddenId") && (params.getString("forbiddenId") != null) && (!params.getString("forbiddenId").isEmpty()) ) {
                        // Param: forbiddenId, Type: List
                        vehicleJourneysRequestBuilder.withForbiddenId(jsonArrayToStringList(params.getJSONArray("forbiddenId")));
                    }
                    if (params.has("forbiddenUris") && (params.getString("forbiddenUris") != null) && (!params.getString("forbiddenUris").isEmpty()) ) {
                        // Param: forbiddenUris, Type: List
                        vehicleJourneysRequestBuilder.withForbiddenUris(jsonArrayToStringList(params.getJSONArray("forbiddenUris")));
                    }
                    if (params.has("externalCode") && (params.getString("externalCode") != null) && (!params.getString("externalCode").isEmpty()) ) {
                        // Param: externalCode, Type: String
                        vehicleJourneysRequestBuilder.withExternalCode(stringStraightPass(params.getString("externalCode")));
                    }
                    if (params.has("headsign") && (params.getString("headsign") != null) && (!params.getString("headsign").isEmpty()) ) {
                        // Param: headsign, Type: String
                        vehicleJourneysRequestBuilder.withHeadsign(stringStraightPass(params.getString("headsign")));
                    }
                    if (params.has("showCodes") && (params.getString("showCodes") != null) && (!params.getString("showCodes").isEmpty()) ) {
                        // Param: showCodes, Type: Boolean
                        vehicleJourneysRequestBuilder.withShowCodes(booleanStraightPass(params.getBoolean("showCodes")));
                    }
                    if (params.has("odtLevel") && (params.getString("odtLevel") != null) && (!params.getString("odtLevel").isEmpty()) ) {
                        // Param: odtLevel, Type: String
                        vehicleJourneysRequestBuilder.withOdtLevel(stringStraightPass(params.getString("odtLevel")));
                    }
                    if (params.has("dataFreshness") && (params.getString("dataFreshness") != null) && (!params.getString("dataFreshness").isEmpty()) ) {
                        // Param: dataFreshness, Type: String
                        vehicleJourneysRequestBuilder.withDataFreshness(stringStraightPass(params.getString("dataFreshness")));
                    }
                    if (params.has("distance") && (params.getString("distance") != null) && (!params.getString("distance").isEmpty()) ) {
                        // Param: distance, Type: Integer
                        vehicleJourneysRequestBuilder.withDistance(integerStraightPass(params.getInt("distance")));
                    }
                    if (params.has("since") && (params.getString("since") != null) && (!params.getString("since").isEmpty()) ) {
                        // Param: since, Type: Date
                        vehicleJourneysRequestBuilder.withSince(stringToDateTime(params.getString("since")));
                    }
                    if (params.has("until") && (params.getString("until") != null) && (!params.getString("until").isEmpty()) ) {
                        // Param: until, Type: Date
                        vehicleJourneysRequestBuilder.withUntil(stringToDateTime(params.getString("until")));
                    }
                    if (params.has("disableGeojson") && (params.getString("disableGeojson") != null) && (!params.getString("disableGeojson").isEmpty()) ) {
                        // Param: disableGeojson, Type: Boolean
                        vehicleJourneysRequestBuilder.withDisableGeojson(booleanStraightPass(params.getBoolean("disableGeojson")));
                    }
                    if (params.has("disableDisruption") && (params.getString("disableDisruption") != null) && (!params.getString("disableDisruption").isEmpty()) ) {
                        // Param: disableDisruption, Type: Boolean
                        vehicleJourneysRequestBuilder.withDisableDisruption(booleanStraightPass(params.getBoolean("disableDisruption")));
                    }
                    if (params.has("tags") && (params.getString("tags") != null) && (!params.getString("tags").isEmpty()) ) {
                        // Param: tags, Type: List
                        vehicleJourneysRequestBuilder.withTags(jsonArrayToStringList(params.getJSONArray("tags")));
                    }
                    
                    vehicleJourneysRequestBuilder.rawGet(new ApiCallback<String>() {
                        @Override
                        public void onFailure(ApiException e, int statusCode, Map<String, List<String>> responseHeaders) {
                            callbackContext.error("Problem during request call | " + e.getMessage());
                        }

                        @Override
                        public void onSuccess(String result, int statusCode, Map<String, List<String>> responseHeaders) {
                            JSONObject jsonObject = null;
                            try {
                                jsonObject = new JSONObject(result);
                                callbackContext.success(jsonObject);
                            } catch (Exception e) {
                                String errorMessage = "Problem during response parsing | " + String.valueOf(e.hashCode()) + ": " + e.getMessage();
                                callbackContext.error(errorMessage);
                            }
                        }

                        @Override
                        public void onUploadProgress(long bytesWritten, long contentLength, boolean done) {
                        }

                        @Override
                        public void onDownloadProgress(long bytesRead, long contentLength, boolean done) {
                        }
                    });
                } catch (Exception e) {
                    String errorMessage = "Problem during request building | " + String.valueOf(e.hashCode()) + ": " + e.getMessage();
                    callbackContext.error(errorMessage);
                }
            }
        });
    }
    final private void vehicleJourneys(final JSONObject params, final CallbackContext callbackContext) {
        if (this.navitiaSdk == null) {
            callbackContext.error("NavitiaSDK is not instanciated");
            return;
        }

        final VehicleJourneysApi.VehicleJourneysRequestBuilder vehicleJourneysRequestBuilder = this.navitiaSdk.vehicleJourneysApi.newVehicleJourneysRequestBuilder();
        cordova.getThreadPool().execute(new Runnable() {
            @Override
            public void run() {
                try {
                    if (params.has("externalCode") && (params.getString("externalCode") != null) && (!params.getString("externalCode").isEmpty()) ) {
                        // Param: externalCode, Type: String
                        vehicleJourneysRequestBuilder.withExternalCode(stringStraightPass(params.getString("externalCode")));
                    }
                    if (params.has("startPage") && (params.getString("startPage") != null) && (!params.getString("startPage").isEmpty()) ) {
                        // Param: startPage, Type: Integer
                        vehicleJourneysRequestBuilder.withStartPage(integerStraightPass(params.getInt("startPage")));
                    }
                    if (params.has("count") && (params.getString("count") != null) && (!params.getString("count").isEmpty()) ) {
                        // Param: count, Type: Integer
                        vehicleJourneysRequestBuilder.withCount(integerStraightPass(params.getInt("count")));
                    }
                    if (params.has("depth") && (params.getString("depth") != null) && (!params.getString("depth").isEmpty()) ) {
                        // Param: depth, Type: Integer
                        vehicleJourneysRequestBuilder.withDepth(integerStraightPass(params.getInt("depth")));
                    }
                    if (params.has("forbiddenId") && (params.getString("forbiddenId") != null) && (!params.getString("forbiddenId").isEmpty()) ) {
                        // Param: forbiddenId, Type: List
                        vehicleJourneysRequestBuilder.withForbiddenId(jsonArrayToStringList(params.getJSONArray("forbiddenId")));
                    }
                    if (params.has("forbiddenUris") && (params.getString("forbiddenUris") != null) && (!params.getString("forbiddenUris").isEmpty()) ) {
                        // Param: forbiddenUris, Type: List
                        vehicleJourneysRequestBuilder.withForbiddenUris(jsonArrayToStringList(params.getJSONArray("forbiddenUris")));
                    }
                    if (params.has("headsign") && (params.getString("headsign") != null) && (!params.getString("headsign").isEmpty()) ) {
                        // Param: headsign, Type: String
                        vehicleJourneysRequestBuilder.withHeadsign(stringStraightPass(params.getString("headsign")));
                    }
                    if (params.has("showCodes") && (params.getString("showCodes") != null) && (!params.getString("showCodes").isEmpty()) ) {
                        // Param: showCodes, Type: Boolean
                        vehicleJourneysRequestBuilder.withShowCodes(booleanStraightPass(params.getBoolean("showCodes")));
                    }
                    if (params.has("odtLevel") && (params.getString("odtLevel") != null) && (!params.getString("odtLevel").isEmpty()) ) {
                        // Param: odtLevel, Type: String
                        vehicleJourneysRequestBuilder.withOdtLevel(stringStraightPass(params.getString("odtLevel")));
                    }
                    if (params.has("dataFreshness") && (params.getString("dataFreshness") != null) && (!params.getString("dataFreshness").isEmpty()) ) {
                        // Param: dataFreshness, Type: String
                        vehicleJourneysRequestBuilder.withDataFreshness(stringStraightPass(params.getString("dataFreshness")));
                    }
                    if (params.has("distance") && (params.getString("distance") != null) && (!params.getString("distance").isEmpty()) ) {
                        // Param: distance, Type: Integer
                        vehicleJourneysRequestBuilder.withDistance(integerStraightPass(params.getInt("distance")));
                    }
                    if (params.has("since") && (params.getString("since") != null) && (!params.getString("since").isEmpty()) ) {
                        // Param: since, Type: Date
                        vehicleJourneysRequestBuilder.withSince(stringToDateTime(params.getString("since")));
                    }
                    if (params.has("until") && (params.getString("until") != null) && (!params.getString("until").isEmpty()) ) {
                        // Param: until, Type: Date
                        vehicleJourneysRequestBuilder.withUntil(stringToDateTime(params.getString("until")));
                    }
                    if (params.has("disableGeojson") && (params.getString("disableGeojson") != null) && (!params.getString("disableGeojson").isEmpty()) ) {
                        // Param: disableGeojson, Type: Boolean
                        vehicleJourneysRequestBuilder.withDisableGeojson(booleanStraightPass(params.getBoolean("disableGeojson")));
                    }
                    if (params.has("disableDisruption") && (params.getString("disableDisruption") != null) && (!params.getString("disableDisruption").isEmpty()) ) {
                        // Param: disableDisruption, Type: Boolean
                        vehicleJourneysRequestBuilder.withDisableDisruption(booleanStraightPass(params.getBoolean("disableDisruption")));
                    }
                    if (params.has("filter") && (params.getString("filter") != null) && (!params.getString("filter").isEmpty()) ) {
                        // Param: filter, Type: String
                        vehicleJourneysRequestBuilder.withFilter(stringStraightPass(params.getString("filter")));
                    }
                    if (params.has("tags") && (params.getString("tags") != null) && (!params.getString("tags").isEmpty()) ) {
                        // Param: tags, Type: List
                        vehicleJourneysRequestBuilder.withTags(jsonArrayToStringList(params.getJSONArray("tags")));
                    }
                    
                    vehicleJourneysRequestBuilder.rawGet(new ApiCallback<String>() {
                        @Override
                        public void onFailure(ApiException e, int statusCode, Map<String, List<String>> responseHeaders) {
                            callbackContext.error("Problem during request call | " + e.getMessage());
                        }

                        @Override
                        public void onSuccess(String result, int statusCode, Map<String, List<String>> responseHeaders) {
                            JSONObject jsonObject = null;
                            try {
                                jsonObject = new JSONObject(result);
                                callbackContext.success(jsonObject);
                            } catch (Exception e) {
                                String errorMessage = "Problem during response parsing | " + String.valueOf(e.hashCode()) + ": " + e.getMessage();
                                callbackContext.error(errorMessage);
                            }
                        }

                        @Override
                        public void onUploadProgress(long bytesWritten, long contentLength, boolean done) {
                        }

                        @Override
                        public void onDownloadProgress(long bytesRead, long contentLength, boolean done) {
                        }
                    });
                } catch (Exception e) {
                    String errorMessage = "Problem during request building | " + String.valueOf(e.hashCode()) + ": " + e.getMessage();
                    callbackContext.error(errorMessage);
                }
            }
        });
    }
    final private void coordLonLatVehiclePositions(final JSONObject params, final CallbackContext callbackContext) {
        if (this.navitiaSdk == null) {
            callbackContext.error("NavitiaSDK is not instanciated");
            return;
        }

        final VehiclePositionsApi.CoordLonLatVehiclePositionsRequestBuilder vehiclePositionsRequestBuilder = this.navitiaSdk.vehiclePositionsApi.newCoordLonLatVehiclePositionsRequestBuilder();
        cordova.getThreadPool().execute(new Runnable() {
            @Override
            public void run() {
                try {
                    if (params.has("lat") && (params.getString("lat") != null) && (!params.getString("lat").isEmpty()) ) {
                        // Param: lat, Type: BigDecimal
                        vehiclePositionsRequestBuilder.withLat(longToBigDecimal(params.getLong("lat")));
                    }
                    if (params.has("lon") && (params.getString("lon") != null) && (!params.getString("lon").isEmpty()) ) {
                        // Param: lon, Type: BigDecimal
                        vehiclePositionsRequestBuilder.withLon(longToBigDecimal(params.getLong("lon")));
                    }
                    if (params.has("depth") && (params.getString("depth") != null) && (!params.getString("depth").isEmpty()) ) {
                        // Param: depth, Type: Integer
                        vehiclePositionsRequestBuilder.withDepth(integerStraightPass(params.getInt("depth")));
                    }
                    if (params.has("count") && (params.getString("count") != null) && (!params.getString("count").isEmpty()) ) {
                        // Param: count, Type: Integer
                        vehiclePositionsRequestBuilder.withCount(integerStraightPass(params.getInt("count")));
                    }
                    if (params.has("filter") && (params.getString("filter") != null) && (!params.getString("filter").isEmpty()) ) {
                        // Param: filter, Type: String
                        vehiclePositionsRequestBuilder.withFilter(stringStraightPass(params.getString("filter")));
                    }
                    if (params.has("startPage") && (params.getString("startPage") != null) && (!params.getString("startPage").isEmpty()) ) {
                        // Param: startPage, Type: Integer
                        vehiclePositionsRequestBuilder.withStartPage(integerStraightPass(params.getInt("startPage")));
                    }
                    if (params.has("forbiddenUris") && (params.getString("forbiddenUris") != null) && (!params.getString("forbiddenUris").isEmpty()) ) {
                        // Param: forbiddenUris, Type: List
                        vehiclePositionsRequestBuilder.withForbiddenUris(jsonArrayToStringList(params.getJSONArray("forbiddenUris")));
                    }
                    
                    vehiclePositionsRequestBuilder.rawGet(new ApiCallback<String>() {
                        @Override
                        public void onFailure(ApiException e, int statusCode, Map<String, List<String>> responseHeaders) {
                            callbackContext.error("Problem during request call | " + e.getMessage());
                        }

                        @Override
                        public void onSuccess(String result, int statusCode, Map<String, List<String>> responseHeaders) {
                            JSONObject jsonObject = null;
                            try {
                                jsonObject = new JSONObject(result);
                                callbackContext.success(jsonObject);
                            } catch (Exception e) {
                                String errorMessage = "Problem during response parsing | " + String.valueOf(e.hashCode()) + ": " + e.getMessage();
                                callbackContext.error(errorMessage);
                            }
                        }

                        @Override
                        public void onUploadProgress(long bytesWritten, long contentLength, boolean done) {
                        }

                        @Override
                        public void onDownloadProgress(long bytesRead, long contentLength, boolean done) {
                        }
                    });
                } catch (Exception e) {
                    String errorMessage = "Problem during request building | " + String.valueOf(e.hashCode()) + ": " + e.getMessage();
                    callbackContext.error(errorMessage);
                }
            }
        });
    }
    final private void coordsLonLatVehiclePositions(final JSONObject params, final CallbackContext callbackContext) {
        if (this.navitiaSdk == null) {
            callbackContext.error("NavitiaSDK is not instanciated");
            return;
        }

        final VehiclePositionsApi.CoordsLonLatVehiclePositionsRequestBuilder vehiclePositionsRequestBuilder = this.navitiaSdk.vehiclePositionsApi.newCoordsLonLatVehiclePositionsRequestBuilder();
        cordova.getThreadPool().execute(new Runnable() {
            @Override
            public void run() {
                try {
                    if (params.has("lat") && (params.getString("lat") != null) && (!params.getString("lat").isEmpty()) ) {
                        // Param: lat, Type: BigDecimal
                        vehiclePositionsRequestBuilder.withLat(longToBigDecimal(params.getLong("lat")));
                    }
                    if (params.has("lon") && (params.getString("lon") != null) && (!params.getString("lon").isEmpty()) ) {
                        // Param: lon, Type: BigDecimal
                        vehiclePositionsRequestBuilder.withLon(longToBigDecimal(params.getLong("lon")));
                    }
                    if (params.has("depth") && (params.getString("depth") != null) && (!params.getString("depth").isEmpty()) ) {
                        // Param: depth, Type: Integer
                        vehiclePositionsRequestBuilder.withDepth(integerStraightPass(params.getInt("depth")));
                    }
                    if (params.has("count") && (params.getString("count") != null) && (!params.getString("count").isEmpty()) ) {
                        // Param: count, Type: Integer
                        vehiclePositionsRequestBuilder.withCount(integerStraightPass(params.getInt("count")));
                    }
                    if (params.has("filter") && (params.getString("filter") != null) && (!params.getString("filter").isEmpty()) ) {
                        // Param: filter, Type: String
                        vehiclePositionsRequestBuilder.withFilter(stringStraightPass(params.getString("filter")));
                    }
                    if (params.has("startPage") && (params.getString("startPage") != null) && (!params.getString("startPage").isEmpty()) ) {
                        // Param: startPage, Type: Integer
                        vehiclePositionsRequestBuilder.withStartPage(integerStraightPass(params.getInt("startPage")));
                    }
                    if (params.has("forbiddenUris") && (params.getString("forbiddenUris") != null) && (!params.getString("forbiddenUris").isEmpty()) ) {
                        // Param: forbiddenUris, Type: List
                        vehiclePositionsRequestBuilder.withForbiddenUris(jsonArrayToStringList(params.getJSONArray("forbiddenUris")));
                    }
                    
                    vehiclePositionsRequestBuilder.rawGet(new ApiCallback<String>() {
                        @Override
                        public void onFailure(ApiException e, int statusCode, Map<String, List<String>> responseHeaders) {
                            callbackContext.error("Problem during request call | " + e.getMessage());
                        }

                        @Override
                        public void onSuccess(String result, int statusCode, Map<String, List<String>> responseHeaders) {
                            JSONObject jsonObject = null;
                            try {
                                jsonObject = new JSONObject(result);
                                callbackContext.success(jsonObject);
                            } catch (Exception e) {
                                String errorMessage = "Problem during response parsing | " + String.valueOf(e.hashCode()) + ": " + e.getMessage();
                                callbackContext.error(errorMessage);
                            }
                        }

                        @Override
                        public void onUploadProgress(long bytesWritten, long contentLength, boolean done) {
                        }

                        @Override
                        public void onDownloadProgress(long bytesRead, long contentLength, boolean done) {
                        }
                    });
                } catch (Exception e) {
                    String errorMessage = "Problem during request building | " + String.valueOf(e.hashCode()) + ": " + e.getMessage();
                    callbackContext.error(errorMessage);
                }
            }
        });
    }
    final private void coverageLonLatUriVehiclePositions(final JSONObject params, final CallbackContext callbackContext) {
        if (this.navitiaSdk == null) {
            callbackContext.error("NavitiaSDK is not instanciated");
            return;
        }

        final VehiclePositionsApi.CoverageLonLatUriVehiclePositionsRequestBuilder vehiclePositionsRequestBuilder = this.navitiaSdk.vehiclePositionsApi.newCoverageLonLatUriVehiclePositionsRequestBuilder();
        cordova.getThreadPool().execute(new Runnable() {
            @Override
            public void run() {
                try {
                    if (params.has("lat") && (params.getString("lat") != null) && (!params.getString("lat").isEmpty()) ) {
                        // Param: lat, Type: BigDecimal
                        vehiclePositionsRequestBuilder.withLat(longToBigDecimal(params.getLong("lat")));
                    }
                    if (params.has("lon") && (params.getString("lon") != null) && (!params.getString("lon").isEmpty()) ) {
                        // Param: lon, Type: BigDecimal
                        vehiclePositionsRequestBuilder.withLon(longToBigDecimal(params.getLong("lon")));
                    }
                    if (params.has("uri") && (params.getString("uri") != null) && (!params.getString("uri").isEmpty()) ) {
                        // Param: uri, Type: String
                        vehiclePositionsRequestBuilder.withUri(stringStraightPass(params.getString("uri")));
                    }
                    if (params.has("depth") && (params.getString("depth") != null) && (!params.getString("depth").isEmpty()) ) {
                        // Param: depth, Type: Integer
                        vehiclePositionsRequestBuilder.withDepth(integerStraightPass(params.getInt("depth")));
                    }
                    if (params.has("count") && (params.getString("count") != null) && (!params.getString("count").isEmpty()) ) {
                        // Param: count, Type: Integer
                        vehiclePositionsRequestBuilder.withCount(integerStraightPass(params.getInt("count")));
                    }
                    if (params.has("filter") && (params.getString("filter") != null) && (!params.getString("filter").isEmpty()) ) {
                        // Param: filter, Type: String
                        vehiclePositionsRequestBuilder.withFilter(stringStraightPass(params.getString("filter")));
                    }
                    if (params.has("startPage") && (params.getString("startPage") != null) && (!params.getString("startPage").isEmpty()) ) {
                        // Param: startPage, Type: Integer
                        vehiclePositionsRequestBuilder.withStartPage(integerStraightPass(params.getInt("startPage")));
                    }
                    if (params.has("forbiddenUris") && (params.getString("forbiddenUris") != null) && (!params.getString("forbiddenUris").isEmpty()) ) {
                        // Param: forbiddenUris, Type: List
                        vehiclePositionsRequestBuilder.withForbiddenUris(jsonArrayToStringList(params.getJSONArray("forbiddenUris")));
                    }
                    
                    vehiclePositionsRequestBuilder.rawGet(new ApiCallback<String>() {
                        @Override
                        public void onFailure(ApiException e, int statusCode, Map<String, List<String>> responseHeaders) {
                            callbackContext.error("Problem during request call | " + e.getMessage());
                        }

                        @Override
                        public void onSuccess(String result, int statusCode, Map<String, List<String>> responseHeaders) {
                            JSONObject jsonObject = null;
                            try {
                                jsonObject = new JSONObject(result);
                                callbackContext.success(jsonObject);
                            } catch (Exception e) {
                                String errorMessage = "Problem during response parsing | " + String.valueOf(e.hashCode()) + ": " + e.getMessage();
                                callbackContext.error(errorMessage);
                            }
                        }

                        @Override
                        public void onUploadProgress(long bytesWritten, long contentLength, boolean done) {
                        }

                        @Override
                        public void onDownloadProgress(long bytesRead, long contentLength, boolean done) {
                        }
                    });
                } catch (Exception e) {
                    String errorMessage = "Problem during request building | " + String.valueOf(e.hashCode()) + ": " + e.getMessage();
                    callbackContext.error(errorMessage);
                }
            }
        });
    }
    final private void coverageLonLatVehiclePositions(final JSONObject params, final CallbackContext callbackContext) {
        if (this.navitiaSdk == null) {
            callbackContext.error("NavitiaSDK is not instanciated");
            return;
        }

        final VehiclePositionsApi.CoverageLonLatVehiclePositionsRequestBuilder vehiclePositionsRequestBuilder = this.navitiaSdk.vehiclePositionsApi.newCoverageLonLatVehiclePositionsRequestBuilder();
        cordova.getThreadPool().execute(new Runnable() {
            @Override
            public void run() {
                try {
                    if (params.has("lat") && (params.getString("lat") != null) && (!params.getString("lat").isEmpty()) ) {
                        // Param: lat, Type: BigDecimal
                        vehiclePositionsRequestBuilder.withLat(longToBigDecimal(params.getLong("lat")));
                    }
                    if (params.has("lon") && (params.getString("lon") != null) && (!params.getString("lon").isEmpty()) ) {
                        // Param: lon, Type: BigDecimal
                        vehiclePositionsRequestBuilder.withLon(longToBigDecimal(params.getLong("lon")));
                    }
                    if (params.has("depth") && (params.getString("depth") != null) && (!params.getString("depth").isEmpty()) ) {
                        // Param: depth, Type: Integer
                        vehiclePositionsRequestBuilder.withDepth(integerStraightPass(params.getInt("depth")));
                    }
                    if (params.has("count") && (params.getString("count") != null) && (!params.getString("count").isEmpty()) ) {
                        // Param: count, Type: Integer
                        vehiclePositionsRequestBuilder.withCount(integerStraightPass(params.getInt("count")));
                    }
                    if (params.has("filter") && (params.getString("filter") != null) && (!params.getString("filter").isEmpty()) ) {
                        // Param: filter, Type: String
                        vehiclePositionsRequestBuilder.withFilter(stringStraightPass(params.getString("filter")));
                    }
                    if (params.has("startPage") && (params.getString("startPage") != null) && (!params.getString("startPage").isEmpty()) ) {
                        // Param: startPage, Type: Integer
                        vehiclePositionsRequestBuilder.withStartPage(integerStraightPass(params.getInt("startPage")));
                    }
                    if (params.has("forbiddenUris") && (params.getString("forbiddenUris") != null) && (!params.getString("forbiddenUris").isEmpty()) ) {
                        // Param: forbiddenUris, Type: List
                        vehiclePositionsRequestBuilder.withForbiddenUris(jsonArrayToStringList(params.getJSONArray("forbiddenUris")));
                    }
                    
                    vehiclePositionsRequestBuilder.rawGet(new ApiCallback<String>() {
                        @Override
                        public void onFailure(ApiException e, int statusCode, Map<String, List<String>> responseHeaders) {
                            callbackContext.error("Problem during request call | " + e.getMessage());
                        }

                        @Override
                        public void onSuccess(String result, int statusCode, Map<String, List<String>> responseHeaders) {
                            JSONObject jsonObject = null;
                            try {
                                jsonObject = new JSONObject(result);
                                callbackContext.success(jsonObject);
                            } catch (Exception e) {
                                String errorMessage = "Problem during response parsing | " + String.valueOf(e.hashCode()) + ": " + e.getMessage();
                                callbackContext.error(errorMessage);
                            }
                        }

                        @Override
                        public void onUploadProgress(long bytesWritten, long contentLength, boolean done) {
                        }

                        @Override
                        public void onDownloadProgress(long bytesRead, long contentLength, boolean done) {
                        }
                    });
                } catch (Exception e) {
                    String errorMessage = "Problem during request building | " + String.valueOf(e.hashCode()) + ": " + e.getMessage();
                    callbackContext.error(errorMessage);
                }
            }
        });
    }
    final private void coverageRegionUriVehiclePositions(final JSONObject params, final CallbackContext callbackContext) {
        if (this.navitiaSdk == null) {
            callbackContext.error("NavitiaSDK is not instanciated");
            return;
        }

        final VehiclePositionsApi.CoverageRegionUriVehiclePositionsRequestBuilder vehiclePositionsRequestBuilder = this.navitiaSdk.vehiclePositionsApi.newCoverageRegionUriVehiclePositionsRequestBuilder();
        cordova.getThreadPool().execute(new Runnable() {
            @Override
            public void run() {
                try {
                    if (params.has("region") && (params.getString("region") != null) && (!params.getString("region").isEmpty()) ) {
                        // Param: region, Type: String
                        vehiclePositionsRequestBuilder.withRegion(stringStraightPass(params.getString("region")));
                    }
                    if (params.has("uri") && (params.getString("uri") != null) && (!params.getString("uri").isEmpty()) ) {
                        // Param: uri, Type: String
                        vehiclePositionsRequestBuilder.withUri(stringStraightPass(params.getString("uri")));
                    }
                    if (params.has("depth") && (params.getString("depth") != null) && (!params.getString("depth").isEmpty()) ) {
                        // Param: depth, Type: Integer
                        vehiclePositionsRequestBuilder.withDepth(integerStraightPass(params.getInt("depth")));
                    }
                    if (params.has("count") && (params.getString("count") != null) && (!params.getString("count").isEmpty()) ) {
                        // Param: count, Type: Integer
                        vehiclePositionsRequestBuilder.withCount(integerStraightPass(params.getInt("count")));
                    }
                    if (params.has("filter") && (params.getString("filter") != null) && (!params.getString("filter").isEmpty()) ) {
                        // Param: filter, Type: String
                        vehiclePositionsRequestBuilder.withFilter(stringStraightPass(params.getString("filter")));
                    }
                    if (params.has("startPage") && (params.getString("startPage") != null) && (!params.getString("startPage").isEmpty()) ) {
                        // Param: startPage, Type: Integer
                        vehiclePositionsRequestBuilder.withStartPage(integerStraightPass(params.getInt("startPage")));
                    }
                    if (params.has("forbiddenUris") && (params.getString("forbiddenUris") != null) && (!params.getString("forbiddenUris").isEmpty()) ) {
                        // Param: forbiddenUris, Type: List
                        vehiclePositionsRequestBuilder.withForbiddenUris(jsonArrayToStringList(params.getJSONArray("forbiddenUris")));
                    }
                    
                    vehiclePositionsRequestBuilder.rawGet(new ApiCallback<String>() {
                        @Override
                        public void onFailure(ApiException e, int statusCode, Map<String, List<String>> responseHeaders) {
                            callbackContext.error("Problem during request call | " + e.getMessage());
                        }

                        @Override
                        public void onSuccess(String result, int statusCode, Map<String, List<String>> responseHeaders) {
                            JSONObject jsonObject = null;
                            try {
                                jsonObject = new JSONObject(result);
                                callbackContext.success(jsonObject);
                            } catch (Exception e) {
                                String errorMessage = "Problem during response parsing | " + String.valueOf(e.hashCode()) + ": " + e.getMessage();
                                callbackContext.error(errorMessage);
                            }
                        }

                        @Override
                        public void onUploadProgress(long bytesWritten, long contentLength, boolean done) {
                        }

                        @Override
                        public void onDownloadProgress(long bytesRead, long contentLength, boolean done) {
                        }
                    });
                } catch (Exception e) {
                    String errorMessage = "Problem during request building | " + String.valueOf(e.hashCode()) + ": " + e.getMessage();
                    callbackContext.error(errorMessage);
                }
            }
        });
    }
    final private void coverageRegionVehiclePositions(final JSONObject params, final CallbackContext callbackContext) {
        if (this.navitiaSdk == null) {
            callbackContext.error("NavitiaSDK is not instanciated");
            return;
        }

        final VehiclePositionsApi.CoverageRegionVehiclePositionsRequestBuilder vehiclePositionsRequestBuilder = this.navitiaSdk.vehiclePositionsApi.newCoverageRegionVehiclePositionsRequestBuilder();
        cordova.getThreadPool().execute(new Runnable() {
            @Override
            public void run() {
                try {
                    if (params.has("region") && (params.getString("region") != null) && (!params.getString("region").isEmpty()) ) {
                        // Param: region, Type: String
                        vehiclePositionsRequestBuilder.withRegion(stringStraightPass(params.getString("region")));
                    }
                    if (params.has("depth") && (params.getString("depth") != null) && (!params.getString("depth").isEmpty()) ) {
                        // Param: depth, Type: Integer
                        vehiclePositionsRequestBuilder.withDepth(integerStraightPass(params.getInt("depth")));
                    }
                    if (params.has("count") && (params.getString("count") != null) && (!params.getString("count").isEmpty()) ) {
                        // Param: count, Type: Integer
                        vehiclePositionsRequestBuilder.withCount(integerStraightPass(params.getInt("count")));
                    }
                    if (params.has("filter") && (params.getString("filter") != null) && (!params.getString("filter").isEmpty()) ) {
                        // Param: filter, Type: String
                        vehiclePositionsRequestBuilder.withFilter(stringStraightPass(params.getString("filter")));
                    }
                    if (params.has("startPage") && (params.getString("startPage") != null) && (!params.getString("startPage").isEmpty()) ) {
                        // Param: startPage, Type: Integer
                        vehiclePositionsRequestBuilder.withStartPage(integerStraightPass(params.getInt("startPage")));
                    }
                    if (params.has("forbiddenUris") && (params.getString("forbiddenUris") != null) && (!params.getString("forbiddenUris").isEmpty()) ) {
                        // Param: forbiddenUris, Type: List
                        vehiclePositionsRequestBuilder.withForbiddenUris(jsonArrayToStringList(params.getJSONArray("forbiddenUris")));
                    }
                    
                    vehiclePositionsRequestBuilder.rawGet(new ApiCallback<String>() {
                        @Override
                        public void onFailure(ApiException e, int statusCode, Map<String, List<String>> responseHeaders) {
                            callbackContext.error("Problem during request call | " + e.getMessage());
                        }

                        @Override
                        public void onSuccess(String result, int statusCode, Map<String, List<String>> responseHeaders) {
                            JSONObject jsonObject = null;
                            try {
                                jsonObject = new JSONObject(result);
                                callbackContext.success(jsonObject);
                            } catch (Exception e) {
                                String errorMessage = "Problem during response parsing | " + String.valueOf(e.hashCode()) + ": " + e.getMessage();
                                callbackContext.error(errorMessage);
                            }
                        }

                        @Override
                        public void onUploadProgress(long bytesWritten, long contentLength, boolean done) {
                        }

                        @Override
                        public void onDownloadProgress(long bytesRead, long contentLength, boolean done) {
                        }
                    });
                } catch (Exception e) {
                    String errorMessage = "Problem during request building | " + String.valueOf(e.hashCode()) + ": " + e.getMessage();
                    callbackContext.error(errorMessage);
                }
            }
        });
    }
}