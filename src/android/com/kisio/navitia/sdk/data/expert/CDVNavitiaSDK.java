package com.kisio.navitia.sdk.data.expert;

import androidx.annotation.NonNull;

import java.io.IOException;
import java.io.UnsupportedEncodingException;
import java.net.URLEncoder;
import java.util.HashMap;
import java.util.Map;
import java.util.Objects;

import okhttp3.Call;
import okhttp3.Callback;
import okhttp3.HttpUrl;
import okhttp3.OkHttpClient;
import okhttp3.Response;
import okhttp3.Request;

import org.apache.cordova.CordovaPlugin;
import org.apache.cordova.CallbackContext;

import org.json.JSONArray;
import org.json.JSONObject;
import org.json.JSONException;

public class CDVNavitiaSDK extends CordovaPlugin {

  private final OkHttpClient client = new OkHttpClient();
  private final Map<String, Action> actions = new HashMap<>();
  private String token;

  private interface IAction {

    void doAction(JSONObject params, CallbackContext callbackContext);
  }

  private abstract class Action implements IAction {

    @Override
    public abstract void doAction(JSONObject params, CallbackContext callbackContext);
  }

  public CDVNavitiaSDK() {
    actions.put("coverageLonLatAddresses", new Action() {
      @Override
      public void doAction(JSONObject params, CallbackContext callbackContext) {
        coverageLonLatAddresses(params, callbackContext);
      }
    });
    actions.put("coverageLonLatAddressesId", new Action() {
      @Override
      public void doAction(JSONObject params, CallbackContext callbackContext) {
        coverageLonLatAddressesId(params, callbackContext);
      }
    });
    actions.put("coverageLonLatUriAddresses", new Action() {
      @Override
      public void doAction(JSONObject params, CallbackContext callbackContext) {
        coverageLonLatUriAddresses(params, callbackContext);
      }
    });
    actions.put("coverageLonLatUriAddressesId", new Action() {
      @Override
      public void doAction(JSONObject params, CallbackContext callbackContext) {
        coverageLonLatUriAddressesId(params, callbackContext);
      }
    });
    actions.put("coverageRegionAddresses", new Action() {
      @Override
      public void doAction(JSONObject params, CallbackContext callbackContext) {
        coverageRegionAddresses(params, callbackContext);
      }
    });
    actions.put("coverageRegionAddressesId", new Action() {
      @Override
      public void doAction(JSONObject params, CallbackContext callbackContext) {
        coverageRegionAddressesId(params, callbackContext);
      }
    });
    actions.put("coverageRegionUriAddresses", new Action() {
      @Override
      public void doAction(JSONObject params, CallbackContext callbackContext) {
        coverageRegionUriAddresses(params, callbackContext);
      }
    });
    actions.put("coverageRegionUriAddressesId", new Action() {
      @Override
      public void doAction(JSONObject params, CallbackContext callbackContext) {
        coverageRegionUriAddressesId(params, callbackContext);
      }
    });
    actions.put("coverageLonLatCalendars", new Action() {
      @Override
      public void doAction(JSONObject params, CallbackContext callbackContext) {
        coverageLonLatCalendars(params, callbackContext);
      }
    });
    actions.put("coverageLonLatCalendarsId", new Action() {
      @Override
      public void doAction(JSONObject params, CallbackContext callbackContext) {
        coverageLonLatCalendarsId(params, callbackContext);
      }
    });
    actions.put("coverageLonLatUriCalendars", new Action() {
      @Override
      public void doAction(JSONObject params, CallbackContext callbackContext) {
        coverageLonLatUriCalendars(params, callbackContext);
      }
    });
    actions.put("coverageRegionCalendars", new Action() {
      @Override
      public void doAction(JSONObject params, CallbackContext callbackContext) {
        coverageRegionCalendars(params, callbackContext);
      }
    });
    actions.put("coverageRegionCalendarsId", new Action() {
      @Override
      public void doAction(JSONObject params, CallbackContext callbackContext) {
        coverageRegionCalendarsId(params, callbackContext);
      }
    });
    actions.put("coverageRegionUriCalendars", new Action() {
      @Override
      public void doAction(JSONObject params, CallbackContext callbackContext) {
        coverageRegionUriCalendars(params, callbackContext);
      }
    });
    actions.put("coverageLonLatCommercialModes", new Action() {
      @Override
      public void doAction(JSONObject params, CallbackContext callbackContext) {
        coverageLonLatCommercialModes(params, callbackContext);
      }
    });
    actions.put("coverageLonLatCommercialModesId", new Action() {
      @Override
      public void doAction(JSONObject params, CallbackContext callbackContext) {
        coverageLonLatCommercialModesId(params, callbackContext);
      }
    });
    actions.put("coverageLonLatUriCommercialModes", new Action() {
      @Override
      public void doAction(JSONObject params, CallbackContext callbackContext) {
        coverageLonLatUriCommercialModes(params, callbackContext);
      }
    });
    actions.put("coverageLonLatUriCommercialModesId", new Action() {
      @Override
      public void doAction(JSONObject params, CallbackContext callbackContext) {
        coverageLonLatUriCommercialModesId(params, callbackContext);
      }
    });
    actions.put("coverageRegionCommercialModes", new Action() {
      @Override
      public void doAction(JSONObject params, CallbackContext callbackContext) {
        coverageRegionCommercialModes(params, callbackContext);
      }
    });
    actions.put("coverageRegionCommercialModesId", new Action() {
      @Override
      public void doAction(JSONObject params, CallbackContext callbackContext) {
        coverageRegionCommercialModesId(params, callbackContext);
      }
    });
    actions.put("coverageRegionUriCommercialModes", new Action() {
      @Override
      public void doAction(JSONObject params, CallbackContext callbackContext) {
        coverageRegionUriCommercialModes(params, callbackContext);
      }
    });
    actions.put("coverageRegionUriCommercialModesId", new Action() {
      @Override
      public void doAction(JSONObject params, CallbackContext callbackContext) {
        coverageRegionUriCommercialModesId(params, callbackContext);
      }
    });
    actions.put("coverageLonLatCompanies", new Action() {
      @Override
      public void doAction(JSONObject params, CallbackContext callbackContext) {
        coverageLonLatCompanies(params, callbackContext);
      }
    });
    actions.put("coverageLonLatCompaniesId", new Action() {
      @Override
      public void doAction(JSONObject params, CallbackContext callbackContext) {
        coverageLonLatCompaniesId(params, callbackContext);
      }
    });
    actions.put("coverageLonLatUriCompanies", new Action() {
      @Override
      public void doAction(JSONObject params, CallbackContext callbackContext) {
        coverageLonLatUriCompanies(params, callbackContext);
      }
    });
    actions.put("coverageLonLatUriCompaniesId", new Action() {
      @Override
      public void doAction(JSONObject params, CallbackContext callbackContext) {
        coverageLonLatUriCompaniesId(params, callbackContext);
      }
    });
    actions.put("coverageRegionCompanies", new Action() {
      @Override
      public void doAction(JSONObject params, CallbackContext callbackContext) {
        coverageRegionCompanies(params, callbackContext);
      }
    });
    actions.put("coverageRegionCompaniesId", new Action() {
      @Override
      public void doAction(JSONObject params, CallbackContext callbackContext) {
        coverageRegionCompaniesId(params, callbackContext);
      }
    });
    actions.put("coverageRegionUriCompanies", new Action() {
      @Override
      public void doAction(JSONObject params, CallbackContext callbackContext) {
        coverageRegionUriCompanies(params, callbackContext);
      }
    });
    actions.put("coverageRegionUriCompaniesId", new Action() {
      @Override
      public void doAction(JSONObject params, CallbackContext callbackContext) {
        coverageRegionUriCompaniesId(params, callbackContext);
      }
    });
    actions.put("coverageLonLatContributors", new Action() {
      @Override
      public void doAction(JSONObject params, CallbackContext callbackContext) {
        coverageLonLatContributors(params, callbackContext);
      }
    });
    actions.put("coverageLonLatContributorsId", new Action() {
      @Override
      public void doAction(JSONObject params, CallbackContext callbackContext) {
        coverageLonLatContributorsId(params, callbackContext);
      }
    });
    actions.put("coverageLonLatUriContributors", new Action() {
      @Override
      public void doAction(JSONObject params, CallbackContext callbackContext) {
        coverageLonLatUriContributors(params, callbackContext);
      }
    });
    actions.put("coverageLonLatUriContributorsId", new Action() {
      @Override
      public void doAction(JSONObject params, CallbackContext callbackContext) {
        coverageLonLatUriContributorsId(params, callbackContext);
      }
    });
    actions.put("coverageRegionContributors", new Action() {
      @Override
      public void doAction(JSONObject params, CallbackContext callbackContext) {
        coverageRegionContributors(params, callbackContext);
      }
    });
    actions.put("coverageRegionContributorsId", new Action() {
      @Override
      public void doAction(JSONObject params, CallbackContext callbackContext) {
        coverageRegionContributorsId(params, callbackContext);
      }
    });
    actions.put("coverageRegionUriContributors", new Action() {
      @Override
      public void doAction(JSONObject params, CallbackContext callbackContext) {
        coverageRegionUriContributors(params, callbackContext);
      }
    });
    actions.put("coverageRegionUriContributorsId", new Action() {
      @Override
      public void doAction(JSONObject params, CallbackContext callbackContext) {
        coverageRegionUriContributorsId(params, callbackContext);
      }
    });
    actions.put("coordLonLat", new Action() {
      @Override
      public void doAction(JSONObject params, CallbackContext callbackContext) {
        coordLonLat(params, callbackContext);
      }
    });
    actions.put("coordsLonLat", new Action() {
      @Override
      public void doAction(JSONObject params, CallbackContext callbackContext) {
        coordsLonLat(params, callbackContext);
      }
    });
    actions.put("coverageRegionCoordLonLatAddresses", new Action() {
      @Override
      public void doAction(JSONObject params, CallbackContext callbackContext) {
        coverageRegionCoordLonLatAddresses(params, callbackContext);
      }
    });
    actions.put("coverageRegionCoordsLonLatAddresses", new Action() {
      @Override
      public void doAction(JSONObject params, CallbackContext callbackContext) {
        coverageRegionCoordsLonLatAddresses(params, callbackContext);
      }
    });
    actions.put("coverageLonLatCoord", new Action() {
      @Override
      public void doAction(JSONObject params, CallbackContext callbackContext) {
        coverageLonLatCoord(params, callbackContext);
      }
    });
    actions.put("coverageLonLatCoordId", new Action() {
      @Override
      public void doAction(JSONObject params, CallbackContext callbackContext) {
        coverageLonLatCoordId(params, callbackContext);
      }
    });
    actions.put("coverageLonLatCoords", new Action() {
      @Override
      public void doAction(JSONObject params, CallbackContext callbackContext) {
        coverageLonLatCoords(params, callbackContext);
      }
    });
    actions.put("coverageLonLatCoordsId", new Action() {
      @Override
      public void doAction(JSONObject params, CallbackContext callbackContext) {
        coverageLonLatCoordsId(params, callbackContext);
      }
    });
    actions.put("coverageLonLatUriCoord", new Action() {
      @Override
      public void doAction(JSONObject params, CallbackContext callbackContext) {
        coverageLonLatUriCoord(params, callbackContext);
      }
    });
    actions.put("coverageLonLatUriCoordId", new Action() {
      @Override
      public void doAction(JSONObject params, CallbackContext callbackContext) {
        coverageLonLatUriCoordId(params, callbackContext);
      }
    });
    actions.put("coverageLonLatUriCoords", new Action() {
      @Override
      public void doAction(JSONObject params, CallbackContext callbackContext) {
        coverageLonLatUriCoords(params, callbackContext);
      }
    });
    actions.put("coverageLonLatUriCoordsId", new Action() {
      @Override
      public void doAction(JSONObject params, CallbackContext callbackContext) {
        coverageLonLatUriCoordsId(params, callbackContext);
      }
    });
    actions.put("coverageRegionCoord", new Action() {
      @Override
      public void doAction(JSONObject params, CallbackContext callbackContext) {
        coverageRegionCoord(params, callbackContext);
      }
    });
    actions.put("coverageRegionCoordId", new Action() {
      @Override
      public void doAction(JSONObject params, CallbackContext callbackContext) {
        coverageRegionCoordId(params, callbackContext);
      }
    });
    actions.put("coverageRegionCoords", new Action() {
      @Override
      public void doAction(JSONObject params, CallbackContext callbackContext) {
        coverageRegionCoords(params, callbackContext);
      }
    });
    actions.put("coverageRegionCoordsId", new Action() {
      @Override
      public void doAction(JSONObject params, CallbackContext callbackContext) {
        coverageRegionCoordsId(params, callbackContext);
      }
    });
    actions.put("coverageRegionUriCoord", new Action() {
      @Override
      public void doAction(JSONObject params, CallbackContext callbackContext) {
        coverageRegionUriCoord(params, callbackContext);
      }
    });
    actions.put("coverageRegionUriCoordId", new Action() {
      @Override
      public void doAction(JSONObject params, CallbackContext callbackContext) {
        coverageRegionUriCoordId(params, callbackContext);
      }
    });
    actions.put("coverageRegionUriCoords", new Action() {
      @Override
      public void doAction(JSONObject params, CallbackContext callbackContext) {
        coverageRegionUriCoords(params, callbackContext);
      }
    });
    actions.put("coverageRegionUriCoordsId", new Action() {
      @Override
      public void doAction(JSONObject params, CallbackContext callbackContext) {
        coverageRegionUriCoordsId(params, callbackContext);
      }
    });
    actions.put("coverage", new Action() {
      @Override
      public void doAction(JSONObject params, CallbackContext callbackContext) {
        coverage(params, callbackContext);
      }
    });
    actions.put("coverageLonLat", new Action() {
      @Override
      public void doAction(JSONObject params, CallbackContext callbackContext) {
        coverageLonLat(params, callbackContext);
      }
    });
    actions.put("coverageRegion", new Action() {
      @Override
      public void doAction(JSONObject params, CallbackContext callbackContext) {
        coverageRegion(params, callbackContext);
      }
    });
    actions.put("coverageLonLatDatasets", new Action() {
      @Override
      public void doAction(JSONObject params, CallbackContext callbackContext) {
        coverageLonLatDatasets(params, callbackContext);
      }
    });
    actions.put("coverageLonLatDatasetsId", new Action() {
      @Override
      public void doAction(JSONObject params, CallbackContext callbackContext) {
        coverageLonLatDatasetsId(params, callbackContext);
      }
    });
    actions.put("coverageLonLatUriDatasets", new Action() {
      @Override
      public void doAction(JSONObject params, CallbackContext callbackContext) {
        coverageLonLatUriDatasets(params, callbackContext);
      }
    });
    actions.put("coverageLonLatUriDatasetsId", new Action() {
      @Override
      public void doAction(JSONObject params, CallbackContext callbackContext) {
        coverageLonLatUriDatasetsId(params, callbackContext);
      }
    });
    actions.put("coverageRegionDatasets", new Action() {
      @Override
      public void doAction(JSONObject params, CallbackContext callbackContext) {
        coverageRegionDatasets(params, callbackContext);
      }
    });
    actions.put("coverageRegionDatasetsId", new Action() {
      @Override
      public void doAction(JSONObject params, CallbackContext callbackContext) {
        coverageRegionDatasetsId(params, callbackContext);
      }
    });
    actions.put("coverageRegionUriDatasets", new Action() {
      @Override
      public void doAction(JSONObject params, CallbackContext callbackContext) {
        coverageRegionUriDatasets(params, callbackContext);
      }
    });
    actions.put("coverageRegionUriDatasetsId", new Action() {
      @Override
      public void doAction(JSONObject params, CallbackContext callbackContext) {
        coverageRegionUriDatasetsId(params, callbackContext);
      }
    });
    actions.put("coverageLonLatDisruptions", new Action() {
      @Override
      public void doAction(JSONObject params, CallbackContext callbackContext) {
        coverageLonLatDisruptions(params, callbackContext);
      }
    });
    actions.put("coverageLonLatDisruptionsId", new Action() {
      @Override
      public void doAction(JSONObject params, CallbackContext callbackContext) {
        coverageLonLatDisruptionsId(params, callbackContext);
      }
    });
    actions.put("coverageLonLatUriDisruptions", new Action() {
      @Override
      public void doAction(JSONObject params, CallbackContext callbackContext) {
        coverageLonLatUriDisruptions(params, callbackContext);
      }
    });
    actions.put("coverageLonLatUriDisruptionsId", new Action() {
      @Override
      public void doAction(JSONObject params, CallbackContext callbackContext) {
        coverageLonLatUriDisruptionsId(params, callbackContext);
      }
    });
    actions.put("coverageRegionDisruptions", new Action() {
      @Override
      public void doAction(JSONObject params, CallbackContext callbackContext) {
        coverageRegionDisruptions(params, callbackContext);
      }
    });
    actions.put("coverageRegionDisruptionsId", new Action() {
      @Override
      public void doAction(JSONObject params, CallbackContext callbackContext) {
        coverageRegionDisruptionsId(params, callbackContext);
      }
    });
    actions.put("coverageRegionUriDisruptions", new Action() {
      @Override
      public void doAction(JSONObject params, CallbackContext callbackContext) {
        coverageRegionUriDisruptions(params, callbackContext);
      }
    });
    actions.put("coverageRegionUriDisruptionsId", new Action() {
      @Override
      public void doAction(JSONObject params, CallbackContext callbackContext) {
        coverageRegionUriDisruptionsId(params, callbackContext);
      }
    });
    actions.put("coordLonLatEquipmentReports", new Action() {
      @Override
      public void doAction(JSONObject params, CallbackContext callbackContext) {
        coordLonLatEquipmentReports(params, callbackContext);
      }
    });
    actions.put("coordsLonLatEquipmentReports", new Action() {
      @Override
      public void doAction(JSONObject params, CallbackContext callbackContext) {
        coordsLonLatEquipmentReports(params, callbackContext);
      }
    });
    actions.put("coverageLonLatEquipmentReports", new Action() {
      @Override
      public void doAction(JSONObject params, CallbackContext callbackContext) {
        coverageLonLatEquipmentReports(params, callbackContext);
      }
    });
    actions.put("coverageLonLatUriEquipmentReports", new Action() {
      @Override
      public void doAction(JSONObject params, CallbackContext callbackContext) {
        coverageLonLatUriEquipmentReports(params, callbackContext);
      }
    });
    actions.put("coverageRegionEquipmentReports", new Action() {
      @Override
      public void doAction(JSONObject params, CallbackContext callbackContext) {
        coverageRegionEquipmentReports(params, callbackContext);
      }
    });
    actions.put("coverageRegionUriEquipmentReports", new Action() {
      @Override
      public void doAction(JSONObject params, CallbackContext callbackContext) {
        coverageRegionUriEquipmentReports(params, callbackContext);
      }
    });
    actions.put("coverageLonLatGeoStatus", new Action() {
      @Override
      public void doAction(JSONObject params, CallbackContext callbackContext) {
        coverageLonLatGeoStatus(params, callbackContext);
      }
    });
    actions.put("coverageRegionGeoStatus", new Action() {
      @Override
      public void doAction(JSONObject params, CallbackContext callbackContext) {
        coverageRegionGeoStatus(params, callbackContext);
      }
    });
    actions.put("coverageLonLatIsochrones", new Action() {
      @Override
      public void doAction(JSONObject params, CallbackContext callbackContext) {
        coverageLonLatIsochrones(params, callbackContext);
      }
    });
    actions.put("coverageRegionIsochrones", new Action() {
      @Override
      public void doAction(JSONObject params, CallbackContext callbackContext) {
        coverageRegionIsochrones(params, callbackContext);
      }
    });
    actions.put("coverageLonLatHeatMaps", new Action() {
      @Override
      public void doAction(JSONObject params, CallbackContext callbackContext) {
        coverageLonLatHeatMaps(params, callbackContext);
      }
    });
    actions.put("coverageRegionHeatMaps", new Action() {
      @Override
      public void doAction(JSONObject params, CallbackContext callbackContext) {
        coverageRegionHeatMaps(params, callbackContext);
      }
    });
    actions.put("coverageLonLatJourneyPatternPoints", new Action() {
      @Override
      public void doAction(JSONObject params, CallbackContext callbackContext) {
        coverageLonLatJourneyPatternPoints(params, callbackContext);
      }
    });
    actions.put("coverageLonLatJourneyPatternPointsId", new Action() {
      @Override
      public void doAction(JSONObject params, CallbackContext callbackContext) {
        coverageLonLatJourneyPatternPointsId(params, callbackContext);
      }
    });
    actions.put("coverageLonLatUriJourneyPatternPoints", new Action() {
      @Override
      public void doAction(JSONObject params, CallbackContext callbackContext) {
        coverageLonLatUriJourneyPatternPoints(params, callbackContext);
      }
    });
    actions.put("coverageLonLatUriJourneyPatternPointsId", new Action() {
      @Override
      public void doAction(JSONObject params, CallbackContext callbackContext) {
        coverageLonLatUriJourneyPatternPointsId(params, callbackContext);
      }
    });
    actions.put("coverageRegionJourneyPatternPoints", new Action() {
      @Override
      public void doAction(JSONObject params, CallbackContext callbackContext) {
        coverageRegionJourneyPatternPoints(params, callbackContext);
      }
    });
    actions.put("coverageRegionJourneyPatternPointsId", new Action() {
      @Override
      public void doAction(JSONObject params, CallbackContext callbackContext) {
        coverageRegionJourneyPatternPointsId(params, callbackContext);
      }
    });
    actions.put("coverageRegionUriJourneyPatternPoints", new Action() {
      @Override
      public void doAction(JSONObject params, CallbackContext callbackContext) {
        coverageRegionUriJourneyPatternPoints(params, callbackContext);
      }
    });
    actions.put("coverageRegionUriJourneyPatternPointsId", new Action() {
      @Override
      public void doAction(JSONObject params, CallbackContext callbackContext) {
        coverageRegionUriJourneyPatternPointsId(params, callbackContext);
      }
    });
    actions.put("coverageLonLatJourneyPatterns", new Action() {
      @Override
      public void doAction(JSONObject params, CallbackContext callbackContext) {
        coverageLonLatJourneyPatterns(params, callbackContext);
      }
    });
    actions.put("coverageLonLatJourneyPatternsId", new Action() {
      @Override
      public void doAction(JSONObject params, CallbackContext callbackContext) {
        coverageLonLatJourneyPatternsId(params, callbackContext);
      }
    });
    actions.put("coverageLonLatUriJourneyPatterns", new Action() {
      @Override
      public void doAction(JSONObject params, CallbackContext callbackContext) {
        coverageLonLatUriJourneyPatterns(params, callbackContext);
      }
    });
    actions.put("coverageLonLatUriJourneyPatternsId", new Action() {
      @Override
      public void doAction(JSONObject params, CallbackContext callbackContext) {
        coverageLonLatUriJourneyPatternsId(params, callbackContext);
      }
    });
    actions.put("coverageRegionJourneyPatterns", new Action() {
      @Override
      public void doAction(JSONObject params, CallbackContext callbackContext) {
        coverageRegionJourneyPatterns(params, callbackContext);
      }
    });
    actions.put("coverageRegionJourneyPatternsId", new Action() {
      @Override
      public void doAction(JSONObject params, CallbackContext callbackContext) {
        coverageRegionJourneyPatternsId(params, callbackContext);
      }
    });
    actions.put("coverageRegionUriJourneyPatterns", new Action() {
      @Override
      public void doAction(JSONObject params, CallbackContext callbackContext) {
        coverageRegionUriJourneyPatterns(params, callbackContext);
      }
    });
    actions.put("coverageRegionUriJourneyPatternsId", new Action() {
      @Override
      public void doAction(JSONObject params, CallbackContext callbackContext) {
        coverageRegionUriJourneyPatternsId(params, callbackContext);
      }
    });
    actions.put("coverageLonLatJourneys", new Action() {
      @Override
      public void doAction(JSONObject params, CallbackContext callbackContext) {
        coverageLonLatJourneys(params, callbackContext);
      }
    });
    actions.put("coverageRegionJourneys", new Action() {
      @Override
      public void doAction(JSONObject params, CallbackContext callbackContext) {
        coverageRegionJourneys(params, callbackContext);
      }
    });
    actions.put("journeys", new Action() {
      @Override
      public void doAction(JSONObject params, CallbackContext callbackContext) {
        journeys(params, callbackContext);
      }
    });
    actions.put("coverageLonLatLineGroups", new Action() {
      @Override
      public void doAction(JSONObject params, CallbackContext callbackContext) {
        coverageLonLatLineGroups(params, callbackContext);
      }
    });
    actions.put("coverageLonLatLineGroupsId", new Action() {
      @Override
      public void doAction(JSONObject params, CallbackContext callbackContext) {
        coverageLonLatLineGroupsId(params, callbackContext);
      }
    });
    actions.put("coverageLonLatUriLineGroups", new Action() {
      @Override
      public void doAction(JSONObject params, CallbackContext callbackContext) {
        coverageLonLatUriLineGroups(params, callbackContext);
      }
    });
    actions.put("coverageLonLatUriLineGroupsId", new Action() {
      @Override
      public void doAction(JSONObject params, CallbackContext callbackContext) {
        coverageLonLatUriLineGroupsId(params, callbackContext);
      }
    });
    actions.put("coverageRegionLineGroups", new Action() {
      @Override
      public void doAction(JSONObject params, CallbackContext callbackContext) {
        coverageRegionLineGroups(params, callbackContext);
      }
    });
    actions.put("coverageRegionLineGroupsId", new Action() {
      @Override
      public void doAction(JSONObject params, CallbackContext callbackContext) {
        coverageRegionLineGroupsId(params, callbackContext);
      }
    });
    actions.put("coverageRegionUriLineGroups", new Action() {
      @Override
      public void doAction(JSONObject params, CallbackContext callbackContext) {
        coverageRegionUriLineGroups(params, callbackContext);
      }
    });
    actions.put("coverageRegionUriLineGroupsId", new Action() {
      @Override
      public void doAction(JSONObject params, CallbackContext callbackContext) {
        coverageRegionUriLineGroupsId(params, callbackContext);
      }
    });
    actions.put("lineGroups", new Action() {
      @Override
      public void doAction(JSONObject params, CallbackContext callbackContext) {
        lineGroups(params, callbackContext);
      }
    });
    actions.put("coverageLonLatLineReports", new Action() {
      @Override
      public void doAction(JSONObject params, CallbackContext callbackContext) {
        coverageLonLatLineReports(params, callbackContext);
      }
    });
    actions.put("coverageLonLatUriLineReports", new Action() {
      @Override
      public void doAction(JSONObject params, CallbackContext callbackContext) {
        coverageLonLatUriLineReports(params, callbackContext);
      }
    });
    actions.put("coverageRegionLineReports", new Action() {
      @Override
      public void doAction(JSONObject params, CallbackContext callbackContext) {
        coverageRegionLineReports(params, callbackContext);
      }
    });
    actions.put("coverageRegionUriLineReports", new Action() {
      @Override
      public void doAction(JSONObject params, CallbackContext callbackContext) {
        coverageRegionUriLineReports(params, callbackContext);
      }
    });
    actions.put("coverageLonLatLines", new Action() {
      @Override
      public void doAction(JSONObject params, CallbackContext callbackContext) {
        coverageLonLatLines(params, callbackContext);
      }
    });
    actions.put("coverageLonLatLinesId", new Action() {
      @Override
      public void doAction(JSONObject params, CallbackContext callbackContext) {
        coverageLonLatLinesId(params, callbackContext);
      }
    });
    actions.put("coverageLonLatUriLines", new Action() {
      @Override
      public void doAction(JSONObject params, CallbackContext callbackContext) {
        coverageLonLatUriLines(params, callbackContext);
      }
    });
    actions.put("coverageLonLatUriLinesId", new Action() {
      @Override
      public void doAction(JSONObject params, CallbackContext callbackContext) {
        coverageLonLatUriLinesId(params, callbackContext);
      }
    });
    actions.put("coverageRegionLines", new Action() {
      @Override
      public void doAction(JSONObject params, CallbackContext callbackContext) {
        coverageRegionLines(params, callbackContext);
      }
    });
    actions.put("coverageRegionLinesId", new Action() {
      @Override
      public void doAction(JSONObject params, CallbackContext callbackContext) {
        coverageRegionLinesId(params, callbackContext);
      }
    });
    actions.put("coverageRegionUriLines", new Action() {
      @Override
      public void doAction(JSONObject params, CallbackContext callbackContext) {
        coverageRegionUriLines(params, callbackContext);
      }
    });
    actions.put("coverageRegionUriLinesId", new Action() {
      @Override
      public void doAction(JSONObject params, CallbackContext callbackContext) {
        coverageRegionUriLinesId(params, callbackContext);
      }
    });
    actions.put("lines", new Action() {
      @Override
      public void doAction(JSONObject params, CallbackContext callbackContext) {
        lines(params, callbackContext);
      }
    });
    actions.put("coverageLonLatNetworks", new Action() {
      @Override
      public void doAction(JSONObject params, CallbackContext callbackContext) {
        coverageLonLatNetworks(params, callbackContext);
      }
    });
    actions.put("coverageLonLatNetworksId", new Action() {
      @Override
      public void doAction(JSONObject params, CallbackContext callbackContext) {
        coverageLonLatNetworksId(params, callbackContext);
      }
    });
    actions.put("coverageLonLatUriNetworks", new Action() {
      @Override
      public void doAction(JSONObject params, CallbackContext callbackContext) {
        coverageLonLatUriNetworks(params, callbackContext);
      }
    });
    actions.put("coverageLonLatUriNetworksId", new Action() {
      @Override
      public void doAction(JSONObject params, CallbackContext callbackContext) {
        coverageLonLatUriNetworksId(params, callbackContext);
      }
    });
    actions.put("coverageRegionNetworks", new Action() {
      @Override
      public void doAction(JSONObject params, CallbackContext callbackContext) {
        coverageRegionNetworks(params, callbackContext);
      }
    });
    actions.put("coverageRegionNetworksId", new Action() {
      @Override
      public void doAction(JSONObject params, CallbackContext callbackContext) {
        coverageRegionNetworksId(params, callbackContext);
      }
    });
    actions.put("coverageRegionUriNetworks", new Action() {
      @Override
      public void doAction(JSONObject params, CallbackContext callbackContext) {
        coverageRegionUriNetworks(params, callbackContext);
      }
    });
    actions.put("coverageRegionUriNetworksId", new Action() {
      @Override
      public void doAction(JSONObject params, CallbackContext callbackContext) {
        coverageRegionUriNetworksId(params, callbackContext);
      }
    });
    actions.put("networks", new Action() {
      @Override
      public void doAction(JSONObject params, CallbackContext callbackContext) {
        networks(params, callbackContext);
      }
    });
    actions.put("coverageLonLatArrivals", new Action() {
      @Override
      public void doAction(JSONObject params, CallbackContext callbackContext) {
        coverageLonLatArrivals(params, callbackContext);
      }
    });
    actions.put("coverageLonLatUriArrivals", new Action() {
      @Override
      public void doAction(JSONObject params, CallbackContext callbackContext) {
        coverageLonLatUriArrivals(params, callbackContext);
      }
    });
    actions.put("coverageRegionArrivals", new Action() {
      @Override
      public void doAction(JSONObject params, CallbackContext callbackContext) {
        coverageRegionArrivals(params, callbackContext);
      }
    });
    actions.put("coverageRegionUriArrivals", new Action() {
      @Override
      public void doAction(JSONObject params, CallbackContext callbackContext) {
        coverageRegionUriArrivals(params, callbackContext);
      }
    });
    actions.put("coverageLonLatDepartures", new Action() {
      @Override
      public void doAction(JSONObject params, CallbackContext callbackContext) {
        coverageLonLatDepartures(params, callbackContext);
      }
    });
    actions.put("coverageLonLatUriDepartures", new Action() {
      @Override
      public void doAction(JSONObject params, CallbackContext callbackContext) {
        coverageLonLatUriDepartures(params, callbackContext);
      }
    });
    actions.put("coverageRegionDepartures", new Action() {
      @Override
      public void doAction(JSONObject params, CallbackContext callbackContext) {
        coverageRegionDepartures(params, callbackContext);
      }
    });
    actions.put("coverageRegionUriDepartures", new Action() {
      @Override
      public void doAction(JSONObject params, CallbackContext callbackContext) {
        coverageRegionUriDepartures(params, callbackContext);
      }
    });
    actions.put("coverageLonLatPhysicalModes", new Action() {
      @Override
      public void doAction(JSONObject params, CallbackContext callbackContext) {
        coverageLonLatPhysicalModes(params, callbackContext);
      }
    });
    actions.put("coverageLonLatPhysicalModesId", new Action() {
      @Override
      public void doAction(JSONObject params, CallbackContext callbackContext) {
        coverageLonLatPhysicalModesId(params, callbackContext);
      }
    });
    actions.put("coverageLonLatUriPhysicalModes", new Action() {
      @Override
      public void doAction(JSONObject params, CallbackContext callbackContext) {
        coverageLonLatUriPhysicalModes(params, callbackContext);
      }
    });
    actions.put("coverageLonLatUriPhysicalModesId", new Action() {
      @Override
      public void doAction(JSONObject params, CallbackContext callbackContext) {
        coverageLonLatUriPhysicalModesId(params, callbackContext);
      }
    });
    actions.put("coverageRegionPhysicalModes", new Action() {
      @Override
      public void doAction(JSONObject params, CallbackContext callbackContext) {
        coverageRegionPhysicalModes(params, callbackContext);
      }
    });
    actions.put("coverageRegionPhysicalModesId", new Action() {
      @Override
      public void doAction(JSONObject params, CallbackContext callbackContext) {
        coverageRegionPhysicalModesId(params, callbackContext);
      }
    });
    actions.put("coverageRegionUriPhysicalModes", new Action() {
      @Override
      public void doAction(JSONObject params, CallbackContext callbackContext) {
        coverageRegionUriPhysicalModes(params, callbackContext);
      }
    });
    actions.put("coverageRegionUriPhysicalModesId", new Action() {
      @Override
      public void doAction(JSONObject params, CallbackContext callbackContext) {
        coverageRegionUriPhysicalModesId(params, callbackContext);
      }
    });
    actions.put("coverageLonLatPlacesId", new Action() {
      @Override
      public void doAction(JSONObject params, CallbackContext callbackContext) {
        coverageLonLatPlacesId(params, callbackContext);
      }
    });
    actions.put("coverageRegionPlacesId", new Action() {
      @Override
      public void doAction(JSONObject params, CallbackContext callbackContext) {
        coverageRegionPlacesId(params, callbackContext);
      }
    });
    actions.put("placesId", new Action() {
      @Override
      public void doAction(JSONObject params, CallbackContext callbackContext) {
        placesId(params, callbackContext);
      }
    });
    actions.put("coverageLonLatPlaces", new Action() {
      @Override
      public void doAction(JSONObject params, CallbackContext callbackContext) {
        coverageLonLatPlaces(params, callbackContext);
      }
    });
    actions.put("coverageRegionPlaces", new Action() {
      @Override
      public void doAction(JSONObject params, CallbackContext callbackContext) {
        coverageRegionPlaces(params, callbackContext);
      }
    });
    actions.put("places", new Action() {
      @Override
      public void doAction(JSONObject params, CallbackContext callbackContext) {
        places(params, callbackContext);
      }
    });
    actions.put("coordLonLatPlacesNearby", new Action() {
      @Override
      public void doAction(JSONObject params, CallbackContext callbackContext) {
        coordLonLatPlacesNearby(params, callbackContext);
      }
    });
    actions.put("coordsLonLatPlacesNearby", new Action() {
      @Override
      public void doAction(JSONObject params, CallbackContext callbackContext) {
        coordsLonLatPlacesNearby(params, callbackContext);
      }
    });
    actions.put("coverageLonLatPlacesNearby", new Action() {
      @Override
      public void doAction(JSONObject params, CallbackContext callbackContext) {
        coverageLonLatPlacesNearby(params, callbackContext);
      }
    });
    actions.put("coverageLonLatUriPlacesNearby", new Action() {
      @Override
      public void doAction(JSONObject params, CallbackContext callbackContext) {
        coverageLonLatUriPlacesNearby(params, callbackContext);
      }
    });
    actions.put("coverageRegionPlacesNearby", new Action() {
      @Override
      public void doAction(JSONObject params, CallbackContext callbackContext) {
        coverageRegionPlacesNearby(params, callbackContext);
      }
    });
    actions.put("coverageRegionUriPlacesNearby", new Action() {
      @Override
      public void doAction(JSONObject params, CallbackContext callbackContext) {
        coverageRegionUriPlacesNearby(params, callbackContext);
      }
    });
    actions.put("coverageLonLatPoiTypes", new Action() {
      @Override
      public void doAction(JSONObject params, CallbackContext callbackContext) {
        coverageLonLatPoiTypes(params, callbackContext);
      }
    });
    actions.put("coverageLonLatPoiTypesId", new Action() {
      @Override
      public void doAction(JSONObject params, CallbackContext callbackContext) {
        coverageLonLatPoiTypesId(params, callbackContext);
      }
    });
    actions.put("coverageLonLatUriPoiTypes", new Action() {
      @Override
      public void doAction(JSONObject params, CallbackContext callbackContext) {
        coverageLonLatUriPoiTypes(params, callbackContext);
      }
    });
    actions.put("coverageLonLatUriPoiTypesId", new Action() {
      @Override
      public void doAction(JSONObject params, CallbackContext callbackContext) {
        coverageLonLatUriPoiTypesId(params, callbackContext);
      }
    });
    actions.put("coverageRegionPoiTypes", new Action() {
      @Override
      public void doAction(JSONObject params, CallbackContext callbackContext) {
        coverageRegionPoiTypes(params, callbackContext);
      }
    });
    actions.put("coverageRegionPoiTypesId", new Action() {
      @Override
      public void doAction(JSONObject params, CallbackContext callbackContext) {
        coverageRegionPoiTypesId(params, callbackContext);
      }
    });
    actions.put("coverageRegionUriPoiTypes", new Action() {
      @Override
      public void doAction(JSONObject params, CallbackContext callbackContext) {
        coverageRegionUriPoiTypes(params, callbackContext);
      }
    });
    actions.put("coverageRegionUriPoiTypesId", new Action() {
      @Override
      public void doAction(JSONObject params, CallbackContext callbackContext) {
        coverageRegionUriPoiTypesId(params, callbackContext);
      }
    });
    actions.put("coverageLonLatPois", new Action() {
      @Override
      public void doAction(JSONObject params, CallbackContext callbackContext) {
        coverageLonLatPois(params, callbackContext);
      }
    });
    actions.put("coverageLonLatPoisId", new Action() {
      @Override
      public void doAction(JSONObject params, CallbackContext callbackContext) {
        coverageLonLatPoisId(params, callbackContext);
      }
    });
    actions.put("coverageLonLatUriPois", new Action() {
      @Override
      public void doAction(JSONObject params, CallbackContext callbackContext) {
        coverageLonLatUriPois(params, callbackContext);
      }
    });
    actions.put("coverageLonLatUriPoisId", new Action() {
      @Override
      public void doAction(JSONObject params, CallbackContext callbackContext) {
        coverageLonLatUriPoisId(params, callbackContext);
      }
    });
    actions.put("coverageRegionPois", new Action() {
      @Override
      public void doAction(JSONObject params, CallbackContext callbackContext) {
        coverageRegionPois(params, callbackContext);
      }
    });
    actions.put("coverageRegionPoisId", new Action() {
      @Override
      public void doAction(JSONObject params, CallbackContext callbackContext) {
        coverageRegionPoisId(params, callbackContext);
      }
    });
    actions.put("coverageRegionUriPois", new Action() {
      @Override
      public void doAction(JSONObject params, CallbackContext callbackContext) {
        coverageRegionUriPois(params, callbackContext);
      }
    });
    actions.put("coverageRegionUriPoisId", new Action() {
      @Override
      public void doAction(JSONObject params, CallbackContext callbackContext) {
        coverageRegionUriPoisId(params, callbackContext);
      }
    });
    actions.put("coverageLonLatPtObjects", new Action() {
      @Override
      public void doAction(JSONObject params, CallbackContext callbackContext) {
        coverageLonLatPtObjects(params, callbackContext);
      }
    });
    actions.put("coverageRegionPtObjects", new Action() {
      @Override
      public void doAction(JSONObject params, CallbackContext callbackContext) {
        coverageRegionPtObjects(params, callbackContext);
      }
    });
    actions.put("coverageLonLatUriRouteSchedules", new Action() {
      @Override
      public void doAction(JSONObject params, CallbackContext callbackContext) {
        coverageLonLatUriRouteSchedules(params, callbackContext);
      }
    });
    actions.put("coverageRegionUriRouteSchedules", new Action() {
      @Override
      public void doAction(JSONObject params, CallbackContext callbackContext) {
        coverageRegionUriRouteSchedules(params, callbackContext);
      }
    });
    actions.put("routeSchedules", new Action() {
      @Override
      public void doAction(JSONObject params, CallbackContext callbackContext) {
        routeSchedules(params, callbackContext);
      }
    });
    actions.put("coverageLonLatRoutes", new Action() {
      @Override
      public void doAction(JSONObject params, CallbackContext callbackContext) {
        coverageLonLatRoutes(params, callbackContext);
      }
    });
    actions.put("coverageLonLatRoutesId", new Action() {
      @Override
      public void doAction(JSONObject params, CallbackContext callbackContext) {
        coverageLonLatRoutesId(params, callbackContext);
      }
    });
    actions.put("coverageLonLatUriRoutes", new Action() {
      @Override
      public void doAction(JSONObject params, CallbackContext callbackContext) {
        coverageLonLatUriRoutes(params, callbackContext);
      }
    });
    actions.put("coverageLonLatUriRoutesId", new Action() {
      @Override
      public void doAction(JSONObject params, CallbackContext callbackContext) {
        coverageLonLatUriRoutesId(params, callbackContext);
      }
    });
    actions.put("coverageRegionRoutes", new Action() {
      @Override
      public void doAction(JSONObject params, CallbackContext callbackContext) {
        coverageRegionRoutes(params, callbackContext);
      }
    });
    actions.put("coverageRegionRoutesId", new Action() {
      @Override
      public void doAction(JSONObject params, CallbackContext callbackContext) {
        coverageRegionRoutesId(params, callbackContext);
      }
    });
    actions.put("coverageRegionUriRoutes", new Action() {
      @Override
      public void doAction(JSONObject params, CallbackContext callbackContext) {
        coverageRegionUriRoutes(params, callbackContext);
      }
    });
    actions.put("coverageRegionUriRoutesId", new Action() {
      @Override
      public void doAction(JSONObject params, CallbackContext callbackContext) {
        coverageRegionUriRoutesId(params, callbackContext);
      }
    });
    actions.put("routes", new Action() {
      @Override
      public void doAction(JSONObject params, CallbackContext callbackContext) {
        routes(params, callbackContext);
      }
    });
    actions.put("coverageLonLatStopAreas", new Action() {
      @Override
      public void doAction(JSONObject params, CallbackContext callbackContext) {
        coverageLonLatStopAreas(params, callbackContext);
      }
    });
    actions.put("coverageLonLatStopAreasId", new Action() {
      @Override
      public void doAction(JSONObject params, CallbackContext callbackContext) {
        coverageLonLatStopAreasId(params, callbackContext);
      }
    });
    actions.put("coverageLonLatUriStopAreas", new Action() {
      @Override
      public void doAction(JSONObject params, CallbackContext callbackContext) {
        coverageLonLatUriStopAreas(params, callbackContext);
      }
    });
    actions.put("coverageLonLatUriStopAreasId", new Action() {
      @Override
      public void doAction(JSONObject params, CallbackContext callbackContext) {
        coverageLonLatUriStopAreasId(params, callbackContext);
      }
    });
    actions.put("coverageRegionStopAreas", new Action() {
      @Override
      public void doAction(JSONObject params, CallbackContext callbackContext) {
        coverageRegionStopAreas(params, callbackContext);
      }
    });
    actions.put("coverageRegionStopAreasId", new Action() {
      @Override
      public void doAction(JSONObject params, CallbackContext callbackContext) {
        coverageRegionStopAreasId(params, callbackContext);
      }
    });
    actions.put("coverageRegionUriStopAreas", new Action() {
      @Override
      public void doAction(JSONObject params, CallbackContext callbackContext) {
        coverageRegionUriStopAreas(params, callbackContext);
      }
    });
    actions.put("coverageRegionUriStopAreasId", new Action() {
      @Override
      public void doAction(JSONObject params, CallbackContext callbackContext) {
        coverageRegionUriStopAreasId(params, callbackContext);
      }
    });
    actions.put("stopAreas", new Action() {
      @Override
      public void doAction(JSONObject params, CallbackContext callbackContext) {
        stopAreas(params, callbackContext);
      }
    });
    actions.put("coverageLonLatStopPoints", new Action() {
      @Override
      public void doAction(JSONObject params, CallbackContext callbackContext) {
        coverageLonLatStopPoints(params, callbackContext);
      }
    });
    actions.put("coverageLonLatStopPointsId", new Action() {
      @Override
      public void doAction(JSONObject params, CallbackContext callbackContext) {
        coverageLonLatStopPointsId(params, callbackContext);
      }
    });
    actions.put("coverageLonLatUriStopPoints", new Action() {
      @Override
      public void doAction(JSONObject params, CallbackContext callbackContext) {
        coverageLonLatUriStopPoints(params, callbackContext);
      }
    });
    actions.put("coverageLonLatUriStopPointsId", new Action() {
      @Override
      public void doAction(JSONObject params, CallbackContext callbackContext) {
        coverageLonLatUriStopPointsId(params, callbackContext);
      }
    });
    actions.put("coverageRegionStopPoints", new Action() {
      @Override
      public void doAction(JSONObject params, CallbackContext callbackContext) {
        coverageRegionStopPoints(params, callbackContext);
      }
    });
    actions.put("coverageRegionStopPointsId", new Action() {
      @Override
      public void doAction(JSONObject params, CallbackContext callbackContext) {
        coverageRegionStopPointsId(params, callbackContext);
      }
    });
    actions.put("coverageRegionUriStopPoints", new Action() {
      @Override
      public void doAction(JSONObject params, CallbackContext callbackContext) {
        coverageRegionUriStopPoints(params, callbackContext);
      }
    });
    actions.put("coverageRegionUriStopPointsId", new Action() {
      @Override
      public void doAction(JSONObject params, CallbackContext callbackContext) {
        coverageRegionUriStopPointsId(params, callbackContext);
      }
    });
    actions.put("stopPoints", new Action() {
      @Override
      public void doAction(JSONObject params, CallbackContext callbackContext) {
        stopPoints(params, callbackContext);
      }
    });
    actions.put("coverageLonLatUriStopSchedules", new Action() {
      @Override
      public void doAction(JSONObject params, CallbackContext callbackContext) {
        coverageLonLatUriStopSchedules(params, callbackContext);
      }
    });
    actions.put("coverageRegionUriStopSchedules", new Action() {
      @Override
      public void doAction(JSONObject params, CallbackContext callbackContext) {
        coverageRegionUriStopSchedules(params, callbackContext);
      }
    });
    actions.put("stopSchedules", new Action() {
      @Override
      public void doAction(JSONObject params, CallbackContext callbackContext) {
        stopSchedules(params, callbackContext);
      }
    });
    actions.put("coverageLonLatUriTerminusSchedules", new Action() {
      @Override
      public void doAction(JSONObject params, CallbackContext callbackContext) {
        coverageLonLatUriTerminusSchedules(params, callbackContext);
      }
    });
    actions.put("coverageRegionUriTerminusSchedules", new Action() {
      @Override
      public void doAction(JSONObject params, CallbackContext callbackContext) {
        coverageRegionUriTerminusSchedules(params, callbackContext);
      }
    });
    actions.put("terminusSchedules", new Action() {
      @Override
      public void doAction(JSONObject params, CallbackContext callbackContext) {
        terminusSchedules(params, callbackContext);
      }
    });
    actions.put("coverageLonLatTrafficReports", new Action() {
      @Override
      public void doAction(JSONObject params, CallbackContext callbackContext) {
        coverageLonLatTrafficReports(params, callbackContext);
      }
    });
    actions.put("coverageLonLatUriTrafficReports", new Action() {
      @Override
      public void doAction(JSONObject params, CallbackContext callbackContext) {
        coverageLonLatUriTrafficReports(params, callbackContext);
      }
    });
    actions.put("coverageRegionTrafficReports", new Action() {
      @Override
      public void doAction(JSONObject params, CallbackContext callbackContext) {
        coverageRegionTrafficReports(params, callbackContext);
      }
    });
    actions.put("coverageRegionUriTrafficReports", new Action() {
      @Override
      public void doAction(JSONObject params, CallbackContext callbackContext) {
        coverageRegionUriTrafficReports(params, callbackContext);
      }
    });
    actions.put("coverageLonLatTrips", new Action() {
      @Override
      public void doAction(JSONObject params, CallbackContext callbackContext) {
        coverageLonLatTrips(params, callbackContext);
      }
    });
    actions.put("coverageLonLatTripsId", new Action() {
      @Override
      public void doAction(JSONObject params, CallbackContext callbackContext) {
        coverageLonLatTripsId(params, callbackContext);
      }
    });
    actions.put("coverageLonLatUriTrips", new Action() {
      @Override
      public void doAction(JSONObject params, CallbackContext callbackContext) {
        coverageLonLatUriTrips(params, callbackContext);
      }
    });
    actions.put("coverageLonLatUriTripsId", new Action() {
      @Override
      public void doAction(JSONObject params, CallbackContext callbackContext) {
        coverageLonLatUriTripsId(params, callbackContext);
      }
    });
    actions.put("coverageRegionTrips", new Action() {
      @Override
      public void doAction(JSONObject params, CallbackContext callbackContext) {
        coverageRegionTrips(params, callbackContext);
      }
    });
    actions.put("coverageRegionTripsId", new Action() {
      @Override
      public void doAction(JSONObject params, CallbackContext callbackContext) {
        coverageRegionTripsId(params, callbackContext);
      }
    });
    actions.put("coverageRegionUriTrips", new Action() {
      @Override
      public void doAction(JSONObject params, CallbackContext callbackContext) {
        coverageRegionUriTrips(params, callbackContext);
      }
    });
    actions.put("coverageRegionUriTripsId", new Action() {
      @Override
      public void doAction(JSONObject params, CallbackContext callbackContext) {
        coverageRegionUriTripsId(params, callbackContext);
      }
    });
    actions.put("coverageLonLatUriVehicleJourneys", new Action() {
      @Override
      public void doAction(JSONObject params, CallbackContext callbackContext) {
        coverageLonLatUriVehicleJourneys(params, callbackContext);
      }
    });
    actions.put("coverageLonLatUriVehicleJourneysId", new Action() {
      @Override
      public void doAction(JSONObject params, CallbackContext callbackContext) {
        coverageLonLatUriVehicleJourneysId(params, callbackContext);
      }
    });
    actions.put("coverageLonLatVehicleJourneys", new Action() {
      @Override
      public void doAction(JSONObject params, CallbackContext callbackContext) {
        coverageLonLatVehicleJourneys(params, callbackContext);
      }
    });
    actions.put("coverageLonLatVehicleJourneysId", new Action() {
      @Override
      public void doAction(JSONObject params, CallbackContext callbackContext) {
        coverageLonLatVehicleJourneysId(params, callbackContext);
      }
    });
    actions.put("coverageRegionUriVehicleJourneys", new Action() {
      @Override
      public void doAction(JSONObject params, CallbackContext callbackContext) {
        coverageRegionUriVehicleJourneys(params, callbackContext);
      }
    });
    actions.put("coverageRegionUriVehicleJourneysId", new Action() {
      @Override
      public void doAction(JSONObject params, CallbackContext callbackContext) {
        coverageRegionUriVehicleJourneysId(params, callbackContext);
      }
    });
    actions.put("coverageRegionVehicleJourneys", new Action() {
      @Override
      public void doAction(JSONObject params, CallbackContext callbackContext) {
        coverageRegionVehicleJourneys(params, callbackContext);
      }
    });
    actions.put("coverageRegionVehicleJourneysId", new Action() {
      @Override
      public void doAction(JSONObject params, CallbackContext callbackContext) {
        coverageRegionVehicleJourneysId(params, callbackContext);
      }
    });
    actions.put("vehicleJourneys", new Action() {
      @Override
      public void doAction(JSONObject params, CallbackContext callbackContext) {
        vehicleJourneys(params, callbackContext);
      }
    });
    actions.put("init", new Action() {
      @Override
      public void doAction(JSONObject params, CallbackContext callbackContext) {
        init(params, callbackContext);
      }
    });
  }

  @Override
  public boolean execute(String action, JSONArray args, CallbackContext callbackContext) throws JSONException {
    if (actions.containsKey(action)) {
      Objects.requireNonNull(actions.get(action)).doAction(args.getJSONObject(0), callbackContext);
    } else {
      callbackContext.error("Action " + action + " not found");
    }

    return true;
  }

  private void init(JSONObject config, CallbackContext callbackContext) {
    this.token = config.optString("token");
    if (token.isEmpty()) {
      callbackContext.error("No token specified");
      return;
    }

    try {
      callbackContext.success("SDK created with token " + token);
    } catch (Exception e) {
      callbackContext.error(e.getMessage());
    }
  }

  private String escapeString(String str) {
    try {
      return URLEncoder.encode(str, "utf8").replaceAll("\\+", "%20");
    } catch (UnsupportedEncodingException e) {
      return str;
    }
  }

  private void coverageLonLatAddresses(final JSONObject params, final CallbackContext callbackContext) {
    cordova.getThreadPool().execute(() -> {
      try {
        HttpUrl.Builder urlBuilder = new HttpUrl.Builder()
          .scheme("https")
          .host("api.navitia.io")
          .addPathSegment("v1");
        Request.Builder requestBuilder = new Request.Builder()
          .header("Authorization", token);
        String path = "/coverage/{lon};{lat}/addresses".substring(1);

        if (params.has("lat") && (!params.getString("lat").isEmpty())) {
          path = path.replaceAll("\\{" + "lat" + "\\}", escapeString(String.valueOf(params.getLong("lat"))));
        }

        if (params.has("lon") && (!params.getString("lon").isEmpty())) {
          path = path.replaceAll("\\{" + "lon" + "\\}", escapeString(String.valueOf(params.getLong("lon"))));
        }

        HttpUrl url = urlBuilder
          .addPathSegments(path)
          .build();
        Request request = requestBuilder.url(url)
          .build();

        client.newCall(request).enqueue(new Callback() {

          @Override
          public void onFailure(@NonNull Call call, @NonNull IOException e) {
            String errorMessage = "Problem during request | " + String.valueOf(e.hashCode()) + ": " + e.getMessage();
            callbackContext.error(errorMessage);
          }

          @Override
          public void onResponse(@NonNull Call call, @NonNull Response response) {
            if (response.isSuccessful()) {
              try {
                JSONObject jsonObject = new JSONObject(Objects.requireNonNull(response.body()).string());
                callbackContext.success(jsonObject);
              } catch (Exception e) {
                String errorMessage = "Problem during response parsing";
                callbackContext.error(errorMessage);
              }
            } else {
              callbackContext.error("Unexpected code " + response.code() + " | message: " + response.message());
            }
          }
        });
      } catch (Exception e) {
        String errorMessage = "Problem during request building | " + e.hashCode() + ": " + e.getMessage();
        callbackContext.error(errorMessage);
      }
    });
  }

  private void coverageLonLatAddressesId(final JSONObject params, final CallbackContext callbackContext) {
    cordova.getThreadPool().execute(() -> {
      try {
        HttpUrl.Builder urlBuilder = new HttpUrl.Builder()
          .scheme("https")
          .host("api.navitia.io")
          .addPathSegment("v1");
        Request.Builder requestBuilder = new Request.Builder()
          .header("Authorization", token);
        String path = "/coverage/{lon};{lat}/addresses/{id}".substring(1);

        if (params.has("lat") && (!params.getString("lat").isEmpty())) {
          path = path.replaceAll("\\{" + "lat" + "\\}", escapeString(String.valueOf(params.getLong("lat"))));
        }

        if (params.has("lon") && (!params.getString("lon").isEmpty())) {
          path = path.replaceAll("\\{" + "lon" + "\\}", escapeString(String.valueOf(params.getLong("lon"))));
        }

        if (params.has("id") && (!params.getString("id").isEmpty())) {
          path = path.replaceAll("\\{" + "id" + "\\}", escapeString(params.getString("id")));
        }

        HttpUrl url = urlBuilder
          .addPathSegments(path)
          .build();
        Request request = requestBuilder.url(url)
          .build();

        client.newCall(request).enqueue(new Callback() {

          @Override
          public void onFailure(@NonNull Call call, @NonNull IOException e) {
            String errorMessage = "Problem during request | " + String.valueOf(e.hashCode()) + ": " + e.getMessage();
            callbackContext.error(errorMessage);
          }

          @Override
          public void onResponse(@NonNull Call call, @NonNull Response response) {
            if (response.isSuccessful()) {
              try {
                JSONObject jsonObject = new JSONObject(Objects.requireNonNull(response.body()).string());
                callbackContext.success(jsonObject);
              } catch (Exception e) {
                String errorMessage = "Problem during response parsing";
                callbackContext.error(errorMessage);
              }
            } else {
              callbackContext.error("Unexpected code " + response.code() + " | message: " + response.message());
            }
          }
        });
      } catch (Exception e) {
        String errorMessage = "Problem during request building | " + e.hashCode() + ": " + e.getMessage();
        callbackContext.error(errorMessage);
      }
    });
  }

  private void coverageLonLatUriAddresses(final JSONObject params, final CallbackContext callbackContext) {
    cordova.getThreadPool().execute(() -> {
      try {
        HttpUrl.Builder urlBuilder = new HttpUrl.Builder()
          .scheme("https")
          .host("api.navitia.io")
          .addPathSegment("v1");
        Request.Builder requestBuilder = new Request.Builder()
          .header("Authorization", token);
        String path = "/coverage/{lon};{lat}/{uri}/addresses".substring(1);

        if (params.has("lat") && (!params.getString("lat").isEmpty())) {
          path = path.replaceAll("\\{" + "lat" + "\\}", escapeString(String.valueOf(params.getLong("lat"))));
        }

        if (params.has("lon") && (!params.getString("lon").isEmpty())) {
          path = path.replaceAll("\\{" + "lon" + "\\}", escapeString(String.valueOf(params.getLong("lon"))));
        }

        if (params.has("uri") && (!params.getString("uri").isEmpty())) {
          path = path.replaceAll("\\{" + "uri" + "\\}", escapeString(params.getString("uri")));
        }

        HttpUrl url = urlBuilder
          .addPathSegments(path)
          .build();
        Request request = requestBuilder.url(url)
          .build();

        client.newCall(request).enqueue(new Callback() {

          @Override
          public void onFailure(@NonNull Call call, @NonNull IOException e) {
            String errorMessage = "Problem during request | " + String.valueOf(e.hashCode()) + ": " + e.getMessage();
            callbackContext.error(errorMessage);
          }

          @Override
          public void onResponse(@NonNull Call call, @NonNull Response response) {
            if (response.isSuccessful()) {
              try {
                JSONObject jsonObject = new JSONObject(Objects.requireNonNull(response.body()).string());
                callbackContext.success(jsonObject);
              } catch (Exception e) {
                String errorMessage = "Problem during response parsing";
                callbackContext.error(errorMessage);
              }
            } else {
              callbackContext.error("Unexpected code " + response.code() + " | message: " + response.message());
            }
          }
        });
      } catch (Exception e) {
        String errorMessage = "Problem during request building | " + e.hashCode() + ": " + e.getMessage();
        callbackContext.error(errorMessage);
      }
    });
  }

  private void coverageLonLatUriAddressesId(final JSONObject params, final CallbackContext callbackContext) {
    cordova.getThreadPool().execute(() -> {
      try {
        HttpUrl.Builder urlBuilder = new HttpUrl.Builder()
          .scheme("https")
          .host("api.navitia.io")
          .addPathSegment("v1");
        Request.Builder requestBuilder = new Request.Builder()
          .header("Authorization", token);
        String path = "/coverage/{lon};{lat}/{uri}/addresses/{id}".substring(1);

        if (params.has("lat") && (!params.getString("lat").isEmpty())) {
          path = path.replaceAll("\\{" + "lat" + "\\}", escapeString(String.valueOf(params.getLong("lat"))));
        }

        if (params.has("lon") && (!params.getString("lon").isEmpty())) {
          path = path.replaceAll("\\{" + "lon" + "\\}", escapeString(String.valueOf(params.getLong("lon"))));
        }

        if (params.has("uri") && (!params.getString("uri").isEmpty())) {
          path = path.replaceAll("\\{" + "uri" + "\\}", escapeString(params.getString("uri")));
        }

        if (params.has("id") && (!params.getString("id").isEmpty())) {
          path = path.replaceAll("\\{" + "id" + "\\}", escapeString(params.getString("id")));
        }

        HttpUrl url = urlBuilder
          .addPathSegments(path)
          .build();
        Request request = requestBuilder.url(url)
          .build();

        client.newCall(request).enqueue(new Callback() {

          @Override
          public void onFailure(@NonNull Call call, @NonNull IOException e) {
            String errorMessage = "Problem during request | " + String.valueOf(e.hashCode()) + ": " + e.getMessage();
            callbackContext.error(errorMessage);
          }

          @Override
          public void onResponse(@NonNull Call call, @NonNull Response response) {
            if (response.isSuccessful()) {
              try {
                JSONObject jsonObject = new JSONObject(Objects.requireNonNull(response.body()).string());
                callbackContext.success(jsonObject);
              } catch (Exception e) {
                String errorMessage = "Problem during response parsing";
                callbackContext.error(errorMessage);
              }
            } else {
              callbackContext.error("Unexpected code " + response.code() + " | message: " + response.message());
            }
          }
        });
      } catch (Exception e) {
        String errorMessage = "Problem during request building | " + e.hashCode() + ": " + e.getMessage();
        callbackContext.error(errorMessage);
      }
    });
  }

  private void coverageRegionAddresses(final JSONObject params, final CallbackContext callbackContext) {
    cordova.getThreadPool().execute(() -> {
      try {
        HttpUrl.Builder urlBuilder = new HttpUrl.Builder()
          .scheme("https")
          .host("api.navitia.io")
          .addPathSegment("v1");
        Request.Builder requestBuilder = new Request.Builder()
          .header("Authorization", token);
        String path = "/coverage/{region}/addresses".substring(1);

        if (params.has("region") && (!params.getString("region").isEmpty())) {
          path = path.replaceAll("\\{" + "region" + "\\}", escapeString(params.getString("region")));
        }

        HttpUrl url = urlBuilder
          .addPathSegments(path)
          .build();
        Request request = requestBuilder.url(url)
          .build();

        client.newCall(request).enqueue(new Callback() {

          @Override
          public void onFailure(@NonNull Call call, @NonNull IOException e) {
            String errorMessage = "Problem during request | " + String.valueOf(e.hashCode()) + ": " + e.getMessage();
            callbackContext.error(errorMessage);
          }

          @Override
          public void onResponse(@NonNull Call call, @NonNull Response response) {
            if (response.isSuccessful()) {
              try {
                JSONObject jsonObject = new JSONObject(Objects.requireNonNull(response.body()).string());
                callbackContext.success(jsonObject);
              } catch (Exception e) {
                String errorMessage = "Problem during response parsing";
                callbackContext.error(errorMessage);
              }
            } else {
              callbackContext.error("Unexpected code " + response.code() + " | message: " + response.message());
            }
          }
        });
      } catch (Exception e) {
        String errorMessage = "Problem during request building | " + e.hashCode() + ": " + e.getMessage();
        callbackContext.error(errorMessage);
      }
    });
  }

  private void coverageRegionAddressesId(final JSONObject params, final CallbackContext callbackContext) {
    cordova.getThreadPool().execute(() -> {
      try {
        HttpUrl.Builder urlBuilder = new HttpUrl.Builder()
          .scheme("https")
          .host("api.navitia.io")
          .addPathSegment("v1");
        Request.Builder requestBuilder = new Request.Builder()
          .header("Authorization", token);
        String path = "/coverage/{region}/addresses/{id}".substring(1);

        if (params.has("region") && (!params.getString("region").isEmpty())) {
          path = path.replaceAll("\\{" + "region" + "\\}", escapeString(params.getString("region")));
        }

        if (params.has("id") && (!params.getString("id").isEmpty())) {
          path = path.replaceAll("\\{" + "id" + "\\}", escapeString(params.getString("id")));
        }

        HttpUrl url = urlBuilder
          .addPathSegments(path)
          .build();
        Request request = requestBuilder.url(url)
          .build();

        client.newCall(request).enqueue(new Callback() {

          @Override
          public void onFailure(@NonNull Call call, @NonNull IOException e) {
            String errorMessage = "Problem during request | " + String.valueOf(e.hashCode()) + ": " + e.getMessage();
            callbackContext.error(errorMessage);
          }

          @Override
          public void onResponse(@NonNull Call call, @NonNull Response response) {
            if (response.isSuccessful()) {
              try {
                JSONObject jsonObject = new JSONObject(Objects.requireNonNull(response.body()).string());
                callbackContext.success(jsonObject);
              } catch (Exception e) {
                String errorMessage = "Problem during response parsing";
                callbackContext.error(errorMessage);
              }
            } else {
              callbackContext.error("Unexpected code " + response.code() + " | message: " + response.message());
            }
          }
        });
      } catch (Exception e) {
        String errorMessage = "Problem during request building | " + e.hashCode() + ": " + e.getMessage();
        callbackContext.error(errorMessage);
      }
    });
  }

  private void coverageRegionUriAddresses(final JSONObject params, final CallbackContext callbackContext) {
    cordova.getThreadPool().execute(() -> {
      try {
        HttpUrl.Builder urlBuilder = new HttpUrl.Builder()
          .scheme("https")
          .host("api.navitia.io")
          .addPathSegment("v1");
        Request.Builder requestBuilder = new Request.Builder()
          .header("Authorization", token);
        String path = "/coverage/{region}/{uri}/addresses".substring(1);

        if (params.has("region") && (!params.getString("region").isEmpty())) {
          path = path.replaceAll("\\{" + "region" + "\\}", escapeString(params.getString("region")));
        }

        if (params.has("uri") && (!params.getString("uri").isEmpty())) {
          path = path.replaceAll("\\{" + "uri" + "\\}", escapeString(params.getString("uri")));
        }

        HttpUrl url = urlBuilder
          .addPathSegments(path)
          .build();
        Request request = requestBuilder.url(url)
          .build();

        client.newCall(request).enqueue(new Callback() {

          @Override
          public void onFailure(@NonNull Call call, @NonNull IOException e) {
            String errorMessage = "Problem during request | " + String.valueOf(e.hashCode()) + ": " + e.getMessage();
            callbackContext.error(errorMessage);
          }

          @Override
          public void onResponse(@NonNull Call call, @NonNull Response response) {
            if (response.isSuccessful()) {
              try {
                JSONObject jsonObject = new JSONObject(Objects.requireNonNull(response.body()).string());
                callbackContext.success(jsonObject);
              } catch (Exception e) {
                String errorMessage = "Problem during response parsing";
                callbackContext.error(errorMessage);
              }
            } else {
              callbackContext.error("Unexpected code " + response.code() + " | message: " + response.message());
            }
          }
        });
      } catch (Exception e) {
        String errorMessage = "Problem during request building | " + e.hashCode() + ": " + e.getMessage();
        callbackContext.error(errorMessage);
      }
    });
  }

  private void coverageRegionUriAddressesId(final JSONObject params, final CallbackContext callbackContext) {
    cordova.getThreadPool().execute(() -> {
      try {
        HttpUrl.Builder urlBuilder = new HttpUrl.Builder()
          .scheme("https")
          .host("api.navitia.io")
          .addPathSegment("v1");
        Request.Builder requestBuilder = new Request.Builder()
          .header("Authorization", token);
        String path = "/coverage/{region}/{uri}/addresses/{id}".substring(1);

        if (params.has("region") && (!params.getString("region").isEmpty())) {
          path = path.replaceAll("\\{" + "region" + "\\}", escapeString(params.getString("region")));
        }

        if (params.has("uri") && (!params.getString("uri").isEmpty())) {
          path = path.replaceAll("\\{" + "uri" + "\\}", escapeString(params.getString("uri")));
        }

        if (params.has("id") && (!params.getString("id").isEmpty())) {
          path = path.replaceAll("\\{" + "id" + "\\}", escapeString(params.getString("id")));
        }

        HttpUrl url = urlBuilder
          .addPathSegments(path)
          .build();
        Request request = requestBuilder.url(url)
          .build();

        client.newCall(request).enqueue(new Callback() {

          @Override
          public void onFailure(@NonNull Call call, @NonNull IOException e) {
            String errorMessage = "Problem during request | " + String.valueOf(e.hashCode()) + ": " + e.getMessage();
            callbackContext.error(errorMessage);
          }

          @Override
          public void onResponse(@NonNull Call call, @NonNull Response response) {
            if (response.isSuccessful()) {
              try {
                JSONObject jsonObject = new JSONObject(Objects.requireNonNull(response.body()).string());
                callbackContext.success(jsonObject);
              } catch (Exception e) {
                String errorMessage = "Problem during response parsing";
                callbackContext.error(errorMessage);
              }
            } else {
              callbackContext.error("Unexpected code " + response.code() + " | message: " + response.message());
            }
          }
        });
      } catch (Exception e) {
        String errorMessage = "Problem during request building | " + e.hashCode() + ": " + e.getMessage();
        callbackContext.error(errorMessage);
      }
    });
  }

  private void coverageLonLatCalendars(final JSONObject params, final CallbackContext callbackContext) {
    cordova.getThreadPool().execute(() -> {
      try {
        HttpUrl.Builder urlBuilder = new HttpUrl.Builder()
          .scheme("https")
          .host("api.navitia.io")
          .addPathSegment("v1");
        Request.Builder requestBuilder = new Request.Builder()
          .header("Authorization", token);
        String path = "/coverage/{lon};{lat}/calendars".substring(1);

        if (params.has("lat") && (!params.getString("lat").isEmpty())) {
          path = path.replaceAll("\\{" + "lat" + "\\}", escapeString(String.valueOf(params.getLong("lat"))));
        }

        if (params.has("lon") && (!params.getString("lon").isEmpty())) {
          path = path.replaceAll("\\{" + "lon" + "\\}", escapeString(String.valueOf(params.getLong("lon"))));
        }

        if (params.has("depth") && (!params.getString("depth").isEmpty())) {
          urlBuilder.addQueryParameter("depth", escapeString(String.valueOf(params.getInt("depth"))));
        }

        if (params.has("count") && (!params.getString("count").isEmpty())) {
          urlBuilder.addQueryParameter("count", escapeString(String.valueOf(params.getInt("count"))));
        }

        if (params.has("startPage") && (!params.getString("startPage").isEmpty())) {
          urlBuilder.addQueryParameter("start_page", escapeString(String.valueOf(params.getInt("startPage"))));
        }

        if (params.has("startDate") && (!params.getString("startDate").isEmpty())) {
          urlBuilder.addQueryParameter("start_date", escapeString(params.getString("startDate")));
        }

        if (params.has("endDate") && (!params.getString("endDate").isEmpty())) {
          urlBuilder.addQueryParameter("end_date", escapeString(params.getString("endDate")));
        }

        if (params.has("forbiddenId") && (!params.getString("forbiddenId").isEmpty())) {
          urlBuilder.addQueryParameter("forbidden_id[]", escapeString(String.valueOf(params.getJSONArray("forbiddenId"))));
        }

        if (params.has("forbiddenUris") && (!params.getString("forbiddenUris").isEmpty())) {
          urlBuilder.addQueryParameter("forbidden_uris[]", escapeString(String.valueOf(params.getJSONArray("forbiddenUris"))));
        }

        if (params.has("distance") && (!params.getString("distance").isEmpty())) {
          urlBuilder.addQueryParameter("distance", escapeString(String.valueOf(params.getInt("distance"))));
        }

        HttpUrl url = urlBuilder
          .addPathSegments(path)
          .build();
        Request request = requestBuilder.url(url)
          .build();

        client.newCall(request).enqueue(new Callback() {

          @Override
          public void onFailure(@NonNull Call call, @NonNull IOException e) {
            String errorMessage = "Problem during request | " + String.valueOf(e.hashCode()) + ": " + e.getMessage();
            callbackContext.error(errorMessage);
          }

          @Override
          public void onResponse(@NonNull Call call, @NonNull Response response) {
            if (response.isSuccessful()) {
              try {
                JSONObject jsonObject = new JSONObject(Objects.requireNonNull(response.body()).string());
                callbackContext.success(jsonObject);
              } catch (Exception e) {
                String errorMessage = "Problem during response parsing";
                callbackContext.error(errorMessage);
              }
            } else {
              callbackContext.error("Unexpected code " + response.code() + " | message: " + response.message());
            }
          }
        });
      } catch (Exception e) {
        String errorMessage = "Problem during request building | " + e.hashCode() + ": " + e.getMessage();
        callbackContext.error(errorMessage);
      }
    });
  }

  private void coverageLonLatCalendarsId(final JSONObject params, final CallbackContext callbackContext) {
    cordova.getThreadPool().execute(() -> {
      try {
        HttpUrl.Builder urlBuilder = new HttpUrl.Builder()
          .scheme("https")
          .host("api.navitia.io")
          .addPathSegment("v1");
        Request.Builder requestBuilder = new Request.Builder()
          .header("Authorization", token);
        String path = "/coverage/{lon};{lat}/calendars/{id}".substring(1);

        if (params.has("lat") && (!params.getString("lat").isEmpty())) {
          path = path.replaceAll("\\{" + "lat" + "\\}", escapeString(String.valueOf(params.getLong("lat"))));
        }

        if (params.has("lon") && (!params.getString("lon").isEmpty())) {
          path = path.replaceAll("\\{" + "lon" + "\\}", escapeString(String.valueOf(params.getLong("lon"))));
        }

        if (params.has("id") && (!params.getString("id").isEmpty())) {
          path = path.replaceAll("\\{" + "id" + "\\}", escapeString(params.getString("id")));
        }

        if (params.has("depth") && (!params.getString("depth").isEmpty())) {
          urlBuilder.addQueryParameter("depth", escapeString(String.valueOf(params.getInt("depth"))));
        }

        if (params.has("count") && (!params.getString("count").isEmpty())) {
          urlBuilder.addQueryParameter("count", escapeString(String.valueOf(params.getInt("count"))));
        }

        if (params.has("startPage") && (!params.getString("startPage").isEmpty())) {
          urlBuilder.addQueryParameter("start_page", escapeString(String.valueOf(params.getInt("startPage"))));
        }

        if (params.has("startDate") && (!params.getString("startDate").isEmpty())) {
          urlBuilder.addQueryParameter("start_date", escapeString(params.getString("startDate")));
        }

        if (params.has("endDate") && (!params.getString("endDate").isEmpty())) {
          urlBuilder.addQueryParameter("end_date", escapeString(params.getString("endDate")));
        }

        if (params.has("forbiddenId") && (!params.getString("forbiddenId").isEmpty())) {
          urlBuilder.addQueryParameter("forbidden_id[]", escapeString(String.valueOf(params.getJSONArray("forbiddenId"))));
        }

        if (params.has("forbiddenUris") && (!params.getString("forbiddenUris").isEmpty())) {
          urlBuilder.addQueryParameter("forbidden_uris[]", escapeString(String.valueOf(params.getJSONArray("forbiddenUris"))));
        }

        if (params.has("distance") && (!params.getString("distance").isEmpty())) {
          urlBuilder.addQueryParameter("distance", escapeString(String.valueOf(params.getInt("distance"))));
        }

        HttpUrl url = urlBuilder
          .addPathSegments(path)
          .build();
        Request request = requestBuilder.url(url)
          .build();

        client.newCall(request).enqueue(new Callback() {

          @Override
          public void onFailure(@NonNull Call call, @NonNull IOException e) {
            String errorMessage = "Problem during request | " + String.valueOf(e.hashCode()) + ": " + e.getMessage();
            callbackContext.error(errorMessage);
          }

          @Override
          public void onResponse(@NonNull Call call, @NonNull Response response) {
            if (response.isSuccessful()) {
              try {
                JSONObject jsonObject = new JSONObject(Objects.requireNonNull(response.body()).string());
                callbackContext.success(jsonObject);
              } catch (Exception e) {
                String errorMessage = "Problem during response parsing";
                callbackContext.error(errorMessage);
              }
            } else {
              callbackContext.error("Unexpected code " + response.code() + " | message: " + response.message());
            }
          }
        });
      } catch (Exception e) {
        String errorMessage = "Problem during request building | " + e.hashCode() + ": " + e.getMessage();
        callbackContext.error(errorMessage);
      }
    });
  }

  private void coverageLonLatUriCalendars(final JSONObject params, final CallbackContext callbackContext) {
    cordova.getThreadPool().execute(() -> {
      try {
        HttpUrl.Builder urlBuilder = new HttpUrl.Builder()
          .scheme("https")
          .host("api.navitia.io")
          .addPathSegment("v1");
        Request.Builder requestBuilder = new Request.Builder()
          .header("Authorization", token);
        String path = "/coverage/{lon};{lat}/{uri}/calendars".substring(1);

        if (params.has("lat") && (!params.getString("lat").isEmpty())) {
          path = path.replaceAll("\\{" + "lat" + "\\}", escapeString(String.valueOf(params.getLong("lat"))));
        }

        if (params.has("lon") && (!params.getString("lon").isEmpty())) {
          path = path.replaceAll("\\{" + "lon" + "\\}", escapeString(String.valueOf(params.getLong("lon"))));
        }

        if (params.has("uri") && (!params.getString("uri").isEmpty())) {
          path = path.replaceAll("\\{" + "uri" + "\\}", escapeString(params.getString("uri")));
        }

        if (params.has("depth") && (!params.getString("depth").isEmpty())) {
          urlBuilder.addQueryParameter("depth", escapeString(String.valueOf(params.getInt("depth"))));
        }

        if (params.has("count") && (!params.getString("count").isEmpty())) {
          urlBuilder.addQueryParameter("count", escapeString(String.valueOf(params.getInt("count"))));
        }

        if (params.has("startPage") && (!params.getString("startPage").isEmpty())) {
          urlBuilder.addQueryParameter("start_page", escapeString(String.valueOf(params.getInt("startPage"))));
        }

        if (params.has("startDate") && (!params.getString("startDate").isEmpty())) {
          urlBuilder.addQueryParameter("start_date", escapeString(params.getString("startDate")));
        }

        if (params.has("endDate") && (!params.getString("endDate").isEmpty())) {
          urlBuilder.addQueryParameter("end_date", escapeString(params.getString("endDate")));
        }

        if (params.has("forbiddenId") && (!params.getString("forbiddenId").isEmpty())) {
          urlBuilder.addQueryParameter("forbidden_id[]", escapeString(String.valueOf(params.getJSONArray("forbiddenId"))));
        }

        if (params.has("forbiddenUris") && (!params.getString("forbiddenUris").isEmpty())) {
          urlBuilder.addQueryParameter("forbidden_uris[]", escapeString(String.valueOf(params.getJSONArray("forbiddenUris"))));
        }

        if (params.has("distance") && (!params.getString("distance").isEmpty())) {
          urlBuilder.addQueryParameter("distance", escapeString(String.valueOf(params.getInt("distance"))));
        }

        HttpUrl url = urlBuilder
          .addPathSegments(path)
          .build();
        Request request = requestBuilder.url(url)
          .build();

        client.newCall(request).enqueue(new Callback() {

          @Override
          public void onFailure(@NonNull Call call, @NonNull IOException e) {
            String errorMessage = "Problem during request | " + String.valueOf(e.hashCode()) + ": " + e.getMessage();
            callbackContext.error(errorMessage);
          }

          @Override
          public void onResponse(@NonNull Call call, @NonNull Response response) {
            if (response.isSuccessful()) {
              try {
                JSONObject jsonObject = new JSONObject(Objects.requireNonNull(response.body()).string());
                callbackContext.success(jsonObject);
              } catch (Exception e) {
                String errorMessage = "Problem during response parsing";
                callbackContext.error(errorMessage);
              }
            } else {
              callbackContext.error("Unexpected code " + response.code() + " | message: " + response.message());
            }
          }
        });
      } catch (Exception e) {
        String errorMessage = "Problem during request building | " + e.hashCode() + ": " + e.getMessage();
        callbackContext.error(errorMessage);
      }
    });
  }

  private void coverageRegionCalendars(final JSONObject params, final CallbackContext callbackContext) {
    cordova.getThreadPool().execute(() -> {
      try {
        HttpUrl.Builder urlBuilder = new HttpUrl.Builder()
          .scheme("https")
          .host("api.navitia.io")
          .addPathSegment("v1");
        Request.Builder requestBuilder = new Request.Builder()
          .header("Authorization", token);
        String path = "/coverage/{region}/calendars".substring(1);

        if (params.has("region") && (!params.getString("region").isEmpty())) {
          path = path.replaceAll("\\{" + "region" + "\\}", escapeString(params.getString("region")));
        }

        if (params.has("depth") && (!params.getString("depth").isEmpty())) {
          urlBuilder.addQueryParameter("depth", escapeString(String.valueOf(params.getInt("depth"))));
        }

        if (params.has("count") && (!params.getString("count").isEmpty())) {
          urlBuilder.addQueryParameter("count", escapeString(String.valueOf(params.getInt("count"))));
        }

        if (params.has("startPage") && (!params.getString("startPage").isEmpty())) {
          urlBuilder.addQueryParameter("start_page", escapeString(String.valueOf(params.getInt("startPage"))));
        }

        if (params.has("startDate") && (!params.getString("startDate").isEmpty())) {
          urlBuilder.addQueryParameter("start_date", escapeString(params.getString("startDate")));
        }

        if (params.has("endDate") && (!params.getString("endDate").isEmpty())) {
          urlBuilder.addQueryParameter("end_date", escapeString(params.getString("endDate")));
        }

        if (params.has("forbiddenId") && (!params.getString("forbiddenId").isEmpty())) {
          urlBuilder.addQueryParameter("forbidden_id[]", escapeString(String.valueOf(params.getJSONArray("forbiddenId"))));
        }

        if (params.has("forbiddenUris") && (!params.getString("forbiddenUris").isEmpty())) {
          urlBuilder.addQueryParameter("forbidden_uris[]", escapeString(String.valueOf(params.getJSONArray("forbiddenUris"))));
        }

        if (params.has("distance") && (!params.getString("distance").isEmpty())) {
          urlBuilder.addQueryParameter("distance", escapeString(String.valueOf(params.getInt("distance"))));
        }

        HttpUrl url = urlBuilder
          .addPathSegments(path)
          .build();
        Request request = requestBuilder.url(url)
          .build();

        client.newCall(request).enqueue(new Callback() {

          @Override
          public void onFailure(@NonNull Call call, @NonNull IOException e) {
            String errorMessage = "Problem during request | " + String.valueOf(e.hashCode()) + ": " + e.getMessage();
            callbackContext.error(errorMessage);
          }

          @Override
          public void onResponse(@NonNull Call call, @NonNull Response response) {
            if (response.isSuccessful()) {
              try {
                JSONObject jsonObject = new JSONObject(Objects.requireNonNull(response.body()).string());
                callbackContext.success(jsonObject);
              } catch (Exception e) {
                String errorMessage = "Problem during response parsing";
                callbackContext.error(errorMessage);
              }
            } else {
              callbackContext.error("Unexpected code " + response.code() + " | message: " + response.message());
            }
          }
        });
      } catch (Exception e) {
        String errorMessage = "Problem during request building | " + e.hashCode() + ": " + e.getMessage();
        callbackContext.error(errorMessage);
      }
    });
  }

  private void coverageRegionCalendarsId(final JSONObject params, final CallbackContext callbackContext) {
    cordova.getThreadPool().execute(() -> {
      try {
        HttpUrl.Builder urlBuilder = new HttpUrl.Builder()
          .scheme("https")
          .host("api.navitia.io")
          .addPathSegment("v1");
        Request.Builder requestBuilder = new Request.Builder()
          .header("Authorization", token);
        String path = "/coverage/{region}/calendars/{id}".substring(1);

        if (params.has("region") && (!params.getString("region").isEmpty())) {
          path = path.replaceAll("\\{" + "region" + "\\}", escapeString(params.getString("region")));
        }

        if (params.has("id") && (!params.getString("id").isEmpty())) {
          path = path.replaceAll("\\{" + "id" + "\\}", escapeString(params.getString("id")));
        }

        if (params.has("depth") && (!params.getString("depth").isEmpty())) {
          urlBuilder.addQueryParameter("depth", escapeString(String.valueOf(params.getInt("depth"))));
        }

        if (params.has("count") && (!params.getString("count").isEmpty())) {
          urlBuilder.addQueryParameter("count", escapeString(String.valueOf(params.getInt("count"))));
        }

        if (params.has("startPage") && (!params.getString("startPage").isEmpty())) {
          urlBuilder.addQueryParameter("start_page", escapeString(String.valueOf(params.getInt("startPage"))));
        }

        if (params.has("startDate") && (!params.getString("startDate").isEmpty())) {
          urlBuilder.addQueryParameter("start_date", escapeString(params.getString("startDate")));
        }

        if (params.has("endDate") && (!params.getString("endDate").isEmpty())) {
          urlBuilder.addQueryParameter("end_date", escapeString(params.getString("endDate")));
        }

        if (params.has("forbiddenId") && (!params.getString("forbiddenId").isEmpty())) {
          urlBuilder.addQueryParameter("forbidden_id[]", escapeString(String.valueOf(params.getJSONArray("forbiddenId"))));
        }

        if (params.has("forbiddenUris") && (!params.getString("forbiddenUris").isEmpty())) {
          urlBuilder.addQueryParameter("forbidden_uris[]", escapeString(String.valueOf(params.getJSONArray("forbiddenUris"))));
        }

        if (params.has("distance") && (!params.getString("distance").isEmpty())) {
          urlBuilder.addQueryParameter("distance", escapeString(String.valueOf(params.getInt("distance"))));
        }

        HttpUrl url = urlBuilder
          .addPathSegments(path)
          .build();
        Request request = requestBuilder.url(url)
          .build();

        client.newCall(request).enqueue(new Callback() {

          @Override
          public void onFailure(@NonNull Call call, @NonNull IOException e) {
            String errorMessage = "Problem during request | " + String.valueOf(e.hashCode()) + ": " + e.getMessage();
            callbackContext.error(errorMessage);
          }

          @Override
          public void onResponse(@NonNull Call call, @NonNull Response response) {
            if (response.isSuccessful()) {
              try {
                JSONObject jsonObject = new JSONObject(Objects.requireNonNull(response.body()).string());
                callbackContext.success(jsonObject);
              } catch (Exception e) {
                String errorMessage = "Problem during response parsing";
                callbackContext.error(errorMessage);
              }
            } else {
              callbackContext.error("Unexpected code " + response.code() + " | message: " + response.message());
            }
          }
        });
      } catch (Exception e) {
        String errorMessage = "Problem during request building | " + e.hashCode() + ": " + e.getMessage();
        callbackContext.error(errorMessage);
      }
    });
  }

  private void coverageRegionUriCalendars(final JSONObject params, final CallbackContext callbackContext) {
    cordova.getThreadPool().execute(() -> {
      try {
        HttpUrl.Builder urlBuilder = new HttpUrl.Builder()
          .scheme("https")
          .host("api.navitia.io")
          .addPathSegment("v1");
        Request.Builder requestBuilder = new Request.Builder()
          .header("Authorization", token);
        String path = "/coverage/{region}/{uri}/calendars".substring(1);

        if (params.has("region") && (!params.getString("region").isEmpty())) {
          path = path.replaceAll("\\{" + "region" + "\\}", escapeString(params.getString("region")));
        }

        if (params.has("uri") && (!params.getString("uri").isEmpty())) {
          path = path.replaceAll("\\{" + "uri" + "\\}", escapeString(params.getString("uri")));
        }

        if (params.has("depth") && (!params.getString("depth").isEmpty())) {
          urlBuilder.addQueryParameter("depth", escapeString(String.valueOf(params.getInt("depth"))));
        }

        if (params.has("count") && (!params.getString("count").isEmpty())) {
          urlBuilder.addQueryParameter("count", escapeString(String.valueOf(params.getInt("count"))));
        }

        if (params.has("startPage") && (!params.getString("startPage").isEmpty())) {
          urlBuilder.addQueryParameter("start_page", escapeString(String.valueOf(params.getInt("startPage"))));
        }

        if (params.has("startDate") && (!params.getString("startDate").isEmpty())) {
          urlBuilder.addQueryParameter("start_date", escapeString(params.getString("startDate")));
        }

        if (params.has("endDate") && (!params.getString("endDate").isEmpty())) {
          urlBuilder.addQueryParameter("end_date", escapeString(params.getString("endDate")));
        }

        if (params.has("forbiddenId") && (!params.getString("forbiddenId").isEmpty())) {
          urlBuilder.addQueryParameter("forbidden_id[]", escapeString(String.valueOf(params.getJSONArray("forbiddenId"))));
        }

        if (params.has("forbiddenUris") && (!params.getString("forbiddenUris").isEmpty())) {
          urlBuilder.addQueryParameter("forbidden_uris[]", escapeString(String.valueOf(params.getJSONArray("forbiddenUris"))));
        }

        if (params.has("distance") && (!params.getString("distance").isEmpty())) {
          urlBuilder.addQueryParameter("distance", escapeString(String.valueOf(params.getInt("distance"))));
        }

        HttpUrl url = urlBuilder
          .addPathSegments(path)
          .build();
        Request request = requestBuilder.url(url)
          .build();

        client.newCall(request).enqueue(new Callback() {

          @Override
          public void onFailure(@NonNull Call call, @NonNull IOException e) {
            String errorMessage = "Problem during request | " + String.valueOf(e.hashCode()) + ": " + e.getMessage();
            callbackContext.error(errorMessage);
          }

          @Override
          public void onResponse(@NonNull Call call, @NonNull Response response) {
            if (response.isSuccessful()) {
              try {
                JSONObject jsonObject = new JSONObject(Objects.requireNonNull(response.body()).string());
                callbackContext.success(jsonObject);
              } catch (Exception e) {
                String errorMessage = "Problem during response parsing";
                callbackContext.error(errorMessage);
              }
            } else {
              callbackContext.error("Unexpected code " + response.code() + " | message: " + response.message());
            }
          }
        });
      } catch (Exception e) {
        String errorMessage = "Problem during request building | " + e.hashCode() + ": " + e.getMessage();
        callbackContext.error(errorMessage);
      }
    });
  }

  private void coverageLonLatCommercialModes(final JSONObject params, final CallbackContext callbackContext) {
    cordova.getThreadPool().execute(() -> {
      try {
        HttpUrl.Builder urlBuilder = new HttpUrl.Builder()
          .scheme("https")
          .host("api.navitia.io")
          .addPathSegment("v1");
        Request.Builder requestBuilder = new Request.Builder()
          .header("Authorization", token);
        String path = "/coverage/{lon};{lat}/commercial_modes".substring(1);

        if (params.has("lat") && (!params.getString("lat").isEmpty())) {
          path = path.replaceAll("\\{" + "lat" + "\\}", escapeString(String.valueOf(params.getLong("lat"))));
        }

        if (params.has("lon") && (!params.getString("lon").isEmpty())) {
          path = path.replaceAll("\\{" + "lon" + "\\}", escapeString(String.valueOf(params.getLong("lon"))));
        }

        if (params.has("startPage") && (!params.getString("startPage").isEmpty())) {
          urlBuilder.addQueryParameter("start_page", escapeString(String.valueOf(params.getInt("startPage"))));
        }

        if (params.has("count") && (!params.getString("count").isEmpty())) {
          urlBuilder.addQueryParameter("count", escapeString(String.valueOf(params.getInt("count"))));
        }

        if (params.has("depth") && (!params.getString("depth").isEmpty())) {
          urlBuilder.addQueryParameter("depth", escapeString(String.valueOf(params.getInt("depth"))));
        }

        if (params.has("forbiddenId") && (!params.getString("forbiddenId").isEmpty())) {
          urlBuilder.addQueryParameter("forbidden_id[]", escapeString(String.valueOf(params.getJSONArray("forbiddenId"))));
        }

        if (params.has("forbiddenUris") && (!params.getString("forbiddenUris").isEmpty())) {
          urlBuilder.addQueryParameter("forbidden_uris[]", escapeString(String.valueOf(params.getJSONArray("forbiddenUris"))));
        }

        if (params.has("externalCode") && (!params.getString("externalCode").isEmpty())) {
          urlBuilder.addQueryParameter("external_code", escapeString(params.getString("externalCode")));
        }

        if (params.has("headsign") && (!params.getString("headsign").isEmpty())) {
          urlBuilder.addQueryParameter("headsign", escapeString(params.getString("headsign")));
        }

        if (params.has("showCodes") && (!params.getString("showCodes").isEmpty())) {
          urlBuilder.addQueryParameter("show_codes", escapeString(String.valueOf(params.getBoolean("showCodes"))));
        }

        if (params.has("odtLevel") && (!params.getString("odtLevel").isEmpty())) {
          urlBuilder.addQueryParameter("odt_level", escapeString(params.getString("odtLevel")));
        }

        if (params.has("dataFreshness") && (!params.getString("dataFreshness").isEmpty())) {
          urlBuilder.addQueryParameter("data_freshness", escapeString(params.getString("dataFreshness")));
        }

        if (params.has("distance") && (!params.getString("distance").isEmpty())) {
          urlBuilder.addQueryParameter("distance", escapeString(String.valueOf(params.getInt("distance"))));
        }

        if (params.has("since") && (!params.getString("since").isEmpty())) {
          urlBuilder.addQueryParameter("since", escapeString(String.valueOf(params.getString("since"))));
        }

        if (params.has("until") && (!params.getString("until").isEmpty())) {
          urlBuilder.addQueryParameter("until", escapeString(String.valueOf(params.getString("until"))));
        }

        if (params.has("disableGeojson") && (!params.getString("disableGeojson").isEmpty())) {
          urlBuilder.addQueryParameter("disable_geojson", escapeString(String.valueOf(params.getBoolean("disableGeojson"))));
        }

        if (params.has("disableDisruption") && (!params.getString("disableDisruption").isEmpty())) {
          urlBuilder.addQueryParameter("disable_disruption", escapeString(String.valueOf(params.getBoolean("disableDisruption"))));
        }

        if (params.has("filter") && (!params.getString("filter").isEmpty())) {
          urlBuilder.addQueryParameter("filter", escapeString(params.getString("filter")));
        }

        if (params.has("tags") && (!params.getString("tags").isEmpty())) {
          urlBuilder.addQueryParameter("tags[]", escapeString(String.valueOf(params.getJSONArray("tags"))));
        }

        HttpUrl url = urlBuilder
          .addPathSegments(path)
          .build();
        Request request = requestBuilder.url(url)
          .build();

        client.newCall(request).enqueue(new Callback() {

          @Override
          public void onFailure(@NonNull Call call, @NonNull IOException e) {
            String errorMessage = "Problem during request | " + String.valueOf(e.hashCode()) + ": " + e.getMessage();
            callbackContext.error(errorMessage);
          }

          @Override
          public void onResponse(@NonNull Call call, @NonNull Response response) {
            if (response.isSuccessful()) {
              try {
                JSONObject jsonObject = new JSONObject(Objects.requireNonNull(response.body()).string());
                callbackContext.success(jsonObject);
              } catch (Exception e) {
                String errorMessage = "Problem during response parsing";
                callbackContext.error(errorMessage);
              }
            } else {
              callbackContext.error("Unexpected code " + response.code() + " | message: " + response.message());
            }
          }
        });
      } catch (Exception e) {
        String errorMessage = "Problem during request building | " + e.hashCode() + ": " + e.getMessage();
        callbackContext.error(errorMessage);
      }
    });
  }

  private void coverageLonLatCommercialModesId(final JSONObject params, final CallbackContext callbackContext) {
    cordova.getThreadPool().execute(() -> {
      try {
        HttpUrl.Builder urlBuilder = new HttpUrl.Builder()
          .scheme("https")
          .host("api.navitia.io")
          .addPathSegment("v1");
        Request.Builder requestBuilder = new Request.Builder()
          .header("Authorization", token);
        String path = "/coverage/{lon};{lat}/commercial_modes/{id}".substring(1);

        if (params.has("lat") && (!params.getString("lat").isEmpty())) {
          path = path.replaceAll("\\{" + "lat" + "\\}", escapeString(String.valueOf(params.getLong("lat"))));
        }

        if (params.has("lon") && (!params.getString("lon").isEmpty())) {
          path = path.replaceAll("\\{" + "lon" + "\\}", escapeString(String.valueOf(params.getLong("lon"))));
        }

        if (params.has("id") && (!params.getString("id").isEmpty())) {
          path = path.replaceAll("\\{" + "id" + "\\}", escapeString(params.getString("id")));
        }

        if (params.has("startPage") && (!params.getString("startPage").isEmpty())) {
          urlBuilder.addQueryParameter("start_page", escapeString(String.valueOf(params.getInt("startPage"))));
        }

        if (params.has("count") && (!params.getString("count").isEmpty())) {
          urlBuilder.addQueryParameter("count", escapeString(String.valueOf(params.getInt("count"))));
        }

        if (params.has("depth") && (!params.getString("depth").isEmpty())) {
          urlBuilder.addQueryParameter("depth", escapeString(String.valueOf(params.getInt("depth"))));
        }

        if (params.has("forbiddenId") && (!params.getString("forbiddenId").isEmpty())) {
          urlBuilder.addQueryParameter("forbidden_id[]", escapeString(String.valueOf(params.getJSONArray("forbiddenId"))));
        }

        if (params.has("forbiddenUris") && (!params.getString("forbiddenUris").isEmpty())) {
          urlBuilder.addQueryParameter("forbidden_uris[]", escapeString(String.valueOf(params.getJSONArray("forbiddenUris"))));
        }

        if (params.has("externalCode") && (!params.getString("externalCode").isEmpty())) {
          urlBuilder.addQueryParameter("external_code", escapeString(params.getString("externalCode")));
        }

        if (params.has("headsign") && (!params.getString("headsign").isEmpty())) {
          urlBuilder.addQueryParameter("headsign", escapeString(params.getString("headsign")));
        }

        if (params.has("showCodes") && (!params.getString("showCodes").isEmpty())) {
          urlBuilder.addQueryParameter("show_codes", escapeString(String.valueOf(params.getBoolean("showCodes"))));
        }

        if (params.has("odtLevel") && (!params.getString("odtLevel").isEmpty())) {
          urlBuilder.addQueryParameter("odt_level", escapeString(params.getString("odtLevel")));
        }

        if (params.has("dataFreshness") && (!params.getString("dataFreshness").isEmpty())) {
          urlBuilder.addQueryParameter("data_freshness", escapeString(params.getString("dataFreshness")));
        }

        if (params.has("distance") && (!params.getString("distance").isEmpty())) {
          urlBuilder.addQueryParameter("distance", escapeString(String.valueOf(params.getInt("distance"))));
        }

        if (params.has("since") && (!params.getString("since").isEmpty())) {
          urlBuilder.addQueryParameter("since", escapeString(String.valueOf(params.getString("since"))));
        }

        if (params.has("until") && (!params.getString("until").isEmpty())) {
          urlBuilder.addQueryParameter("until", escapeString(String.valueOf(params.getString("until"))));
        }

        if (params.has("disableGeojson") && (!params.getString("disableGeojson").isEmpty())) {
          urlBuilder.addQueryParameter("disable_geojson", escapeString(String.valueOf(params.getBoolean("disableGeojson"))));
        }

        if (params.has("disableDisruption") && (!params.getString("disableDisruption").isEmpty())) {
          urlBuilder.addQueryParameter("disable_disruption", escapeString(String.valueOf(params.getBoolean("disableDisruption"))));
        }

        if (params.has("tags") && (!params.getString("tags").isEmpty())) {
          urlBuilder.addQueryParameter("tags[]", escapeString(String.valueOf(params.getJSONArray("tags"))));
        }

        HttpUrl url = urlBuilder
          .addPathSegments(path)
          .build();
        Request request = requestBuilder.url(url)
          .build();

        client.newCall(request).enqueue(new Callback() {

          @Override
          public void onFailure(@NonNull Call call, @NonNull IOException e) {
            String errorMessage = "Problem during request | " + String.valueOf(e.hashCode()) + ": " + e.getMessage();
            callbackContext.error(errorMessage);
          }

          @Override
          public void onResponse(@NonNull Call call, @NonNull Response response) {
            if (response.isSuccessful()) {
              try {
                JSONObject jsonObject = new JSONObject(Objects.requireNonNull(response.body()).string());
                callbackContext.success(jsonObject);
              } catch (Exception e) {
                String errorMessage = "Problem during response parsing";
                callbackContext.error(errorMessage);
              }
            } else {
              callbackContext.error("Unexpected code " + response.code() + " | message: " + response.message());
            }
          }
        });
      } catch (Exception e) {
        String errorMessage = "Problem during request building | " + e.hashCode() + ": " + e.getMessage();
        callbackContext.error(errorMessage);
      }
    });
  }

  private void coverageLonLatUriCommercialModes(final JSONObject params, final CallbackContext callbackContext) {
    cordova.getThreadPool().execute(() -> {
      try {
        HttpUrl.Builder urlBuilder = new HttpUrl.Builder()
          .scheme("https")
          .host("api.navitia.io")
          .addPathSegment("v1");
        Request.Builder requestBuilder = new Request.Builder()
          .header("Authorization", token);
        String path = "/coverage/{lon};{lat}/{uri}/commercial_modes".substring(1);

        if (params.has("lat") && (!params.getString("lat").isEmpty())) {
          path = path.replaceAll("\\{" + "lat" + "\\}", escapeString(String.valueOf(params.getLong("lat"))));
        }

        if (params.has("lon") && (!params.getString("lon").isEmpty())) {
          path = path.replaceAll("\\{" + "lon" + "\\}", escapeString(String.valueOf(params.getLong("lon"))));
        }

        if (params.has("uri") && (!params.getString("uri").isEmpty())) {
          path = path.replaceAll("\\{" + "uri" + "\\}", escapeString(params.getString("uri")));
        }

        if (params.has("startPage") && (!params.getString("startPage").isEmpty())) {
          urlBuilder.addQueryParameter("start_page", escapeString(String.valueOf(params.getInt("startPage"))));
        }

        if (params.has("count") && (!params.getString("count").isEmpty())) {
          urlBuilder.addQueryParameter("count", escapeString(String.valueOf(params.getInt("count"))));
        }

        if (params.has("depth") && (!params.getString("depth").isEmpty())) {
          urlBuilder.addQueryParameter("depth", escapeString(String.valueOf(params.getInt("depth"))));
        }

        if (params.has("forbiddenId") && (!params.getString("forbiddenId").isEmpty())) {
          urlBuilder.addQueryParameter("forbidden_id[]", escapeString(String.valueOf(params.getJSONArray("forbiddenId"))));
        }

        if (params.has("forbiddenUris") && (!params.getString("forbiddenUris").isEmpty())) {
          urlBuilder.addQueryParameter("forbidden_uris[]", escapeString(String.valueOf(params.getJSONArray("forbiddenUris"))));
        }

        if (params.has("externalCode") && (!params.getString("externalCode").isEmpty())) {
          urlBuilder.addQueryParameter("external_code", escapeString(params.getString("externalCode")));
        }

        if (params.has("headsign") && (!params.getString("headsign").isEmpty())) {
          urlBuilder.addQueryParameter("headsign", escapeString(params.getString("headsign")));
        }

        if (params.has("showCodes") && (!params.getString("showCodes").isEmpty())) {
          urlBuilder.addQueryParameter("show_codes", escapeString(String.valueOf(params.getBoolean("showCodes"))));
        }

        if (params.has("odtLevel") && (!params.getString("odtLevel").isEmpty())) {
          urlBuilder.addQueryParameter("odt_level", escapeString(params.getString("odtLevel")));
        }

        if (params.has("dataFreshness") && (!params.getString("dataFreshness").isEmpty())) {
          urlBuilder.addQueryParameter("data_freshness", escapeString(params.getString("dataFreshness")));
        }

        if (params.has("distance") && (!params.getString("distance").isEmpty())) {
          urlBuilder.addQueryParameter("distance", escapeString(String.valueOf(params.getInt("distance"))));
        }

        if (params.has("since") && (!params.getString("since").isEmpty())) {
          urlBuilder.addQueryParameter("since", escapeString(String.valueOf(params.getString("since"))));
        }

        if (params.has("until") && (!params.getString("until").isEmpty())) {
          urlBuilder.addQueryParameter("until", escapeString(String.valueOf(params.getString("until"))));
        }

        if (params.has("disableGeojson") && (!params.getString("disableGeojson").isEmpty())) {
          urlBuilder.addQueryParameter("disable_geojson", escapeString(String.valueOf(params.getBoolean("disableGeojson"))));
        }

        if (params.has("disableDisruption") && (!params.getString("disableDisruption").isEmpty())) {
          urlBuilder.addQueryParameter("disable_disruption", escapeString(String.valueOf(params.getBoolean("disableDisruption"))));
        }

        if (params.has("filter") && (!params.getString("filter").isEmpty())) {
          urlBuilder.addQueryParameter("filter", escapeString(params.getString("filter")));
        }

        if (params.has("tags") && (!params.getString("tags").isEmpty())) {
          urlBuilder.addQueryParameter("tags[]", escapeString(String.valueOf(params.getJSONArray("tags"))));
        }

        HttpUrl url = urlBuilder
          .addPathSegments(path)
          .build();
        Request request = requestBuilder.url(url)
          .build();

        client.newCall(request).enqueue(new Callback() {

          @Override
          public void onFailure(@NonNull Call call, @NonNull IOException e) {
            String errorMessage = "Problem during request | " + String.valueOf(e.hashCode()) + ": " + e.getMessage();
            callbackContext.error(errorMessage);
          }

          @Override
          public void onResponse(@NonNull Call call, @NonNull Response response) {
            if (response.isSuccessful()) {
              try {
                JSONObject jsonObject = new JSONObject(Objects.requireNonNull(response.body()).string());
                callbackContext.success(jsonObject);
              } catch (Exception e) {
                String errorMessage = "Problem during response parsing";
                callbackContext.error(errorMessage);
              }
            } else {
              callbackContext.error("Unexpected code " + response.code() + " | message: " + response.message());
            }
          }
        });
      } catch (Exception e) {
        String errorMessage = "Problem during request building | " + e.hashCode() + ": " + e.getMessage();
        callbackContext.error(errorMessage);
      }
    });
  }

  private void coverageLonLatUriCommercialModesId(final JSONObject params, final CallbackContext callbackContext) {
    cordova.getThreadPool().execute(() -> {
      try {
        HttpUrl.Builder urlBuilder = new HttpUrl.Builder()
          .scheme("https")
          .host("api.navitia.io")
          .addPathSegment("v1");
        Request.Builder requestBuilder = new Request.Builder()
          .header("Authorization", token);
        String path = "/coverage/{lon};{lat}/{uri}/commercial_modes/{id}".substring(1);

        if (params.has("lat") && (!params.getString("lat").isEmpty())) {
          path = path.replaceAll("\\{" + "lat" + "\\}", escapeString(String.valueOf(params.getLong("lat"))));
        }

        if (params.has("lon") && (!params.getString("lon").isEmpty())) {
          path = path.replaceAll("\\{" + "lon" + "\\}", escapeString(String.valueOf(params.getLong("lon"))));
        }

        if (params.has("uri") && (!params.getString("uri").isEmpty())) {
          path = path.replaceAll("\\{" + "uri" + "\\}", escapeString(params.getString("uri")));
        }

        if (params.has("id") && (!params.getString("id").isEmpty())) {
          path = path.replaceAll("\\{" + "id" + "\\}", escapeString(params.getString("id")));
        }

        if (params.has("startPage") && (!params.getString("startPage").isEmpty())) {
          urlBuilder.addQueryParameter("start_page", escapeString(String.valueOf(params.getInt("startPage"))));
        }

        if (params.has("count") && (!params.getString("count").isEmpty())) {
          urlBuilder.addQueryParameter("count", escapeString(String.valueOf(params.getInt("count"))));
        }

        if (params.has("depth") && (!params.getString("depth").isEmpty())) {
          urlBuilder.addQueryParameter("depth", escapeString(String.valueOf(params.getInt("depth"))));
        }

        if (params.has("forbiddenId") && (!params.getString("forbiddenId").isEmpty())) {
          urlBuilder.addQueryParameter("forbidden_id[]", escapeString(String.valueOf(params.getJSONArray("forbiddenId"))));
        }

        if (params.has("forbiddenUris") && (!params.getString("forbiddenUris").isEmpty())) {
          urlBuilder.addQueryParameter("forbidden_uris[]", escapeString(String.valueOf(params.getJSONArray("forbiddenUris"))));
        }

        if (params.has("externalCode") && (!params.getString("externalCode").isEmpty())) {
          urlBuilder.addQueryParameter("external_code", escapeString(params.getString("externalCode")));
        }

        if (params.has("headsign") && (!params.getString("headsign").isEmpty())) {
          urlBuilder.addQueryParameter("headsign", escapeString(params.getString("headsign")));
        }

        if (params.has("showCodes") && (!params.getString("showCodes").isEmpty())) {
          urlBuilder.addQueryParameter("show_codes", escapeString(String.valueOf(params.getBoolean("showCodes"))));
        }

        if (params.has("odtLevel") && (!params.getString("odtLevel").isEmpty())) {
          urlBuilder.addQueryParameter("odt_level", escapeString(params.getString("odtLevel")));
        }

        if (params.has("dataFreshness") && (!params.getString("dataFreshness").isEmpty())) {
          urlBuilder.addQueryParameter("data_freshness", escapeString(params.getString("dataFreshness")));
        }

        if (params.has("distance") && (!params.getString("distance").isEmpty())) {
          urlBuilder.addQueryParameter("distance", escapeString(String.valueOf(params.getInt("distance"))));
        }

        if (params.has("since") && (!params.getString("since").isEmpty())) {
          urlBuilder.addQueryParameter("since", escapeString(String.valueOf(params.getString("since"))));
        }

        if (params.has("until") && (!params.getString("until").isEmpty())) {
          urlBuilder.addQueryParameter("until", escapeString(String.valueOf(params.getString("until"))));
        }

        if (params.has("disableGeojson") && (!params.getString("disableGeojson").isEmpty())) {
          urlBuilder.addQueryParameter("disable_geojson", escapeString(String.valueOf(params.getBoolean("disableGeojson"))));
        }

        if (params.has("disableDisruption") && (!params.getString("disableDisruption").isEmpty())) {
          urlBuilder.addQueryParameter("disable_disruption", escapeString(String.valueOf(params.getBoolean("disableDisruption"))));
        }

        if (params.has("tags") && (!params.getString("tags").isEmpty())) {
          urlBuilder.addQueryParameter("tags[]", escapeString(String.valueOf(params.getJSONArray("tags"))));
        }

        HttpUrl url = urlBuilder
          .addPathSegments(path)
          .build();
        Request request = requestBuilder.url(url)
          .build();

        client.newCall(request).enqueue(new Callback() {

          @Override
          public void onFailure(@NonNull Call call, @NonNull IOException e) {
            String errorMessage = "Problem during request | " + String.valueOf(e.hashCode()) + ": " + e.getMessage();
            callbackContext.error(errorMessage);
          }

          @Override
          public void onResponse(@NonNull Call call, @NonNull Response response) {
            if (response.isSuccessful()) {
              try {
                JSONObject jsonObject = new JSONObject(Objects.requireNonNull(response.body()).string());
                callbackContext.success(jsonObject);
              } catch (Exception e) {
                String errorMessage = "Problem during response parsing";
                callbackContext.error(errorMessage);
              }
            } else {
              callbackContext.error("Unexpected code " + response.code() + " | message: " + response.message());
            }
          }
        });
      } catch (Exception e) {
        String errorMessage = "Problem during request building | " + e.hashCode() + ": " + e.getMessage();
        callbackContext.error(errorMessage);
      }
    });
  }

  private void coverageRegionCommercialModes(final JSONObject params, final CallbackContext callbackContext) {
    cordova.getThreadPool().execute(() -> {
      try {
        HttpUrl.Builder urlBuilder = new HttpUrl.Builder()
          .scheme("https")
          .host("api.navitia.io")
          .addPathSegment("v1");
        Request.Builder requestBuilder = new Request.Builder()
          .header("Authorization", token);
        String path = "/coverage/{region}/commercial_modes".substring(1);

        if (params.has("region") && (!params.getString("region").isEmpty())) {
          path = path.replaceAll("\\{" + "region" + "\\}", escapeString(params.getString("region")));
        }

        if (params.has("startPage") && (!params.getString("startPage").isEmpty())) {
          urlBuilder.addQueryParameter("start_page", escapeString(String.valueOf(params.getInt("startPage"))));
        }

        if (params.has("count") && (!params.getString("count").isEmpty())) {
          urlBuilder.addQueryParameter("count", escapeString(String.valueOf(params.getInt("count"))));
        }

        if (params.has("depth") && (!params.getString("depth").isEmpty())) {
          urlBuilder.addQueryParameter("depth", escapeString(String.valueOf(params.getInt("depth"))));
        }

        if (params.has("forbiddenId") && (!params.getString("forbiddenId").isEmpty())) {
          urlBuilder.addQueryParameter("forbidden_id[]", escapeString(String.valueOf(params.getJSONArray("forbiddenId"))));
        }

        if (params.has("forbiddenUris") && (!params.getString("forbiddenUris").isEmpty())) {
          urlBuilder.addQueryParameter("forbidden_uris[]", escapeString(String.valueOf(params.getJSONArray("forbiddenUris"))));
        }

        if (params.has("externalCode") && (!params.getString("externalCode").isEmpty())) {
          urlBuilder.addQueryParameter("external_code", escapeString(params.getString("externalCode")));
        }

        if (params.has("headsign") && (!params.getString("headsign").isEmpty())) {
          urlBuilder.addQueryParameter("headsign", escapeString(params.getString("headsign")));
        }

        if (params.has("showCodes") && (!params.getString("showCodes").isEmpty())) {
          urlBuilder.addQueryParameter("show_codes", escapeString(String.valueOf(params.getBoolean("showCodes"))));
        }

        if (params.has("odtLevel") && (!params.getString("odtLevel").isEmpty())) {
          urlBuilder.addQueryParameter("odt_level", escapeString(params.getString("odtLevel")));
        }

        if (params.has("dataFreshness") && (!params.getString("dataFreshness").isEmpty())) {
          urlBuilder.addQueryParameter("data_freshness", escapeString(params.getString("dataFreshness")));
        }

        if (params.has("distance") && (!params.getString("distance").isEmpty())) {
          urlBuilder.addQueryParameter("distance", escapeString(String.valueOf(params.getInt("distance"))));
        }

        if (params.has("since") && (!params.getString("since").isEmpty())) {
          urlBuilder.addQueryParameter("since", escapeString(String.valueOf(params.getString("since"))));
        }

        if (params.has("until") && (!params.getString("until").isEmpty())) {
          urlBuilder.addQueryParameter("until", escapeString(String.valueOf(params.getString("until"))));
        }

        if (params.has("disableGeojson") && (!params.getString("disableGeojson").isEmpty())) {
          urlBuilder.addQueryParameter("disable_geojson", escapeString(String.valueOf(params.getBoolean("disableGeojson"))));
        }

        if (params.has("disableDisruption") && (!params.getString("disableDisruption").isEmpty())) {
          urlBuilder.addQueryParameter("disable_disruption", escapeString(String.valueOf(params.getBoolean("disableDisruption"))));
        }

        if (params.has("filter") && (!params.getString("filter").isEmpty())) {
          urlBuilder.addQueryParameter("filter", escapeString(params.getString("filter")));
        }

        if (params.has("tags") && (!params.getString("tags").isEmpty())) {
          urlBuilder.addQueryParameter("tags[]", escapeString(String.valueOf(params.getJSONArray("tags"))));
        }

        HttpUrl url = urlBuilder
          .addPathSegments(path)
          .build();
        Request request = requestBuilder.url(url)
          .build();

        client.newCall(request).enqueue(new Callback() {

          @Override
          public void onFailure(@NonNull Call call, @NonNull IOException e) {
            String errorMessage = "Problem during request | " + String.valueOf(e.hashCode()) + ": " + e.getMessage();
            callbackContext.error(errorMessage);
          }

          @Override
          public void onResponse(@NonNull Call call, @NonNull Response response) {
            if (response.isSuccessful()) {
              try {
                JSONObject jsonObject = new JSONObject(Objects.requireNonNull(response.body()).string());
                callbackContext.success(jsonObject);
              } catch (Exception e) {
                String errorMessage = "Problem during response parsing";
                callbackContext.error(errorMessage);
              }
            } else {
              callbackContext.error("Unexpected code " + response.code() + " | message: " + response.message());
            }
          }
        });
      } catch (Exception e) {
        String errorMessage = "Problem during request building | " + e.hashCode() + ": " + e.getMessage();
        callbackContext.error(errorMessage);
      }
    });
  }

  private void coverageRegionCommercialModesId(final JSONObject params, final CallbackContext callbackContext) {
    cordova.getThreadPool().execute(() -> {
      try {
        HttpUrl.Builder urlBuilder = new HttpUrl.Builder()
          .scheme("https")
          .host("api.navitia.io")
          .addPathSegment("v1");
        Request.Builder requestBuilder = new Request.Builder()
          .header("Authorization", token);
        String path = "/coverage/{region}/commercial_modes/{id}".substring(1);

        if (params.has("region") && (!params.getString("region").isEmpty())) {
          path = path.replaceAll("\\{" + "region" + "\\}", escapeString(params.getString("region")));
        }

        if (params.has("id") && (!params.getString("id").isEmpty())) {
          path = path.replaceAll("\\{" + "id" + "\\}", escapeString(params.getString("id")));
        }

        if (params.has("startPage") && (!params.getString("startPage").isEmpty())) {
          urlBuilder.addQueryParameter("start_page", escapeString(String.valueOf(params.getInt("startPage"))));
        }

        if (params.has("count") && (!params.getString("count").isEmpty())) {
          urlBuilder.addQueryParameter("count", escapeString(String.valueOf(params.getInt("count"))));
        }

        if (params.has("depth") && (!params.getString("depth").isEmpty())) {
          urlBuilder.addQueryParameter("depth", escapeString(String.valueOf(params.getInt("depth"))));
        }

        if (params.has("forbiddenId") && (!params.getString("forbiddenId").isEmpty())) {
          urlBuilder.addQueryParameter("forbidden_id[]", escapeString(String.valueOf(params.getJSONArray("forbiddenId"))));
        }

        if (params.has("forbiddenUris") && (!params.getString("forbiddenUris").isEmpty())) {
          urlBuilder.addQueryParameter("forbidden_uris[]", escapeString(String.valueOf(params.getJSONArray("forbiddenUris"))));
        }

        if (params.has("externalCode") && (!params.getString("externalCode").isEmpty())) {
          urlBuilder.addQueryParameter("external_code", escapeString(params.getString("externalCode")));
        }

        if (params.has("headsign") && (!params.getString("headsign").isEmpty())) {
          urlBuilder.addQueryParameter("headsign", escapeString(params.getString("headsign")));
        }

        if (params.has("showCodes") && (!params.getString("showCodes").isEmpty())) {
          urlBuilder.addQueryParameter("show_codes", escapeString(String.valueOf(params.getBoolean("showCodes"))));
        }

        if (params.has("odtLevel") && (!params.getString("odtLevel").isEmpty())) {
          urlBuilder.addQueryParameter("odt_level", escapeString(params.getString("odtLevel")));
        }

        if (params.has("dataFreshness") && (!params.getString("dataFreshness").isEmpty())) {
          urlBuilder.addQueryParameter("data_freshness", escapeString(params.getString("dataFreshness")));
        }

        if (params.has("distance") && (!params.getString("distance").isEmpty())) {
          urlBuilder.addQueryParameter("distance", escapeString(String.valueOf(params.getInt("distance"))));
        }

        if (params.has("since") && (!params.getString("since").isEmpty())) {
          urlBuilder.addQueryParameter("since", escapeString(String.valueOf(params.getString("since"))));
        }

        if (params.has("until") && (!params.getString("until").isEmpty())) {
          urlBuilder.addQueryParameter("until", escapeString(String.valueOf(params.getString("until"))));
        }

        if (params.has("disableGeojson") && (!params.getString("disableGeojson").isEmpty())) {
          urlBuilder.addQueryParameter("disable_geojson", escapeString(String.valueOf(params.getBoolean("disableGeojson"))));
        }

        if (params.has("disableDisruption") && (!params.getString("disableDisruption").isEmpty())) {
          urlBuilder.addQueryParameter("disable_disruption", escapeString(String.valueOf(params.getBoolean("disableDisruption"))));
        }

        if (params.has("tags") && (!params.getString("tags").isEmpty())) {
          urlBuilder.addQueryParameter("tags[]", escapeString(String.valueOf(params.getJSONArray("tags"))));
        }

        HttpUrl url = urlBuilder
          .addPathSegments(path)
          .build();
        Request request = requestBuilder.url(url)
          .build();

        client.newCall(request).enqueue(new Callback() {

          @Override
          public void onFailure(@NonNull Call call, @NonNull IOException e) {
            String errorMessage = "Problem during request | " + String.valueOf(e.hashCode()) + ": " + e.getMessage();
            callbackContext.error(errorMessage);
          }

          @Override
          public void onResponse(@NonNull Call call, @NonNull Response response) {
            if (response.isSuccessful()) {
              try {
                JSONObject jsonObject = new JSONObject(Objects.requireNonNull(response.body()).string());
                callbackContext.success(jsonObject);
              } catch (Exception e) {
                String errorMessage = "Problem during response parsing";
                callbackContext.error(errorMessage);
              }
            } else {
              callbackContext.error("Unexpected code " + response.code() + " | message: " + response.message());
            }
          }
        });
      } catch (Exception e) {
        String errorMessage = "Problem during request building | " + e.hashCode() + ": " + e.getMessage();
        callbackContext.error(errorMessage);
      }
    });
  }

  private void coverageRegionUriCommercialModes(final JSONObject params, final CallbackContext callbackContext) {
    cordova.getThreadPool().execute(() -> {
      try {
        HttpUrl.Builder urlBuilder = new HttpUrl.Builder()
          .scheme("https")
          .host("api.navitia.io")
          .addPathSegment("v1");
        Request.Builder requestBuilder = new Request.Builder()
          .header("Authorization", token);
        String path = "/coverage/{region}/{uri}/commercial_modes".substring(1);

        if (params.has("region") && (!params.getString("region").isEmpty())) {
          path = path.replaceAll("\\{" + "region" + "\\}", escapeString(params.getString("region")));
        }

        if (params.has("uri") && (!params.getString("uri").isEmpty())) {
          path = path.replaceAll("\\{" + "uri" + "\\}", escapeString(params.getString("uri")));
        }

        if (params.has("startPage") && (!params.getString("startPage").isEmpty())) {
          urlBuilder.addQueryParameter("start_page", escapeString(String.valueOf(params.getInt("startPage"))));
        }

        if (params.has("count") && (!params.getString("count").isEmpty())) {
          urlBuilder.addQueryParameter("count", escapeString(String.valueOf(params.getInt("count"))));
        }

        if (params.has("depth") && (!params.getString("depth").isEmpty())) {
          urlBuilder.addQueryParameter("depth", escapeString(String.valueOf(params.getInt("depth"))));
        }

        if (params.has("forbiddenId") && (!params.getString("forbiddenId").isEmpty())) {
          urlBuilder.addQueryParameter("forbidden_id[]", escapeString(String.valueOf(params.getJSONArray("forbiddenId"))));
        }

        if (params.has("forbiddenUris") && (!params.getString("forbiddenUris").isEmpty())) {
          urlBuilder.addQueryParameter("forbidden_uris[]", escapeString(String.valueOf(params.getJSONArray("forbiddenUris"))));
        }

        if (params.has("externalCode") && (!params.getString("externalCode").isEmpty())) {
          urlBuilder.addQueryParameter("external_code", escapeString(params.getString("externalCode")));
        }

        if (params.has("headsign") && (!params.getString("headsign").isEmpty())) {
          urlBuilder.addQueryParameter("headsign", escapeString(params.getString("headsign")));
        }

        if (params.has("showCodes") && (!params.getString("showCodes").isEmpty())) {
          urlBuilder.addQueryParameter("show_codes", escapeString(String.valueOf(params.getBoolean("showCodes"))));
        }

        if (params.has("odtLevel") && (!params.getString("odtLevel").isEmpty())) {
          urlBuilder.addQueryParameter("odt_level", escapeString(params.getString("odtLevel")));
        }

        if (params.has("dataFreshness") && (!params.getString("dataFreshness").isEmpty())) {
          urlBuilder.addQueryParameter("data_freshness", escapeString(params.getString("dataFreshness")));
        }

        if (params.has("distance") && (!params.getString("distance").isEmpty())) {
          urlBuilder.addQueryParameter("distance", escapeString(String.valueOf(params.getInt("distance"))));
        }

        if (params.has("since") && (!params.getString("since").isEmpty())) {
          urlBuilder.addQueryParameter("since", escapeString(String.valueOf(params.getString("since"))));
        }

        if (params.has("until") && (!params.getString("until").isEmpty())) {
          urlBuilder.addQueryParameter("until", escapeString(String.valueOf(params.getString("until"))));
        }

        if (params.has("disableGeojson") && (!params.getString("disableGeojson").isEmpty())) {
          urlBuilder.addQueryParameter("disable_geojson", escapeString(String.valueOf(params.getBoolean("disableGeojson"))));
        }

        if (params.has("disableDisruption") && (!params.getString("disableDisruption").isEmpty())) {
          urlBuilder.addQueryParameter("disable_disruption", escapeString(String.valueOf(params.getBoolean("disableDisruption"))));
        }

        if (params.has("filter") && (!params.getString("filter").isEmpty())) {
          urlBuilder.addQueryParameter("filter", escapeString(params.getString("filter")));
        }

        if (params.has("tags") && (!params.getString("tags").isEmpty())) {
          urlBuilder.addQueryParameter("tags[]", escapeString(String.valueOf(params.getJSONArray("tags"))));
        }

        HttpUrl url = urlBuilder
          .addPathSegments(path)
          .build();
        Request request = requestBuilder.url(url)
          .build();

        client.newCall(request).enqueue(new Callback() {

          @Override
          public void onFailure(@NonNull Call call, @NonNull IOException e) {
            String errorMessage = "Problem during request | " + String.valueOf(e.hashCode()) + ": " + e.getMessage();
            callbackContext.error(errorMessage);
          }

          @Override
          public void onResponse(@NonNull Call call, @NonNull Response response) {
            if (response.isSuccessful()) {
              try {
                JSONObject jsonObject = new JSONObject(Objects.requireNonNull(response.body()).string());
                callbackContext.success(jsonObject);
              } catch (Exception e) {
                String errorMessage = "Problem during response parsing";
                callbackContext.error(errorMessage);
              }
            } else {
              callbackContext.error("Unexpected code " + response.code() + " | message: " + response.message());
            }
          }
        });
      } catch (Exception e) {
        String errorMessage = "Problem during request building | " + e.hashCode() + ": " + e.getMessage();
        callbackContext.error(errorMessage);
      }
    });
  }

  private void coverageRegionUriCommercialModesId(final JSONObject params, final CallbackContext callbackContext) {
    cordova.getThreadPool().execute(() -> {
      try {
        HttpUrl.Builder urlBuilder = new HttpUrl.Builder()
          .scheme("https")
          .host("api.navitia.io")
          .addPathSegment("v1");
        Request.Builder requestBuilder = new Request.Builder()
          .header("Authorization", token);
        String path = "/coverage/{region}/{uri}/commercial_modes/{id}".substring(1);

        if (params.has("region") && (!params.getString("region").isEmpty())) {
          path = path.replaceAll("\\{" + "region" + "\\}", escapeString(params.getString("region")));
        }

        if (params.has("uri") && (!params.getString("uri").isEmpty())) {
          path = path.replaceAll("\\{" + "uri" + "\\}", escapeString(params.getString("uri")));
        }

        if (params.has("id") && (!params.getString("id").isEmpty())) {
          path = path.replaceAll("\\{" + "id" + "\\}", escapeString(params.getString("id")));
        }

        if (params.has("startPage") && (!params.getString("startPage").isEmpty())) {
          urlBuilder.addQueryParameter("start_page", escapeString(String.valueOf(params.getInt("startPage"))));
        }

        if (params.has("count") && (!params.getString("count").isEmpty())) {
          urlBuilder.addQueryParameter("count", escapeString(String.valueOf(params.getInt("count"))));
        }

        if (params.has("depth") && (!params.getString("depth").isEmpty())) {
          urlBuilder.addQueryParameter("depth", escapeString(String.valueOf(params.getInt("depth"))));
        }

        if (params.has("forbiddenId") && (!params.getString("forbiddenId").isEmpty())) {
          urlBuilder.addQueryParameter("forbidden_id[]", escapeString(String.valueOf(params.getJSONArray("forbiddenId"))));
        }

        if (params.has("forbiddenUris") && (!params.getString("forbiddenUris").isEmpty())) {
          urlBuilder.addQueryParameter("forbidden_uris[]", escapeString(String.valueOf(params.getJSONArray("forbiddenUris"))));
        }

        if (params.has("externalCode") && (!params.getString("externalCode").isEmpty())) {
          urlBuilder.addQueryParameter("external_code", escapeString(params.getString("externalCode")));
        }

        if (params.has("headsign") && (!params.getString("headsign").isEmpty())) {
          urlBuilder.addQueryParameter("headsign", escapeString(params.getString("headsign")));
        }

        if (params.has("showCodes") && (!params.getString("showCodes").isEmpty())) {
          urlBuilder.addQueryParameter("show_codes", escapeString(String.valueOf(params.getBoolean("showCodes"))));
        }

        if (params.has("odtLevel") && (!params.getString("odtLevel").isEmpty())) {
          urlBuilder.addQueryParameter("odt_level", escapeString(params.getString("odtLevel")));
        }

        if (params.has("dataFreshness") && (!params.getString("dataFreshness").isEmpty())) {
          urlBuilder.addQueryParameter("data_freshness", escapeString(params.getString("dataFreshness")));
        }

        if (params.has("distance") && (!params.getString("distance").isEmpty())) {
          urlBuilder.addQueryParameter("distance", escapeString(String.valueOf(params.getInt("distance"))));
        }

        if (params.has("since") && (!params.getString("since").isEmpty())) {
          urlBuilder.addQueryParameter("since", escapeString(String.valueOf(params.getString("since"))));
        }

        if (params.has("until") && (!params.getString("until").isEmpty())) {
          urlBuilder.addQueryParameter("until", escapeString(String.valueOf(params.getString("until"))));
        }

        if (params.has("disableGeojson") && (!params.getString("disableGeojson").isEmpty())) {
          urlBuilder.addQueryParameter("disable_geojson", escapeString(String.valueOf(params.getBoolean("disableGeojson"))));
        }

        if (params.has("disableDisruption") && (!params.getString("disableDisruption").isEmpty())) {
          urlBuilder.addQueryParameter("disable_disruption", escapeString(String.valueOf(params.getBoolean("disableDisruption"))));
        }

        if (params.has("tags") && (!params.getString("tags").isEmpty())) {
          urlBuilder.addQueryParameter("tags[]", escapeString(String.valueOf(params.getJSONArray("tags"))));
        }

        HttpUrl url = urlBuilder
          .addPathSegments(path)
          .build();
        Request request = requestBuilder.url(url)
          .build();

        client.newCall(request).enqueue(new Callback() {

          @Override
          public void onFailure(@NonNull Call call, @NonNull IOException e) {
            String errorMessage = "Problem during request | " + String.valueOf(e.hashCode()) + ": " + e.getMessage();
            callbackContext.error(errorMessage);
          }

          @Override
          public void onResponse(@NonNull Call call, @NonNull Response response) {
            if (response.isSuccessful()) {
              try {
                JSONObject jsonObject = new JSONObject(Objects.requireNonNull(response.body()).string());
                callbackContext.success(jsonObject);
              } catch (Exception e) {
                String errorMessage = "Problem during response parsing";
                callbackContext.error(errorMessage);
              }
            } else {
              callbackContext.error("Unexpected code " + response.code() + " | message: " + response.message());
            }
          }
        });
      } catch (Exception e) {
        String errorMessage = "Problem during request building | " + e.hashCode() + ": " + e.getMessage();
        callbackContext.error(errorMessage);
      }
    });
  }

  private void coverageLonLatCompanies(final JSONObject params, final CallbackContext callbackContext) {
    cordova.getThreadPool().execute(() -> {
      try {
        HttpUrl.Builder urlBuilder = new HttpUrl.Builder()
          .scheme("https")
          .host("api.navitia.io")
          .addPathSegment("v1");
        Request.Builder requestBuilder = new Request.Builder()
          .header("Authorization", token);
        String path = "/coverage/{lon};{lat}/companies".substring(1);

        if (params.has("lat") && (!params.getString("lat").isEmpty())) {
          path = path.replaceAll("\\{" + "lat" + "\\}", escapeString(String.valueOf(params.getLong("lat"))));
        }

        if (params.has("lon") && (!params.getString("lon").isEmpty())) {
          path = path.replaceAll("\\{" + "lon" + "\\}", escapeString(String.valueOf(params.getLong("lon"))));
        }

        if (params.has("startPage") && (!params.getString("startPage").isEmpty())) {
          urlBuilder.addQueryParameter("start_page", escapeString(String.valueOf(params.getInt("startPage"))));
        }

        if (params.has("count") && (!params.getString("count").isEmpty())) {
          urlBuilder.addQueryParameter("count", escapeString(String.valueOf(params.getInt("count"))));
        }

        if (params.has("depth") && (!params.getString("depth").isEmpty())) {
          urlBuilder.addQueryParameter("depth", escapeString(String.valueOf(params.getInt("depth"))));
        }

        if (params.has("forbiddenId") && (!params.getString("forbiddenId").isEmpty())) {
          urlBuilder.addQueryParameter("forbidden_id[]", escapeString(String.valueOf(params.getJSONArray("forbiddenId"))));
        }

        if (params.has("forbiddenUris") && (!params.getString("forbiddenUris").isEmpty())) {
          urlBuilder.addQueryParameter("forbidden_uris[]", escapeString(String.valueOf(params.getJSONArray("forbiddenUris"))));
        }

        if (params.has("externalCode") && (!params.getString("externalCode").isEmpty())) {
          urlBuilder.addQueryParameter("external_code", escapeString(params.getString("externalCode")));
        }

        if (params.has("headsign") && (!params.getString("headsign").isEmpty())) {
          urlBuilder.addQueryParameter("headsign", escapeString(params.getString("headsign")));
        }

        if (params.has("showCodes") && (!params.getString("showCodes").isEmpty())) {
          urlBuilder.addQueryParameter("show_codes", escapeString(String.valueOf(params.getBoolean("showCodes"))));
        }

        if (params.has("odtLevel") && (!params.getString("odtLevel").isEmpty())) {
          urlBuilder.addQueryParameter("odt_level", escapeString(params.getString("odtLevel")));
        }

        if (params.has("dataFreshness") && (!params.getString("dataFreshness").isEmpty())) {
          urlBuilder.addQueryParameter("data_freshness", escapeString(params.getString("dataFreshness")));
        }

        if (params.has("distance") && (!params.getString("distance").isEmpty())) {
          urlBuilder.addQueryParameter("distance", escapeString(String.valueOf(params.getInt("distance"))));
        }

        if (params.has("since") && (!params.getString("since").isEmpty())) {
          urlBuilder.addQueryParameter("since", escapeString(String.valueOf(params.getString("since"))));
        }

        if (params.has("until") && (!params.getString("until").isEmpty())) {
          urlBuilder.addQueryParameter("until", escapeString(String.valueOf(params.getString("until"))));
        }

        if (params.has("disableGeojson") && (!params.getString("disableGeojson").isEmpty())) {
          urlBuilder.addQueryParameter("disable_geojson", escapeString(String.valueOf(params.getBoolean("disableGeojson"))));
        }

        if (params.has("disableDisruption") && (!params.getString("disableDisruption").isEmpty())) {
          urlBuilder.addQueryParameter("disable_disruption", escapeString(String.valueOf(params.getBoolean("disableDisruption"))));
        }

        if (params.has("filter") && (!params.getString("filter").isEmpty())) {
          urlBuilder.addQueryParameter("filter", escapeString(params.getString("filter")));
        }

        if (params.has("tags") && (!params.getString("tags").isEmpty())) {
          urlBuilder.addQueryParameter("tags[]", escapeString(String.valueOf(params.getJSONArray("tags"))));
        }

        HttpUrl url = urlBuilder
          .addPathSegments(path)
          .build();
        Request request = requestBuilder.url(url)
          .build();

        client.newCall(request).enqueue(new Callback() {

          @Override
          public void onFailure(@NonNull Call call, @NonNull IOException e) {
            String errorMessage = "Problem during request | " + String.valueOf(e.hashCode()) + ": " + e.getMessage();
            callbackContext.error(errorMessage);
          }

          @Override
          public void onResponse(@NonNull Call call, @NonNull Response response) {
            if (response.isSuccessful()) {
              try {
                JSONObject jsonObject = new JSONObject(Objects.requireNonNull(response.body()).string());
                callbackContext.success(jsonObject);
              } catch (Exception e) {
                String errorMessage = "Problem during response parsing";
                callbackContext.error(errorMessage);
              }
            } else {
              callbackContext.error("Unexpected code " + response.code() + " | message: " + response.message());
            }
          }
        });
      } catch (Exception e) {
        String errorMessage = "Problem during request building | " + e.hashCode() + ": " + e.getMessage();
        callbackContext.error(errorMessage);
      }
    });
  }

  private void coverageLonLatCompaniesId(final JSONObject params, final CallbackContext callbackContext) {
    cordova.getThreadPool().execute(() -> {
      try {
        HttpUrl.Builder urlBuilder = new HttpUrl.Builder()
          .scheme("https")
          .host("api.navitia.io")
          .addPathSegment("v1");
        Request.Builder requestBuilder = new Request.Builder()
          .header("Authorization", token);
        String path = "/coverage/{lon};{lat}/companies/{id}".substring(1);

        if (params.has("lat") && (!params.getString("lat").isEmpty())) {
          path = path.replaceAll("\\{" + "lat" + "\\}", escapeString(String.valueOf(params.getLong("lat"))));
        }

        if (params.has("lon") && (!params.getString("lon").isEmpty())) {
          path = path.replaceAll("\\{" + "lon" + "\\}", escapeString(String.valueOf(params.getLong("lon"))));
        }

        if (params.has("id") && (!params.getString("id").isEmpty())) {
          path = path.replaceAll("\\{" + "id" + "\\}", escapeString(params.getString("id")));
        }

        if (params.has("startPage") && (!params.getString("startPage").isEmpty())) {
          urlBuilder.addQueryParameter("start_page", escapeString(String.valueOf(params.getInt("startPage"))));
        }

        if (params.has("count") && (!params.getString("count").isEmpty())) {
          urlBuilder.addQueryParameter("count", escapeString(String.valueOf(params.getInt("count"))));
        }

        if (params.has("depth") && (!params.getString("depth").isEmpty())) {
          urlBuilder.addQueryParameter("depth", escapeString(String.valueOf(params.getInt("depth"))));
        }

        if (params.has("forbiddenId") && (!params.getString("forbiddenId").isEmpty())) {
          urlBuilder.addQueryParameter("forbidden_id[]", escapeString(String.valueOf(params.getJSONArray("forbiddenId"))));
        }

        if (params.has("forbiddenUris") && (!params.getString("forbiddenUris").isEmpty())) {
          urlBuilder.addQueryParameter("forbidden_uris[]", escapeString(String.valueOf(params.getJSONArray("forbiddenUris"))));
        }

        if (params.has("externalCode") && (!params.getString("externalCode").isEmpty())) {
          urlBuilder.addQueryParameter("external_code", escapeString(params.getString("externalCode")));
        }

        if (params.has("headsign") && (!params.getString("headsign").isEmpty())) {
          urlBuilder.addQueryParameter("headsign", escapeString(params.getString("headsign")));
        }

        if (params.has("showCodes") && (!params.getString("showCodes").isEmpty())) {
          urlBuilder.addQueryParameter("show_codes", escapeString(String.valueOf(params.getBoolean("showCodes"))));
        }

        if (params.has("odtLevel") && (!params.getString("odtLevel").isEmpty())) {
          urlBuilder.addQueryParameter("odt_level", escapeString(params.getString("odtLevel")));
        }

        if (params.has("dataFreshness") && (!params.getString("dataFreshness").isEmpty())) {
          urlBuilder.addQueryParameter("data_freshness", escapeString(params.getString("dataFreshness")));
        }

        if (params.has("distance") && (!params.getString("distance").isEmpty())) {
          urlBuilder.addQueryParameter("distance", escapeString(String.valueOf(params.getInt("distance"))));
        }

        if (params.has("since") && (!params.getString("since").isEmpty())) {
          urlBuilder.addQueryParameter("since", escapeString(String.valueOf(params.getString("since"))));
        }

        if (params.has("until") && (!params.getString("until").isEmpty())) {
          urlBuilder.addQueryParameter("until", escapeString(String.valueOf(params.getString("until"))));
        }

        if (params.has("disableGeojson") && (!params.getString("disableGeojson").isEmpty())) {
          urlBuilder.addQueryParameter("disable_geojson", escapeString(String.valueOf(params.getBoolean("disableGeojson"))));
        }

        if (params.has("disableDisruption") && (!params.getString("disableDisruption").isEmpty())) {
          urlBuilder.addQueryParameter("disable_disruption", escapeString(String.valueOf(params.getBoolean("disableDisruption"))));
        }

        if (params.has("tags") && (!params.getString("tags").isEmpty())) {
          urlBuilder.addQueryParameter("tags[]", escapeString(String.valueOf(params.getJSONArray("tags"))));
        }

        HttpUrl url = urlBuilder
          .addPathSegments(path)
          .build();
        Request request = requestBuilder.url(url)
          .build();

        client.newCall(request).enqueue(new Callback() {

          @Override
          public void onFailure(@NonNull Call call, @NonNull IOException e) {
            String errorMessage = "Problem during request | " + String.valueOf(e.hashCode()) + ": " + e.getMessage();
            callbackContext.error(errorMessage);
          }

          @Override
          public void onResponse(@NonNull Call call, @NonNull Response response) {
            if (response.isSuccessful()) {
              try {
                JSONObject jsonObject = new JSONObject(Objects.requireNonNull(response.body()).string());
                callbackContext.success(jsonObject);
              } catch (Exception e) {
                String errorMessage = "Problem during response parsing";
                callbackContext.error(errorMessage);
              }
            } else {
              callbackContext.error("Unexpected code " + response.code() + " | message: " + response.message());
            }
          }
        });
      } catch (Exception e) {
        String errorMessage = "Problem during request building | " + e.hashCode() + ": " + e.getMessage();
        callbackContext.error(errorMessage);
      }
    });
  }

  private void coverageLonLatUriCompanies(final JSONObject params, final CallbackContext callbackContext) {
    cordova.getThreadPool().execute(() -> {
      try {
        HttpUrl.Builder urlBuilder = new HttpUrl.Builder()
          .scheme("https")
          .host("api.navitia.io")
          .addPathSegment("v1");
        Request.Builder requestBuilder = new Request.Builder()
          .header("Authorization", token);
        String path = "/coverage/{lon};{lat}/{uri}/companies".substring(1);

        if (params.has("lat") && (!params.getString("lat").isEmpty())) {
          path = path.replaceAll("\\{" + "lat" + "\\}", escapeString(String.valueOf(params.getLong("lat"))));
        }

        if (params.has("lon") && (!params.getString("lon").isEmpty())) {
          path = path.replaceAll("\\{" + "lon" + "\\}", escapeString(String.valueOf(params.getLong("lon"))));
        }

        if (params.has("uri") && (!params.getString("uri").isEmpty())) {
          path = path.replaceAll("\\{" + "uri" + "\\}", escapeString(params.getString("uri")));
        }

        if (params.has("startPage") && (!params.getString("startPage").isEmpty())) {
          urlBuilder.addQueryParameter("start_page", escapeString(String.valueOf(params.getInt("startPage"))));
        }

        if (params.has("count") && (!params.getString("count").isEmpty())) {
          urlBuilder.addQueryParameter("count", escapeString(String.valueOf(params.getInt("count"))));
        }

        if (params.has("depth") && (!params.getString("depth").isEmpty())) {
          urlBuilder.addQueryParameter("depth", escapeString(String.valueOf(params.getInt("depth"))));
        }

        if (params.has("forbiddenId") && (!params.getString("forbiddenId").isEmpty())) {
          urlBuilder.addQueryParameter("forbidden_id[]", escapeString(String.valueOf(params.getJSONArray("forbiddenId"))));
        }

        if (params.has("forbiddenUris") && (!params.getString("forbiddenUris").isEmpty())) {
          urlBuilder.addQueryParameter("forbidden_uris[]", escapeString(String.valueOf(params.getJSONArray("forbiddenUris"))));
        }

        if (params.has("externalCode") && (!params.getString("externalCode").isEmpty())) {
          urlBuilder.addQueryParameter("external_code", escapeString(params.getString("externalCode")));
        }

        if (params.has("headsign") && (!params.getString("headsign").isEmpty())) {
          urlBuilder.addQueryParameter("headsign", escapeString(params.getString("headsign")));
        }

        if (params.has("showCodes") && (!params.getString("showCodes").isEmpty())) {
          urlBuilder.addQueryParameter("show_codes", escapeString(String.valueOf(params.getBoolean("showCodes"))));
        }

        if (params.has("odtLevel") && (!params.getString("odtLevel").isEmpty())) {
          urlBuilder.addQueryParameter("odt_level", escapeString(params.getString("odtLevel")));
        }

        if (params.has("dataFreshness") && (!params.getString("dataFreshness").isEmpty())) {
          urlBuilder.addQueryParameter("data_freshness", escapeString(params.getString("dataFreshness")));
        }

        if (params.has("distance") && (!params.getString("distance").isEmpty())) {
          urlBuilder.addQueryParameter("distance", escapeString(String.valueOf(params.getInt("distance"))));
        }

        if (params.has("since") && (!params.getString("since").isEmpty())) {
          urlBuilder.addQueryParameter("since", escapeString(String.valueOf(params.getString("since"))));
        }

        if (params.has("until") && (!params.getString("until").isEmpty())) {
          urlBuilder.addQueryParameter("until", escapeString(String.valueOf(params.getString("until"))));
        }

        if (params.has("disableGeojson") && (!params.getString("disableGeojson").isEmpty())) {
          urlBuilder.addQueryParameter("disable_geojson", escapeString(String.valueOf(params.getBoolean("disableGeojson"))));
        }

        if (params.has("disableDisruption") && (!params.getString("disableDisruption").isEmpty())) {
          urlBuilder.addQueryParameter("disable_disruption", escapeString(String.valueOf(params.getBoolean("disableDisruption"))));
        }

        if (params.has("filter") && (!params.getString("filter").isEmpty())) {
          urlBuilder.addQueryParameter("filter", escapeString(params.getString("filter")));
        }

        if (params.has("tags") && (!params.getString("tags").isEmpty())) {
          urlBuilder.addQueryParameter("tags[]", escapeString(String.valueOf(params.getJSONArray("tags"))));
        }

        HttpUrl url = urlBuilder
          .addPathSegments(path)
          .build();
        Request request = requestBuilder.url(url)
          .build();

        client.newCall(request).enqueue(new Callback() {

          @Override
          public void onFailure(@NonNull Call call, @NonNull IOException e) {
            String errorMessage = "Problem during request | " + String.valueOf(e.hashCode()) + ": " + e.getMessage();
            callbackContext.error(errorMessage);
          }

          @Override
          public void onResponse(@NonNull Call call, @NonNull Response response) {
            if (response.isSuccessful()) {
              try {
                JSONObject jsonObject = new JSONObject(Objects.requireNonNull(response.body()).string());
                callbackContext.success(jsonObject);
              } catch (Exception e) {
                String errorMessage = "Problem during response parsing";
                callbackContext.error(errorMessage);
              }
            } else {
              callbackContext.error("Unexpected code " + response.code() + " | message: " + response.message());
            }
          }
        });
      } catch (Exception e) {
        String errorMessage = "Problem during request building | " + e.hashCode() + ": " + e.getMessage();
        callbackContext.error(errorMessage);
      }
    });
  }

  private void coverageLonLatUriCompaniesId(final JSONObject params, final CallbackContext callbackContext) {
    cordova.getThreadPool().execute(() -> {
      try {
        HttpUrl.Builder urlBuilder = new HttpUrl.Builder()
          .scheme("https")
          .host("api.navitia.io")
          .addPathSegment("v1");
        Request.Builder requestBuilder = new Request.Builder()
          .header("Authorization", token);
        String path = "/coverage/{lon};{lat}/{uri}/companies/{id}".substring(1);

        if (params.has("lat") && (!params.getString("lat").isEmpty())) {
          path = path.replaceAll("\\{" + "lat" + "\\}", escapeString(String.valueOf(params.getLong("lat"))));
        }

        if (params.has("lon") && (!params.getString("lon").isEmpty())) {
          path = path.replaceAll("\\{" + "lon" + "\\}", escapeString(String.valueOf(params.getLong("lon"))));
        }

        if (params.has("uri") && (!params.getString("uri").isEmpty())) {
          path = path.replaceAll("\\{" + "uri" + "\\}", escapeString(params.getString("uri")));
        }

        if (params.has("id") && (!params.getString("id").isEmpty())) {
          path = path.replaceAll("\\{" + "id" + "\\}", escapeString(params.getString("id")));
        }

        if (params.has("startPage") && (!params.getString("startPage").isEmpty())) {
          urlBuilder.addQueryParameter("start_page", escapeString(String.valueOf(params.getInt("startPage"))));
        }

        if (params.has("count") && (!params.getString("count").isEmpty())) {
          urlBuilder.addQueryParameter("count", escapeString(String.valueOf(params.getInt("count"))));
        }

        if (params.has("depth") && (!params.getString("depth").isEmpty())) {
          urlBuilder.addQueryParameter("depth", escapeString(String.valueOf(params.getInt("depth"))));
        }

        if (params.has("forbiddenId") && (!params.getString("forbiddenId").isEmpty())) {
          urlBuilder.addQueryParameter("forbidden_id[]", escapeString(String.valueOf(params.getJSONArray("forbiddenId"))));
        }

        if (params.has("forbiddenUris") && (!params.getString("forbiddenUris").isEmpty())) {
          urlBuilder.addQueryParameter("forbidden_uris[]", escapeString(String.valueOf(params.getJSONArray("forbiddenUris"))));
        }

        if (params.has("externalCode") && (!params.getString("externalCode").isEmpty())) {
          urlBuilder.addQueryParameter("external_code", escapeString(params.getString("externalCode")));
        }

        if (params.has("headsign") && (!params.getString("headsign").isEmpty())) {
          urlBuilder.addQueryParameter("headsign", escapeString(params.getString("headsign")));
        }

        if (params.has("showCodes") && (!params.getString("showCodes").isEmpty())) {
          urlBuilder.addQueryParameter("show_codes", escapeString(String.valueOf(params.getBoolean("showCodes"))));
        }

        if (params.has("odtLevel") && (!params.getString("odtLevel").isEmpty())) {
          urlBuilder.addQueryParameter("odt_level", escapeString(params.getString("odtLevel")));
        }

        if (params.has("dataFreshness") && (!params.getString("dataFreshness").isEmpty())) {
          urlBuilder.addQueryParameter("data_freshness", escapeString(params.getString("dataFreshness")));
        }

        if (params.has("distance") && (!params.getString("distance").isEmpty())) {
          urlBuilder.addQueryParameter("distance", escapeString(String.valueOf(params.getInt("distance"))));
        }

        if (params.has("since") && (!params.getString("since").isEmpty())) {
          urlBuilder.addQueryParameter("since", escapeString(String.valueOf(params.getString("since"))));
        }

        if (params.has("until") && (!params.getString("until").isEmpty())) {
          urlBuilder.addQueryParameter("until", escapeString(String.valueOf(params.getString("until"))));
        }

        if (params.has("disableGeojson") && (!params.getString("disableGeojson").isEmpty())) {
          urlBuilder.addQueryParameter("disable_geojson", escapeString(String.valueOf(params.getBoolean("disableGeojson"))));
        }

        if (params.has("disableDisruption") && (!params.getString("disableDisruption").isEmpty())) {
          urlBuilder.addQueryParameter("disable_disruption", escapeString(String.valueOf(params.getBoolean("disableDisruption"))));
        }

        if (params.has("tags") && (!params.getString("tags").isEmpty())) {
          urlBuilder.addQueryParameter("tags[]", escapeString(String.valueOf(params.getJSONArray("tags"))));
        }

        HttpUrl url = urlBuilder
          .addPathSegments(path)
          .build();
        Request request = requestBuilder.url(url)
          .build();

        client.newCall(request).enqueue(new Callback() {

          @Override
          public void onFailure(@NonNull Call call, @NonNull IOException e) {
            String errorMessage = "Problem during request | " + String.valueOf(e.hashCode()) + ": " + e.getMessage();
            callbackContext.error(errorMessage);
          }

          @Override
          public void onResponse(@NonNull Call call, @NonNull Response response) {
            if (response.isSuccessful()) {
              try {
                JSONObject jsonObject = new JSONObject(Objects.requireNonNull(response.body()).string());
                callbackContext.success(jsonObject);
              } catch (Exception e) {
                String errorMessage = "Problem during response parsing";
                callbackContext.error(errorMessage);
              }
            } else {
              callbackContext.error("Unexpected code " + response.code() + " | message: " + response.message());
            }
          }
        });
      } catch (Exception e) {
        String errorMessage = "Problem during request building | " + e.hashCode() + ": " + e.getMessage();
        callbackContext.error(errorMessage);
      }
    });
  }

  private void coverageRegionCompanies(final JSONObject params, final CallbackContext callbackContext) {
    cordova.getThreadPool().execute(() -> {
      try {
        HttpUrl.Builder urlBuilder = new HttpUrl.Builder()
          .scheme("https")
          .host("api.navitia.io")
          .addPathSegment("v1");
        Request.Builder requestBuilder = new Request.Builder()
          .header("Authorization", token);
        String path = "/coverage/{region}/companies".substring(1);

        if (params.has("region") && (!params.getString("region").isEmpty())) {
          path = path.replaceAll("\\{" + "region" + "\\}", escapeString(params.getString("region")));
        }

        if (params.has("startPage") && (!params.getString("startPage").isEmpty())) {
          urlBuilder.addQueryParameter("start_page", escapeString(String.valueOf(params.getInt("startPage"))));
        }

        if (params.has("count") && (!params.getString("count").isEmpty())) {
          urlBuilder.addQueryParameter("count", escapeString(String.valueOf(params.getInt("count"))));
        }

        if (params.has("depth") && (!params.getString("depth").isEmpty())) {
          urlBuilder.addQueryParameter("depth", escapeString(String.valueOf(params.getInt("depth"))));
        }

        if (params.has("forbiddenId") && (!params.getString("forbiddenId").isEmpty())) {
          urlBuilder.addQueryParameter("forbidden_id[]", escapeString(String.valueOf(params.getJSONArray("forbiddenId"))));
        }

        if (params.has("forbiddenUris") && (!params.getString("forbiddenUris").isEmpty())) {
          urlBuilder.addQueryParameter("forbidden_uris[]", escapeString(String.valueOf(params.getJSONArray("forbiddenUris"))));
        }

        if (params.has("externalCode") && (!params.getString("externalCode").isEmpty())) {
          urlBuilder.addQueryParameter("external_code", escapeString(params.getString("externalCode")));
        }

        if (params.has("headsign") && (!params.getString("headsign").isEmpty())) {
          urlBuilder.addQueryParameter("headsign", escapeString(params.getString("headsign")));
        }

        if (params.has("showCodes") && (!params.getString("showCodes").isEmpty())) {
          urlBuilder.addQueryParameter("show_codes", escapeString(String.valueOf(params.getBoolean("showCodes"))));
        }

        if (params.has("odtLevel") && (!params.getString("odtLevel").isEmpty())) {
          urlBuilder.addQueryParameter("odt_level", escapeString(params.getString("odtLevel")));
        }

        if (params.has("dataFreshness") && (!params.getString("dataFreshness").isEmpty())) {
          urlBuilder.addQueryParameter("data_freshness", escapeString(params.getString("dataFreshness")));
        }

        if (params.has("distance") && (!params.getString("distance").isEmpty())) {
          urlBuilder.addQueryParameter("distance", escapeString(String.valueOf(params.getInt("distance"))));
        }

        if (params.has("since") && (!params.getString("since").isEmpty())) {
          urlBuilder.addQueryParameter("since", escapeString(String.valueOf(params.getString("since"))));
        }

        if (params.has("until") && (!params.getString("until").isEmpty())) {
          urlBuilder.addQueryParameter("until", escapeString(String.valueOf(params.getString("until"))));
        }

        if (params.has("disableGeojson") && (!params.getString("disableGeojson").isEmpty())) {
          urlBuilder.addQueryParameter("disable_geojson", escapeString(String.valueOf(params.getBoolean("disableGeojson"))));
        }

        if (params.has("disableDisruption") && (!params.getString("disableDisruption").isEmpty())) {
          urlBuilder.addQueryParameter("disable_disruption", escapeString(String.valueOf(params.getBoolean("disableDisruption"))));
        }

        if (params.has("filter") && (!params.getString("filter").isEmpty())) {
          urlBuilder.addQueryParameter("filter", escapeString(params.getString("filter")));
        }

        if (params.has("tags") && (!params.getString("tags").isEmpty())) {
          urlBuilder.addQueryParameter("tags[]", escapeString(String.valueOf(params.getJSONArray("tags"))));
        }

        HttpUrl url = urlBuilder
          .addPathSegments(path)
          .build();
        Request request = requestBuilder.url(url)
          .build();

        client.newCall(request).enqueue(new Callback() {

          @Override
          public void onFailure(@NonNull Call call, @NonNull IOException e) {
            String errorMessage = "Problem during request | " + String.valueOf(e.hashCode()) + ": " + e.getMessage();
            callbackContext.error(errorMessage);
          }

          @Override
          public void onResponse(@NonNull Call call, @NonNull Response response) {
            if (response.isSuccessful()) {
              try {
                JSONObject jsonObject = new JSONObject(Objects.requireNonNull(response.body()).string());
                callbackContext.success(jsonObject);
              } catch (Exception e) {
                String errorMessage = "Problem during response parsing";
                callbackContext.error(errorMessage);
              }
            } else {
              callbackContext.error("Unexpected code " + response.code() + " | message: " + response.message());
            }
          }
        });
      } catch (Exception e) {
        String errorMessage = "Problem during request building | " + e.hashCode() + ": " + e.getMessage();
        callbackContext.error(errorMessage);
      }
    });
  }

  private void coverageRegionCompaniesId(final JSONObject params, final CallbackContext callbackContext) {
    cordova.getThreadPool().execute(() -> {
      try {
        HttpUrl.Builder urlBuilder = new HttpUrl.Builder()
          .scheme("https")
          .host("api.navitia.io")
          .addPathSegment("v1");
        Request.Builder requestBuilder = new Request.Builder()
          .header("Authorization", token);
        String path = "/coverage/{region}/companies/{id}".substring(1);

        if (params.has("region") && (!params.getString("region").isEmpty())) {
          path = path.replaceAll("\\{" + "region" + "\\}", escapeString(params.getString("region")));
        }

        if (params.has("id") && (!params.getString("id").isEmpty())) {
          path = path.replaceAll("\\{" + "id" + "\\}", escapeString(params.getString("id")));
        }

        if (params.has("startPage") && (!params.getString("startPage").isEmpty())) {
          urlBuilder.addQueryParameter("start_page", escapeString(String.valueOf(params.getInt("startPage"))));
        }

        if (params.has("count") && (!params.getString("count").isEmpty())) {
          urlBuilder.addQueryParameter("count", escapeString(String.valueOf(params.getInt("count"))));
        }

        if (params.has("depth") && (!params.getString("depth").isEmpty())) {
          urlBuilder.addQueryParameter("depth", escapeString(String.valueOf(params.getInt("depth"))));
        }

        if (params.has("forbiddenId") && (!params.getString("forbiddenId").isEmpty())) {
          urlBuilder.addQueryParameter("forbidden_id[]", escapeString(String.valueOf(params.getJSONArray("forbiddenId"))));
        }

        if (params.has("forbiddenUris") && (!params.getString("forbiddenUris").isEmpty())) {
          urlBuilder.addQueryParameter("forbidden_uris[]", escapeString(String.valueOf(params.getJSONArray("forbiddenUris"))));
        }

        if (params.has("externalCode") && (!params.getString("externalCode").isEmpty())) {
          urlBuilder.addQueryParameter("external_code", escapeString(params.getString("externalCode")));
        }

        if (params.has("headsign") && (!params.getString("headsign").isEmpty())) {
          urlBuilder.addQueryParameter("headsign", escapeString(params.getString("headsign")));
        }

        if (params.has("showCodes") && (!params.getString("showCodes").isEmpty())) {
          urlBuilder.addQueryParameter("show_codes", escapeString(String.valueOf(params.getBoolean("showCodes"))));
        }

        if (params.has("odtLevel") && (!params.getString("odtLevel").isEmpty())) {
          urlBuilder.addQueryParameter("odt_level", escapeString(params.getString("odtLevel")));
        }

        if (params.has("dataFreshness") && (!params.getString("dataFreshness").isEmpty())) {
          urlBuilder.addQueryParameter("data_freshness", escapeString(params.getString("dataFreshness")));
        }

        if (params.has("distance") && (!params.getString("distance").isEmpty())) {
          urlBuilder.addQueryParameter("distance", escapeString(String.valueOf(params.getInt("distance"))));
        }

        if (params.has("since") && (!params.getString("since").isEmpty())) {
          urlBuilder.addQueryParameter("since", escapeString(String.valueOf(params.getString("since"))));
        }

        if (params.has("until") && (!params.getString("until").isEmpty())) {
          urlBuilder.addQueryParameter("until", escapeString(String.valueOf(params.getString("until"))));
        }

        if (params.has("disableGeojson") && (!params.getString("disableGeojson").isEmpty())) {
          urlBuilder.addQueryParameter("disable_geojson", escapeString(String.valueOf(params.getBoolean("disableGeojson"))));
        }

        if (params.has("disableDisruption") && (!params.getString("disableDisruption").isEmpty())) {
          urlBuilder.addQueryParameter("disable_disruption", escapeString(String.valueOf(params.getBoolean("disableDisruption"))));
        }

        if (params.has("tags") && (!params.getString("tags").isEmpty())) {
          urlBuilder.addQueryParameter("tags[]", escapeString(String.valueOf(params.getJSONArray("tags"))));
        }

        HttpUrl url = urlBuilder
          .addPathSegments(path)
          .build();
        Request request = requestBuilder.url(url)
          .build();

        client.newCall(request).enqueue(new Callback() {

          @Override
          public void onFailure(@NonNull Call call, @NonNull IOException e) {
            String errorMessage = "Problem during request | " + String.valueOf(e.hashCode()) + ": " + e.getMessage();
            callbackContext.error(errorMessage);
          }

          @Override
          public void onResponse(@NonNull Call call, @NonNull Response response) {
            if (response.isSuccessful()) {
              try {
                JSONObject jsonObject = new JSONObject(Objects.requireNonNull(response.body()).string());
                callbackContext.success(jsonObject);
              } catch (Exception e) {
                String errorMessage = "Problem during response parsing";
                callbackContext.error(errorMessage);
              }
            } else {
              callbackContext.error("Unexpected code " + response.code() + " | message: " + response.message());
            }
          }
        });
      } catch (Exception e) {
        String errorMessage = "Problem during request building | " + e.hashCode() + ": " + e.getMessage();
        callbackContext.error(errorMessage);
      }
    });
  }

  private void coverageRegionUriCompanies(final JSONObject params, final CallbackContext callbackContext) {
    cordova.getThreadPool().execute(() -> {
      try {
        HttpUrl.Builder urlBuilder = new HttpUrl.Builder()
          .scheme("https")
          .host("api.navitia.io")
          .addPathSegment("v1");
        Request.Builder requestBuilder = new Request.Builder()
          .header("Authorization", token);
        String path = "/coverage/{region}/{uri}/companies".substring(1);

        if (params.has("region") && (!params.getString("region").isEmpty())) {
          path = path.replaceAll("\\{" + "region" + "\\}", escapeString(params.getString("region")));
        }

        if (params.has("uri") && (!params.getString("uri").isEmpty())) {
          path = path.replaceAll("\\{" + "uri" + "\\}", escapeString(params.getString("uri")));
        }

        if (params.has("startPage") && (!params.getString("startPage").isEmpty())) {
          urlBuilder.addQueryParameter("start_page", escapeString(String.valueOf(params.getInt("startPage"))));
        }

        if (params.has("count") && (!params.getString("count").isEmpty())) {
          urlBuilder.addQueryParameter("count", escapeString(String.valueOf(params.getInt("count"))));
        }

        if (params.has("depth") && (!params.getString("depth").isEmpty())) {
          urlBuilder.addQueryParameter("depth", escapeString(String.valueOf(params.getInt("depth"))));
        }

        if (params.has("forbiddenId") && (!params.getString("forbiddenId").isEmpty())) {
          urlBuilder.addQueryParameter("forbidden_id[]", escapeString(String.valueOf(params.getJSONArray("forbiddenId"))));
        }

        if (params.has("forbiddenUris") && (!params.getString("forbiddenUris").isEmpty())) {
          urlBuilder.addQueryParameter("forbidden_uris[]", escapeString(String.valueOf(params.getJSONArray("forbiddenUris"))));
        }

        if (params.has("externalCode") && (!params.getString("externalCode").isEmpty())) {
          urlBuilder.addQueryParameter("external_code", escapeString(params.getString("externalCode")));
        }

        if (params.has("headsign") && (!params.getString("headsign").isEmpty())) {
          urlBuilder.addQueryParameter("headsign", escapeString(params.getString("headsign")));
        }

        if (params.has("showCodes") && (!params.getString("showCodes").isEmpty())) {
          urlBuilder.addQueryParameter("show_codes", escapeString(String.valueOf(params.getBoolean("showCodes"))));
        }

        if (params.has("odtLevel") && (!params.getString("odtLevel").isEmpty())) {
          urlBuilder.addQueryParameter("odt_level", escapeString(params.getString("odtLevel")));
        }

        if (params.has("dataFreshness") && (!params.getString("dataFreshness").isEmpty())) {
          urlBuilder.addQueryParameter("data_freshness", escapeString(params.getString("dataFreshness")));
        }

        if (params.has("distance") && (!params.getString("distance").isEmpty())) {
          urlBuilder.addQueryParameter("distance", escapeString(String.valueOf(params.getInt("distance"))));
        }

        if (params.has("since") && (!params.getString("since").isEmpty())) {
          urlBuilder.addQueryParameter("since", escapeString(String.valueOf(params.getString("since"))));
        }

        if (params.has("until") && (!params.getString("until").isEmpty())) {
          urlBuilder.addQueryParameter("until", escapeString(String.valueOf(params.getString("until"))));
        }

        if (params.has("disableGeojson") && (!params.getString("disableGeojson").isEmpty())) {
          urlBuilder.addQueryParameter("disable_geojson", escapeString(String.valueOf(params.getBoolean("disableGeojson"))));
        }

        if (params.has("disableDisruption") && (!params.getString("disableDisruption").isEmpty())) {
          urlBuilder.addQueryParameter("disable_disruption", escapeString(String.valueOf(params.getBoolean("disableDisruption"))));
        }

        if (params.has("filter") && (!params.getString("filter").isEmpty())) {
          urlBuilder.addQueryParameter("filter", escapeString(params.getString("filter")));
        }

        if (params.has("tags") && (!params.getString("tags").isEmpty())) {
          urlBuilder.addQueryParameter("tags[]", escapeString(String.valueOf(params.getJSONArray("tags"))));
        }

        HttpUrl url = urlBuilder
          .addPathSegments(path)
          .build();
        Request request = requestBuilder.url(url)
          .build();

        client.newCall(request).enqueue(new Callback() {

          @Override
          public void onFailure(@NonNull Call call, @NonNull IOException e) {
            String errorMessage = "Problem during request | " + String.valueOf(e.hashCode()) + ": " + e.getMessage();
            callbackContext.error(errorMessage);
          }

          @Override
          public void onResponse(@NonNull Call call, @NonNull Response response) {
            if (response.isSuccessful()) {
              try {
                JSONObject jsonObject = new JSONObject(Objects.requireNonNull(response.body()).string());
                callbackContext.success(jsonObject);
              } catch (Exception e) {
                String errorMessage = "Problem during response parsing";
                callbackContext.error(errorMessage);
              }
            } else {
              callbackContext.error("Unexpected code " + response.code() + " | message: " + response.message());
            }
          }
        });
      } catch (Exception e) {
        String errorMessage = "Problem during request building | " + e.hashCode() + ": " + e.getMessage();
        callbackContext.error(errorMessage);
      }
    });
  }

  private void coverageRegionUriCompaniesId(final JSONObject params, final CallbackContext callbackContext) {
    cordova.getThreadPool().execute(() -> {
      try {
        HttpUrl.Builder urlBuilder = new HttpUrl.Builder()
          .scheme("https")
          .host("api.navitia.io")
          .addPathSegment("v1");
        Request.Builder requestBuilder = new Request.Builder()
          .header("Authorization", token);
        String path = "/coverage/{region}/{uri}/companies/{id}".substring(1);

        if (params.has("region") && (!params.getString("region").isEmpty())) {
          path = path.replaceAll("\\{" + "region" + "\\}", escapeString(params.getString("region")));
        }

        if (params.has("uri") && (!params.getString("uri").isEmpty())) {
          path = path.replaceAll("\\{" + "uri" + "\\}", escapeString(params.getString("uri")));
        }

        if (params.has("id") && (!params.getString("id").isEmpty())) {
          path = path.replaceAll("\\{" + "id" + "\\}", escapeString(params.getString("id")));
        }

        if (params.has("startPage") && (!params.getString("startPage").isEmpty())) {
          urlBuilder.addQueryParameter("start_page", escapeString(String.valueOf(params.getInt("startPage"))));
        }

        if (params.has("count") && (!params.getString("count").isEmpty())) {
          urlBuilder.addQueryParameter("count", escapeString(String.valueOf(params.getInt("count"))));
        }

        if (params.has("depth") && (!params.getString("depth").isEmpty())) {
          urlBuilder.addQueryParameter("depth", escapeString(String.valueOf(params.getInt("depth"))));
        }

        if (params.has("forbiddenId") && (!params.getString("forbiddenId").isEmpty())) {
          urlBuilder.addQueryParameter("forbidden_id[]", escapeString(String.valueOf(params.getJSONArray("forbiddenId"))));
        }

        if (params.has("forbiddenUris") && (!params.getString("forbiddenUris").isEmpty())) {
          urlBuilder.addQueryParameter("forbidden_uris[]", escapeString(String.valueOf(params.getJSONArray("forbiddenUris"))));
        }

        if (params.has("externalCode") && (!params.getString("externalCode").isEmpty())) {
          urlBuilder.addQueryParameter("external_code", escapeString(params.getString("externalCode")));
        }

        if (params.has("headsign") && (!params.getString("headsign").isEmpty())) {
          urlBuilder.addQueryParameter("headsign", escapeString(params.getString("headsign")));
        }

        if (params.has("showCodes") && (!params.getString("showCodes").isEmpty())) {
          urlBuilder.addQueryParameter("show_codes", escapeString(String.valueOf(params.getBoolean("showCodes"))));
        }

        if (params.has("odtLevel") && (!params.getString("odtLevel").isEmpty())) {
          urlBuilder.addQueryParameter("odt_level", escapeString(params.getString("odtLevel")));
        }

        if (params.has("dataFreshness") && (!params.getString("dataFreshness").isEmpty())) {
          urlBuilder.addQueryParameter("data_freshness", escapeString(params.getString("dataFreshness")));
        }

        if (params.has("distance") && (!params.getString("distance").isEmpty())) {
          urlBuilder.addQueryParameter("distance", escapeString(String.valueOf(params.getInt("distance"))));
        }

        if (params.has("since") && (!params.getString("since").isEmpty())) {
          urlBuilder.addQueryParameter("since", escapeString(String.valueOf(params.getString("since"))));
        }

        if (params.has("until") && (!params.getString("until").isEmpty())) {
          urlBuilder.addQueryParameter("until", escapeString(String.valueOf(params.getString("until"))));
        }

        if (params.has("disableGeojson") && (!params.getString("disableGeojson").isEmpty())) {
          urlBuilder.addQueryParameter("disable_geojson", escapeString(String.valueOf(params.getBoolean("disableGeojson"))));
        }

        if (params.has("disableDisruption") && (!params.getString("disableDisruption").isEmpty())) {
          urlBuilder.addQueryParameter("disable_disruption", escapeString(String.valueOf(params.getBoolean("disableDisruption"))));
        }

        if (params.has("tags") && (!params.getString("tags").isEmpty())) {
          urlBuilder.addQueryParameter("tags[]", escapeString(String.valueOf(params.getJSONArray("tags"))));
        }

        HttpUrl url = urlBuilder
          .addPathSegments(path)
          .build();
        Request request = requestBuilder.url(url)
          .build();

        client.newCall(request).enqueue(new Callback() {

          @Override
          public void onFailure(@NonNull Call call, @NonNull IOException e) {
            String errorMessage = "Problem during request | " + String.valueOf(e.hashCode()) + ": " + e.getMessage();
            callbackContext.error(errorMessage);
          }

          @Override
          public void onResponse(@NonNull Call call, @NonNull Response response) {
            if (response.isSuccessful()) {
              try {
                JSONObject jsonObject = new JSONObject(Objects.requireNonNull(response.body()).string());
                callbackContext.success(jsonObject);
              } catch (Exception e) {
                String errorMessage = "Problem during response parsing";
                callbackContext.error(errorMessage);
              }
            } else {
              callbackContext.error("Unexpected code " + response.code() + " | message: " + response.message());
            }
          }
        });
      } catch (Exception e) {
        String errorMessage = "Problem during request building | " + e.hashCode() + ": " + e.getMessage();
        callbackContext.error(errorMessage);
      }
    });
  }

  private void coverageLonLatContributors(final JSONObject params, final CallbackContext callbackContext) {
    cordova.getThreadPool().execute(() -> {
      try {
        HttpUrl.Builder urlBuilder = new HttpUrl.Builder()
          .scheme("https")
          .host("api.navitia.io")
          .addPathSegment("v1");
        Request.Builder requestBuilder = new Request.Builder()
          .header("Authorization", token);
        String path = "/coverage/{lon};{lat}/contributors".substring(1);

        if (params.has("lat") && (!params.getString("lat").isEmpty())) {
          path = path.replaceAll("\\{" + "lat" + "\\}", escapeString(String.valueOf(params.getLong("lat"))));
        }

        if (params.has("lon") && (!params.getString("lon").isEmpty())) {
          path = path.replaceAll("\\{" + "lon" + "\\}", escapeString(String.valueOf(params.getLong("lon"))));
        }

        if (params.has("startPage") && (!params.getString("startPage").isEmpty())) {
          urlBuilder.addQueryParameter("start_page", escapeString(String.valueOf(params.getInt("startPage"))));
        }

        if (params.has("count") && (!params.getString("count").isEmpty())) {
          urlBuilder.addQueryParameter("count", escapeString(String.valueOf(params.getInt("count"))));
        }

        if (params.has("depth") && (!params.getString("depth").isEmpty())) {
          urlBuilder.addQueryParameter("depth", escapeString(String.valueOf(params.getInt("depth"))));
        }

        if (params.has("forbiddenId") && (!params.getString("forbiddenId").isEmpty())) {
          urlBuilder.addQueryParameter("forbidden_id[]", escapeString(String.valueOf(params.getJSONArray("forbiddenId"))));
        }

        if (params.has("forbiddenUris") && (!params.getString("forbiddenUris").isEmpty())) {
          urlBuilder.addQueryParameter("forbidden_uris[]", escapeString(String.valueOf(params.getJSONArray("forbiddenUris"))));
        }

        if (params.has("externalCode") && (!params.getString("externalCode").isEmpty())) {
          urlBuilder.addQueryParameter("external_code", escapeString(params.getString("externalCode")));
        }

        if (params.has("headsign") && (!params.getString("headsign").isEmpty())) {
          urlBuilder.addQueryParameter("headsign", escapeString(params.getString("headsign")));
        }

        if (params.has("showCodes") && (!params.getString("showCodes").isEmpty())) {
          urlBuilder.addQueryParameter("show_codes", escapeString(String.valueOf(params.getBoolean("showCodes"))));
        }

        if (params.has("odtLevel") && (!params.getString("odtLevel").isEmpty())) {
          urlBuilder.addQueryParameter("odt_level", escapeString(params.getString("odtLevel")));
        }

        if (params.has("dataFreshness") && (!params.getString("dataFreshness").isEmpty())) {
          urlBuilder.addQueryParameter("data_freshness", escapeString(params.getString("dataFreshness")));
        }

        if (params.has("distance") && (!params.getString("distance").isEmpty())) {
          urlBuilder.addQueryParameter("distance", escapeString(String.valueOf(params.getInt("distance"))));
        }

        if (params.has("since") && (!params.getString("since").isEmpty())) {
          urlBuilder.addQueryParameter("since", escapeString(String.valueOf(params.getString("since"))));
        }

        if (params.has("until") && (!params.getString("until").isEmpty())) {
          urlBuilder.addQueryParameter("until", escapeString(String.valueOf(params.getString("until"))));
        }

        if (params.has("disableGeojson") && (!params.getString("disableGeojson").isEmpty())) {
          urlBuilder.addQueryParameter("disable_geojson", escapeString(String.valueOf(params.getBoolean("disableGeojson"))));
        }

        if (params.has("disableDisruption") && (!params.getString("disableDisruption").isEmpty())) {
          urlBuilder.addQueryParameter("disable_disruption", escapeString(String.valueOf(params.getBoolean("disableDisruption"))));
        }

        if (params.has("filter") && (!params.getString("filter").isEmpty())) {
          urlBuilder.addQueryParameter("filter", escapeString(params.getString("filter")));
        }

        if (params.has("tags") && (!params.getString("tags").isEmpty())) {
          urlBuilder.addQueryParameter("tags[]", escapeString(String.valueOf(params.getJSONArray("tags"))));
        }

        HttpUrl url = urlBuilder
          .addPathSegments(path)
          .build();
        Request request = requestBuilder.url(url)
          .build();

        client.newCall(request).enqueue(new Callback() {

          @Override
          public void onFailure(@NonNull Call call, @NonNull IOException e) {
            String errorMessage = "Problem during request | " + String.valueOf(e.hashCode()) + ": " + e.getMessage();
            callbackContext.error(errorMessage);
          }

          @Override
          public void onResponse(@NonNull Call call, @NonNull Response response) {
            if (response.isSuccessful()) {
              try {
                JSONObject jsonObject = new JSONObject(Objects.requireNonNull(response.body()).string());
                callbackContext.success(jsonObject);
              } catch (Exception e) {
                String errorMessage = "Problem during response parsing";
                callbackContext.error(errorMessage);
              }
            } else {
              callbackContext.error("Unexpected code " + response.code() + " | message: " + response.message());
            }
          }
        });
      } catch (Exception e) {
        String errorMessage = "Problem during request building | " + e.hashCode() + ": " + e.getMessage();
        callbackContext.error(errorMessage);
      }
    });
  }

  private void coverageLonLatContributorsId(final JSONObject params, final CallbackContext callbackContext) {
    cordova.getThreadPool().execute(() -> {
      try {
        HttpUrl.Builder urlBuilder = new HttpUrl.Builder()
          .scheme("https")
          .host("api.navitia.io")
          .addPathSegment("v1");
        Request.Builder requestBuilder = new Request.Builder()
          .header("Authorization", token);
        String path = "/coverage/{lon};{lat}/contributors/{id}".substring(1);

        if (params.has("lat") && (!params.getString("lat").isEmpty())) {
          path = path.replaceAll("\\{" + "lat" + "\\}", escapeString(String.valueOf(params.getLong("lat"))));
        }

        if (params.has("lon") && (!params.getString("lon").isEmpty())) {
          path = path.replaceAll("\\{" + "lon" + "\\}", escapeString(String.valueOf(params.getLong("lon"))));
        }

        if (params.has("id") && (!params.getString("id").isEmpty())) {
          path = path.replaceAll("\\{" + "id" + "\\}", escapeString(params.getString("id")));
        }

        if (params.has("startPage") && (!params.getString("startPage").isEmpty())) {
          urlBuilder.addQueryParameter("start_page", escapeString(String.valueOf(params.getInt("startPage"))));
        }

        if (params.has("count") && (!params.getString("count").isEmpty())) {
          urlBuilder.addQueryParameter("count", escapeString(String.valueOf(params.getInt("count"))));
        }

        if (params.has("depth") && (!params.getString("depth").isEmpty())) {
          urlBuilder.addQueryParameter("depth", escapeString(String.valueOf(params.getInt("depth"))));
        }

        if (params.has("forbiddenId") && (!params.getString("forbiddenId").isEmpty())) {
          urlBuilder.addQueryParameter("forbidden_id[]", escapeString(String.valueOf(params.getJSONArray("forbiddenId"))));
        }

        if (params.has("forbiddenUris") && (!params.getString("forbiddenUris").isEmpty())) {
          urlBuilder.addQueryParameter("forbidden_uris[]", escapeString(String.valueOf(params.getJSONArray("forbiddenUris"))));
        }

        if (params.has("externalCode") && (!params.getString("externalCode").isEmpty())) {
          urlBuilder.addQueryParameter("external_code", escapeString(params.getString("externalCode")));
        }

        if (params.has("headsign") && (!params.getString("headsign").isEmpty())) {
          urlBuilder.addQueryParameter("headsign", escapeString(params.getString("headsign")));
        }

        if (params.has("showCodes") && (!params.getString("showCodes").isEmpty())) {
          urlBuilder.addQueryParameter("show_codes", escapeString(String.valueOf(params.getBoolean("showCodes"))));
        }

        if (params.has("odtLevel") && (!params.getString("odtLevel").isEmpty())) {
          urlBuilder.addQueryParameter("odt_level", escapeString(params.getString("odtLevel")));
        }

        if (params.has("dataFreshness") && (!params.getString("dataFreshness").isEmpty())) {
          urlBuilder.addQueryParameter("data_freshness", escapeString(params.getString("dataFreshness")));
        }

        if (params.has("distance") && (!params.getString("distance").isEmpty())) {
          urlBuilder.addQueryParameter("distance", escapeString(String.valueOf(params.getInt("distance"))));
        }

        if (params.has("since") && (!params.getString("since").isEmpty())) {
          urlBuilder.addQueryParameter("since", escapeString(String.valueOf(params.getString("since"))));
        }

        if (params.has("until") && (!params.getString("until").isEmpty())) {
          urlBuilder.addQueryParameter("until", escapeString(String.valueOf(params.getString("until"))));
        }

        if (params.has("disableGeojson") && (!params.getString("disableGeojson").isEmpty())) {
          urlBuilder.addQueryParameter("disable_geojson", escapeString(String.valueOf(params.getBoolean("disableGeojson"))));
        }

        if (params.has("disableDisruption") && (!params.getString("disableDisruption").isEmpty())) {
          urlBuilder.addQueryParameter("disable_disruption", escapeString(String.valueOf(params.getBoolean("disableDisruption"))));
        }

        if (params.has("tags") && (!params.getString("tags").isEmpty())) {
          urlBuilder.addQueryParameter("tags[]", escapeString(String.valueOf(params.getJSONArray("tags"))));
        }

        HttpUrl url = urlBuilder
          .addPathSegments(path)
          .build();
        Request request = requestBuilder.url(url)
          .build();

        client.newCall(request).enqueue(new Callback() {

          @Override
          public void onFailure(@NonNull Call call, @NonNull IOException e) {
            String errorMessage = "Problem during request | " + String.valueOf(e.hashCode()) + ": " + e.getMessage();
            callbackContext.error(errorMessage);
          }

          @Override
          public void onResponse(@NonNull Call call, @NonNull Response response) {
            if (response.isSuccessful()) {
              try {
                JSONObject jsonObject = new JSONObject(Objects.requireNonNull(response.body()).string());
                callbackContext.success(jsonObject);
              } catch (Exception e) {
                String errorMessage = "Problem during response parsing";
                callbackContext.error(errorMessage);
              }
            } else {
              callbackContext.error("Unexpected code " + response.code() + " | message: " + response.message());
            }
          }
        });
      } catch (Exception e) {
        String errorMessage = "Problem during request building | " + e.hashCode() + ": " + e.getMessage();
        callbackContext.error(errorMessage);
      }
    });
  }

  private void coverageLonLatUriContributors(final JSONObject params, final CallbackContext callbackContext) {
    cordova.getThreadPool().execute(() -> {
      try {
        HttpUrl.Builder urlBuilder = new HttpUrl.Builder()
          .scheme("https")
          .host("api.navitia.io")
          .addPathSegment("v1");
        Request.Builder requestBuilder = new Request.Builder()
          .header("Authorization", token);
        String path = "/coverage/{lon};{lat}/{uri}/contributors".substring(1);

        if (params.has("lat") && (!params.getString("lat").isEmpty())) {
          path = path.replaceAll("\\{" + "lat" + "\\}", escapeString(String.valueOf(params.getLong("lat"))));
        }

        if (params.has("lon") && (!params.getString("lon").isEmpty())) {
          path = path.replaceAll("\\{" + "lon" + "\\}", escapeString(String.valueOf(params.getLong("lon"))));
        }

        if (params.has("uri") && (!params.getString("uri").isEmpty())) {
          path = path.replaceAll("\\{" + "uri" + "\\}", escapeString(params.getString("uri")));
        }

        if (params.has("startPage") && (!params.getString("startPage").isEmpty())) {
          urlBuilder.addQueryParameter("start_page", escapeString(String.valueOf(params.getInt("startPage"))));
        }

        if (params.has("count") && (!params.getString("count").isEmpty())) {
          urlBuilder.addQueryParameter("count", escapeString(String.valueOf(params.getInt("count"))));
        }

        if (params.has("depth") && (!params.getString("depth").isEmpty())) {
          urlBuilder.addQueryParameter("depth", escapeString(String.valueOf(params.getInt("depth"))));
        }

        if (params.has("forbiddenId") && (!params.getString("forbiddenId").isEmpty())) {
          urlBuilder.addQueryParameter("forbidden_id[]", escapeString(String.valueOf(params.getJSONArray("forbiddenId"))));
        }

        if (params.has("forbiddenUris") && (!params.getString("forbiddenUris").isEmpty())) {
          urlBuilder.addQueryParameter("forbidden_uris[]", escapeString(String.valueOf(params.getJSONArray("forbiddenUris"))));
        }

        if (params.has("externalCode") && (!params.getString("externalCode").isEmpty())) {
          urlBuilder.addQueryParameter("external_code", escapeString(params.getString("externalCode")));
        }

        if (params.has("headsign") && (!params.getString("headsign").isEmpty())) {
          urlBuilder.addQueryParameter("headsign", escapeString(params.getString("headsign")));
        }

        if (params.has("showCodes") && (!params.getString("showCodes").isEmpty())) {
          urlBuilder.addQueryParameter("show_codes", escapeString(String.valueOf(params.getBoolean("showCodes"))));
        }

        if (params.has("odtLevel") && (!params.getString("odtLevel").isEmpty())) {
          urlBuilder.addQueryParameter("odt_level", escapeString(params.getString("odtLevel")));
        }

        if (params.has("dataFreshness") && (!params.getString("dataFreshness").isEmpty())) {
          urlBuilder.addQueryParameter("data_freshness", escapeString(params.getString("dataFreshness")));
        }

        if (params.has("distance") && (!params.getString("distance").isEmpty())) {
          urlBuilder.addQueryParameter("distance", escapeString(String.valueOf(params.getInt("distance"))));
        }

        if (params.has("since") && (!params.getString("since").isEmpty())) {
          urlBuilder.addQueryParameter("since", escapeString(String.valueOf(params.getString("since"))));
        }

        if (params.has("until") && (!params.getString("until").isEmpty())) {
          urlBuilder.addQueryParameter("until", escapeString(String.valueOf(params.getString("until"))));
        }

        if (params.has("disableGeojson") && (!params.getString("disableGeojson").isEmpty())) {
          urlBuilder.addQueryParameter("disable_geojson", escapeString(String.valueOf(params.getBoolean("disableGeojson"))));
        }

        if (params.has("disableDisruption") && (!params.getString("disableDisruption").isEmpty())) {
          urlBuilder.addQueryParameter("disable_disruption", escapeString(String.valueOf(params.getBoolean("disableDisruption"))));
        }

        if (params.has("filter") && (!params.getString("filter").isEmpty())) {
          urlBuilder.addQueryParameter("filter", escapeString(params.getString("filter")));
        }

        if (params.has("tags") && (!params.getString("tags").isEmpty())) {
          urlBuilder.addQueryParameter("tags[]", escapeString(String.valueOf(params.getJSONArray("tags"))));
        }

        HttpUrl url = urlBuilder
          .addPathSegments(path)
          .build();
        Request request = requestBuilder.url(url)
          .build();

        client.newCall(request).enqueue(new Callback() {

          @Override
          public void onFailure(@NonNull Call call, @NonNull IOException e) {
            String errorMessage = "Problem during request | " + String.valueOf(e.hashCode()) + ": " + e.getMessage();
            callbackContext.error(errorMessage);
          }

          @Override
          public void onResponse(@NonNull Call call, @NonNull Response response) {
            if (response.isSuccessful()) {
              try {
                JSONObject jsonObject = new JSONObject(Objects.requireNonNull(response.body()).string());
                callbackContext.success(jsonObject);
              } catch (Exception e) {
                String errorMessage = "Problem during response parsing";
                callbackContext.error(errorMessage);
              }
            } else {
              callbackContext.error("Unexpected code " + response.code() + " | message: " + response.message());
            }
          }
        });
      } catch (Exception e) {
        String errorMessage = "Problem during request building | " + e.hashCode() + ": " + e.getMessage();
        callbackContext.error(errorMessage);
      }
    });
  }

  private void coverageLonLatUriContributorsId(final JSONObject params, final CallbackContext callbackContext) {
    cordova.getThreadPool().execute(() -> {
      try {
        HttpUrl.Builder urlBuilder = new HttpUrl.Builder()
          .scheme("https")
          .host("api.navitia.io")
          .addPathSegment("v1");
        Request.Builder requestBuilder = new Request.Builder()
          .header("Authorization", token);
        String path = "/coverage/{lon};{lat}/{uri}/contributors/{id}".substring(1);

        if (params.has("lat") && (!params.getString("lat").isEmpty())) {
          path = path.replaceAll("\\{" + "lat" + "\\}", escapeString(String.valueOf(params.getLong("lat"))));
        }

        if (params.has("lon") && (!params.getString("lon").isEmpty())) {
          path = path.replaceAll("\\{" + "lon" + "\\}", escapeString(String.valueOf(params.getLong("lon"))));
        }

        if (params.has("uri") && (!params.getString("uri").isEmpty())) {
          path = path.replaceAll("\\{" + "uri" + "\\}", escapeString(params.getString("uri")));
        }

        if (params.has("id") && (!params.getString("id").isEmpty())) {
          path = path.replaceAll("\\{" + "id" + "\\}", escapeString(params.getString("id")));
        }

        if (params.has("startPage") && (!params.getString("startPage").isEmpty())) {
          urlBuilder.addQueryParameter("start_page", escapeString(String.valueOf(params.getInt("startPage"))));
        }

        if (params.has("count") && (!params.getString("count").isEmpty())) {
          urlBuilder.addQueryParameter("count", escapeString(String.valueOf(params.getInt("count"))));
        }

        if (params.has("depth") && (!params.getString("depth").isEmpty())) {
          urlBuilder.addQueryParameter("depth", escapeString(String.valueOf(params.getInt("depth"))));
        }

        if (params.has("forbiddenId") && (!params.getString("forbiddenId").isEmpty())) {
          urlBuilder.addQueryParameter("forbidden_id[]", escapeString(String.valueOf(params.getJSONArray("forbiddenId"))));
        }

        if (params.has("forbiddenUris") && (!params.getString("forbiddenUris").isEmpty())) {
          urlBuilder.addQueryParameter("forbidden_uris[]", escapeString(String.valueOf(params.getJSONArray("forbiddenUris"))));
        }

        if (params.has("externalCode") && (!params.getString("externalCode").isEmpty())) {
          urlBuilder.addQueryParameter("external_code", escapeString(params.getString("externalCode")));
        }

        if (params.has("headsign") && (!params.getString("headsign").isEmpty())) {
          urlBuilder.addQueryParameter("headsign", escapeString(params.getString("headsign")));
        }

        if (params.has("showCodes") && (!params.getString("showCodes").isEmpty())) {
          urlBuilder.addQueryParameter("show_codes", escapeString(String.valueOf(params.getBoolean("showCodes"))));
        }

        if (params.has("odtLevel") && (!params.getString("odtLevel").isEmpty())) {
          urlBuilder.addQueryParameter("odt_level", escapeString(params.getString("odtLevel")));
        }

        if (params.has("dataFreshness") && (!params.getString("dataFreshness").isEmpty())) {
          urlBuilder.addQueryParameter("data_freshness", escapeString(params.getString("dataFreshness")));
        }

        if (params.has("distance") && (!params.getString("distance").isEmpty())) {
          urlBuilder.addQueryParameter("distance", escapeString(String.valueOf(params.getInt("distance"))));
        }

        if (params.has("since") && (!params.getString("since").isEmpty())) {
          urlBuilder.addQueryParameter("since", escapeString(String.valueOf(params.getString("since"))));
        }

        if (params.has("until") && (!params.getString("until").isEmpty())) {
          urlBuilder.addQueryParameter("until", escapeString(String.valueOf(params.getString("until"))));
        }

        if (params.has("disableGeojson") && (!params.getString("disableGeojson").isEmpty())) {
          urlBuilder.addQueryParameter("disable_geojson", escapeString(String.valueOf(params.getBoolean("disableGeojson"))));
        }

        if (params.has("disableDisruption") && (!params.getString("disableDisruption").isEmpty())) {
          urlBuilder.addQueryParameter("disable_disruption", escapeString(String.valueOf(params.getBoolean("disableDisruption"))));
        }

        if (params.has("tags") && (!params.getString("tags").isEmpty())) {
          urlBuilder.addQueryParameter("tags[]", escapeString(String.valueOf(params.getJSONArray("tags"))));
        }

        HttpUrl url = urlBuilder
          .addPathSegments(path)
          .build();
        Request request = requestBuilder.url(url)
          .build();

        client.newCall(request).enqueue(new Callback() {

          @Override
          public void onFailure(@NonNull Call call, @NonNull IOException e) {
            String errorMessage = "Problem during request | " + String.valueOf(e.hashCode()) + ": " + e.getMessage();
            callbackContext.error(errorMessage);
          }

          @Override
          public void onResponse(@NonNull Call call, @NonNull Response response) {
            if (response.isSuccessful()) {
              try {
                JSONObject jsonObject = new JSONObject(Objects.requireNonNull(response.body()).string());
                callbackContext.success(jsonObject);
              } catch (Exception e) {
                String errorMessage = "Problem during response parsing";
                callbackContext.error(errorMessage);
              }
            } else {
              callbackContext.error("Unexpected code " + response.code() + " | message: " + response.message());
            }
          }
        });
      } catch (Exception e) {
        String errorMessage = "Problem during request building | " + e.hashCode() + ": " + e.getMessage();
        callbackContext.error(errorMessage);
      }
    });
  }

  private void coverageRegionContributors(final JSONObject params, final CallbackContext callbackContext) {
    cordova.getThreadPool().execute(() -> {
      try {
        HttpUrl.Builder urlBuilder = new HttpUrl.Builder()
          .scheme("https")
          .host("api.navitia.io")
          .addPathSegment("v1");
        Request.Builder requestBuilder = new Request.Builder()
          .header("Authorization", token);
        String path = "/coverage/{region}/contributors".substring(1);

        if (params.has("region") && (!params.getString("region").isEmpty())) {
          path = path.replaceAll("\\{" + "region" + "\\}", escapeString(params.getString("region")));
        }

        if (params.has("startPage") && (!params.getString("startPage").isEmpty())) {
          urlBuilder.addQueryParameter("start_page", escapeString(String.valueOf(params.getInt("startPage"))));
        }

        if (params.has("count") && (!params.getString("count").isEmpty())) {
          urlBuilder.addQueryParameter("count", escapeString(String.valueOf(params.getInt("count"))));
        }

        if (params.has("depth") && (!params.getString("depth").isEmpty())) {
          urlBuilder.addQueryParameter("depth", escapeString(String.valueOf(params.getInt("depth"))));
        }

        if (params.has("forbiddenId") && (!params.getString("forbiddenId").isEmpty())) {
          urlBuilder.addQueryParameter("forbidden_id[]", escapeString(String.valueOf(params.getJSONArray("forbiddenId"))));
        }

        if (params.has("forbiddenUris") && (!params.getString("forbiddenUris").isEmpty())) {
          urlBuilder.addQueryParameter("forbidden_uris[]", escapeString(String.valueOf(params.getJSONArray("forbiddenUris"))));
        }

        if (params.has("externalCode") && (!params.getString("externalCode").isEmpty())) {
          urlBuilder.addQueryParameter("external_code", escapeString(params.getString("externalCode")));
        }

        if (params.has("headsign") && (!params.getString("headsign").isEmpty())) {
          urlBuilder.addQueryParameter("headsign", escapeString(params.getString("headsign")));
        }

        if (params.has("showCodes") && (!params.getString("showCodes").isEmpty())) {
          urlBuilder.addQueryParameter("show_codes", escapeString(String.valueOf(params.getBoolean("showCodes"))));
        }

        if (params.has("odtLevel") && (!params.getString("odtLevel").isEmpty())) {
          urlBuilder.addQueryParameter("odt_level", escapeString(params.getString("odtLevel")));
        }

        if (params.has("dataFreshness") && (!params.getString("dataFreshness").isEmpty())) {
          urlBuilder.addQueryParameter("data_freshness", escapeString(params.getString("dataFreshness")));
        }

        if (params.has("distance") && (!params.getString("distance").isEmpty())) {
          urlBuilder.addQueryParameter("distance", escapeString(String.valueOf(params.getInt("distance"))));
        }

        if (params.has("since") && (!params.getString("since").isEmpty())) {
          urlBuilder.addQueryParameter("since", escapeString(String.valueOf(params.getString("since"))));
        }

        if (params.has("until") && (!params.getString("until").isEmpty())) {
          urlBuilder.addQueryParameter("until", escapeString(String.valueOf(params.getString("until"))));
        }

        if (params.has("disableGeojson") && (!params.getString("disableGeojson").isEmpty())) {
          urlBuilder.addQueryParameter("disable_geojson", escapeString(String.valueOf(params.getBoolean("disableGeojson"))));
        }

        if (params.has("disableDisruption") && (!params.getString("disableDisruption").isEmpty())) {
          urlBuilder.addQueryParameter("disable_disruption", escapeString(String.valueOf(params.getBoolean("disableDisruption"))));
        }

        if (params.has("filter") && (!params.getString("filter").isEmpty())) {
          urlBuilder.addQueryParameter("filter", escapeString(params.getString("filter")));
        }

        if (params.has("tags") && (!params.getString("tags").isEmpty())) {
          urlBuilder.addQueryParameter("tags[]", escapeString(String.valueOf(params.getJSONArray("tags"))));
        }

        HttpUrl url = urlBuilder
          .addPathSegments(path)
          .build();
        Request request = requestBuilder.url(url)
          .build();

        client.newCall(request).enqueue(new Callback() {

          @Override
          public void onFailure(@NonNull Call call, @NonNull IOException e) {
            String errorMessage = "Problem during request | " + String.valueOf(e.hashCode()) + ": " + e.getMessage();
            callbackContext.error(errorMessage);
          }

          @Override
          public void onResponse(@NonNull Call call, @NonNull Response response) {
            if (response.isSuccessful()) {
              try {
                JSONObject jsonObject = new JSONObject(Objects.requireNonNull(response.body()).string());
                callbackContext.success(jsonObject);
              } catch (Exception e) {
                String errorMessage = "Problem during response parsing";
                callbackContext.error(errorMessage);
              }
            } else {
              callbackContext.error("Unexpected code " + response.code() + " | message: " + response.message());
            }
          }
        });
      } catch (Exception e) {
        String errorMessage = "Problem during request building | " + e.hashCode() + ": " + e.getMessage();
        callbackContext.error(errorMessage);
      }
    });
  }

  private void coverageRegionContributorsId(final JSONObject params, final CallbackContext callbackContext) {
    cordova.getThreadPool().execute(() -> {
      try {
        HttpUrl.Builder urlBuilder = new HttpUrl.Builder()
          .scheme("https")
          .host("api.navitia.io")
          .addPathSegment("v1");
        Request.Builder requestBuilder = new Request.Builder()
          .header("Authorization", token);
        String path = "/coverage/{region}/contributors/{id}".substring(1);

        if (params.has("region") && (!params.getString("region").isEmpty())) {
          path = path.replaceAll("\\{" + "region" + "\\}", escapeString(params.getString("region")));
        }

        if (params.has("id") && (!params.getString("id").isEmpty())) {
          path = path.replaceAll("\\{" + "id" + "\\}", escapeString(params.getString("id")));
        }

        if (params.has("startPage") && (!params.getString("startPage").isEmpty())) {
          urlBuilder.addQueryParameter("start_page", escapeString(String.valueOf(params.getInt("startPage"))));
        }

        if (params.has("count") && (!params.getString("count").isEmpty())) {
          urlBuilder.addQueryParameter("count", escapeString(String.valueOf(params.getInt("count"))));
        }

        if (params.has("depth") && (!params.getString("depth").isEmpty())) {
          urlBuilder.addQueryParameter("depth", escapeString(String.valueOf(params.getInt("depth"))));
        }

        if (params.has("forbiddenId") && (!params.getString("forbiddenId").isEmpty())) {
          urlBuilder.addQueryParameter("forbidden_id[]", escapeString(String.valueOf(params.getJSONArray("forbiddenId"))));
        }

        if (params.has("forbiddenUris") && (!params.getString("forbiddenUris").isEmpty())) {
          urlBuilder.addQueryParameter("forbidden_uris[]", escapeString(String.valueOf(params.getJSONArray("forbiddenUris"))));
        }

        if (params.has("externalCode") && (!params.getString("externalCode").isEmpty())) {
          urlBuilder.addQueryParameter("external_code", escapeString(params.getString("externalCode")));
        }

        if (params.has("headsign") && (!params.getString("headsign").isEmpty())) {
          urlBuilder.addQueryParameter("headsign", escapeString(params.getString("headsign")));
        }

        if (params.has("showCodes") && (!params.getString("showCodes").isEmpty())) {
          urlBuilder.addQueryParameter("show_codes", escapeString(String.valueOf(params.getBoolean("showCodes"))));
        }

        if (params.has("odtLevel") && (!params.getString("odtLevel").isEmpty())) {
          urlBuilder.addQueryParameter("odt_level", escapeString(params.getString("odtLevel")));
        }

        if (params.has("dataFreshness") && (!params.getString("dataFreshness").isEmpty())) {
          urlBuilder.addQueryParameter("data_freshness", escapeString(params.getString("dataFreshness")));
        }

        if (params.has("distance") && (!params.getString("distance").isEmpty())) {
          urlBuilder.addQueryParameter("distance", escapeString(String.valueOf(params.getInt("distance"))));
        }

        if (params.has("since") && (!params.getString("since").isEmpty())) {
          urlBuilder.addQueryParameter("since", escapeString(String.valueOf(params.getString("since"))));
        }

        if (params.has("until") && (!params.getString("until").isEmpty())) {
          urlBuilder.addQueryParameter("until", escapeString(String.valueOf(params.getString("until"))));
        }

        if (params.has("disableGeojson") && (!params.getString("disableGeojson").isEmpty())) {
          urlBuilder.addQueryParameter("disable_geojson", escapeString(String.valueOf(params.getBoolean("disableGeojson"))));
        }

        if (params.has("disableDisruption") && (!params.getString("disableDisruption").isEmpty())) {
          urlBuilder.addQueryParameter("disable_disruption", escapeString(String.valueOf(params.getBoolean("disableDisruption"))));
        }

        if (params.has("tags") && (!params.getString("tags").isEmpty())) {
          urlBuilder.addQueryParameter("tags[]", escapeString(String.valueOf(params.getJSONArray("tags"))));
        }

        HttpUrl url = urlBuilder
          .addPathSegments(path)
          .build();
        Request request = requestBuilder.url(url)
          .build();

        client.newCall(request).enqueue(new Callback() {

          @Override
          public void onFailure(@NonNull Call call, @NonNull IOException e) {
            String errorMessage = "Problem during request | " + String.valueOf(e.hashCode()) + ": " + e.getMessage();
            callbackContext.error(errorMessage);
          }

          @Override
          public void onResponse(@NonNull Call call, @NonNull Response response) {
            if (response.isSuccessful()) {
              try {
                JSONObject jsonObject = new JSONObject(Objects.requireNonNull(response.body()).string());
                callbackContext.success(jsonObject);
              } catch (Exception e) {
                String errorMessage = "Problem during response parsing";
                callbackContext.error(errorMessage);
              }
            } else {
              callbackContext.error("Unexpected code " + response.code() + " | message: " + response.message());
            }
          }
        });
      } catch (Exception e) {
        String errorMessage = "Problem during request building | " + e.hashCode() + ": " + e.getMessage();
        callbackContext.error(errorMessage);
      }
    });
  }

  private void coverageRegionUriContributors(final JSONObject params, final CallbackContext callbackContext) {
    cordova.getThreadPool().execute(() -> {
      try {
        HttpUrl.Builder urlBuilder = new HttpUrl.Builder()
          .scheme("https")
          .host("api.navitia.io")
          .addPathSegment("v1");
        Request.Builder requestBuilder = new Request.Builder()
          .header("Authorization", token);
        String path = "/coverage/{region}/{uri}/contributors".substring(1);

        if (params.has("region") && (!params.getString("region").isEmpty())) {
          path = path.replaceAll("\\{" + "region" + "\\}", escapeString(params.getString("region")));
        }

        if (params.has("uri") && (!params.getString("uri").isEmpty())) {
          path = path.replaceAll("\\{" + "uri" + "\\}", escapeString(params.getString("uri")));
        }

        if (params.has("startPage") && (!params.getString("startPage").isEmpty())) {
          urlBuilder.addQueryParameter("start_page", escapeString(String.valueOf(params.getInt("startPage"))));
        }

        if (params.has("count") && (!params.getString("count").isEmpty())) {
          urlBuilder.addQueryParameter("count", escapeString(String.valueOf(params.getInt("count"))));
        }

        if (params.has("depth") && (!params.getString("depth").isEmpty())) {
          urlBuilder.addQueryParameter("depth", escapeString(String.valueOf(params.getInt("depth"))));
        }

        if (params.has("forbiddenId") && (!params.getString("forbiddenId").isEmpty())) {
          urlBuilder.addQueryParameter("forbidden_id[]", escapeString(String.valueOf(params.getJSONArray("forbiddenId"))));
        }

        if (params.has("forbiddenUris") && (!params.getString("forbiddenUris").isEmpty())) {
          urlBuilder.addQueryParameter("forbidden_uris[]", escapeString(String.valueOf(params.getJSONArray("forbiddenUris"))));
        }

        if (params.has("externalCode") && (!params.getString("externalCode").isEmpty())) {
          urlBuilder.addQueryParameter("external_code", escapeString(params.getString("externalCode")));
        }

        if (params.has("headsign") && (!params.getString("headsign").isEmpty())) {
          urlBuilder.addQueryParameter("headsign", escapeString(params.getString("headsign")));
        }

        if (params.has("showCodes") && (!params.getString("showCodes").isEmpty())) {
          urlBuilder.addQueryParameter("show_codes", escapeString(String.valueOf(params.getBoolean("showCodes"))));
        }

        if (params.has("odtLevel") && (!params.getString("odtLevel").isEmpty())) {
          urlBuilder.addQueryParameter("odt_level", escapeString(params.getString("odtLevel")));
        }

        if (params.has("dataFreshness") && (!params.getString("dataFreshness").isEmpty())) {
          urlBuilder.addQueryParameter("data_freshness", escapeString(params.getString("dataFreshness")));
        }

        if (params.has("distance") && (!params.getString("distance").isEmpty())) {
          urlBuilder.addQueryParameter("distance", escapeString(String.valueOf(params.getInt("distance"))));
        }

        if (params.has("since") && (!params.getString("since").isEmpty())) {
          urlBuilder.addQueryParameter("since", escapeString(String.valueOf(params.getString("since"))));
        }

        if (params.has("until") && (!params.getString("until").isEmpty())) {
          urlBuilder.addQueryParameter("until", escapeString(String.valueOf(params.getString("until"))));
        }

        if (params.has("disableGeojson") && (!params.getString("disableGeojson").isEmpty())) {
          urlBuilder.addQueryParameter("disable_geojson", escapeString(String.valueOf(params.getBoolean("disableGeojson"))));
        }

        if (params.has("disableDisruption") && (!params.getString("disableDisruption").isEmpty())) {
          urlBuilder.addQueryParameter("disable_disruption", escapeString(String.valueOf(params.getBoolean("disableDisruption"))));
        }

        if (params.has("filter") && (!params.getString("filter").isEmpty())) {
          urlBuilder.addQueryParameter("filter", escapeString(params.getString("filter")));
        }

        if (params.has("tags") && (!params.getString("tags").isEmpty())) {
          urlBuilder.addQueryParameter("tags[]", escapeString(String.valueOf(params.getJSONArray("tags"))));
        }

        HttpUrl url = urlBuilder
          .addPathSegments(path)
          .build();
        Request request = requestBuilder.url(url)
          .build();

        client.newCall(request).enqueue(new Callback() {

          @Override
          public void onFailure(@NonNull Call call, @NonNull IOException e) {
            String errorMessage = "Problem during request | " + String.valueOf(e.hashCode()) + ": " + e.getMessage();
            callbackContext.error(errorMessage);
          }

          @Override
          public void onResponse(@NonNull Call call, @NonNull Response response) {
            if (response.isSuccessful()) {
              try {
                JSONObject jsonObject = new JSONObject(Objects.requireNonNull(response.body()).string());
                callbackContext.success(jsonObject);
              } catch (Exception e) {
                String errorMessage = "Problem during response parsing";
                callbackContext.error(errorMessage);
              }
            } else {
              callbackContext.error("Unexpected code " + response.code() + " | message: " + response.message());
            }
          }
        });
      } catch (Exception e) {
        String errorMessage = "Problem during request building | " + e.hashCode() + ": " + e.getMessage();
        callbackContext.error(errorMessage);
      }
    });
  }

  private void coverageRegionUriContributorsId(final JSONObject params, final CallbackContext callbackContext) {
    cordova.getThreadPool().execute(() -> {
      try {
        HttpUrl.Builder urlBuilder = new HttpUrl.Builder()
          .scheme("https")
          .host("api.navitia.io")
          .addPathSegment("v1");
        Request.Builder requestBuilder = new Request.Builder()
          .header("Authorization", token);
        String path = "/coverage/{region}/{uri}/contributors/{id}".substring(1);

        if (params.has("region") && (!params.getString("region").isEmpty())) {
          path = path.replaceAll("\\{" + "region" + "\\}", escapeString(params.getString("region")));
        }

        if (params.has("uri") && (!params.getString("uri").isEmpty())) {
          path = path.replaceAll("\\{" + "uri" + "\\}", escapeString(params.getString("uri")));
        }

        if (params.has("id") && (!params.getString("id").isEmpty())) {
          path = path.replaceAll("\\{" + "id" + "\\}", escapeString(params.getString("id")));
        }

        if (params.has("startPage") && (!params.getString("startPage").isEmpty())) {
          urlBuilder.addQueryParameter("start_page", escapeString(String.valueOf(params.getInt("startPage"))));
        }

        if (params.has("count") && (!params.getString("count").isEmpty())) {
          urlBuilder.addQueryParameter("count", escapeString(String.valueOf(params.getInt("count"))));
        }

        if (params.has("depth") && (!params.getString("depth").isEmpty())) {
          urlBuilder.addQueryParameter("depth", escapeString(String.valueOf(params.getInt("depth"))));
        }

        if (params.has("forbiddenId") && (!params.getString("forbiddenId").isEmpty())) {
          urlBuilder.addQueryParameter("forbidden_id[]", escapeString(String.valueOf(params.getJSONArray("forbiddenId"))));
        }

        if (params.has("forbiddenUris") && (!params.getString("forbiddenUris").isEmpty())) {
          urlBuilder.addQueryParameter("forbidden_uris[]", escapeString(String.valueOf(params.getJSONArray("forbiddenUris"))));
        }

        if (params.has("externalCode") && (!params.getString("externalCode").isEmpty())) {
          urlBuilder.addQueryParameter("external_code", escapeString(params.getString("externalCode")));
        }

        if (params.has("headsign") && (!params.getString("headsign").isEmpty())) {
          urlBuilder.addQueryParameter("headsign", escapeString(params.getString("headsign")));
        }

        if (params.has("showCodes") && (!params.getString("showCodes").isEmpty())) {
          urlBuilder.addQueryParameter("show_codes", escapeString(String.valueOf(params.getBoolean("showCodes"))));
        }

        if (params.has("odtLevel") && (!params.getString("odtLevel").isEmpty())) {
          urlBuilder.addQueryParameter("odt_level", escapeString(params.getString("odtLevel")));
        }

        if (params.has("dataFreshness") && (!params.getString("dataFreshness").isEmpty())) {
          urlBuilder.addQueryParameter("data_freshness", escapeString(params.getString("dataFreshness")));
        }

        if (params.has("distance") && (!params.getString("distance").isEmpty())) {
          urlBuilder.addQueryParameter("distance", escapeString(String.valueOf(params.getInt("distance"))));
        }

        if (params.has("since") && (!params.getString("since").isEmpty())) {
          urlBuilder.addQueryParameter("since", escapeString(String.valueOf(params.getString("since"))));
        }

        if (params.has("until") && (!params.getString("until").isEmpty())) {
          urlBuilder.addQueryParameter("until", escapeString(String.valueOf(params.getString("until"))));
        }

        if (params.has("disableGeojson") && (!params.getString("disableGeojson").isEmpty())) {
          urlBuilder.addQueryParameter("disable_geojson", escapeString(String.valueOf(params.getBoolean("disableGeojson"))));
        }

        if (params.has("disableDisruption") && (!params.getString("disableDisruption").isEmpty())) {
          urlBuilder.addQueryParameter("disable_disruption", escapeString(String.valueOf(params.getBoolean("disableDisruption"))));
        }

        if (params.has("tags") && (!params.getString("tags").isEmpty())) {
          urlBuilder.addQueryParameter("tags[]", escapeString(String.valueOf(params.getJSONArray("tags"))));
        }

        HttpUrl url = urlBuilder
          .addPathSegments(path)
          .build();
        Request request = requestBuilder.url(url)
          .build();

        client.newCall(request).enqueue(new Callback() {

          @Override
          public void onFailure(@NonNull Call call, @NonNull IOException e) {
            String errorMessage = "Problem during request | " + String.valueOf(e.hashCode()) + ": " + e.getMessage();
            callbackContext.error(errorMessage);
          }

          @Override
          public void onResponse(@NonNull Call call, @NonNull Response response) {
            if (response.isSuccessful()) {
              try {
                JSONObject jsonObject = new JSONObject(Objects.requireNonNull(response.body()).string());
                callbackContext.success(jsonObject);
              } catch (Exception e) {
                String errorMessage = "Problem during response parsing";
                callbackContext.error(errorMessage);
              }
            } else {
              callbackContext.error("Unexpected code " + response.code() + " | message: " + response.message());
            }
          }
        });
      } catch (Exception e) {
        String errorMessage = "Problem during request building | " + e.hashCode() + ": " + e.getMessage();
        callbackContext.error(errorMessage);
      }
    });
  }

  private void coordLonLat(final JSONObject params, final CallbackContext callbackContext) {
    cordova.getThreadPool().execute(() -> {
      try {
        HttpUrl.Builder urlBuilder = new HttpUrl.Builder()
          .scheme("https")
          .host("api.navitia.io")
          .addPathSegment("v1");
        Request.Builder requestBuilder = new Request.Builder()
          .header("Authorization", token);
        String path = "/coord/{lon};{lat}/".substring(1);

        if (params.has("lat") && (!params.getString("lat").isEmpty())) {
          path = path.replaceAll("\\{" + "lat" + "\\}", escapeString(String.valueOf(params.getLong("lat"))));
        }

        if (params.has("lon") && (!params.getString("lon").isEmpty())) {
          path = path.replaceAll("\\{" + "lon" + "\\}", escapeString(String.valueOf(params.getLong("lon"))));
        }

        HttpUrl url = urlBuilder
          .addPathSegments(path)
          .build();
        Request request = requestBuilder.url(url)
          .build();

        client.newCall(request).enqueue(new Callback() {

          @Override
          public void onFailure(@NonNull Call call, @NonNull IOException e) {
            String errorMessage = "Problem during request | " + String.valueOf(e.hashCode()) + ": " + e.getMessage();
            callbackContext.error(errorMessage);
          }

          @Override
          public void onResponse(@NonNull Call call, @NonNull Response response) {
            if (response.isSuccessful()) {
              try {
                JSONObject jsonObject = new JSONObject(Objects.requireNonNull(response.body()).string());
                callbackContext.success(jsonObject);
              } catch (Exception e) {
                String errorMessage = "Problem during response parsing";
                callbackContext.error(errorMessage);
              }
            } else {
              callbackContext.error("Unexpected code " + response.code() + " | message: " + response.message());
            }
          }
        });
      } catch (Exception e) {
        String errorMessage = "Problem during request building | " + e.hashCode() + ": " + e.getMessage();
        callbackContext.error(errorMessage);
      }
    });
  }

  private void coordsLonLat(final JSONObject params, final CallbackContext callbackContext) {
    cordova.getThreadPool().execute(() -> {
      try {
        HttpUrl.Builder urlBuilder = new HttpUrl.Builder()
          .scheme("https")
          .host("api.navitia.io")
          .addPathSegment("v1");
        Request.Builder requestBuilder = new Request.Builder()
          .header("Authorization", token);
        String path = "/coords/{lon};{lat}/".substring(1);

        if (params.has("lat") && (!params.getString("lat").isEmpty())) {
          path = path.replaceAll("\\{" + "lat" + "\\}", escapeString(String.valueOf(params.getLong("lat"))));
        }

        if (params.has("lon") && (!params.getString("lon").isEmpty())) {
          path = path.replaceAll("\\{" + "lon" + "\\}", escapeString(String.valueOf(params.getLong("lon"))));
        }

        HttpUrl url = urlBuilder
          .addPathSegments(path)
          .build();
        Request request = requestBuilder.url(url)
          .build();

        client.newCall(request).enqueue(new Callback() {

          @Override
          public void onFailure(@NonNull Call call, @NonNull IOException e) {
            String errorMessage = "Problem during request | " + String.valueOf(e.hashCode()) + ": " + e.getMessage();
            callbackContext.error(errorMessage);
          }

          @Override
          public void onResponse(@NonNull Call call, @NonNull Response response) {
            if (response.isSuccessful()) {
              try {
                JSONObject jsonObject = new JSONObject(Objects.requireNonNull(response.body()).string());
                callbackContext.success(jsonObject);
              } catch (Exception e) {
                String errorMessage = "Problem during response parsing";
                callbackContext.error(errorMessage);
              }
            } else {
              callbackContext.error("Unexpected code " + response.code() + " | message: " + response.message());
            }
          }
        });
      } catch (Exception e) {
        String errorMessage = "Problem during request building | " + e.hashCode() + ": " + e.getMessage();
        callbackContext.error(errorMessage);
      }
    });
  }

  private void coverageRegionCoordLonLatAddresses(final JSONObject params, final CallbackContext callbackContext) {
    cordova.getThreadPool().execute(() -> {
      try {
        HttpUrl.Builder urlBuilder = new HttpUrl.Builder()
          .scheme("https")
          .host("api.navitia.io")
          .addPathSegment("v1");
        Request.Builder requestBuilder = new Request.Builder()
          .header("Authorization", token);
        String path = "/coverage/{region}/coord/{lon};{lat}/addresses".substring(1);

        if (params.has("lat") && (!params.getString("lat").isEmpty())) {
          path = path.replaceAll("\\{" + "lat" + "\\}", escapeString(String.valueOf(params.getLong("lat"))));
        }

        if (params.has("region") && (!params.getString("region").isEmpty())) {
          path = path.replaceAll("\\{" + "region" + "\\}", escapeString(params.getString("region")));
        }

        if (params.has("lon") && (!params.getString("lon").isEmpty())) {
          path = path.replaceAll("\\{" + "lon" + "\\}", escapeString(String.valueOf(params.getLong("lon"))));
        }

        HttpUrl url = urlBuilder
          .addPathSegments(path)
          .build();
        Request request = requestBuilder.url(url)
          .build();

        client.newCall(request).enqueue(new Callback() {

          @Override
          public void onFailure(@NonNull Call call, @NonNull IOException e) {
            String errorMessage = "Problem during request | " + String.valueOf(e.hashCode()) + ": " + e.getMessage();
            callbackContext.error(errorMessage);
          }

          @Override
          public void onResponse(@NonNull Call call, @NonNull Response response) {
            if (response.isSuccessful()) {
              try {
                JSONObject jsonObject = new JSONObject(Objects.requireNonNull(response.body()).string());
                callbackContext.success(jsonObject);
              } catch (Exception e) {
                String errorMessage = "Problem during response parsing";
                callbackContext.error(errorMessage);
              }
            } else {
              callbackContext.error("Unexpected code " + response.code() + " | message: " + response.message());
            }
          }
        });
      } catch (Exception e) {
        String errorMessage = "Problem during request building | " + e.hashCode() + ": " + e.getMessage();
        callbackContext.error(errorMessage);
      }
    });
  }

  private void coverageRegionCoordsLonLatAddresses(final JSONObject params, final CallbackContext callbackContext) {
    cordova.getThreadPool().execute(() -> {
      try {
        HttpUrl.Builder urlBuilder = new HttpUrl.Builder()
          .scheme("https")
          .host("api.navitia.io")
          .addPathSegment("v1");
        Request.Builder requestBuilder = new Request.Builder()
          .header("Authorization", token);
        String path = "/coverage/{region}/coords/{lon};{lat}/addresses".substring(1);

        if (params.has("lat") && (!params.getString("lat").isEmpty())) {
          path = path.replaceAll("\\{" + "lat" + "\\}", escapeString(String.valueOf(params.getLong("lat"))));
        }

        if (params.has("region") && (!params.getString("region").isEmpty())) {
          path = path.replaceAll("\\{" + "region" + "\\}", escapeString(params.getString("region")));
        }

        if (params.has("lon") && (!params.getString("lon").isEmpty())) {
          path = path.replaceAll("\\{" + "lon" + "\\}", escapeString(String.valueOf(params.getLong("lon"))));
        }

        HttpUrl url = urlBuilder
          .addPathSegments(path)
          .build();
        Request request = requestBuilder.url(url)
          .build();

        client.newCall(request).enqueue(new Callback() {

          @Override
          public void onFailure(@NonNull Call call, @NonNull IOException e) {
            String errorMessage = "Problem during request | " + String.valueOf(e.hashCode()) + ": " + e.getMessage();
            callbackContext.error(errorMessage);
          }

          @Override
          public void onResponse(@NonNull Call call, @NonNull Response response) {
            if (response.isSuccessful()) {
              try {
                JSONObject jsonObject = new JSONObject(Objects.requireNonNull(response.body()).string());
                callbackContext.success(jsonObject);
              } catch (Exception e) {
                String errorMessage = "Problem during response parsing";
                callbackContext.error(errorMessage);
              }
            } else {
              callbackContext.error("Unexpected code " + response.code() + " | message: " + response.message());
            }
          }
        });
      } catch (Exception e) {
        String errorMessage = "Problem during request building | " + e.hashCode() + ": " + e.getMessage();
        callbackContext.error(errorMessage);
      }
    });
  }

  private void coverageLonLatCoord(final JSONObject params, final CallbackContext callbackContext) {
    cordova.getThreadPool().execute(() -> {
      try {
        HttpUrl.Builder urlBuilder = new HttpUrl.Builder()
          .scheme("https")
          .host("api.navitia.io")
          .addPathSegment("v1");
        Request.Builder requestBuilder = new Request.Builder()
          .header("Authorization", token);
        String path = "/coverage/{lon};{lat}/coord".substring(1);

        if (params.has("lat") && (!params.getString("lat").isEmpty())) {
          path = path.replaceAll("\\{" + "lat" + "\\}", escapeString(String.valueOf(params.getLong("lat"))));
        }

        if (params.has("lon") && (!params.getString("lon").isEmpty())) {
          path = path.replaceAll("\\{" + "lon" + "\\}", escapeString(String.valueOf(params.getLong("lon"))));
        }

        HttpUrl url = urlBuilder
          .addPathSegments(path)
          .build();
        Request request = requestBuilder.url(url)
          .build();

        client.newCall(request).enqueue(new Callback() {

          @Override
          public void onFailure(@NonNull Call call, @NonNull IOException e) {
            String errorMessage = "Problem during request | " + String.valueOf(e.hashCode()) + ": " + e.getMessage();
            callbackContext.error(errorMessage);
          }

          @Override
          public void onResponse(@NonNull Call call, @NonNull Response response) {
            if (response.isSuccessful()) {
              try {
                JSONObject jsonObject = new JSONObject(Objects.requireNonNull(response.body()).string());
                callbackContext.success(jsonObject);
              } catch (Exception e) {
                String errorMessage = "Problem during response parsing";
                callbackContext.error(errorMessage);
              }
            } else {
              callbackContext.error("Unexpected code " + response.code() + " | message: " + response.message());
            }
          }
        });
      } catch (Exception e) {
        String errorMessage = "Problem during request building | " + e.hashCode() + ": " + e.getMessage();
        callbackContext.error(errorMessage);
      }
    });
  }

  private void coverageLonLatCoordId(final JSONObject params, final CallbackContext callbackContext) {
    cordova.getThreadPool().execute(() -> {
      try {
        HttpUrl.Builder urlBuilder = new HttpUrl.Builder()
          .scheme("https")
          .host("api.navitia.io")
          .addPathSegment("v1");
        Request.Builder requestBuilder = new Request.Builder()
          .header("Authorization", token);
        String path = "/coverage/{lon};{lat}/coord/{id}".substring(1);

        if (params.has("lat") && (!params.getString("lat").isEmpty())) {
          path = path.replaceAll("\\{" + "lat" + "\\}", escapeString(String.valueOf(params.getLong("lat"))));
        }

        if (params.has("lon") && (!params.getString("lon").isEmpty())) {
          path = path.replaceAll("\\{" + "lon" + "\\}", escapeString(String.valueOf(params.getLong("lon"))));
        }

        if (params.has("id") && (!params.getString("id").isEmpty())) {
          path = path.replaceAll("\\{" + "id" + "\\}", escapeString(params.getString("id")));
        }

        HttpUrl url = urlBuilder
          .addPathSegments(path)
          .build();
        Request request = requestBuilder.url(url)
          .build();

        client.newCall(request).enqueue(new Callback() {

          @Override
          public void onFailure(@NonNull Call call, @NonNull IOException e) {
            String errorMessage = "Problem during request | " + String.valueOf(e.hashCode()) + ": " + e.getMessage();
            callbackContext.error(errorMessage);
          }

          @Override
          public void onResponse(@NonNull Call call, @NonNull Response response) {
            if (response.isSuccessful()) {
              try {
                JSONObject jsonObject = new JSONObject(Objects.requireNonNull(response.body()).string());
                callbackContext.success(jsonObject);
              } catch (Exception e) {
                String errorMessage = "Problem during response parsing";
                callbackContext.error(errorMessage);
              }
            } else {
              callbackContext.error("Unexpected code " + response.code() + " | message: " + response.message());
            }
          }
        });
      } catch (Exception e) {
        String errorMessage = "Problem during request building | " + e.hashCode() + ": " + e.getMessage();
        callbackContext.error(errorMessage);
      }
    });
  }

  private void coverageLonLatCoords(final JSONObject params, final CallbackContext callbackContext) {
    cordova.getThreadPool().execute(() -> {
      try {
        HttpUrl.Builder urlBuilder = new HttpUrl.Builder()
          .scheme("https")
          .host("api.navitia.io")
          .addPathSegment("v1");
        Request.Builder requestBuilder = new Request.Builder()
          .header("Authorization", token);
        String path = "/coverage/{lon};{lat}/coords".substring(1);

        if (params.has("lat") && (!params.getString("lat").isEmpty())) {
          path = path.replaceAll("\\{" + "lat" + "\\}", escapeString(String.valueOf(params.getLong("lat"))));
        }

        if (params.has("lon") && (!params.getString("lon").isEmpty())) {
          path = path.replaceAll("\\{" + "lon" + "\\}", escapeString(String.valueOf(params.getLong("lon"))));
        }

        HttpUrl url = urlBuilder
          .addPathSegments(path)
          .build();
        Request request = requestBuilder.url(url)
          .build();

        client.newCall(request).enqueue(new Callback() {

          @Override
          public void onFailure(@NonNull Call call, @NonNull IOException e) {
            String errorMessage = "Problem during request | " + String.valueOf(e.hashCode()) + ": " + e.getMessage();
            callbackContext.error(errorMessage);
          }

          @Override
          public void onResponse(@NonNull Call call, @NonNull Response response) {
            if (response.isSuccessful()) {
              try {
                JSONObject jsonObject = new JSONObject(Objects.requireNonNull(response.body()).string());
                callbackContext.success(jsonObject);
              } catch (Exception e) {
                String errorMessage = "Problem during response parsing";
                callbackContext.error(errorMessage);
              }
            } else {
              callbackContext.error("Unexpected code " + response.code() + " | message: " + response.message());
            }
          }
        });
      } catch (Exception e) {
        String errorMessage = "Problem during request building | " + e.hashCode() + ": " + e.getMessage();
        callbackContext.error(errorMessage);
      }
    });
  }

  private void coverageLonLatCoordsId(final JSONObject params, final CallbackContext callbackContext) {
    cordova.getThreadPool().execute(() -> {
      try {
        HttpUrl.Builder urlBuilder = new HttpUrl.Builder()
          .scheme("https")
          .host("api.navitia.io")
          .addPathSegment("v1");
        Request.Builder requestBuilder = new Request.Builder()
          .header("Authorization", token);
        String path = "/coverage/{lon};{lat}/coords/{id}".substring(1);

        if (params.has("lat") && (!params.getString("lat").isEmpty())) {
          path = path.replaceAll("\\{" + "lat" + "\\}", escapeString(String.valueOf(params.getLong("lat"))));
        }

        if (params.has("lon") && (!params.getString("lon").isEmpty())) {
          path = path.replaceAll("\\{" + "lon" + "\\}", escapeString(String.valueOf(params.getLong("lon"))));
        }

        if (params.has("id") && (!params.getString("id").isEmpty())) {
          path = path.replaceAll("\\{" + "id" + "\\}", escapeString(params.getString("id")));
        }

        HttpUrl url = urlBuilder
          .addPathSegments(path)
          .build();
        Request request = requestBuilder.url(url)
          .build();

        client.newCall(request).enqueue(new Callback() {

          @Override
          public void onFailure(@NonNull Call call, @NonNull IOException e) {
            String errorMessage = "Problem during request | " + String.valueOf(e.hashCode()) + ": " + e.getMessage();
            callbackContext.error(errorMessage);
          }

          @Override
          public void onResponse(@NonNull Call call, @NonNull Response response) {
            if (response.isSuccessful()) {
              try {
                JSONObject jsonObject = new JSONObject(Objects.requireNonNull(response.body()).string());
                callbackContext.success(jsonObject);
              } catch (Exception e) {
                String errorMessage = "Problem during response parsing";
                callbackContext.error(errorMessage);
              }
            } else {
              callbackContext.error("Unexpected code " + response.code() + " | message: " + response.message());
            }
          }
        });
      } catch (Exception e) {
        String errorMessage = "Problem during request building | " + e.hashCode() + ": " + e.getMessage();
        callbackContext.error(errorMessage);
      }
    });
  }

  private void coverageLonLatUriCoord(final JSONObject params, final CallbackContext callbackContext) {
    cordova.getThreadPool().execute(() -> {
      try {
        HttpUrl.Builder urlBuilder = new HttpUrl.Builder()
          .scheme("https")
          .host("api.navitia.io")
          .addPathSegment("v1");
        Request.Builder requestBuilder = new Request.Builder()
          .header("Authorization", token);
        String path = "/coverage/{lon};{lat}/{uri}/coord".substring(1);

        if (params.has("lat") && (!params.getString("lat").isEmpty())) {
          path = path.replaceAll("\\{" + "lat" + "\\}", escapeString(String.valueOf(params.getLong("lat"))));
        }

        if (params.has("lon") && (!params.getString("lon").isEmpty())) {
          path = path.replaceAll("\\{" + "lon" + "\\}", escapeString(String.valueOf(params.getLong("lon"))));
        }

        if (params.has("uri") && (!params.getString("uri").isEmpty())) {
          path = path.replaceAll("\\{" + "uri" + "\\}", escapeString(params.getString("uri")));
        }

        HttpUrl url = urlBuilder
          .addPathSegments(path)
          .build();
        Request request = requestBuilder.url(url)
          .build();

        client.newCall(request).enqueue(new Callback() {

          @Override
          public void onFailure(@NonNull Call call, @NonNull IOException e) {
            String errorMessage = "Problem during request | " + String.valueOf(e.hashCode()) + ": " + e.getMessage();
            callbackContext.error(errorMessage);
          }

          @Override
          public void onResponse(@NonNull Call call, @NonNull Response response) {
            if (response.isSuccessful()) {
              try {
                JSONObject jsonObject = new JSONObject(Objects.requireNonNull(response.body()).string());
                callbackContext.success(jsonObject);
              } catch (Exception e) {
                String errorMessage = "Problem during response parsing";
                callbackContext.error(errorMessage);
              }
            } else {
              callbackContext.error("Unexpected code " + response.code() + " | message: " + response.message());
            }
          }
        });
      } catch (Exception e) {
        String errorMessage = "Problem during request building | " + e.hashCode() + ": " + e.getMessage();
        callbackContext.error(errorMessage);
      }
    });
  }

  private void coverageLonLatUriCoordId(final JSONObject params, final CallbackContext callbackContext) {
    cordova.getThreadPool().execute(() -> {
      try {
        HttpUrl.Builder urlBuilder = new HttpUrl.Builder()
          .scheme("https")
          .host("api.navitia.io")
          .addPathSegment("v1");
        Request.Builder requestBuilder = new Request.Builder()
          .header("Authorization", token);
        String path = "/coverage/{lon};{lat}/{uri}/coord/{id}".substring(1);

        if (params.has("lat") && (!params.getString("lat").isEmpty())) {
          path = path.replaceAll("\\{" + "lat" + "\\}", escapeString(String.valueOf(params.getLong("lat"))));
        }

        if (params.has("lon") && (!params.getString("lon").isEmpty())) {
          path = path.replaceAll("\\{" + "lon" + "\\}", escapeString(String.valueOf(params.getLong("lon"))));
        }

        if (params.has("uri") && (!params.getString("uri").isEmpty())) {
          path = path.replaceAll("\\{" + "uri" + "\\}", escapeString(params.getString("uri")));
        }

        if (params.has("id") && (!params.getString("id").isEmpty())) {
          path = path.replaceAll("\\{" + "id" + "\\}", escapeString(params.getString("id")));
        }

        HttpUrl url = urlBuilder
          .addPathSegments(path)
          .build();
        Request request = requestBuilder.url(url)
          .build();

        client.newCall(request).enqueue(new Callback() {

          @Override
          public void onFailure(@NonNull Call call, @NonNull IOException e) {
            String errorMessage = "Problem during request | " + String.valueOf(e.hashCode()) + ": " + e.getMessage();
            callbackContext.error(errorMessage);
          }

          @Override
          public void onResponse(@NonNull Call call, @NonNull Response response) {
            if (response.isSuccessful()) {
              try {
                JSONObject jsonObject = new JSONObject(Objects.requireNonNull(response.body()).string());
                callbackContext.success(jsonObject);
              } catch (Exception e) {
                String errorMessage = "Problem during response parsing";
                callbackContext.error(errorMessage);
              }
            } else {
              callbackContext.error("Unexpected code " + response.code() + " | message: " + response.message());
            }
          }
        });
      } catch (Exception e) {
        String errorMessage = "Problem during request building | " + e.hashCode() + ": " + e.getMessage();
        callbackContext.error(errorMessage);
      }
    });
  }

  private void coverageLonLatUriCoords(final JSONObject params, final CallbackContext callbackContext) {
    cordova.getThreadPool().execute(() -> {
      try {
        HttpUrl.Builder urlBuilder = new HttpUrl.Builder()
          .scheme("https")
          .host("api.navitia.io")
          .addPathSegment("v1");
        Request.Builder requestBuilder = new Request.Builder()
          .header("Authorization", token);
        String path = "/coverage/{lon};{lat}/{uri}/coords".substring(1);

        if (params.has("lat") && (!params.getString("lat").isEmpty())) {
          path = path.replaceAll("\\{" + "lat" + "\\}", escapeString(String.valueOf(params.getLong("lat"))));
        }

        if (params.has("lon") && (!params.getString("lon").isEmpty())) {
          path = path.replaceAll("\\{" + "lon" + "\\}", escapeString(String.valueOf(params.getLong("lon"))));
        }

        if (params.has("uri") && (!params.getString("uri").isEmpty())) {
          path = path.replaceAll("\\{" + "uri" + "\\}", escapeString(params.getString("uri")));
        }

        HttpUrl url = urlBuilder
          .addPathSegments(path)
          .build();
        Request request = requestBuilder.url(url)
          .build();

        client.newCall(request).enqueue(new Callback() {

          @Override
          public void onFailure(@NonNull Call call, @NonNull IOException e) {
            String errorMessage = "Problem during request | " + String.valueOf(e.hashCode()) + ": " + e.getMessage();
            callbackContext.error(errorMessage);
          }

          @Override
          public void onResponse(@NonNull Call call, @NonNull Response response) {
            if (response.isSuccessful()) {
              try {
                JSONObject jsonObject = new JSONObject(Objects.requireNonNull(response.body()).string());
                callbackContext.success(jsonObject);
              } catch (Exception e) {
                String errorMessage = "Problem during response parsing";
                callbackContext.error(errorMessage);
              }
            } else {
              callbackContext.error("Unexpected code " + response.code() + " | message: " + response.message());
            }
          }
        });
      } catch (Exception e) {
        String errorMessage = "Problem during request building | " + e.hashCode() + ": " + e.getMessage();
        callbackContext.error(errorMessage);
      }
    });
  }

  private void coverageLonLatUriCoordsId(final JSONObject params, final CallbackContext callbackContext) {
    cordova.getThreadPool().execute(() -> {
      try {
        HttpUrl.Builder urlBuilder = new HttpUrl.Builder()
          .scheme("https")
          .host("api.navitia.io")
          .addPathSegment("v1");
        Request.Builder requestBuilder = new Request.Builder()
          .header("Authorization", token);
        String path = "/coverage/{lon};{lat}/{uri}/coords/{id}".substring(1);

        if (params.has("lat") && (!params.getString("lat").isEmpty())) {
          path = path.replaceAll("\\{" + "lat" + "\\}", escapeString(String.valueOf(params.getLong("lat"))));
        }

        if (params.has("lon") && (!params.getString("lon").isEmpty())) {
          path = path.replaceAll("\\{" + "lon" + "\\}", escapeString(String.valueOf(params.getLong("lon"))));
        }

        if (params.has("uri") && (!params.getString("uri").isEmpty())) {
          path = path.replaceAll("\\{" + "uri" + "\\}", escapeString(params.getString("uri")));
        }

        if (params.has("id") && (!params.getString("id").isEmpty())) {
          path = path.replaceAll("\\{" + "id" + "\\}", escapeString(params.getString("id")));
        }

        HttpUrl url = urlBuilder
          .addPathSegments(path)
          .build();
        Request request = requestBuilder.url(url)
          .build();

        client.newCall(request).enqueue(new Callback() {

          @Override
          public void onFailure(@NonNull Call call, @NonNull IOException e) {
            String errorMessage = "Problem during request | " + String.valueOf(e.hashCode()) + ": " + e.getMessage();
            callbackContext.error(errorMessage);
          }

          @Override
          public void onResponse(@NonNull Call call, @NonNull Response response) {
            if (response.isSuccessful()) {
              try {
                JSONObject jsonObject = new JSONObject(Objects.requireNonNull(response.body()).string());
                callbackContext.success(jsonObject);
              } catch (Exception e) {
                String errorMessage = "Problem during response parsing";
                callbackContext.error(errorMessage);
              }
            } else {
              callbackContext.error("Unexpected code " + response.code() + " | message: " + response.message());
            }
          }
        });
      } catch (Exception e) {
        String errorMessage = "Problem during request building | " + e.hashCode() + ": " + e.getMessage();
        callbackContext.error(errorMessage);
      }
    });
  }

  private void coverageRegionCoord(final JSONObject params, final CallbackContext callbackContext) {
    cordova.getThreadPool().execute(() -> {
      try {
        HttpUrl.Builder urlBuilder = new HttpUrl.Builder()
          .scheme("https")
          .host("api.navitia.io")
          .addPathSegment("v1");
        Request.Builder requestBuilder = new Request.Builder()
          .header("Authorization", token);
        String path = "/coverage/{region}/coord".substring(1);

        if (params.has("region") && (!params.getString("region").isEmpty())) {
          path = path.replaceAll("\\{" + "region" + "\\}", escapeString(params.getString("region")));
        }

        HttpUrl url = urlBuilder
          .addPathSegments(path)
          .build();
        Request request = requestBuilder.url(url)
          .build();

        client.newCall(request).enqueue(new Callback() {

          @Override
          public void onFailure(@NonNull Call call, @NonNull IOException e) {
            String errorMessage = "Problem during request | " + String.valueOf(e.hashCode()) + ": " + e.getMessage();
            callbackContext.error(errorMessage);
          }

          @Override
          public void onResponse(@NonNull Call call, @NonNull Response response) {
            if (response.isSuccessful()) {
              try {
                JSONObject jsonObject = new JSONObject(Objects.requireNonNull(response.body()).string());
                callbackContext.success(jsonObject);
              } catch (Exception e) {
                String errorMessage = "Problem during response parsing";
                callbackContext.error(errorMessage);
              }
            } else {
              callbackContext.error("Unexpected code " + response.code() + " | message: " + response.message());
            }
          }
        });
      } catch (Exception e) {
        String errorMessage = "Problem during request building | " + e.hashCode() + ": " + e.getMessage();
        callbackContext.error(errorMessage);
      }
    });
  }

  private void coverageRegionCoordId(final JSONObject params, final CallbackContext callbackContext) {
    cordova.getThreadPool().execute(() -> {
      try {
        HttpUrl.Builder urlBuilder = new HttpUrl.Builder()
          .scheme("https")
          .host("api.navitia.io")
          .addPathSegment("v1");
        Request.Builder requestBuilder = new Request.Builder()
          .header("Authorization", token);
        String path = "/coverage/{region}/coord/{id}".substring(1);

        if (params.has("region") && (!params.getString("region").isEmpty())) {
          path = path.replaceAll("\\{" + "region" + "\\}", escapeString(params.getString("region")));
        }

        if (params.has("id") && (!params.getString("id").isEmpty())) {
          path = path.replaceAll("\\{" + "id" + "\\}", escapeString(params.getString("id")));
        }

        HttpUrl url = urlBuilder
          .addPathSegments(path)
          .build();
        Request request = requestBuilder.url(url)
          .build();

        client.newCall(request).enqueue(new Callback() {

          @Override
          public void onFailure(@NonNull Call call, @NonNull IOException e) {
            String errorMessage = "Problem during request | " + String.valueOf(e.hashCode()) + ": " + e.getMessage();
            callbackContext.error(errorMessage);
          }

          @Override
          public void onResponse(@NonNull Call call, @NonNull Response response) {
            if (response.isSuccessful()) {
              try {
                JSONObject jsonObject = new JSONObject(Objects.requireNonNull(response.body()).string());
                callbackContext.success(jsonObject);
              } catch (Exception e) {
                String errorMessage = "Problem during response parsing";
                callbackContext.error(errorMessage);
              }
            } else {
              callbackContext.error("Unexpected code " + response.code() + " | message: " + response.message());
            }
          }
        });
      } catch (Exception e) {
        String errorMessage = "Problem during request building | " + e.hashCode() + ": " + e.getMessage();
        callbackContext.error(errorMessage);
      }
    });
  }

  private void coverageRegionCoords(final JSONObject params, final CallbackContext callbackContext) {
    cordova.getThreadPool().execute(() -> {
      try {
        HttpUrl.Builder urlBuilder = new HttpUrl.Builder()
          .scheme("https")
          .host("api.navitia.io")
          .addPathSegment("v1");
        Request.Builder requestBuilder = new Request.Builder()
          .header("Authorization", token);
        String path = "/coverage/{region}/coords".substring(1);

        if (params.has("region") && (!params.getString("region").isEmpty())) {
          path = path.replaceAll("\\{" + "region" + "\\}", escapeString(params.getString("region")));
        }

        HttpUrl url = urlBuilder
          .addPathSegments(path)
          .build();
        Request request = requestBuilder.url(url)
          .build();

        client.newCall(request).enqueue(new Callback() {

          @Override
          public void onFailure(@NonNull Call call, @NonNull IOException e) {
            String errorMessage = "Problem during request | " + String.valueOf(e.hashCode()) + ": " + e.getMessage();
            callbackContext.error(errorMessage);
          }

          @Override
          public void onResponse(@NonNull Call call, @NonNull Response response) {
            if (response.isSuccessful()) {
              try {
                JSONObject jsonObject = new JSONObject(Objects.requireNonNull(response.body()).string());
                callbackContext.success(jsonObject);
              } catch (Exception e) {
                String errorMessage = "Problem during response parsing";
                callbackContext.error(errorMessage);
              }
            } else {
              callbackContext.error("Unexpected code " + response.code() + " | message: " + response.message());
            }
          }
        });
      } catch (Exception e) {
        String errorMessage = "Problem during request building | " + e.hashCode() + ": " + e.getMessage();
        callbackContext.error(errorMessage);
      }
    });
  }

  private void coverageRegionCoordsId(final JSONObject params, final CallbackContext callbackContext) {
    cordova.getThreadPool().execute(() -> {
      try {
        HttpUrl.Builder urlBuilder = new HttpUrl.Builder()
          .scheme("https")
          .host("api.navitia.io")
          .addPathSegment("v1");
        Request.Builder requestBuilder = new Request.Builder()
          .header("Authorization", token);
        String path = "/coverage/{region}/coords/{id}".substring(1);

        if (params.has("region") && (!params.getString("region").isEmpty())) {
          path = path.replaceAll("\\{" + "region" + "\\}", escapeString(params.getString("region")));
        }

        if (params.has("id") && (!params.getString("id").isEmpty())) {
          path = path.replaceAll("\\{" + "id" + "\\}", escapeString(params.getString("id")));
        }

        HttpUrl url = urlBuilder
          .addPathSegments(path)
          .build();
        Request request = requestBuilder.url(url)
          .build();

        client.newCall(request).enqueue(new Callback() {

          @Override
          public void onFailure(@NonNull Call call, @NonNull IOException e) {
            String errorMessage = "Problem during request | " + String.valueOf(e.hashCode()) + ": " + e.getMessage();
            callbackContext.error(errorMessage);
          }

          @Override
          public void onResponse(@NonNull Call call, @NonNull Response response) {
            if (response.isSuccessful()) {
              try {
                JSONObject jsonObject = new JSONObject(Objects.requireNonNull(response.body()).string());
                callbackContext.success(jsonObject);
              } catch (Exception e) {
                String errorMessage = "Problem during response parsing";
                callbackContext.error(errorMessage);
              }
            } else {
              callbackContext.error("Unexpected code " + response.code() + " | message: " + response.message());
            }
          }
        });
      } catch (Exception e) {
        String errorMessage = "Problem during request building | " + e.hashCode() + ": " + e.getMessage();
        callbackContext.error(errorMessage);
      }
    });
  }

  private void coverageRegionUriCoord(final JSONObject params, final CallbackContext callbackContext) {
    cordova.getThreadPool().execute(() -> {
      try {
        HttpUrl.Builder urlBuilder = new HttpUrl.Builder()
          .scheme("https")
          .host("api.navitia.io")
          .addPathSegment("v1");
        Request.Builder requestBuilder = new Request.Builder()
          .header("Authorization", token);
        String path = "/coverage/{region}/{uri}/coord".substring(1);

        if (params.has("region") && (!params.getString("region").isEmpty())) {
          path = path.replaceAll("\\{" + "region" + "\\}", escapeString(params.getString("region")));
        }

        if (params.has("uri") && (!params.getString("uri").isEmpty())) {
          path = path.replaceAll("\\{" + "uri" + "\\}", escapeString(params.getString("uri")));
        }

        HttpUrl url = urlBuilder
          .addPathSegments(path)
          .build();
        Request request = requestBuilder.url(url)
          .build();

        client.newCall(request).enqueue(new Callback() {

          @Override
          public void onFailure(@NonNull Call call, @NonNull IOException e) {
            String errorMessage = "Problem during request | " + String.valueOf(e.hashCode()) + ": " + e.getMessage();
            callbackContext.error(errorMessage);
          }

          @Override
          public void onResponse(@NonNull Call call, @NonNull Response response) {
            if (response.isSuccessful()) {
              try {
                JSONObject jsonObject = new JSONObject(Objects.requireNonNull(response.body()).string());
                callbackContext.success(jsonObject);
              } catch (Exception e) {
                String errorMessage = "Problem during response parsing";
                callbackContext.error(errorMessage);
              }
            } else {
              callbackContext.error("Unexpected code " + response.code() + " | message: " + response.message());
            }
          }
        });
      } catch (Exception e) {
        String errorMessage = "Problem during request building | " + e.hashCode() + ": " + e.getMessage();
        callbackContext.error(errorMessage);
      }
    });
  }

  private void coverageRegionUriCoordId(final JSONObject params, final CallbackContext callbackContext) {
    cordova.getThreadPool().execute(() -> {
      try {
        HttpUrl.Builder urlBuilder = new HttpUrl.Builder()
          .scheme("https")
          .host("api.navitia.io")
          .addPathSegment("v1");
        Request.Builder requestBuilder = new Request.Builder()
          .header("Authorization", token);
        String path = "/coverage/{region}/{uri}/coord/{id}".substring(1);

        if (params.has("region") && (!params.getString("region").isEmpty())) {
          path = path.replaceAll("\\{" + "region" + "\\}", escapeString(params.getString("region")));
        }

        if (params.has("uri") && (!params.getString("uri").isEmpty())) {
          path = path.replaceAll("\\{" + "uri" + "\\}", escapeString(params.getString("uri")));
        }

        if (params.has("id") && (!params.getString("id").isEmpty())) {
          path = path.replaceAll("\\{" + "id" + "\\}", escapeString(params.getString("id")));
        }

        HttpUrl url = urlBuilder
          .addPathSegments(path)
          .build();
        Request request = requestBuilder.url(url)
          .build();

        client.newCall(request).enqueue(new Callback() {

          @Override
          public void onFailure(@NonNull Call call, @NonNull IOException e) {
            String errorMessage = "Problem during request | " + String.valueOf(e.hashCode()) + ": " + e.getMessage();
            callbackContext.error(errorMessage);
          }

          @Override
          public void onResponse(@NonNull Call call, @NonNull Response response) {
            if (response.isSuccessful()) {
              try {
                JSONObject jsonObject = new JSONObject(Objects.requireNonNull(response.body()).string());
                callbackContext.success(jsonObject);
              } catch (Exception e) {
                String errorMessage = "Problem during response parsing";
                callbackContext.error(errorMessage);
              }
            } else {
              callbackContext.error("Unexpected code " + response.code() + " | message: " + response.message());
            }
          }
        });
      } catch (Exception e) {
        String errorMessage = "Problem during request building | " + e.hashCode() + ": " + e.getMessage();
        callbackContext.error(errorMessage);
      }
    });
  }

  private void coverageRegionUriCoords(final JSONObject params, final CallbackContext callbackContext) {
    cordova.getThreadPool().execute(() -> {
      try {
        HttpUrl.Builder urlBuilder = new HttpUrl.Builder()
          .scheme("https")
          .host("api.navitia.io")
          .addPathSegment("v1");
        Request.Builder requestBuilder = new Request.Builder()
          .header("Authorization", token);
        String path = "/coverage/{region}/{uri}/coords".substring(1);

        if (params.has("region") && (!params.getString("region").isEmpty())) {
          path = path.replaceAll("\\{" + "region" + "\\}", escapeString(params.getString("region")));
        }

        if (params.has("uri") && (!params.getString("uri").isEmpty())) {
          path = path.replaceAll("\\{" + "uri" + "\\}", escapeString(params.getString("uri")));
        }

        HttpUrl url = urlBuilder
          .addPathSegments(path)
          .build();
        Request request = requestBuilder.url(url)
          .build();

        client.newCall(request).enqueue(new Callback() {

          @Override
          public void onFailure(@NonNull Call call, @NonNull IOException e) {
            String errorMessage = "Problem during request | " + String.valueOf(e.hashCode()) + ": " + e.getMessage();
            callbackContext.error(errorMessage);
          }

          @Override
          public void onResponse(@NonNull Call call, @NonNull Response response) {
            if (response.isSuccessful()) {
              try {
                JSONObject jsonObject = new JSONObject(Objects.requireNonNull(response.body()).string());
                callbackContext.success(jsonObject);
              } catch (Exception e) {
                String errorMessage = "Problem during response parsing";
                callbackContext.error(errorMessage);
              }
            } else {
              callbackContext.error("Unexpected code " + response.code() + " | message: " + response.message());
            }
          }
        });
      } catch (Exception e) {
        String errorMessage = "Problem during request building | " + e.hashCode() + ": " + e.getMessage();
        callbackContext.error(errorMessage);
      }
    });
  }

  private void coverageRegionUriCoordsId(final JSONObject params, final CallbackContext callbackContext) {
    cordova.getThreadPool().execute(() -> {
      try {
        HttpUrl.Builder urlBuilder = new HttpUrl.Builder()
          .scheme("https")
          .host("api.navitia.io")
          .addPathSegment("v1");
        Request.Builder requestBuilder = new Request.Builder()
          .header("Authorization", token);
        String path = "/coverage/{region}/{uri}/coords/{id}".substring(1);

        if (params.has("region") && (!params.getString("region").isEmpty())) {
          path = path.replaceAll("\\{" + "region" + "\\}", escapeString(params.getString("region")));
        }

        if (params.has("uri") && (!params.getString("uri").isEmpty())) {
          path = path.replaceAll("\\{" + "uri" + "\\}", escapeString(params.getString("uri")));
        }

        if (params.has("id") && (!params.getString("id").isEmpty())) {
          path = path.replaceAll("\\{" + "id" + "\\}", escapeString(params.getString("id")));
        }

        HttpUrl url = urlBuilder
          .addPathSegments(path)
          .build();
        Request request = requestBuilder.url(url)
          .build();

        client.newCall(request).enqueue(new Callback() {

          @Override
          public void onFailure(@NonNull Call call, @NonNull IOException e) {
            String errorMessage = "Problem during request | " + String.valueOf(e.hashCode()) + ": " + e.getMessage();
            callbackContext.error(errorMessage);
          }

          @Override
          public void onResponse(@NonNull Call call, @NonNull Response response) {
            if (response.isSuccessful()) {
              try {
                JSONObject jsonObject = new JSONObject(Objects.requireNonNull(response.body()).string());
                callbackContext.success(jsonObject);
              } catch (Exception e) {
                String errorMessage = "Problem during response parsing";
                callbackContext.error(errorMessage);
              }
            } else {
              callbackContext.error("Unexpected code " + response.code() + " | message: " + response.message());
            }
          }
        });
      } catch (Exception e) {
        String errorMessage = "Problem during request building | " + e.hashCode() + ": " + e.getMessage();
        callbackContext.error(errorMessage);
      }
    });
  }

  private void coverage(final JSONObject params, final CallbackContext callbackContext) {
    cordova.getThreadPool().execute(() -> {
      try {
        HttpUrl.Builder urlBuilder = new HttpUrl.Builder()
          .scheme("https")
          .host("api.navitia.io")
          .addPathSegment("v1");
        Request.Builder requestBuilder = new Request.Builder()
          .header("Authorization", token);
        String path = "/coverage/".substring(1);

        if (params.has("disableGeojson") && (!params.getString("disableGeojson").isEmpty())) {
          urlBuilder.addQueryParameter("disable_geojson", escapeString(String.valueOf(params.getBoolean("disableGeojson"))));
        }

        HttpUrl url = urlBuilder
          .addPathSegments(path)
          .build();
        Request request = requestBuilder.url(url)
          .build();

        client.newCall(request).enqueue(new Callback() {

          @Override
          public void onFailure(@NonNull Call call, @NonNull IOException e) {
            String errorMessage = "Problem during request | " + String.valueOf(e.hashCode()) + ": " + e.getMessage();
            callbackContext.error(errorMessage);
          }

          @Override
          public void onResponse(@NonNull Call call, @NonNull Response response) {
            if (response.isSuccessful()) {
              try {
                JSONObject jsonObject = new JSONObject(Objects.requireNonNull(response.body()).string());
                callbackContext.success(jsonObject);
              } catch (Exception e) {
                String errorMessage = "Problem during response parsing";
                callbackContext.error(errorMessage);
              }
            } else {
              callbackContext.error("Unexpected code " + response.code() + " | message: " + response.message());
            }
          }
        });
      } catch (Exception e) {
        String errorMessage = "Problem during request building | " + e.hashCode() + ": " + e.getMessage();
        callbackContext.error(errorMessage);
      }
    });
  }

  private void coverageLonLat(final JSONObject params, final CallbackContext callbackContext) {
    cordova.getThreadPool().execute(() -> {
      try {
        HttpUrl.Builder urlBuilder = new HttpUrl.Builder()
          .scheme("https")
          .host("api.navitia.io")
          .addPathSegment("v1");
        Request.Builder requestBuilder = new Request.Builder()
          .header("Authorization", token);
        String path = "/coverage/{lon};{lat}/".substring(1);

        if (params.has("lat") && (!params.getString("lat").isEmpty())) {
          path = path.replaceAll("\\{" + "lat" + "\\}", escapeString(String.valueOf(params.getLong("lat"))));
        }

        if (params.has("lon") && (!params.getString("lon").isEmpty())) {
          path = path.replaceAll("\\{" + "lon" + "\\}", escapeString(String.valueOf(params.getLong("lon"))));
        }

        if (params.has("disableGeojson") && (!params.getString("disableGeojson").isEmpty())) {
          urlBuilder.addQueryParameter("disable_geojson", escapeString(String.valueOf(params.getBoolean("disableGeojson"))));
        }

        HttpUrl url = urlBuilder
          .addPathSegments(path)
          .build();
        Request request = requestBuilder.url(url)
          .build();

        client.newCall(request).enqueue(new Callback() {

          @Override
          public void onFailure(@NonNull Call call, @NonNull IOException e) {
            String errorMessage = "Problem during request | " + String.valueOf(e.hashCode()) + ": " + e.getMessage();
            callbackContext.error(errorMessage);
          }

          @Override
          public void onResponse(@NonNull Call call, @NonNull Response response) {
            if (response.isSuccessful()) {
              try {
                JSONObject jsonObject = new JSONObject(Objects.requireNonNull(response.body()).string());
                callbackContext.success(jsonObject);
              } catch (Exception e) {
                String errorMessage = "Problem during response parsing";
                callbackContext.error(errorMessage);
              }
            } else {
              callbackContext.error("Unexpected code " + response.code() + " | message: " + response.message());
            }
          }
        });
      } catch (Exception e) {
        String errorMessage = "Problem during request building | " + e.hashCode() + ": " + e.getMessage();
        callbackContext.error(errorMessage);
      }
    });
  }

  private void coverageRegion(final JSONObject params, final CallbackContext callbackContext) {
    cordova.getThreadPool().execute(() -> {
      try {
        HttpUrl.Builder urlBuilder = new HttpUrl.Builder()
          .scheme("https")
          .host("api.navitia.io")
          .addPathSegment("v1");
        Request.Builder requestBuilder = new Request.Builder()
          .header("Authorization", token);
        String path = "/coverage/{region}/".substring(1);

        if (params.has("region") && (!params.getString("region").isEmpty())) {
          path = path.replaceAll("\\{" + "region" + "\\}", escapeString(params.getString("region")));
        }

        if (params.has("disableGeojson") && (!params.getString("disableGeojson").isEmpty())) {
          urlBuilder.addQueryParameter("disable_geojson", escapeString(String.valueOf(params.getBoolean("disableGeojson"))));
        }

        HttpUrl url = urlBuilder
          .addPathSegments(path)
          .build();
        Request request = requestBuilder.url(url)
          .build();

        client.newCall(request).enqueue(new Callback() {

          @Override
          public void onFailure(@NonNull Call call, @NonNull IOException e) {
            String errorMessage = "Problem during request | " + String.valueOf(e.hashCode()) + ": " + e.getMessage();
            callbackContext.error(errorMessage);
          }

          @Override
          public void onResponse(@NonNull Call call, @NonNull Response response) {
            if (response.isSuccessful()) {
              try {
                JSONObject jsonObject = new JSONObject(Objects.requireNonNull(response.body()).string());
                callbackContext.success(jsonObject);
              } catch (Exception e) {
                String errorMessage = "Problem during response parsing";
                callbackContext.error(errorMessage);
              }
            } else {
              callbackContext.error("Unexpected code " + response.code() + " | message: " + response.message());
            }
          }
        });
      } catch (Exception e) {
        String errorMessage = "Problem during request building | " + e.hashCode() + ": " + e.getMessage();
        callbackContext.error(errorMessage);
      }
    });
  }

  private void coverageLonLatDatasets(final JSONObject params, final CallbackContext callbackContext) {
    cordova.getThreadPool().execute(() -> {
      try {
        HttpUrl.Builder urlBuilder = new HttpUrl.Builder()
          .scheme("https")
          .host("api.navitia.io")
          .addPathSegment("v1");
        Request.Builder requestBuilder = new Request.Builder()
          .header("Authorization", token);
        String path = "/coverage/{lon};{lat}/datasets".substring(1);

        if (params.has("lat") && (!params.getString("lat").isEmpty())) {
          path = path.replaceAll("\\{" + "lat" + "\\}", escapeString(String.valueOf(params.getLong("lat"))));
        }

        if (params.has("lon") && (!params.getString("lon").isEmpty())) {
          path = path.replaceAll("\\{" + "lon" + "\\}", escapeString(String.valueOf(params.getLong("lon"))));
        }

        if (params.has("startPage") && (!params.getString("startPage").isEmpty())) {
          urlBuilder.addQueryParameter("start_page", escapeString(String.valueOf(params.getInt("startPage"))));
        }

        if (params.has("count") && (!params.getString("count").isEmpty())) {
          urlBuilder.addQueryParameter("count", escapeString(String.valueOf(params.getInt("count"))));
        }

        if (params.has("depth") && (!params.getString("depth").isEmpty())) {
          urlBuilder.addQueryParameter("depth", escapeString(String.valueOf(params.getInt("depth"))));
        }

        if (params.has("forbiddenId") && (!params.getString("forbiddenId").isEmpty())) {
          urlBuilder.addQueryParameter("forbidden_id[]", escapeString(String.valueOf(params.getJSONArray("forbiddenId"))));
        }

        if (params.has("forbiddenUris") && (!params.getString("forbiddenUris").isEmpty())) {
          urlBuilder.addQueryParameter("forbidden_uris[]", escapeString(String.valueOf(params.getJSONArray("forbiddenUris"))));
        }

        if (params.has("externalCode") && (!params.getString("externalCode").isEmpty())) {
          urlBuilder.addQueryParameter("external_code", escapeString(params.getString("externalCode")));
        }

        if (params.has("headsign") && (!params.getString("headsign").isEmpty())) {
          urlBuilder.addQueryParameter("headsign", escapeString(params.getString("headsign")));
        }

        if (params.has("showCodes") && (!params.getString("showCodes").isEmpty())) {
          urlBuilder.addQueryParameter("show_codes", escapeString(String.valueOf(params.getBoolean("showCodes"))));
        }

        if (params.has("odtLevel") && (!params.getString("odtLevel").isEmpty())) {
          urlBuilder.addQueryParameter("odt_level", escapeString(params.getString("odtLevel")));
        }

        if (params.has("dataFreshness") && (!params.getString("dataFreshness").isEmpty())) {
          urlBuilder.addQueryParameter("data_freshness", escapeString(params.getString("dataFreshness")));
        }

        if (params.has("distance") && (!params.getString("distance").isEmpty())) {
          urlBuilder.addQueryParameter("distance", escapeString(String.valueOf(params.getInt("distance"))));
        }

        if (params.has("since") && (!params.getString("since").isEmpty())) {
          urlBuilder.addQueryParameter("since", escapeString(String.valueOf(params.getString("since"))));
        }

        if (params.has("until") && (!params.getString("until").isEmpty())) {
          urlBuilder.addQueryParameter("until", escapeString(String.valueOf(params.getString("until"))));
        }

        if (params.has("disableGeojson") && (!params.getString("disableGeojson").isEmpty())) {
          urlBuilder.addQueryParameter("disable_geojson", escapeString(String.valueOf(params.getBoolean("disableGeojson"))));
        }

        if (params.has("disableDisruption") && (!params.getString("disableDisruption").isEmpty())) {
          urlBuilder.addQueryParameter("disable_disruption", escapeString(String.valueOf(params.getBoolean("disableDisruption"))));
        }

        if (params.has("filter") && (!params.getString("filter").isEmpty())) {
          urlBuilder.addQueryParameter("filter", escapeString(params.getString("filter")));
        }

        if (params.has("tags") && (!params.getString("tags").isEmpty())) {
          urlBuilder.addQueryParameter("tags[]", escapeString(String.valueOf(params.getJSONArray("tags"))));
        }

        HttpUrl url = urlBuilder
          .addPathSegments(path)
          .build();
        Request request = requestBuilder.url(url)
          .build();

        client.newCall(request).enqueue(new Callback() {

          @Override
          public void onFailure(@NonNull Call call, @NonNull IOException e) {
            String errorMessage = "Problem during request | " + String.valueOf(e.hashCode()) + ": " + e.getMessage();
            callbackContext.error(errorMessage);
          }

          @Override
          public void onResponse(@NonNull Call call, @NonNull Response response) {
            if (response.isSuccessful()) {
              try {
                JSONObject jsonObject = new JSONObject(Objects.requireNonNull(response.body()).string());
                callbackContext.success(jsonObject);
              } catch (Exception e) {
                String errorMessage = "Problem during response parsing";
                callbackContext.error(errorMessage);
              }
            } else {
              callbackContext.error("Unexpected code " + response.code() + " | message: " + response.message());
            }
          }
        });
      } catch (Exception e) {
        String errorMessage = "Problem during request building | " + e.hashCode() + ": " + e.getMessage();
        callbackContext.error(errorMessage);
      }
    });
  }

  private void coverageLonLatDatasetsId(final JSONObject params, final CallbackContext callbackContext) {
    cordova.getThreadPool().execute(() -> {
      try {
        HttpUrl.Builder urlBuilder = new HttpUrl.Builder()
          .scheme("https")
          .host("api.navitia.io")
          .addPathSegment("v1");
        Request.Builder requestBuilder = new Request.Builder()
          .header("Authorization", token);
        String path = "/coverage/{lon};{lat}/datasets/{id}".substring(1);

        if (params.has("lat") && (!params.getString("lat").isEmpty())) {
          path = path.replaceAll("\\{" + "lat" + "\\}", escapeString(String.valueOf(params.getLong("lat"))));
        }

        if (params.has("lon") && (!params.getString("lon").isEmpty())) {
          path = path.replaceAll("\\{" + "lon" + "\\}", escapeString(String.valueOf(params.getLong("lon"))));
        }

        if (params.has("id") && (!params.getString("id").isEmpty())) {
          path = path.replaceAll("\\{" + "id" + "\\}", escapeString(params.getString("id")));
        }

        if (params.has("startPage") && (!params.getString("startPage").isEmpty())) {
          urlBuilder.addQueryParameter("start_page", escapeString(String.valueOf(params.getInt("startPage"))));
        }

        if (params.has("count") && (!params.getString("count").isEmpty())) {
          urlBuilder.addQueryParameter("count", escapeString(String.valueOf(params.getInt("count"))));
        }

        if (params.has("depth") && (!params.getString("depth").isEmpty())) {
          urlBuilder.addQueryParameter("depth", escapeString(String.valueOf(params.getInt("depth"))));
        }

        if (params.has("forbiddenId") && (!params.getString("forbiddenId").isEmpty())) {
          urlBuilder.addQueryParameter("forbidden_id[]", escapeString(String.valueOf(params.getJSONArray("forbiddenId"))));
        }

        if (params.has("forbiddenUris") && (!params.getString("forbiddenUris").isEmpty())) {
          urlBuilder.addQueryParameter("forbidden_uris[]", escapeString(String.valueOf(params.getJSONArray("forbiddenUris"))));
        }

        if (params.has("externalCode") && (!params.getString("externalCode").isEmpty())) {
          urlBuilder.addQueryParameter("external_code", escapeString(params.getString("externalCode")));
        }

        if (params.has("headsign") && (!params.getString("headsign").isEmpty())) {
          urlBuilder.addQueryParameter("headsign", escapeString(params.getString("headsign")));
        }

        if (params.has("showCodes") && (!params.getString("showCodes").isEmpty())) {
          urlBuilder.addQueryParameter("show_codes", escapeString(String.valueOf(params.getBoolean("showCodes"))));
        }

        if (params.has("odtLevel") && (!params.getString("odtLevel").isEmpty())) {
          urlBuilder.addQueryParameter("odt_level", escapeString(params.getString("odtLevel")));
        }

        if (params.has("dataFreshness") && (!params.getString("dataFreshness").isEmpty())) {
          urlBuilder.addQueryParameter("data_freshness", escapeString(params.getString("dataFreshness")));
        }

        if (params.has("distance") && (!params.getString("distance").isEmpty())) {
          urlBuilder.addQueryParameter("distance", escapeString(String.valueOf(params.getInt("distance"))));
        }

        if (params.has("since") && (!params.getString("since").isEmpty())) {
          urlBuilder.addQueryParameter("since", escapeString(String.valueOf(params.getString("since"))));
        }

        if (params.has("until") && (!params.getString("until").isEmpty())) {
          urlBuilder.addQueryParameter("until", escapeString(String.valueOf(params.getString("until"))));
        }

        if (params.has("disableGeojson") && (!params.getString("disableGeojson").isEmpty())) {
          urlBuilder.addQueryParameter("disable_geojson", escapeString(String.valueOf(params.getBoolean("disableGeojson"))));
        }

        if (params.has("disableDisruption") && (!params.getString("disableDisruption").isEmpty())) {
          urlBuilder.addQueryParameter("disable_disruption", escapeString(String.valueOf(params.getBoolean("disableDisruption"))));
        }

        if (params.has("tags") && (!params.getString("tags").isEmpty())) {
          urlBuilder.addQueryParameter("tags[]", escapeString(String.valueOf(params.getJSONArray("tags"))));
        }

        HttpUrl url = urlBuilder
          .addPathSegments(path)
          .build();
        Request request = requestBuilder.url(url)
          .build();

        client.newCall(request).enqueue(new Callback() {

          @Override
          public void onFailure(@NonNull Call call, @NonNull IOException e) {
            String errorMessage = "Problem during request | " + String.valueOf(e.hashCode()) + ": " + e.getMessage();
            callbackContext.error(errorMessage);
          }

          @Override
          public void onResponse(@NonNull Call call, @NonNull Response response) {
            if (response.isSuccessful()) {
              try {
                JSONObject jsonObject = new JSONObject(Objects.requireNonNull(response.body()).string());
                callbackContext.success(jsonObject);
              } catch (Exception e) {
                String errorMessage = "Problem during response parsing";
                callbackContext.error(errorMessage);
              }
            } else {
              callbackContext.error("Unexpected code " + response.code() + " | message: " + response.message());
            }
          }
        });
      } catch (Exception e) {
        String errorMessage = "Problem during request building | " + e.hashCode() + ": " + e.getMessage();
        callbackContext.error(errorMessage);
      }
    });
  }

  private void coverageLonLatUriDatasets(final JSONObject params, final CallbackContext callbackContext) {
    cordova.getThreadPool().execute(() -> {
      try {
        HttpUrl.Builder urlBuilder = new HttpUrl.Builder()
          .scheme("https")
          .host("api.navitia.io")
          .addPathSegment("v1");
        Request.Builder requestBuilder = new Request.Builder()
          .header("Authorization", token);
        String path = "/coverage/{lon};{lat}/{uri}/datasets".substring(1);

        if (params.has("lat") && (!params.getString("lat").isEmpty())) {
          path = path.replaceAll("\\{" + "lat" + "\\}", escapeString(String.valueOf(params.getLong("lat"))));
        }

        if (params.has("lon") && (!params.getString("lon").isEmpty())) {
          path = path.replaceAll("\\{" + "lon" + "\\}", escapeString(String.valueOf(params.getLong("lon"))));
        }

        if (params.has("uri") && (!params.getString("uri").isEmpty())) {
          path = path.replaceAll("\\{" + "uri" + "\\}", escapeString(params.getString("uri")));
        }

        if (params.has("startPage") && (!params.getString("startPage").isEmpty())) {
          urlBuilder.addQueryParameter("start_page", escapeString(String.valueOf(params.getInt("startPage"))));
        }

        if (params.has("count") && (!params.getString("count").isEmpty())) {
          urlBuilder.addQueryParameter("count", escapeString(String.valueOf(params.getInt("count"))));
        }

        if (params.has("depth") && (!params.getString("depth").isEmpty())) {
          urlBuilder.addQueryParameter("depth", escapeString(String.valueOf(params.getInt("depth"))));
        }

        if (params.has("forbiddenId") && (!params.getString("forbiddenId").isEmpty())) {
          urlBuilder.addQueryParameter("forbidden_id[]", escapeString(String.valueOf(params.getJSONArray("forbiddenId"))));
        }

        if (params.has("forbiddenUris") && (!params.getString("forbiddenUris").isEmpty())) {
          urlBuilder.addQueryParameter("forbidden_uris[]", escapeString(String.valueOf(params.getJSONArray("forbiddenUris"))));
        }

        if (params.has("externalCode") && (!params.getString("externalCode").isEmpty())) {
          urlBuilder.addQueryParameter("external_code", escapeString(params.getString("externalCode")));
        }

        if (params.has("headsign") && (!params.getString("headsign").isEmpty())) {
          urlBuilder.addQueryParameter("headsign", escapeString(params.getString("headsign")));
        }

        if (params.has("showCodes") && (!params.getString("showCodes").isEmpty())) {
          urlBuilder.addQueryParameter("show_codes", escapeString(String.valueOf(params.getBoolean("showCodes"))));
        }

        if (params.has("odtLevel") && (!params.getString("odtLevel").isEmpty())) {
          urlBuilder.addQueryParameter("odt_level", escapeString(params.getString("odtLevel")));
        }

        if (params.has("dataFreshness") && (!params.getString("dataFreshness").isEmpty())) {
          urlBuilder.addQueryParameter("data_freshness", escapeString(params.getString("dataFreshness")));
        }

        if (params.has("distance") && (!params.getString("distance").isEmpty())) {
          urlBuilder.addQueryParameter("distance", escapeString(String.valueOf(params.getInt("distance"))));
        }

        if (params.has("since") && (!params.getString("since").isEmpty())) {
          urlBuilder.addQueryParameter("since", escapeString(String.valueOf(params.getString("since"))));
        }

        if (params.has("until") && (!params.getString("until").isEmpty())) {
          urlBuilder.addQueryParameter("until", escapeString(String.valueOf(params.getString("until"))));
        }

        if (params.has("disableGeojson") && (!params.getString("disableGeojson").isEmpty())) {
          urlBuilder.addQueryParameter("disable_geojson", escapeString(String.valueOf(params.getBoolean("disableGeojson"))));
        }

        if (params.has("disableDisruption") && (!params.getString("disableDisruption").isEmpty())) {
          urlBuilder.addQueryParameter("disable_disruption", escapeString(String.valueOf(params.getBoolean("disableDisruption"))));
        }

        if (params.has("filter") && (!params.getString("filter").isEmpty())) {
          urlBuilder.addQueryParameter("filter", escapeString(params.getString("filter")));
        }

        if (params.has("tags") && (!params.getString("tags").isEmpty())) {
          urlBuilder.addQueryParameter("tags[]", escapeString(String.valueOf(params.getJSONArray("tags"))));
        }

        HttpUrl url = urlBuilder
          .addPathSegments(path)
          .build();
        Request request = requestBuilder.url(url)
          .build();

        client.newCall(request).enqueue(new Callback() {

          @Override
          public void onFailure(@NonNull Call call, @NonNull IOException e) {
            String errorMessage = "Problem during request | " + String.valueOf(e.hashCode()) + ": " + e.getMessage();
            callbackContext.error(errorMessage);
          }

          @Override
          public void onResponse(@NonNull Call call, @NonNull Response response) {
            if (response.isSuccessful()) {
              try {
                JSONObject jsonObject = new JSONObject(Objects.requireNonNull(response.body()).string());
                callbackContext.success(jsonObject);
              } catch (Exception e) {
                String errorMessage = "Problem during response parsing";
                callbackContext.error(errorMessage);
              }
            } else {
              callbackContext.error("Unexpected code " + response.code() + " | message: " + response.message());
            }
          }
        });
      } catch (Exception e) {
        String errorMessage = "Problem during request building | " + e.hashCode() + ": " + e.getMessage();
        callbackContext.error(errorMessage);
      }
    });
  }

  private void coverageLonLatUriDatasetsId(final JSONObject params, final CallbackContext callbackContext) {
    cordova.getThreadPool().execute(() -> {
      try {
        HttpUrl.Builder urlBuilder = new HttpUrl.Builder()
          .scheme("https")
          .host("api.navitia.io")
          .addPathSegment("v1");
        Request.Builder requestBuilder = new Request.Builder()
          .header("Authorization", token);
        String path = "/coverage/{lon};{lat}/{uri}/datasets/{id}".substring(1);

        if (params.has("lat") && (!params.getString("lat").isEmpty())) {
          path = path.replaceAll("\\{" + "lat" + "\\}", escapeString(String.valueOf(params.getLong("lat"))));
        }

        if (params.has("lon") && (!params.getString("lon").isEmpty())) {
          path = path.replaceAll("\\{" + "lon" + "\\}", escapeString(String.valueOf(params.getLong("lon"))));
        }

        if (params.has("uri") && (!params.getString("uri").isEmpty())) {
          path = path.replaceAll("\\{" + "uri" + "\\}", escapeString(params.getString("uri")));
        }

        if (params.has("id") && (!params.getString("id").isEmpty())) {
          path = path.replaceAll("\\{" + "id" + "\\}", escapeString(params.getString("id")));
        }

        if (params.has("startPage") && (!params.getString("startPage").isEmpty())) {
          urlBuilder.addQueryParameter("start_page", escapeString(String.valueOf(params.getInt("startPage"))));
        }

        if (params.has("count") && (!params.getString("count").isEmpty())) {
          urlBuilder.addQueryParameter("count", escapeString(String.valueOf(params.getInt("count"))));
        }

        if (params.has("depth") && (!params.getString("depth").isEmpty())) {
          urlBuilder.addQueryParameter("depth", escapeString(String.valueOf(params.getInt("depth"))));
        }

        if (params.has("forbiddenId") && (!params.getString("forbiddenId").isEmpty())) {
          urlBuilder.addQueryParameter("forbidden_id[]", escapeString(String.valueOf(params.getJSONArray("forbiddenId"))));
        }

        if (params.has("forbiddenUris") && (!params.getString("forbiddenUris").isEmpty())) {
          urlBuilder.addQueryParameter("forbidden_uris[]", escapeString(String.valueOf(params.getJSONArray("forbiddenUris"))));
        }

        if (params.has("externalCode") && (!params.getString("externalCode").isEmpty())) {
          urlBuilder.addQueryParameter("external_code", escapeString(params.getString("externalCode")));
        }

        if (params.has("headsign") && (!params.getString("headsign").isEmpty())) {
          urlBuilder.addQueryParameter("headsign", escapeString(params.getString("headsign")));
        }

        if (params.has("showCodes") && (!params.getString("showCodes").isEmpty())) {
          urlBuilder.addQueryParameter("show_codes", escapeString(String.valueOf(params.getBoolean("showCodes"))));
        }

        if (params.has("odtLevel") && (!params.getString("odtLevel").isEmpty())) {
          urlBuilder.addQueryParameter("odt_level", escapeString(params.getString("odtLevel")));
        }

        if (params.has("dataFreshness") && (!params.getString("dataFreshness").isEmpty())) {
          urlBuilder.addQueryParameter("data_freshness", escapeString(params.getString("dataFreshness")));
        }

        if (params.has("distance") && (!params.getString("distance").isEmpty())) {
          urlBuilder.addQueryParameter("distance", escapeString(String.valueOf(params.getInt("distance"))));
        }

        if (params.has("since") && (!params.getString("since").isEmpty())) {
          urlBuilder.addQueryParameter("since", escapeString(String.valueOf(params.getString("since"))));
        }

        if (params.has("until") && (!params.getString("until").isEmpty())) {
          urlBuilder.addQueryParameter("until", escapeString(String.valueOf(params.getString("until"))));
        }

        if (params.has("disableGeojson") && (!params.getString("disableGeojson").isEmpty())) {
          urlBuilder.addQueryParameter("disable_geojson", escapeString(String.valueOf(params.getBoolean("disableGeojson"))));
        }

        if (params.has("disableDisruption") && (!params.getString("disableDisruption").isEmpty())) {
          urlBuilder.addQueryParameter("disable_disruption", escapeString(String.valueOf(params.getBoolean("disableDisruption"))));
        }

        if (params.has("tags") && (!params.getString("tags").isEmpty())) {
          urlBuilder.addQueryParameter("tags[]", escapeString(String.valueOf(params.getJSONArray("tags"))));
        }

        HttpUrl url = urlBuilder
          .addPathSegments(path)
          .build();
        Request request = requestBuilder.url(url)
          .build();

        client.newCall(request).enqueue(new Callback() {

          @Override
          public void onFailure(@NonNull Call call, @NonNull IOException e) {
            String errorMessage = "Problem during request | " + String.valueOf(e.hashCode()) + ": " + e.getMessage();
            callbackContext.error(errorMessage);
          }

          @Override
          public void onResponse(@NonNull Call call, @NonNull Response response) {
            if (response.isSuccessful()) {
              try {
                JSONObject jsonObject = new JSONObject(Objects.requireNonNull(response.body()).string());
                callbackContext.success(jsonObject);
              } catch (Exception e) {
                String errorMessage = "Problem during response parsing";
                callbackContext.error(errorMessage);
              }
            } else {
              callbackContext.error("Unexpected code " + response.code() + " | message: " + response.message());
            }
          }
        });
      } catch (Exception e) {
        String errorMessage = "Problem during request building | " + e.hashCode() + ": " + e.getMessage();
        callbackContext.error(errorMessage);
      }
    });
  }

  private void coverageRegionDatasets(final JSONObject params, final CallbackContext callbackContext) {
    cordova.getThreadPool().execute(() -> {
      try {
        HttpUrl.Builder urlBuilder = new HttpUrl.Builder()
          .scheme("https")
          .host("api.navitia.io")
          .addPathSegment("v1");
        Request.Builder requestBuilder = new Request.Builder()
          .header("Authorization", token);
        String path = "/coverage/{region}/datasets".substring(1);

        if (params.has("region") && (!params.getString("region").isEmpty())) {
          path = path.replaceAll("\\{" + "region" + "\\}", escapeString(params.getString("region")));
        }

        if (params.has("startPage") && (!params.getString("startPage").isEmpty())) {
          urlBuilder.addQueryParameter("start_page", escapeString(String.valueOf(params.getInt("startPage"))));
        }

        if (params.has("count") && (!params.getString("count").isEmpty())) {
          urlBuilder.addQueryParameter("count", escapeString(String.valueOf(params.getInt("count"))));
        }

        if (params.has("depth") && (!params.getString("depth").isEmpty())) {
          urlBuilder.addQueryParameter("depth", escapeString(String.valueOf(params.getInt("depth"))));
        }

        if (params.has("forbiddenId") && (!params.getString("forbiddenId").isEmpty())) {
          urlBuilder.addQueryParameter("forbidden_id[]", escapeString(String.valueOf(params.getJSONArray("forbiddenId"))));
        }

        if (params.has("forbiddenUris") && (!params.getString("forbiddenUris").isEmpty())) {
          urlBuilder.addQueryParameter("forbidden_uris[]", escapeString(String.valueOf(params.getJSONArray("forbiddenUris"))));
        }

        if (params.has("externalCode") && (!params.getString("externalCode").isEmpty())) {
          urlBuilder.addQueryParameter("external_code", escapeString(params.getString("externalCode")));
        }

        if (params.has("headsign") && (!params.getString("headsign").isEmpty())) {
          urlBuilder.addQueryParameter("headsign", escapeString(params.getString("headsign")));
        }

        if (params.has("showCodes") && (!params.getString("showCodes").isEmpty())) {
          urlBuilder.addQueryParameter("show_codes", escapeString(String.valueOf(params.getBoolean("showCodes"))));
        }

        if (params.has("odtLevel") && (!params.getString("odtLevel").isEmpty())) {
          urlBuilder.addQueryParameter("odt_level", escapeString(params.getString("odtLevel")));
        }

        if (params.has("dataFreshness") && (!params.getString("dataFreshness").isEmpty())) {
          urlBuilder.addQueryParameter("data_freshness", escapeString(params.getString("dataFreshness")));
        }

        if (params.has("distance") && (!params.getString("distance").isEmpty())) {
          urlBuilder.addQueryParameter("distance", escapeString(String.valueOf(params.getInt("distance"))));
        }

        if (params.has("since") && (!params.getString("since").isEmpty())) {
          urlBuilder.addQueryParameter("since", escapeString(String.valueOf(params.getString("since"))));
        }

        if (params.has("until") && (!params.getString("until").isEmpty())) {
          urlBuilder.addQueryParameter("until", escapeString(String.valueOf(params.getString("until"))));
        }

        if (params.has("disableGeojson") && (!params.getString("disableGeojson").isEmpty())) {
          urlBuilder.addQueryParameter("disable_geojson", escapeString(String.valueOf(params.getBoolean("disableGeojson"))));
        }

        if (params.has("disableDisruption") && (!params.getString("disableDisruption").isEmpty())) {
          urlBuilder.addQueryParameter("disable_disruption", escapeString(String.valueOf(params.getBoolean("disableDisruption"))));
        }

        if (params.has("filter") && (!params.getString("filter").isEmpty())) {
          urlBuilder.addQueryParameter("filter", escapeString(params.getString("filter")));
        }

        if (params.has("tags") && (!params.getString("tags").isEmpty())) {
          urlBuilder.addQueryParameter("tags[]", escapeString(String.valueOf(params.getJSONArray("tags"))));
        }

        HttpUrl url = urlBuilder
          .addPathSegments(path)
          .build();
        Request request = requestBuilder.url(url)
          .build();

        client.newCall(request).enqueue(new Callback() {

          @Override
          public void onFailure(@NonNull Call call, @NonNull IOException e) {
            String errorMessage = "Problem during request | " + String.valueOf(e.hashCode()) + ": " + e.getMessage();
            callbackContext.error(errorMessage);
          }

          @Override
          public void onResponse(@NonNull Call call, @NonNull Response response) {
            if (response.isSuccessful()) {
              try {
                JSONObject jsonObject = new JSONObject(Objects.requireNonNull(response.body()).string());
                callbackContext.success(jsonObject);
              } catch (Exception e) {
                String errorMessage = "Problem during response parsing";
                callbackContext.error(errorMessage);
              }
            } else {
              callbackContext.error("Unexpected code " + response.code() + " | message: " + response.message());
            }
          }
        });
      } catch (Exception e) {
        String errorMessage = "Problem during request building | " + e.hashCode() + ": " + e.getMessage();
        callbackContext.error(errorMessage);
      }
    });
  }

  private void coverageRegionDatasetsId(final JSONObject params, final CallbackContext callbackContext) {
    cordova.getThreadPool().execute(() -> {
      try {
        HttpUrl.Builder urlBuilder = new HttpUrl.Builder()
          .scheme("https")
          .host("api.navitia.io")
          .addPathSegment("v1");
        Request.Builder requestBuilder = new Request.Builder()
          .header("Authorization", token);
        String path = "/coverage/{region}/datasets/{id}".substring(1);

        if (params.has("region") && (!params.getString("region").isEmpty())) {
          path = path.replaceAll("\\{" + "region" + "\\}", escapeString(params.getString("region")));
        }

        if (params.has("id") && (!params.getString("id").isEmpty())) {
          path = path.replaceAll("\\{" + "id" + "\\}", escapeString(params.getString("id")));
        }

        if (params.has("startPage") && (!params.getString("startPage").isEmpty())) {
          urlBuilder.addQueryParameter("start_page", escapeString(String.valueOf(params.getInt("startPage"))));
        }

        if (params.has("count") && (!params.getString("count").isEmpty())) {
          urlBuilder.addQueryParameter("count", escapeString(String.valueOf(params.getInt("count"))));
        }

        if (params.has("depth") && (!params.getString("depth").isEmpty())) {
          urlBuilder.addQueryParameter("depth", escapeString(String.valueOf(params.getInt("depth"))));
        }

        if (params.has("forbiddenId") && (!params.getString("forbiddenId").isEmpty())) {
          urlBuilder.addQueryParameter("forbidden_id[]", escapeString(String.valueOf(params.getJSONArray("forbiddenId"))));
        }

        if (params.has("forbiddenUris") && (!params.getString("forbiddenUris").isEmpty())) {
          urlBuilder.addQueryParameter("forbidden_uris[]", escapeString(String.valueOf(params.getJSONArray("forbiddenUris"))));
        }

        if (params.has("externalCode") && (!params.getString("externalCode").isEmpty())) {
          urlBuilder.addQueryParameter("external_code", escapeString(params.getString("externalCode")));
        }

        if (params.has("headsign") && (!params.getString("headsign").isEmpty())) {
          urlBuilder.addQueryParameter("headsign", escapeString(params.getString("headsign")));
        }

        if (params.has("showCodes") && (!params.getString("showCodes").isEmpty())) {
          urlBuilder.addQueryParameter("show_codes", escapeString(String.valueOf(params.getBoolean("showCodes"))));
        }

        if (params.has("odtLevel") && (!params.getString("odtLevel").isEmpty())) {
          urlBuilder.addQueryParameter("odt_level", escapeString(params.getString("odtLevel")));
        }

        if (params.has("dataFreshness") && (!params.getString("dataFreshness").isEmpty())) {
          urlBuilder.addQueryParameter("data_freshness", escapeString(params.getString("dataFreshness")));
        }

        if (params.has("distance") && (!params.getString("distance").isEmpty())) {
          urlBuilder.addQueryParameter("distance", escapeString(String.valueOf(params.getInt("distance"))));
        }

        if (params.has("since") && (!params.getString("since").isEmpty())) {
          urlBuilder.addQueryParameter("since", escapeString(String.valueOf(params.getString("since"))));
        }

        if (params.has("until") && (!params.getString("until").isEmpty())) {
          urlBuilder.addQueryParameter("until", escapeString(String.valueOf(params.getString("until"))));
        }

        if (params.has("disableGeojson") && (!params.getString("disableGeojson").isEmpty())) {
          urlBuilder.addQueryParameter("disable_geojson", escapeString(String.valueOf(params.getBoolean("disableGeojson"))));
        }

        if (params.has("disableDisruption") && (!params.getString("disableDisruption").isEmpty())) {
          urlBuilder.addQueryParameter("disable_disruption", escapeString(String.valueOf(params.getBoolean("disableDisruption"))));
        }

        if (params.has("tags") && (!params.getString("tags").isEmpty())) {
          urlBuilder.addQueryParameter("tags[]", escapeString(String.valueOf(params.getJSONArray("tags"))));
        }

        HttpUrl url = urlBuilder
          .addPathSegments(path)
          .build();
        Request request = requestBuilder.url(url)
          .build();

        client.newCall(request).enqueue(new Callback() {

          @Override
          public void onFailure(@NonNull Call call, @NonNull IOException e) {
            String errorMessage = "Problem during request | " + String.valueOf(e.hashCode()) + ": " + e.getMessage();
            callbackContext.error(errorMessage);
          }

          @Override
          public void onResponse(@NonNull Call call, @NonNull Response response) {
            if (response.isSuccessful()) {
              try {
                JSONObject jsonObject = new JSONObject(Objects.requireNonNull(response.body()).string());
                callbackContext.success(jsonObject);
              } catch (Exception e) {
                String errorMessage = "Problem during response parsing";
                callbackContext.error(errorMessage);
              }
            } else {
              callbackContext.error("Unexpected code " + response.code() + " | message: " + response.message());
            }
          }
        });
      } catch (Exception e) {
        String errorMessage = "Problem during request building | " + e.hashCode() + ": " + e.getMessage();
        callbackContext.error(errorMessage);
      }
    });
  }

  private void coverageRegionUriDatasets(final JSONObject params, final CallbackContext callbackContext) {
    cordova.getThreadPool().execute(() -> {
      try {
        HttpUrl.Builder urlBuilder = new HttpUrl.Builder()
          .scheme("https")
          .host("api.navitia.io")
          .addPathSegment("v1");
        Request.Builder requestBuilder = new Request.Builder()
          .header("Authorization", token);
        String path = "/coverage/{region}/{uri}/datasets".substring(1);

        if (params.has("region") && (!params.getString("region").isEmpty())) {
          path = path.replaceAll("\\{" + "region" + "\\}", escapeString(params.getString("region")));
        }

        if (params.has("uri") && (!params.getString("uri").isEmpty())) {
          path = path.replaceAll("\\{" + "uri" + "\\}", escapeString(params.getString("uri")));
        }

        if (params.has("startPage") && (!params.getString("startPage").isEmpty())) {
          urlBuilder.addQueryParameter("start_page", escapeString(String.valueOf(params.getInt("startPage"))));
        }

        if (params.has("count") && (!params.getString("count").isEmpty())) {
          urlBuilder.addQueryParameter("count", escapeString(String.valueOf(params.getInt("count"))));
        }

        if (params.has("depth") && (!params.getString("depth").isEmpty())) {
          urlBuilder.addQueryParameter("depth", escapeString(String.valueOf(params.getInt("depth"))));
        }

        if (params.has("forbiddenId") && (!params.getString("forbiddenId").isEmpty())) {
          urlBuilder.addQueryParameter("forbidden_id[]", escapeString(String.valueOf(params.getJSONArray("forbiddenId"))));
        }

        if (params.has("forbiddenUris") && (!params.getString("forbiddenUris").isEmpty())) {
          urlBuilder.addQueryParameter("forbidden_uris[]", escapeString(String.valueOf(params.getJSONArray("forbiddenUris"))));
        }

        if (params.has("externalCode") && (!params.getString("externalCode").isEmpty())) {
          urlBuilder.addQueryParameter("external_code", escapeString(params.getString("externalCode")));
        }

        if (params.has("headsign") && (!params.getString("headsign").isEmpty())) {
          urlBuilder.addQueryParameter("headsign", escapeString(params.getString("headsign")));
        }

        if (params.has("showCodes") && (!params.getString("showCodes").isEmpty())) {
          urlBuilder.addQueryParameter("show_codes", escapeString(String.valueOf(params.getBoolean("showCodes"))));
        }

        if (params.has("odtLevel") && (!params.getString("odtLevel").isEmpty())) {
          urlBuilder.addQueryParameter("odt_level", escapeString(params.getString("odtLevel")));
        }

        if (params.has("dataFreshness") && (!params.getString("dataFreshness").isEmpty())) {
          urlBuilder.addQueryParameter("data_freshness", escapeString(params.getString("dataFreshness")));
        }

        if (params.has("distance") && (!params.getString("distance").isEmpty())) {
          urlBuilder.addQueryParameter("distance", escapeString(String.valueOf(params.getInt("distance"))));
        }

        if (params.has("since") && (!params.getString("since").isEmpty())) {
          urlBuilder.addQueryParameter("since", escapeString(String.valueOf(params.getString("since"))));
        }

        if (params.has("until") && (!params.getString("until").isEmpty())) {
          urlBuilder.addQueryParameter("until", escapeString(String.valueOf(params.getString("until"))));
        }

        if (params.has("disableGeojson") && (!params.getString("disableGeojson").isEmpty())) {
          urlBuilder.addQueryParameter("disable_geojson", escapeString(String.valueOf(params.getBoolean("disableGeojson"))));
        }

        if (params.has("disableDisruption") && (!params.getString("disableDisruption").isEmpty())) {
          urlBuilder.addQueryParameter("disable_disruption", escapeString(String.valueOf(params.getBoolean("disableDisruption"))));
        }

        if (params.has("filter") && (!params.getString("filter").isEmpty())) {
          urlBuilder.addQueryParameter("filter", escapeString(params.getString("filter")));
        }

        if (params.has("tags") && (!params.getString("tags").isEmpty())) {
          urlBuilder.addQueryParameter("tags[]", escapeString(String.valueOf(params.getJSONArray("tags"))));
        }

        HttpUrl url = urlBuilder
          .addPathSegments(path)
          .build();
        Request request = requestBuilder.url(url)
          .build();

        client.newCall(request).enqueue(new Callback() {

          @Override
          public void onFailure(@NonNull Call call, @NonNull IOException e) {
            String errorMessage = "Problem during request | " + String.valueOf(e.hashCode()) + ": " + e.getMessage();
            callbackContext.error(errorMessage);
          }

          @Override
          public void onResponse(@NonNull Call call, @NonNull Response response) {
            if (response.isSuccessful()) {
              try {
                JSONObject jsonObject = new JSONObject(Objects.requireNonNull(response.body()).string());
                callbackContext.success(jsonObject);
              } catch (Exception e) {
                String errorMessage = "Problem during response parsing";
                callbackContext.error(errorMessage);
              }
            } else {
              callbackContext.error("Unexpected code " + response.code() + " | message: " + response.message());
            }
          }
        });
      } catch (Exception e) {
        String errorMessage = "Problem during request building | " + e.hashCode() + ": " + e.getMessage();
        callbackContext.error(errorMessage);
      }
    });
  }

  private void coverageRegionUriDatasetsId(final JSONObject params, final CallbackContext callbackContext) {
    cordova.getThreadPool().execute(() -> {
      try {
        HttpUrl.Builder urlBuilder = new HttpUrl.Builder()
          .scheme("https")
          .host("api.navitia.io")
          .addPathSegment("v1");
        Request.Builder requestBuilder = new Request.Builder()
          .header("Authorization", token);
        String path = "/coverage/{region}/{uri}/datasets/{id}".substring(1);

        if (params.has("region") && (!params.getString("region").isEmpty())) {
          path = path.replaceAll("\\{" + "region" + "\\}", escapeString(params.getString("region")));
        }

        if (params.has("uri") && (!params.getString("uri").isEmpty())) {
          path = path.replaceAll("\\{" + "uri" + "\\}", escapeString(params.getString("uri")));
        }

        if (params.has("id") && (!params.getString("id").isEmpty())) {
          path = path.replaceAll("\\{" + "id" + "\\}", escapeString(params.getString("id")));
        }

        if (params.has("startPage") && (!params.getString("startPage").isEmpty())) {
          urlBuilder.addQueryParameter("start_page", escapeString(String.valueOf(params.getInt("startPage"))));
        }

        if (params.has("count") && (!params.getString("count").isEmpty())) {
          urlBuilder.addQueryParameter("count", escapeString(String.valueOf(params.getInt("count"))));
        }

        if (params.has("depth") && (!params.getString("depth").isEmpty())) {
          urlBuilder.addQueryParameter("depth", escapeString(String.valueOf(params.getInt("depth"))));
        }

        if (params.has("forbiddenId") && (!params.getString("forbiddenId").isEmpty())) {
          urlBuilder.addQueryParameter("forbidden_id[]", escapeString(String.valueOf(params.getJSONArray("forbiddenId"))));
        }

        if (params.has("forbiddenUris") && (!params.getString("forbiddenUris").isEmpty())) {
          urlBuilder.addQueryParameter("forbidden_uris[]", escapeString(String.valueOf(params.getJSONArray("forbiddenUris"))));
        }

        if (params.has("externalCode") && (!params.getString("externalCode").isEmpty())) {
          urlBuilder.addQueryParameter("external_code", escapeString(params.getString("externalCode")));
        }

        if (params.has("headsign") && (!params.getString("headsign").isEmpty())) {
          urlBuilder.addQueryParameter("headsign", escapeString(params.getString("headsign")));
        }

        if (params.has("showCodes") && (!params.getString("showCodes").isEmpty())) {
          urlBuilder.addQueryParameter("show_codes", escapeString(String.valueOf(params.getBoolean("showCodes"))));
        }

        if (params.has("odtLevel") && (!params.getString("odtLevel").isEmpty())) {
          urlBuilder.addQueryParameter("odt_level", escapeString(params.getString("odtLevel")));
        }

        if (params.has("dataFreshness") && (!params.getString("dataFreshness").isEmpty())) {
          urlBuilder.addQueryParameter("data_freshness", escapeString(params.getString("dataFreshness")));
        }

        if (params.has("distance") && (!params.getString("distance").isEmpty())) {
          urlBuilder.addQueryParameter("distance", escapeString(String.valueOf(params.getInt("distance"))));
        }

        if (params.has("since") && (!params.getString("since").isEmpty())) {
          urlBuilder.addQueryParameter("since", escapeString(String.valueOf(params.getString("since"))));
        }

        if (params.has("until") && (!params.getString("until").isEmpty())) {
          urlBuilder.addQueryParameter("until", escapeString(String.valueOf(params.getString("until"))));
        }

        if (params.has("disableGeojson") && (!params.getString("disableGeojson").isEmpty())) {
          urlBuilder.addQueryParameter("disable_geojson", escapeString(String.valueOf(params.getBoolean("disableGeojson"))));
        }

        if (params.has("disableDisruption") && (!params.getString("disableDisruption").isEmpty())) {
          urlBuilder.addQueryParameter("disable_disruption", escapeString(String.valueOf(params.getBoolean("disableDisruption"))));
        }

        if (params.has("tags") && (!params.getString("tags").isEmpty())) {
          urlBuilder.addQueryParameter("tags[]", escapeString(String.valueOf(params.getJSONArray("tags"))));
        }

        HttpUrl url = urlBuilder
          .addPathSegments(path)
          .build();
        Request request = requestBuilder.url(url)
          .build();

        client.newCall(request).enqueue(new Callback() {

          @Override
          public void onFailure(@NonNull Call call, @NonNull IOException e) {
            String errorMessage = "Problem during request | " + String.valueOf(e.hashCode()) + ": " + e.getMessage();
            callbackContext.error(errorMessage);
          }

          @Override
          public void onResponse(@NonNull Call call, @NonNull Response response) {
            if (response.isSuccessful()) {
              try {
                JSONObject jsonObject = new JSONObject(Objects.requireNonNull(response.body()).string());
                callbackContext.success(jsonObject);
              } catch (Exception e) {
                String errorMessage = "Problem during response parsing";
                callbackContext.error(errorMessage);
              }
            } else {
              callbackContext.error("Unexpected code " + response.code() + " | message: " + response.message());
            }
          }
        });
      } catch (Exception e) {
        String errorMessage = "Problem during request building | " + e.hashCode() + ": " + e.getMessage();
        callbackContext.error(errorMessage);
      }
    });
  }

  private void coverageLonLatDisruptions(final JSONObject params, final CallbackContext callbackContext) {
    cordova.getThreadPool().execute(() -> {
      try {
        HttpUrl.Builder urlBuilder = new HttpUrl.Builder()
          .scheme("https")
          .host("api.navitia.io")
          .addPathSegment("v1");
        Request.Builder requestBuilder = new Request.Builder()
          .header("Authorization", token);
        String path = "/coverage/{lon};{lat}/disruptions".substring(1);

        if (params.has("lat") && (!params.getString("lat").isEmpty())) {
          path = path.replaceAll("\\{" + "lat" + "\\}", escapeString(String.valueOf(params.getLong("lat"))));
        }

        if (params.has("lon") && (!params.getString("lon").isEmpty())) {
          path = path.replaceAll("\\{" + "lon" + "\\}", escapeString(String.valueOf(params.getLong("lon"))));
        }

        if (params.has("startPage") && (!params.getString("startPage").isEmpty())) {
          urlBuilder.addQueryParameter("start_page", escapeString(String.valueOf(params.getInt("startPage"))));
        }

        if (params.has("count") && (!params.getString("count").isEmpty())) {
          urlBuilder.addQueryParameter("count", escapeString(String.valueOf(params.getInt("count"))));
        }

        if (params.has("depth") && (!params.getString("depth").isEmpty())) {
          urlBuilder.addQueryParameter("depth", escapeString(String.valueOf(params.getInt("depth"))));
        }

        if (params.has("forbiddenId") && (!params.getString("forbiddenId").isEmpty())) {
          urlBuilder.addQueryParameter("forbidden_id[]", escapeString(String.valueOf(params.getJSONArray("forbiddenId"))));
        }

        if (params.has("forbiddenUris") && (!params.getString("forbiddenUris").isEmpty())) {
          urlBuilder.addQueryParameter("forbidden_uris[]", escapeString(String.valueOf(params.getJSONArray("forbiddenUris"))));
        }

        if (params.has("externalCode") && (!params.getString("externalCode").isEmpty())) {
          urlBuilder.addQueryParameter("external_code", escapeString(params.getString("externalCode")));
        }

        if (params.has("headsign") && (!params.getString("headsign").isEmpty())) {
          urlBuilder.addQueryParameter("headsign", escapeString(params.getString("headsign")));
        }

        if (params.has("showCodes") && (!params.getString("showCodes").isEmpty())) {
          urlBuilder.addQueryParameter("show_codes", escapeString(String.valueOf(params.getBoolean("showCodes"))));
        }

        if (params.has("odtLevel") && (!params.getString("odtLevel").isEmpty())) {
          urlBuilder.addQueryParameter("odt_level", escapeString(params.getString("odtLevel")));
        }

        if (params.has("dataFreshness") && (!params.getString("dataFreshness").isEmpty())) {
          urlBuilder.addQueryParameter("data_freshness", escapeString(params.getString("dataFreshness")));
        }

        if (params.has("distance") && (!params.getString("distance").isEmpty())) {
          urlBuilder.addQueryParameter("distance", escapeString(String.valueOf(params.getInt("distance"))));
        }

        if (params.has("since") && (!params.getString("since").isEmpty())) {
          urlBuilder.addQueryParameter("since", escapeString(String.valueOf(params.getString("since"))));
        }

        if (params.has("until") && (!params.getString("until").isEmpty())) {
          urlBuilder.addQueryParameter("until", escapeString(String.valueOf(params.getString("until"))));
        }

        if (params.has("disableGeojson") && (!params.getString("disableGeojson").isEmpty())) {
          urlBuilder.addQueryParameter("disable_geojson", escapeString(String.valueOf(params.getBoolean("disableGeojson"))));
        }

        if (params.has("disableDisruption") && (!params.getString("disableDisruption").isEmpty())) {
          urlBuilder.addQueryParameter("disable_disruption", escapeString(String.valueOf(params.getBoolean("disableDisruption"))));
        }

        if (params.has("filter") && (!params.getString("filter").isEmpty())) {
          urlBuilder.addQueryParameter("filter", escapeString(params.getString("filter")));
        }

        if (params.has("tags") && (!params.getString("tags").isEmpty())) {
          urlBuilder.addQueryParameter("tags[]", escapeString(String.valueOf(params.getJSONArray("tags"))));
        }

        if (params.has("originalId") && (!params.getString("originalId").isEmpty())) {
          urlBuilder.addQueryParameter("original_id", escapeString(params.getString("originalId")));
        }

        HttpUrl url = urlBuilder
          .addPathSegments(path)
          .build();
        Request request = requestBuilder.url(url)
          .build();

        client.newCall(request).enqueue(new Callback() {

          @Override
          public void onFailure(@NonNull Call call, @NonNull IOException e) {
            String errorMessage = "Problem during request | " + String.valueOf(e.hashCode()) + ": " + e.getMessage();
            callbackContext.error(errorMessage);
          }

          @Override
          public void onResponse(@NonNull Call call, @NonNull Response response) {
            if (response.isSuccessful()) {
              try {
                JSONObject jsonObject = new JSONObject(Objects.requireNonNull(response.body()).string());
                callbackContext.success(jsonObject);
              } catch (Exception e) {
                String errorMessage = "Problem during response parsing";
                callbackContext.error(errorMessage);
              }
            } else {
              callbackContext.error("Unexpected code " + response.code() + " | message: " + response.message());
            }
          }
        });
      } catch (Exception e) {
        String errorMessage = "Problem during request building | " + e.hashCode() + ": " + e.getMessage();
        callbackContext.error(errorMessage);
      }
    });
  }

  private void coverageLonLatDisruptionsId(final JSONObject params, final CallbackContext callbackContext) {
    cordova.getThreadPool().execute(() -> {
      try {
        HttpUrl.Builder urlBuilder = new HttpUrl.Builder()
          .scheme("https")
          .host("api.navitia.io")
          .addPathSegment("v1");
        Request.Builder requestBuilder = new Request.Builder()
          .header("Authorization", token);
        String path = "/coverage/{lon};{lat}/disruptions/{id}".substring(1);

        if (params.has("lat") && (!params.getString("lat").isEmpty())) {
          path = path.replaceAll("\\{" + "lat" + "\\}", escapeString(String.valueOf(params.getLong("lat"))));
        }

        if (params.has("lon") && (!params.getString("lon").isEmpty())) {
          path = path.replaceAll("\\{" + "lon" + "\\}", escapeString(String.valueOf(params.getLong("lon"))));
        }

        if (params.has("id") && (!params.getString("id").isEmpty())) {
          path = path.replaceAll("\\{" + "id" + "\\}", escapeString(params.getString("id")));
        }

        if (params.has("startPage") && (!params.getString("startPage").isEmpty())) {
          urlBuilder.addQueryParameter("start_page", escapeString(String.valueOf(params.getInt("startPage"))));
        }

        if (params.has("count") && (!params.getString("count").isEmpty())) {
          urlBuilder.addQueryParameter("count", escapeString(String.valueOf(params.getInt("count"))));
        }

        if (params.has("depth") && (!params.getString("depth").isEmpty())) {
          urlBuilder.addQueryParameter("depth", escapeString(String.valueOf(params.getInt("depth"))));
        }

        if (params.has("forbiddenId") && (!params.getString("forbiddenId").isEmpty())) {
          urlBuilder.addQueryParameter("forbidden_id[]", escapeString(String.valueOf(params.getJSONArray("forbiddenId"))));
        }

        if (params.has("forbiddenUris") && (!params.getString("forbiddenUris").isEmpty())) {
          urlBuilder.addQueryParameter("forbidden_uris[]", escapeString(String.valueOf(params.getJSONArray("forbiddenUris"))));
        }

        if (params.has("externalCode") && (!params.getString("externalCode").isEmpty())) {
          urlBuilder.addQueryParameter("external_code", escapeString(params.getString("externalCode")));
        }

        if (params.has("headsign") && (!params.getString("headsign").isEmpty())) {
          urlBuilder.addQueryParameter("headsign", escapeString(params.getString("headsign")));
        }

        if (params.has("showCodes") && (!params.getString("showCodes").isEmpty())) {
          urlBuilder.addQueryParameter("show_codes", escapeString(String.valueOf(params.getBoolean("showCodes"))));
        }

        if (params.has("odtLevel") && (!params.getString("odtLevel").isEmpty())) {
          urlBuilder.addQueryParameter("odt_level", escapeString(params.getString("odtLevel")));
        }

        if (params.has("dataFreshness") && (!params.getString("dataFreshness").isEmpty())) {
          urlBuilder.addQueryParameter("data_freshness", escapeString(params.getString("dataFreshness")));
        }

        if (params.has("distance") && (!params.getString("distance").isEmpty())) {
          urlBuilder.addQueryParameter("distance", escapeString(String.valueOf(params.getInt("distance"))));
        }

        if (params.has("since") && (!params.getString("since").isEmpty())) {
          urlBuilder.addQueryParameter("since", escapeString(String.valueOf(params.getString("since"))));
        }

        if (params.has("until") && (!params.getString("until").isEmpty())) {
          urlBuilder.addQueryParameter("until", escapeString(String.valueOf(params.getString("until"))));
        }

        if (params.has("disableGeojson") && (!params.getString("disableGeojson").isEmpty())) {
          urlBuilder.addQueryParameter("disable_geojson", escapeString(String.valueOf(params.getBoolean("disableGeojson"))));
        }

        if (params.has("disableDisruption") && (!params.getString("disableDisruption").isEmpty())) {
          urlBuilder.addQueryParameter("disable_disruption", escapeString(String.valueOf(params.getBoolean("disableDisruption"))));
        }

        if (params.has("tags") && (!params.getString("tags").isEmpty())) {
          urlBuilder.addQueryParameter("tags[]", escapeString(String.valueOf(params.getJSONArray("tags"))));
        }

        if (params.has("originalId") && (!params.getString("originalId").isEmpty())) {
          urlBuilder.addQueryParameter("original_id", escapeString(params.getString("originalId")));
        }

        HttpUrl url = urlBuilder
          .addPathSegments(path)
          .build();
        Request request = requestBuilder.url(url)
          .build();

        client.newCall(request).enqueue(new Callback() {

          @Override
          public void onFailure(@NonNull Call call, @NonNull IOException e) {
            String errorMessage = "Problem during request | " + String.valueOf(e.hashCode()) + ": " + e.getMessage();
            callbackContext.error(errorMessage);
          }

          @Override
          public void onResponse(@NonNull Call call, @NonNull Response response) {
            if (response.isSuccessful()) {
              try {
                JSONObject jsonObject = new JSONObject(Objects.requireNonNull(response.body()).string());
                callbackContext.success(jsonObject);
              } catch (Exception e) {
                String errorMessage = "Problem during response parsing";
                callbackContext.error(errorMessage);
              }
            } else {
              callbackContext.error("Unexpected code " + response.code() + " | message: " + response.message());
            }
          }
        });
      } catch (Exception e) {
        String errorMessage = "Problem during request building | " + e.hashCode() + ": " + e.getMessage();
        callbackContext.error(errorMessage);
      }
    });
  }

  private void coverageLonLatUriDisruptions(final JSONObject params, final CallbackContext callbackContext) {
    cordova.getThreadPool().execute(() -> {
      try {
        HttpUrl.Builder urlBuilder = new HttpUrl.Builder()
          .scheme("https")
          .host("api.navitia.io")
          .addPathSegment("v1");
        Request.Builder requestBuilder = new Request.Builder()
          .header("Authorization", token);
        String path = "/coverage/{lon};{lat}/{uri}/disruptions".substring(1);

        if (params.has("lat") && (!params.getString("lat").isEmpty())) {
          path = path.replaceAll("\\{" + "lat" + "\\}", escapeString(String.valueOf(params.getLong("lat"))));
        }

        if (params.has("lon") && (!params.getString("lon").isEmpty())) {
          path = path.replaceAll("\\{" + "lon" + "\\}", escapeString(String.valueOf(params.getLong("lon"))));
        }

        if (params.has("uri") && (!params.getString("uri").isEmpty())) {
          path = path.replaceAll("\\{" + "uri" + "\\}", escapeString(params.getString("uri")));
        }

        if (params.has("startPage") && (!params.getString("startPage").isEmpty())) {
          urlBuilder.addQueryParameter("start_page", escapeString(String.valueOf(params.getInt("startPage"))));
        }

        if (params.has("count") && (!params.getString("count").isEmpty())) {
          urlBuilder.addQueryParameter("count", escapeString(String.valueOf(params.getInt("count"))));
        }

        if (params.has("depth") && (!params.getString("depth").isEmpty())) {
          urlBuilder.addQueryParameter("depth", escapeString(String.valueOf(params.getInt("depth"))));
        }

        if (params.has("forbiddenId") && (!params.getString("forbiddenId").isEmpty())) {
          urlBuilder.addQueryParameter("forbidden_id[]", escapeString(String.valueOf(params.getJSONArray("forbiddenId"))));
        }

        if (params.has("forbiddenUris") && (!params.getString("forbiddenUris").isEmpty())) {
          urlBuilder.addQueryParameter("forbidden_uris[]", escapeString(String.valueOf(params.getJSONArray("forbiddenUris"))));
        }

        if (params.has("externalCode") && (!params.getString("externalCode").isEmpty())) {
          urlBuilder.addQueryParameter("external_code", escapeString(params.getString("externalCode")));
        }

        if (params.has("headsign") && (!params.getString("headsign").isEmpty())) {
          urlBuilder.addQueryParameter("headsign", escapeString(params.getString("headsign")));
        }

        if (params.has("showCodes") && (!params.getString("showCodes").isEmpty())) {
          urlBuilder.addQueryParameter("show_codes", escapeString(String.valueOf(params.getBoolean("showCodes"))));
        }

        if (params.has("odtLevel") && (!params.getString("odtLevel").isEmpty())) {
          urlBuilder.addQueryParameter("odt_level", escapeString(params.getString("odtLevel")));
        }

        if (params.has("dataFreshness") && (!params.getString("dataFreshness").isEmpty())) {
          urlBuilder.addQueryParameter("data_freshness", escapeString(params.getString("dataFreshness")));
        }

        if (params.has("distance") && (!params.getString("distance").isEmpty())) {
          urlBuilder.addQueryParameter("distance", escapeString(String.valueOf(params.getInt("distance"))));
        }

        if (params.has("since") && (!params.getString("since").isEmpty())) {
          urlBuilder.addQueryParameter("since", escapeString(String.valueOf(params.getString("since"))));
        }

        if (params.has("until") && (!params.getString("until").isEmpty())) {
          urlBuilder.addQueryParameter("until", escapeString(String.valueOf(params.getString("until"))));
        }

        if (params.has("disableGeojson") && (!params.getString("disableGeojson").isEmpty())) {
          urlBuilder.addQueryParameter("disable_geojson", escapeString(String.valueOf(params.getBoolean("disableGeojson"))));
        }

        if (params.has("disableDisruption") && (!params.getString("disableDisruption").isEmpty())) {
          urlBuilder.addQueryParameter("disable_disruption", escapeString(String.valueOf(params.getBoolean("disableDisruption"))));
        }

        if (params.has("filter") && (!params.getString("filter").isEmpty())) {
          urlBuilder.addQueryParameter("filter", escapeString(params.getString("filter")));
        }

        if (params.has("tags") && (!params.getString("tags").isEmpty())) {
          urlBuilder.addQueryParameter("tags[]", escapeString(String.valueOf(params.getJSONArray("tags"))));
        }

        if (params.has("originalId") && (!params.getString("originalId").isEmpty())) {
          urlBuilder.addQueryParameter("original_id", escapeString(params.getString("originalId")));
        }

        HttpUrl url = urlBuilder
          .addPathSegments(path)
          .build();
        Request request = requestBuilder.url(url)
          .build();

        client.newCall(request).enqueue(new Callback() {

          @Override
          public void onFailure(@NonNull Call call, @NonNull IOException e) {
            String errorMessage = "Problem during request | " + String.valueOf(e.hashCode()) + ": " + e.getMessage();
            callbackContext.error(errorMessage);
          }

          @Override
          public void onResponse(@NonNull Call call, @NonNull Response response) {
            if (response.isSuccessful()) {
              try {
                JSONObject jsonObject = new JSONObject(Objects.requireNonNull(response.body()).string());
                callbackContext.success(jsonObject);
              } catch (Exception e) {
                String errorMessage = "Problem during response parsing";
                callbackContext.error(errorMessage);
              }
            } else {
              callbackContext.error("Unexpected code " + response.code() + " | message: " + response.message());
            }
          }
        });
      } catch (Exception e) {
        String errorMessage = "Problem during request building | " + e.hashCode() + ": " + e.getMessage();
        callbackContext.error(errorMessage);
      }
    });
  }

  private void coverageLonLatUriDisruptionsId(final JSONObject params, final CallbackContext callbackContext) {
    cordova.getThreadPool().execute(() -> {
      try {
        HttpUrl.Builder urlBuilder = new HttpUrl.Builder()
          .scheme("https")
          .host("api.navitia.io")
          .addPathSegment("v1");
        Request.Builder requestBuilder = new Request.Builder()
          .header("Authorization", token);
        String path = "/coverage/{lon};{lat}/{uri}/disruptions/{id}".substring(1);

        if (params.has("lat") && (!params.getString("lat").isEmpty())) {
          path = path.replaceAll("\\{" + "lat" + "\\}", escapeString(String.valueOf(params.getLong("lat"))));
        }

        if (params.has("lon") && (!params.getString("lon").isEmpty())) {
          path = path.replaceAll("\\{" + "lon" + "\\}", escapeString(String.valueOf(params.getLong("lon"))));
        }

        if (params.has("uri") && (!params.getString("uri").isEmpty())) {
          path = path.replaceAll("\\{" + "uri" + "\\}", escapeString(params.getString("uri")));
        }

        if (params.has("id") && (!params.getString("id").isEmpty())) {
          path = path.replaceAll("\\{" + "id" + "\\}", escapeString(params.getString("id")));
        }

        if (params.has("startPage") && (!params.getString("startPage").isEmpty())) {
          urlBuilder.addQueryParameter("start_page", escapeString(String.valueOf(params.getInt("startPage"))));
        }

        if (params.has("count") && (!params.getString("count").isEmpty())) {
          urlBuilder.addQueryParameter("count", escapeString(String.valueOf(params.getInt("count"))));
        }

        if (params.has("depth") && (!params.getString("depth").isEmpty())) {
          urlBuilder.addQueryParameter("depth", escapeString(String.valueOf(params.getInt("depth"))));
        }

        if (params.has("forbiddenId") && (!params.getString("forbiddenId").isEmpty())) {
          urlBuilder.addQueryParameter("forbidden_id[]", escapeString(String.valueOf(params.getJSONArray("forbiddenId"))));
        }

        if (params.has("forbiddenUris") && (!params.getString("forbiddenUris").isEmpty())) {
          urlBuilder.addQueryParameter("forbidden_uris[]", escapeString(String.valueOf(params.getJSONArray("forbiddenUris"))));
        }

        if (params.has("externalCode") && (!params.getString("externalCode").isEmpty())) {
          urlBuilder.addQueryParameter("external_code", escapeString(params.getString("externalCode")));
        }

        if (params.has("headsign") && (!params.getString("headsign").isEmpty())) {
          urlBuilder.addQueryParameter("headsign", escapeString(params.getString("headsign")));
        }

        if (params.has("showCodes") && (!params.getString("showCodes").isEmpty())) {
          urlBuilder.addQueryParameter("show_codes", escapeString(String.valueOf(params.getBoolean("showCodes"))));
        }

        if (params.has("odtLevel") && (!params.getString("odtLevel").isEmpty())) {
          urlBuilder.addQueryParameter("odt_level", escapeString(params.getString("odtLevel")));
        }

        if (params.has("dataFreshness") && (!params.getString("dataFreshness").isEmpty())) {
          urlBuilder.addQueryParameter("data_freshness", escapeString(params.getString("dataFreshness")));
        }

        if (params.has("distance") && (!params.getString("distance").isEmpty())) {
          urlBuilder.addQueryParameter("distance", escapeString(String.valueOf(params.getInt("distance"))));
        }

        if (params.has("since") && (!params.getString("since").isEmpty())) {
          urlBuilder.addQueryParameter("since", escapeString(String.valueOf(params.getString("since"))));
        }

        if (params.has("until") && (!params.getString("until").isEmpty())) {
          urlBuilder.addQueryParameter("until", escapeString(String.valueOf(params.getString("until"))));
        }

        if (params.has("disableGeojson") && (!params.getString("disableGeojson").isEmpty())) {
          urlBuilder.addQueryParameter("disable_geojson", escapeString(String.valueOf(params.getBoolean("disableGeojson"))));
        }

        if (params.has("disableDisruption") && (!params.getString("disableDisruption").isEmpty())) {
          urlBuilder.addQueryParameter("disable_disruption", escapeString(String.valueOf(params.getBoolean("disableDisruption"))));
        }

        if (params.has("tags") && (!params.getString("tags").isEmpty())) {
          urlBuilder.addQueryParameter("tags[]", escapeString(String.valueOf(params.getJSONArray("tags"))));
        }

        if (params.has("originalId") && (!params.getString("originalId").isEmpty())) {
          urlBuilder.addQueryParameter("original_id", escapeString(params.getString("originalId")));
        }

        HttpUrl url = urlBuilder
          .addPathSegments(path)
          .build();
        Request request = requestBuilder.url(url)
          .build();

        client.newCall(request).enqueue(new Callback() {

          @Override
          public void onFailure(@NonNull Call call, @NonNull IOException e) {
            String errorMessage = "Problem during request | " + String.valueOf(e.hashCode()) + ": " + e.getMessage();
            callbackContext.error(errorMessage);
          }

          @Override
          public void onResponse(@NonNull Call call, @NonNull Response response) {
            if (response.isSuccessful()) {
              try {
                JSONObject jsonObject = new JSONObject(Objects.requireNonNull(response.body()).string());
                callbackContext.success(jsonObject);
              } catch (Exception e) {
                String errorMessage = "Problem during response parsing";
                callbackContext.error(errorMessage);
              }
            } else {
              callbackContext.error("Unexpected code " + response.code() + " | message: " + response.message());
            }
          }
        });
      } catch (Exception e) {
        String errorMessage = "Problem during request building | " + e.hashCode() + ": " + e.getMessage();
        callbackContext.error(errorMessage);
      }
    });
  }

  private void coverageRegionDisruptions(final JSONObject params, final CallbackContext callbackContext) {
    cordova.getThreadPool().execute(() -> {
      try {
        HttpUrl.Builder urlBuilder = new HttpUrl.Builder()
          .scheme("https")
          .host("api.navitia.io")
          .addPathSegment("v1");
        Request.Builder requestBuilder = new Request.Builder()
          .header("Authorization", token);
        String path = "/coverage/{region}/disruptions".substring(1);

        if (params.has("region") && (!params.getString("region").isEmpty())) {
          path = path.replaceAll("\\{" + "region" + "\\}", escapeString(params.getString("region")));
        }

        if (params.has("startPage") && (!params.getString("startPage").isEmpty())) {
          urlBuilder.addQueryParameter("start_page", escapeString(String.valueOf(params.getInt("startPage"))));
        }

        if (params.has("count") && (!params.getString("count").isEmpty())) {
          urlBuilder.addQueryParameter("count", escapeString(String.valueOf(params.getInt("count"))));
        }

        if (params.has("depth") && (!params.getString("depth").isEmpty())) {
          urlBuilder.addQueryParameter("depth", escapeString(String.valueOf(params.getInt("depth"))));
        }

        if (params.has("forbiddenId") && (!params.getString("forbiddenId").isEmpty())) {
          urlBuilder.addQueryParameter("forbidden_id[]", escapeString(String.valueOf(params.getJSONArray("forbiddenId"))));
        }

        if (params.has("forbiddenUris") && (!params.getString("forbiddenUris").isEmpty())) {
          urlBuilder.addQueryParameter("forbidden_uris[]", escapeString(String.valueOf(params.getJSONArray("forbiddenUris"))));
        }

        if (params.has("externalCode") && (!params.getString("externalCode").isEmpty())) {
          urlBuilder.addQueryParameter("external_code", escapeString(params.getString("externalCode")));
        }

        if (params.has("headsign") && (!params.getString("headsign").isEmpty())) {
          urlBuilder.addQueryParameter("headsign", escapeString(params.getString("headsign")));
        }

        if (params.has("showCodes") && (!params.getString("showCodes").isEmpty())) {
          urlBuilder.addQueryParameter("show_codes", escapeString(String.valueOf(params.getBoolean("showCodes"))));
        }

        if (params.has("odtLevel") && (!params.getString("odtLevel").isEmpty())) {
          urlBuilder.addQueryParameter("odt_level", escapeString(params.getString("odtLevel")));
        }

        if (params.has("dataFreshness") && (!params.getString("dataFreshness").isEmpty())) {
          urlBuilder.addQueryParameter("data_freshness", escapeString(params.getString("dataFreshness")));
        }

        if (params.has("distance") && (!params.getString("distance").isEmpty())) {
          urlBuilder.addQueryParameter("distance", escapeString(String.valueOf(params.getInt("distance"))));
        }

        if (params.has("since") && (!params.getString("since").isEmpty())) {
          urlBuilder.addQueryParameter("since", escapeString(String.valueOf(params.getString("since"))));
        }

        if (params.has("until") && (!params.getString("until").isEmpty())) {
          urlBuilder.addQueryParameter("until", escapeString(String.valueOf(params.getString("until"))));
        }

        if (params.has("disableGeojson") && (!params.getString("disableGeojson").isEmpty())) {
          urlBuilder.addQueryParameter("disable_geojson", escapeString(String.valueOf(params.getBoolean("disableGeojson"))));
        }

        if (params.has("disableDisruption") && (!params.getString("disableDisruption").isEmpty())) {
          urlBuilder.addQueryParameter("disable_disruption", escapeString(String.valueOf(params.getBoolean("disableDisruption"))));
        }

        if (params.has("filter") && (!params.getString("filter").isEmpty())) {
          urlBuilder.addQueryParameter("filter", escapeString(params.getString("filter")));
        }

        if (params.has("tags") && (!params.getString("tags").isEmpty())) {
          urlBuilder.addQueryParameter("tags[]", escapeString(String.valueOf(params.getJSONArray("tags"))));
        }

        if (params.has("originalId") && (!params.getString("originalId").isEmpty())) {
          urlBuilder.addQueryParameter("original_id", escapeString(params.getString("originalId")));
        }

        HttpUrl url = urlBuilder
          .addPathSegments(path)
          .build();
        Request request = requestBuilder.url(url)
          .build();

        client.newCall(request).enqueue(new Callback() {

          @Override
          public void onFailure(@NonNull Call call, @NonNull IOException e) {
            String errorMessage = "Problem during request | " + String.valueOf(e.hashCode()) + ": " + e.getMessage();
            callbackContext.error(errorMessage);
          }

          @Override
          public void onResponse(@NonNull Call call, @NonNull Response response) {
            if (response.isSuccessful()) {
              try {
                JSONObject jsonObject = new JSONObject(Objects.requireNonNull(response.body()).string());
                callbackContext.success(jsonObject);
              } catch (Exception e) {
                String errorMessage = "Problem during response parsing";
                callbackContext.error(errorMessage);
              }
            } else {
              callbackContext.error("Unexpected code " + response.code() + " | message: " + response.message());
            }
          }
        });
      } catch (Exception e) {
        String errorMessage = "Problem during request building | " + e.hashCode() + ": " + e.getMessage();
        callbackContext.error(errorMessage);
      }
    });
  }

  private void coverageRegionDisruptionsId(final JSONObject params, final CallbackContext callbackContext) {
    cordova.getThreadPool().execute(() -> {
      try {
        HttpUrl.Builder urlBuilder = new HttpUrl.Builder()
          .scheme("https")
          .host("api.navitia.io")
          .addPathSegment("v1");
        Request.Builder requestBuilder = new Request.Builder()
          .header("Authorization", token);
        String path = "/coverage/{region}/disruptions/{id}".substring(1);

        if (params.has("region") && (!params.getString("region").isEmpty())) {
          path = path.replaceAll("\\{" + "region" + "\\}", escapeString(params.getString("region")));
        }

        if (params.has("id") && (!params.getString("id").isEmpty())) {
          path = path.replaceAll("\\{" + "id" + "\\}", escapeString(params.getString("id")));
        }

        if (params.has("startPage") && (!params.getString("startPage").isEmpty())) {
          urlBuilder.addQueryParameter("start_page", escapeString(String.valueOf(params.getInt("startPage"))));
        }

        if (params.has("count") && (!params.getString("count").isEmpty())) {
          urlBuilder.addQueryParameter("count", escapeString(String.valueOf(params.getInt("count"))));
        }

        if (params.has("depth") && (!params.getString("depth").isEmpty())) {
          urlBuilder.addQueryParameter("depth", escapeString(String.valueOf(params.getInt("depth"))));
        }

        if (params.has("forbiddenId") && (!params.getString("forbiddenId").isEmpty())) {
          urlBuilder.addQueryParameter("forbidden_id[]", escapeString(String.valueOf(params.getJSONArray("forbiddenId"))));
        }

        if (params.has("forbiddenUris") && (!params.getString("forbiddenUris").isEmpty())) {
          urlBuilder.addQueryParameter("forbidden_uris[]", escapeString(String.valueOf(params.getJSONArray("forbiddenUris"))));
        }

        if (params.has("externalCode") && (!params.getString("externalCode").isEmpty())) {
          urlBuilder.addQueryParameter("external_code", escapeString(params.getString("externalCode")));
        }

        if (params.has("headsign") && (!params.getString("headsign").isEmpty())) {
          urlBuilder.addQueryParameter("headsign", escapeString(params.getString("headsign")));
        }

        if (params.has("showCodes") && (!params.getString("showCodes").isEmpty())) {
          urlBuilder.addQueryParameter("show_codes", escapeString(String.valueOf(params.getBoolean("showCodes"))));
        }

        if (params.has("odtLevel") && (!params.getString("odtLevel").isEmpty())) {
          urlBuilder.addQueryParameter("odt_level", escapeString(params.getString("odtLevel")));
        }

        if (params.has("dataFreshness") && (!params.getString("dataFreshness").isEmpty())) {
          urlBuilder.addQueryParameter("data_freshness", escapeString(params.getString("dataFreshness")));
        }

        if (params.has("distance") && (!params.getString("distance").isEmpty())) {
          urlBuilder.addQueryParameter("distance", escapeString(String.valueOf(params.getInt("distance"))));
        }

        if (params.has("since") && (!params.getString("since").isEmpty())) {
          urlBuilder.addQueryParameter("since", escapeString(String.valueOf(params.getString("since"))));
        }

        if (params.has("until") && (!params.getString("until").isEmpty())) {
          urlBuilder.addQueryParameter("until", escapeString(String.valueOf(params.getString("until"))));
        }

        if (params.has("disableGeojson") && (!params.getString("disableGeojson").isEmpty())) {
          urlBuilder.addQueryParameter("disable_geojson", escapeString(String.valueOf(params.getBoolean("disableGeojson"))));
        }

        if (params.has("disableDisruption") && (!params.getString("disableDisruption").isEmpty())) {
          urlBuilder.addQueryParameter("disable_disruption", escapeString(String.valueOf(params.getBoolean("disableDisruption"))));
        }

        if (params.has("tags") && (!params.getString("tags").isEmpty())) {
          urlBuilder.addQueryParameter("tags[]", escapeString(String.valueOf(params.getJSONArray("tags"))));
        }

        if (params.has("originalId") && (!params.getString("originalId").isEmpty())) {
          urlBuilder.addQueryParameter("original_id", escapeString(params.getString("originalId")));
        }

        HttpUrl url = urlBuilder
          .addPathSegments(path)
          .build();
        Request request = requestBuilder.url(url)
          .build();

        client.newCall(request).enqueue(new Callback() {

          @Override
          public void onFailure(@NonNull Call call, @NonNull IOException e) {
            String errorMessage = "Problem during request | " + String.valueOf(e.hashCode()) + ": " + e.getMessage();
            callbackContext.error(errorMessage);
          }

          @Override
          public void onResponse(@NonNull Call call, @NonNull Response response) {
            if (response.isSuccessful()) {
              try {
                JSONObject jsonObject = new JSONObject(Objects.requireNonNull(response.body()).string());
                callbackContext.success(jsonObject);
              } catch (Exception e) {
                String errorMessage = "Problem during response parsing";
                callbackContext.error(errorMessage);
              }
            } else {
              callbackContext.error("Unexpected code " + response.code() + " | message: " + response.message());
            }
          }
        });
      } catch (Exception e) {
        String errorMessage = "Problem during request building | " + e.hashCode() + ": " + e.getMessage();
        callbackContext.error(errorMessage);
      }
    });
  }

  private void coverageRegionUriDisruptions(final JSONObject params, final CallbackContext callbackContext) {
    cordova.getThreadPool().execute(() -> {
      try {
        HttpUrl.Builder urlBuilder = new HttpUrl.Builder()
          .scheme("https")
          .host("api.navitia.io")
          .addPathSegment("v1");
        Request.Builder requestBuilder = new Request.Builder()
          .header("Authorization", token);
        String path = "/coverage/{region}/{uri}/disruptions".substring(1);

        if (params.has("region") && (!params.getString("region").isEmpty())) {
          path = path.replaceAll("\\{" + "region" + "\\}", escapeString(params.getString("region")));
        }

        if (params.has("uri") && (!params.getString("uri").isEmpty())) {
          path = path.replaceAll("\\{" + "uri" + "\\}", escapeString(params.getString("uri")));
        }

        if (params.has("startPage") && (!params.getString("startPage").isEmpty())) {
          urlBuilder.addQueryParameter("start_page", escapeString(String.valueOf(params.getInt("startPage"))));
        }

        if (params.has("count") && (!params.getString("count").isEmpty())) {
          urlBuilder.addQueryParameter("count", escapeString(String.valueOf(params.getInt("count"))));
        }

        if (params.has("depth") && (!params.getString("depth").isEmpty())) {
          urlBuilder.addQueryParameter("depth", escapeString(String.valueOf(params.getInt("depth"))));
        }

        if (params.has("forbiddenId") && (!params.getString("forbiddenId").isEmpty())) {
          urlBuilder.addQueryParameter("forbidden_id[]", escapeString(String.valueOf(params.getJSONArray("forbiddenId"))));
        }

        if (params.has("forbiddenUris") && (!params.getString("forbiddenUris").isEmpty())) {
          urlBuilder.addQueryParameter("forbidden_uris[]", escapeString(String.valueOf(params.getJSONArray("forbiddenUris"))));
        }

        if (params.has("externalCode") && (!params.getString("externalCode").isEmpty())) {
          urlBuilder.addQueryParameter("external_code", escapeString(params.getString("externalCode")));
        }

        if (params.has("headsign") && (!params.getString("headsign").isEmpty())) {
          urlBuilder.addQueryParameter("headsign", escapeString(params.getString("headsign")));
        }

        if (params.has("showCodes") && (!params.getString("showCodes").isEmpty())) {
          urlBuilder.addQueryParameter("show_codes", escapeString(String.valueOf(params.getBoolean("showCodes"))));
        }

        if (params.has("odtLevel") && (!params.getString("odtLevel").isEmpty())) {
          urlBuilder.addQueryParameter("odt_level", escapeString(params.getString("odtLevel")));
        }

        if (params.has("dataFreshness") && (!params.getString("dataFreshness").isEmpty())) {
          urlBuilder.addQueryParameter("data_freshness", escapeString(params.getString("dataFreshness")));
        }

        if (params.has("distance") && (!params.getString("distance").isEmpty())) {
          urlBuilder.addQueryParameter("distance", escapeString(String.valueOf(params.getInt("distance"))));
        }

        if (params.has("since") && (!params.getString("since").isEmpty())) {
          urlBuilder.addQueryParameter("since", escapeString(String.valueOf(params.getString("since"))));
        }

        if (params.has("until") && (!params.getString("until").isEmpty())) {
          urlBuilder.addQueryParameter("until", escapeString(String.valueOf(params.getString("until"))));
        }

        if (params.has("disableGeojson") && (!params.getString("disableGeojson").isEmpty())) {
          urlBuilder.addQueryParameter("disable_geojson", escapeString(String.valueOf(params.getBoolean("disableGeojson"))));
        }

        if (params.has("disableDisruption") && (!params.getString("disableDisruption").isEmpty())) {
          urlBuilder.addQueryParameter("disable_disruption", escapeString(String.valueOf(params.getBoolean("disableDisruption"))));
        }

        if (params.has("filter") && (!params.getString("filter").isEmpty())) {
          urlBuilder.addQueryParameter("filter", escapeString(params.getString("filter")));
        }

        if (params.has("tags") && (!params.getString("tags").isEmpty())) {
          urlBuilder.addQueryParameter("tags[]", escapeString(String.valueOf(params.getJSONArray("tags"))));
        }

        if (params.has("originalId") && (!params.getString("originalId").isEmpty())) {
          urlBuilder.addQueryParameter("original_id", escapeString(params.getString("originalId")));
        }

        HttpUrl url = urlBuilder
          .addPathSegments(path)
          .build();
        Request request = requestBuilder.url(url)
          .build();

        client.newCall(request).enqueue(new Callback() {

          @Override
          public void onFailure(@NonNull Call call, @NonNull IOException e) {
            String errorMessage = "Problem during request | " + String.valueOf(e.hashCode()) + ": " + e.getMessage();
            callbackContext.error(errorMessage);
          }

          @Override
          public void onResponse(@NonNull Call call, @NonNull Response response) {
            if (response.isSuccessful()) {
              try {
                JSONObject jsonObject = new JSONObject(Objects.requireNonNull(response.body()).string());
                callbackContext.success(jsonObject);
              } catch (Exception e) {
                String errorMessage = "Problem during response parsing";
                callbackContext.error(errorMessage);
              }
            } else {
              callbackContext.error("Unexpected code " + response.code() + " | message: " + response.message());
            }
          }
        });
      } catch (Exception e) {
        String errorMessage = "Problem during request building | " + e.hashCode() + ": " + e.getMessage();
        callbackContext.error(errorMessage);
      }
    });
  }

  private void coverageRegionUriDisruptionsId(final JSONObject params, final CallbackContext callbackContext) {
    cordova.getThreadPool().execute(() -> {
      try {
        HttpUrl.Builder urlBuilder = new HttpUrl.Builder()
          .scheme("https")
          .host("api.navitia.io")
          .addPathSegment("v1");
        Request.Builder requestBuilder = new Request.Builder()
          .header("Authorization", token);
        String path = "/coverage/{region}/{uri}/disruptions/{id}".substring(1);

        if (params.has("region") && (!params.getString("region").isEmpty())) {
          path = path.replaceAll("\\{" + "region" + "\\}", escapeString(params.getString("region")));
        }

        if (params.has("uri") && (!params.getString("uri").isEmpty())) {
          path = path.replaceAll("\\{" + "uri" + "\\}", escapeString(params.getString("uri")));
        }

        if (params.has("id") && (!params.getString("id").isEmpty())) {
          path = path.replaceAll("\\{" + "id" + "\\}", escapeString(params.getString("id")));
        }

        if (params.has("startPage") && (!params.getString("startPage").isEmpty())) {
          urlBuilder.addQueryParameter("start_page", escapeString(String.valueOf(params.getInt("startPage"))));
        }

        if (params.has("count") && (!params.getString("count").isEmpty())) {
          urlBuilder.addQueryParameter("count", escapeString(String.valueOf(params.getInt("count"))));
        }

        if (params.has("depth") && (!params.getString("depth").isEmpty())) {
          urlBuilder.addQueryParameter("depth", escapeString(String.valueOf(params.getInt("depth"))));
        }

        if (params.has("forbiddenId") && (!params.getString("forbiddenId").isEmpty())) {
          urlBuilder.addQueryParameter("forbidden_id[]", escapeString(String.valueOf(params.getJSONArray("forbiddenId"))));
        }

        if (params.has("forbiddenUris") && (!params.getString("forbiddenUris").isEmpty())) {
          urlBuilder.addQueryParameter("forbidden_uris[]", escapeString(String.valueOf(params.getJSONArray("forbiddenUris"))));
        }

        if (params.has("externalCode") && (!params.getString("externalCode").isEmpty())) {
          urlBuilder.addQueryParameter("external_code", escapeString(params.getString("externalCode")));
        }

        if (params.has("headsign") && (!params.getString("headsign").isEmpty())) {
          urlBuilder.addQueryParameter("headsign", escapeString(params.getString("headsign")));
        }

        if (params.has("showCodes") && (!params.getString("showCodes").isEmpty())) {
          urlBuilder.addQueryParameter("show_codes", escapeString(String.valueOf(params.getBoolean("showCodes"))));
        }

        if (params.has("odtLevel") && (!params.getString("odtLevel").isEmpty())) {
          urlBuilder.addQueryParameter("odt_level", escapeString(params.getString("odtLevel")));
        }

        if (params.has("dataFreshness") && (!params.getString("dataFreshness").isEmpty())) {
          urlBuilder.addQueryParameter("data_freshness", escapeString(params.getString("dataFreshness")));
        }

        if (params.has("distance") && (!params.getString("distance").isEmpty())) {
          urlBuilder.addQueryParameter("distance", escapeString(String.valueOf(params.getInt("distance"))));
        }

        if (params.has("since") && (!params.getString("since").isEmpty())) {
          urlBuilder.addQueryParameter("since", escapeString(String.valueOf(params.getString("since"))));
        }

        if (params.has("until") && (!params.getString("until").isEmpty())) {
          urlBuilder.addQueryParameter("until", escapeString(String.valueOf(params.getString("until"))));
        }

        if (params.has("disableGeojson") && (!params.getString("disableGeojson").isEmpty())) {
          urlBuilder.addQueryParameter("disable_geojson", escapeString(String.valueOf(params.getBoolean("disableGeojson"))));
        }

        if (params.has("disableDisruption") && (!params.getString("disableDisruption").isEmpty())) {
          urlBuilder.addQueryParameter("disable_disruption", escapeString(String.valueOf(params.getBoolean("disableDisruption"))));
        }

        if (params.has("tags") && (!params.getString("tags").isEmpty())) {
          urlBuilder.addQueryParameter("tags[]", escapeString(String.valueOf(params.getJSONArray("tags"))));
        }

        if (params.has("originalId") && (!params.getString("originalId").isEmpty())) {
          urlBuilder.addQueryParameter("original_id", escapeString(params.getString("originalId")));
        }

        HttpUrl url = urlBuilder
          .addPathSegments(path)
          .build();
        Request request = requestBuilder.url(url)
          .build();

        client.newCall(request).enqueue(new Callback() {

          @Override
          public void onFailure(@NonNull Call call, @NonNull IOException e) {
            String errorMessage = "Problem during request | " + String.valueOf(e.hashCode()) + ": " + e.getMessage();
            callbackContext.error(errorMessage);
          }

          @Override
          public void onResponse(@NonNull Call call, @NonNull Response response) {
            if (response.isSuccessful()) {
              try {
                JSONObject jsonObject = new JSONObject(Objects.requireNonNull(response.body()).string());
                callbackContext.success(jsonObject);
              } catch (Exception e) {
                String errorMessage = "Problem during response parsing";
                callbackContext.error(errorMessage);
              }
            } else {
              callbackContext.error("Unexpected code " + response.code() + " | message: " + response.message());
            }
          }
        });
      } catch (Exception e) {
        String errorMessage = "Problem during request building | " + e.hashCode() + ": " + e.getMessage();
        callbackContext.error(errorMessage);
      }
    });
  }

  private void coordLonLatEquipmentReports(final JSONObject params, final CallbackContext callbackContext) {
    cordova.getThreadPool().execute(() -> {
      try {
        HttpUrl.Builder urlBuilder = new HttpUrl.Builder()
          .scheme("https")
          .host("api.navitia.io")
          .addPathSegment("v1");
        Request.Builder requestBuilder = new Request.Builder()
          .header("Authorization", token);
        String path = "/coord/{lon};{lat}/equipment_reports".substring(1);

        if (params.has("lat") && (!params.getString("lat").isEmpty())) {
          path = path.replaceAll("\\{" + "lat" + "\\}", escapeString(String.valueOf(params.getLong("lat"))));
        }

        if (params.has("lon") && (!params.getString("lon").isEmpty())) {
          path = path.replaceAll("\\{" + "lon" + "\\}", escapeString(String.valueOf(params.getLong("lon"))));
        }

        if (params.has("depth") && (!params.getString("depth").isEmpty())) {
          urlBuilder.addQueryParameter("depth", escapeString(String.valueOf(params.getInt("depth"))));
        }

        if (params.has("count") && (!params.getString("count").isEmpty())) {
          urlBuilder.addQueryParameter("count", escapeString(String.valueOf(params.getInt("count"))));
        }

        if (params.has("filter") && (!params.getString("filter").isEmpty())) {
          urlBuilder.addQueryParameter("filter", escapeString(params.getString("filter")));
        }

        if (params.has("startPage") && (!params.getString("startPage").isEmpty())) {
          urlBuilder.addQueryParameter("start_page", escapeString(String.valueOf(params.getInt("startPage"))));
        }

        if (params.has("forbiddenUris") && (!params.getString("forbiddenUris").isEmpty())) {
          urlBuilder.addQueryParameter("forbidden_uris[]", escapeString(String.valueOf(params.getJSONArray("forbiddenUris"))));
        }

        HttpUrl url = urlBuilder
          .addPathSegments(path)
          .build();
        Request request = requestBuilder.url(url)
          .build();

        client.newCall(request).enqueue(new Callback() {

          @Override
          public void onFailure(@NonNull Call call, @NonNull IOException e) {
            String errorMessage = "Problem during request | " + String.valueOf(e.hashCode()) + ": " + e.getMessage();
            callbackContext.error(errorMessage);
          }

          @Override
          public void onResponse(@NonNull Call call, @NonNull Response response) {
            if (response.isSuccessful()) {
              try {
                JSONObject jsonObject = new JSONObject(Objects.requireNonNull(response.body()).string());
                callbackContext.success(jsonObject);
              } catch (Exception e) {
                String errorMessage = "Problem during response parsing";
                callbackContext.error(errorMessage);
              }
            } else {
              callbackContext.error("Unexpected code " + response.code() + " | message: " + response.message());
            }
          }
        });
      } catch (Exception e) {
        String errorMessage = "Problem during request building | " + e.hashCode() + ": " + e.getMessage();
        callbackContext.error(errorMessage);
      }
    });
  }

  private void coordsLonLatEquipmentReports(final JSONObject params, final CallbackContext callbackContext) {
    cordova.getThreadPool().execute(() -> {
      try {
        HttpUrl.Builder urlBuilder = new HttpUrl.Builder()
          .scheme("https")
          .host("api.navitia.io")
          .addPathSegment("v1");
        Request.Builder requestBuilder = new Request.Builder()
          .header("Authorization", token);
        String path = "/coords/{lon};{lat}/equipment_reports".substring(1);

        if (params.has("lat") && (!params.getString("lat").isEmpty())) {
          path = path.replaceAll("\\{" + "lat" + "\\}", escapeString(String.valueOf(params.getLong("lat"))));
        }

        if (params.has("lon") && (!params.getString("lon").isEmpty())) {
          path = path.replaceAll("\\{" + "lon" + "\\}", escapeString(String.valueOf(params.getLong("lon"))));
        }

        if (params.has("depth") && (!params.getString("depth").isEmpty())) {
          urlBuilder.addQueryParameter("depth", escapeString(String.valueOf(params.getInt("depth"))));
        }

        if (params.has("count") && (!params.getString("count").isEmpty())) {
          urlBuilder.addQueryParameter("count", escapeString(String.valueOf(params.getInt("count"))));
        }

        if (params.has("filter") && (!params.getString("filter").isEmpty())) {
          urlBuilder.addQueryParameter("filter", escapeString(params.getString("filter")));
        }

        if (params.has("startPage") && (!params.getString("startPage").isEmpty())) {
          urlBuilder.addQueryParameter("start_page", escapeString(String.valueOf(params.getInt("startPage"))));
        }

        if (params.has("forbiddenUris") && (!params.getString("forbiddenUris").isEmpty())) {
          urlBuilder.addQueryParameter("forbidden_uris[]", escapeString(String.valueOf(params.getJSONArray("forbiddenUris"))));
        }

        HttpUrl url = urlBuilder
          .addPathSegments(path)
          .build();
        Request request = requestBuilder.url(url)
          .build();

        client.newCall(request).enqueue(new Callback() {

          @Override
          public void onFailure(@NonNull Call call, @NonNull IOException e) {
            String errorMessage = "Problem during request | " + String.valueOf(e.hashCode()) + ": " + e.getMessage();
            callbackContext.error(errorMessage);
          }

          @Override
          public void onResponse(@NonNull Call call, @NonNull Response response) {
            if (response.isSuccessful()) {
              try {
                JSONObject jsonObject = new JSONObject(Objects.requireNonNull(response.body()).string());
                callbackContext.success(jsonObject);
              } catch (Exception e) {
                String errorMessage = "Problem during response parsing";
                callbackContext.error(errorMessage);
              }
            } else {
              callbackContext.error("Unexpected code " + response.code() + " | message: " + response.message());
            }
          }
        });
      } catch (Exception e) {
        String errorMessage = "Problem during request building | " + e.hashCode() + ": " + e.getMessage();
        callbackContext.error(errorMessage);
      }
    });
  }

  private void coverageLonLatEquipmentReports(final JSONObject params, final CallbackContext callbackContext) {
    cordova.getThreadPool().execute(() -> {
      try {
        HttpUrl.Builder urlBuilder = new HttpUrl.Builder()
          .scheme("https")
          .host("api.navitia.io")
          .addPathSegment("v1");
        Request.Builder requestBuilder = new Request.Builder()
          .header("Authorization", token);
        String path = "/coverage/{lon};{lat}/equipment_reports".substring(1);

        if (params.has("lat") && (!params.getString("lat").isEmpty())) {
          path = path.replaceAll("\\{" + "lat" + "\\}", escapeString(String.valueOf(params.getLong("lat"))));
        }

        if (params.has("lon") && (!params.getString("lon").isEmpty())) {
          path = path.replaceAll("\\{" + "lon" + "\\}", escapeString(String.valueOf(params.getLong("lon"))));
        }

        if (params.has("depth") && (!params.getString("depth").isEmpty())) {
          urlBuilder.addQueryParameter("depth", escapeString(String.valueOf(params.getInt("depth"))));
        }

        if (params.has("count") && (!params.getString("count").isEmpty())) {
          urlBuilder.addQueryParameter("count", escapeString(String.valueOf(params.getInt("count"))));
        }

        if (params.has("filter") && (!params.getString("filter").isEmpty())) {
          urlBuilder.addQueryParameter("filter", escapeString(params.getString("filter")));
        }

        if (params.has("startPage") && (!params.getString("startPage").isEmpty())) {
          urlBuilder.addQueryParameter("start_page", escapeString(String.valueOf(params.getInt("startPage"))));
        }

        if (params.has("forbiddenUris") && (!params.getString("forbiddenUris").isEmpty())) {
          urlBuilder.addQueryParameter("forbidden_uris[]", escapeString(String.valueOf(params.getJSONArray("forbiddenUris"))));
        }

        HttpUrl url = urlBuilder
          .addPathSegments(path)
          .build();
        Request request = requestBuilder.url(url)
          .build();

        client.newCall(request).enqueue(new Callback() {

          @Override
          public void onFailure(@NonNull Call call, @NonNull IOException e) {
            String errorMessage = "Problem during request | " + String.valueOf(e.hashCode()) + ": " + e.getMessage();
            callbackContext.error(errorMessage);
          }

          @Override
          public void onResponse(@NonNull Call call, @NonNull Response response) {
            if (response.isSuccessful()) {
              try {
                JSONObject jsonObject = new JSONObject(Objects.requireNonNull(response.body()).string());
                callbackContext.success(jsonObject);
              } catch (Exception e) {
                String errorMessage = "Problem during response parsing";
                callbackContext.error(errorMessage);
              }
            } else {
              callbackContext.error("Unexpected code " + response.code() + " | message: " + response.message());
            }
          }
        });
      } catch (Exception e) {
        String errorMessage = "Problem during request building | " + e.hashCode() + ": " + e.getMessage();
        callbackContext.error(errorMessage);
      }
    });
  }

  private void coverageLonLatUriEquipmentReports(final JSONObject params, final CallbackContext callbackContext) {
    cordova.getThreadPool().execute(() -> {
      try {
        HttpUrl.Builder urlBuilder = new HttpUrl.Builder()
          .scheme("https")
          .host("api.navitia.io")
          .addPathSegment("v1");
        Request.Builder requestBuilder = new Request.Builder()
          .header("Authorization", token);
        String path = "/coverage/{lon};{lat}/{uri}/equipment_reports".substring(1);

        if (params.has("lat") && (!params.getString("lat").isEmpty())) {
          path = path.replaceAll("\\{" + "lat" + "\\}", escapeString(String.valueOf(params.getLong("lat"))));
        }

        if (params.has("lon") && (!params.getString("lon").isEmpty())) {
          path = path.replaceAll("\\{" + "lon" + "\\}", escapeString(String.valueOf(params.getLong("lon"))));
        }

        if (params.has("uri") && (!params.getString("uri").isEmpty())) {
          path = path.replaceAll("\\{" + "uri" + "\\}", escapeString(params.getString("uri")));
        }

        if (params.has("depth") && (!params.getString("depth").isEmpty())) {
          urlBuilder.addQueryParameter("depth", escapeString(String.valueOf(params.getInt("depth"))));
        }

        if (params.has("count") && (!params.getString("count").isEmpty())) {
          urlBuilder.addQueryParameter("count", escapeString(String.valueOf(params.getInt("count"))));
        }

        if (params.has("filter") && (!params.getString("filter").isEmpty())) {
          urlBuilder.addQueryParameter("filter", escapeString(params.getString("filter")));
        }

        if (params.has("startPage") && (!params.getString("startPage").isEmpty())) {
          urlBuilder.addQueryParameter("start_page", escapeString(String.valueOf(params.getInt("startPage"))));
        }

        if (params.has("forbiddenUris") && (!params.getString("forbiddenUris").isEmpty())) {
          urlBuilder.addQueryParameter("forbidden_uris[]", escapeString(String.valueOf(params.getJSONArray("forbiddenUris"))));
        }

        HttpUrl url = urlBuilder
          .addPathSegments(path)
          .build();
        Request request = requestBuilder.url(url)
          .build();

        client.newCall(request).enqueue(new Callback() {

          @Override
          public void onFailure(@NonNull Call call, @NonNull IOException e) {
            String errorMessage = "Problem during request | " + String.valueOf(e.hashCode()) + ": " + e.getMessage();
            callbackContext.error(errorMessage);
          }

          @Override
          public void onResponse(@NonNull Call call, @NonNull Response response) {
            if (response.isSuccessful()) {
              try {
                JSONObject jsonObject = new JSONObject(Objects.requireNonNull(response.body()).string());
                callbackContext.success(jsonObject);
              } catch (Exception e) {
                String errorMessage = "Problem during response parsing";
                callbackContext.error(errorMessage);
              }
            } else {
              callbackContext.error("Unexpected code " + response.code() + " | message: " + response.message());
            }
          }
        });
      } catch (Exception e) {
        String errorMessage = "Problem during request building | " + e.hashCode() + ": " + e.getMessage();
        callbackContext.error(errorMessage);
      }
    });
  }

  private void coverageRegionEquipmentReports(final JSONObject params, final CallbackContext callbackContext) {
    cordova.getThreadPool().execute(() -> {
      try {
        HttpUrl.Builder urlBuilder = new HttpUrl.Builder()
          .scheme("https")
          .host("api.navitia.io")
          .addPathSegment("v1");
        Request.Builder requestBuilder = new Request.Builder()
          .header("Authorization", token);
        String path = "/coverage/{region}/equipment_reports".substring(1);

        if (params.has("region") && (!params.getString("region").isEmpty())) {
          path = path.replaceAll("\\{" + "region" + "\\}", escapeString(params.getString("region")));
        }

        if (params.has("depth") && (!params.getString("depth").isEmpty())) {
          urlBuilder.addQueryParameter("depth", escapeString(String.valueOf(params.getInt("depth"))));
        }

        if (params.has("count") && (!params.getString("count").isEmpty())) {
          urlBuilder.addQueryParameter("count", escapeString(String.valueOf(params.getInt("count"))));
        }

        if (params.has("filter") && (!params.getString("filter").isEmpty())) {
          urlBuilder.addQueryParameter("filter", escapeString(params.getString("filter")));
        }

        if (params.has("startPage") && (!params.getString("startPage").isEmpty())) {
          urlBuilder.addQueryParameter("start_page", escapeString(String.valueOf(params.getInt("startPage"))));
        }

        if (params.has("forbiddenUris") && (!params.getString("forbiddenUris").isEmpty())) {
          urlBuilder.addQueryParameter("forbidden_uris[]", escapeString(String.valueOf(params.getJSONArray("forbiddenUris"))));
        }

        HttpUrl url = urlBuilder
          .addPathSegments(path)
          .build();
        Request request = requestBuilder.url(url)
          .build();

        client.newCall(request).enqueue(new Callback() {

          @Override
          public void onFailure(@NonNull Call call, @NonNull IOException e) {
            String errorMessage = "Problem during request | " + String.valueOf(e.hashCode()) + ": " + e.getMessage();
            callbackContext.error(errorMessage);
          }

          @Override
          public void onResponse(@NonNull Call call, @NonNull Response response) {
            if (response.isSuccessful()) {
              try {
                JSONObject jsonObject = new JSONObject(Objects.requireNonNull(response.body()).string());
                callbackContext.success(jsonObject);
              } catch (Exception e) {
                String errorMessage = "Problem during response parsing";
                callbackContext.error(errorMessage);
              }
            } else {
              callbackContext.error("Unexpected code " + response.code() + " | message: " + response.message());
            }
          }
        });
      } catch (Exception e) {
        String errorMessage = "Problem during request building | " + e.hashCode() + ": " + e.getMessage();
        callbackContext.error(errorMessage);
      }
    });
  }

  private void coverageRegionUriEquipmentReports(final JSONObject params, final CallbackContext callbackContext) {
    cordova.getThreadPool().execute(() -> {
      try {
        HttpUrl.Builder urlBuilder = new HttpUrl.Builder()
          .scheme("https")
          .host("api.navitia.io")
          .addPathSegment("v1");
        Request.Builder requestBuilder = new Request.Builder()
          .header("Authorization", token);
        String path = "/coverage/{region}/{uri}/equipment_reports".substring(1);

        if (params.has("region") && (!params.getString("region").isEmpty())) {
          path = path.replaceAll("\\{" + "region" + "\\}", escapeString(params.getString("region")));
        }

        if (params.has("uri") && (!params.getString("uri").isEmpty())) {
          path = path.replaceAll("\\{" + "uri" + "\\}", escapeString(params.getString("uri")));
        }

        if (params.has("depth") && (!params.getString("depth").isEmpty())) {
          urlBuilder.addQueryParameter("depth", escapeString(String.valueOf(params.getInt("depth"))));
        }

        if (params.has("count") && (!params.getString("count").isEmpty())) {
          urlBuilder.addQueryParameter("count", escapeString(String.valueOf(params.getInt("count"))));
        }

        if (params.has("filter") && (!params.getString("filter").isEmpty())) {
          urlBuilder.addQueryParameter("filter", escapeString(params.getString("filter")));
        }

        if (params.has("startPage") && (!params.getString("startPage").isEmpty())) {
          urlBuilder.addQueryParameter("start_page", escapeString(String.valueOf(params.getInt("startPage"))));
        }

        if (params.has("forbiddenUris") && (!params.getString("forbiddenUris").isEmpty())) {
          urlBuilder.addQueryParameter("forbidden_uris[]", escapeString(String.valueOf(params.getJSONArray("forbiddenUris"))));
        }

        HttpUrl url = urlBuilder
          .addPathSegments(path)
          .build();
        Request request = requestBuilder.url(url)
          .build();

        client.newCall(request).enqueue(new Callback() {

          @Override
          public void onFailure(@NonNull Call call, @NonNull IOException e) {
            String errorMessage = "Problem during request | " + String.valueOf(e.hashCode()) + ": " + e.getMessage();
            callbackContext.error(errorMessage);
          }

          @Override
          public void onResponse(@NonNull Call call, @NonNull Response response) {
            if (response.isSuccessful()) {
              try {
                JSONObject jsonObject = new JSONObject(Objects.requireNonNull(response.body()).string());
                callbackContext.success(jsonObject);
              } catch (Exception e) {
                String errorMessage = "Problem during response parsing";
                callbackContext.error(errorMessage);
              }
            } else {
              callbackContext.error("Unexpected code " + response.code() + " | message: " + response.message());
            }
          }
        });
      } catch (Exception e) {
        String errorMessage = "Problem during request building | " + e.hashCode() + ": " + e.getMessage();
        callbackContext.error(errorMessage);
      }
    });
  }

  private void coverageLonLatGeoStatus(final JSONObject params, final CallbackContext callbackContext) {
    cordova.getThreadPool().execute(() -> {
      try {
        HttpUrl.Builder urlBuilder = new HttpUrl.Builder()
          .scheme("https")
          .host("api.navitia.io")
          .addPathSegment("v1");
        Request.Builder requestBuilder = new Request.Builder()
          .header("Authorization", token);
        String path = "/coverage/{lon};{lat}/_geo_status".substring(1);

        if (params.has("lat") && (!params.getString("lat").isEmpty())) {
          path = path.replaceAll("\\{" + "lat" + "\\}", escapeString(String.valueOf(params.getLong("lat"))));
        }

        if (params.has("lon") && (!params.getString("lon").isEmpty())) {
          path = path.replaceAll("\\{" + "lon" + "\\}", escapeString(String.valueOf(params.getLong("lon"))));
        }

        HttpUrl url = urlBuilder
          .addPathSegments(path)
          .build();
        Request request = requestBuilder.url(url)
          .build();

        client.newCall(request).enqueue(new Callback() {

          @Override
          public void onFailure(@NonNull Call call, @NonNull IOException e) {
            String errorMessage = "Problem during request | " + String.valueOf(e.hashCode()) + ": " + e.getMessage();
            callbackContext.error(errorMessage);
          }

          @Override
          public void onResponse(@NonNull Call call, @NonNull Response response) {
            if (response.isSuccessful()) {
              try {
                JSONObject jsonObject = new JSONObject(Objects.requireNonNull(response.body()).string());
                callbackContext.success(jsonObject);
              } catch (Exception e) {
                String errorMessage = "Problem during response parsing";
                callbackContext.error(errorMessage);
              }
            } else {
              callbackContext.error("Unexpected code " + response.code() + " | message: " + response.message());
            }
          }
        });
      } catch (Exception e) {
        String errorMessage = "Problem during request building | " + e.hashCode() + ": " + e.getMessage();
        callbackContext.error(errorMessage);
      }
    });
  }

  private void coverageRegionGeoStatus(final JSONObject params, final CallbackContext callbackContext) {
    cordova.getThreadPool().execute(() -> {
      try {
        HttpUrl.Builder urlBuilder = new HttpUrl.Builder()
          .scheme("https")
          .host("api.navitia.io")
          .addPathSegment("v1");
        Request.Builder requestBuilder = new Request.Builder()
          .header("Authorization", token);
        String path = "/coverage/{region}/_geo_status".substring(1);

        if (params.has("region") && (!params.getString("region").isEmpty())) {
          path = path.replaceAll("\\{" + "region" + "\\}", escapeString(params.getString("region")));
        }

        HttpUrl url = urlBuilder
          .addPathSegments(path)
          .build();
        Request request = requestBuilder.url(url)
          .build();

        client.newCall(request).enqueue(new Callback() {

          @Override
          public void onFailure(@NonNull Call call, @NonNull IOException e) {
            String errorMessage = "Problem during request | " + String.valueOf(e.hashCode()) + ": " + e.getMessage();
            callbackContext.error(errorMessage);
          }

          @Override
          public void onResponse(@NonNull Call call, @NonNull Response response) {
            if (response.isSuccessful()) {
              try {
                JSONObject jsonObject = new JSONObject(Objects.requireNonNull(response.body()).string());
                callbackContext.success(jsonObject);
              } catch (Exception e) {
                String errorMessage = "Problem during response parsing";
                callbackContext.error(errorMessage);
              }
            } else {
              callbackContext.error("Unexpected code " + response.code() + " | message: " + response.message());
            }
          }
        });
      } catch (Exception e) {
        String errorMessage = "Problem during request building | " + e.hashCode() + ": " + e.getMessage();
        callbackContext.error(errorMessage);
      }
    });
  }

  private void coverageLonLatIsochrones(final JSONObject params, final CallbackContext callbackContext) {
    cordova.getThreadPool().execute(() -> {
      try {
        HttpUrl.Builder urlBuilder = new HttpUrl.Builder()
          .scheme("https")
          .host("api.navitia.io")
          .addPathSegment("v1");
        Request.Builder requestBuilder = new Request.Builder()
          .header("Authorization", token);
        String path = "/coverage/{lon};{lat}/isochrones".substring(1);

        if (params.has("lat") && (!params.getString("lat").isEmpty())) {
          path = path.replaceAll("\\{" + "lat" + "\\}", escapeString(String.valueOf(params.getLong("lat"))));
        }

        if (params.has("lon") && (!params.getString("lon").isEmpty())) {
          path = path.replaceAll("\\{" + "lon" + "\\}", escapeString(String.valueOf(params.getLong("lon"))));
        }

        if (params.has("from") && (!params.getString("from").isEmpty())) {
          urlBuilder.addQueryParameter("from", escapeString(params.getString("from")));
        }

        if (params.has("to") && (!params.getString("to").isEmpty())) {
          urlBuilder.addQueryParameter("to", escapeString(params.getString("to")));
        }

        if (params.has("datetime") && (!params.getString("datetime").isEmpty())) {
          urlBuilder.addQueryParameter("datetime", escapeString(String.valueOf(params.getString("datetime"))));
        }

        if (params.has("datetimeRepresents") && (!params.getString("datetimeRepresents").isEmpty())) {
          urlBuilder.addQueryParameter("datetime_represents", escapeString(params.getString("datetimeRepresents")));
        }

        if (params.has("maxNbTransfers") && (!params.getString("maxNbTransfers").isEmpty())) {
          urlBuilder.addQueryParameter("max_nb_transfers", escapeString(String.valueOf(params.getInt("maxNbTransfers"))));
        }

        if (params.has("minNbTransfers") && (!params.getString("minNbTransfers").isEmpty())) {
          urlBuilder.addQueryParameter("min_nb_transfers", escapeString(String.valueOf(params.getInt("minNbTransfers"))));
        }

        if (params.has("firstSectionMode") && (!params.getString("firstSectionMode").isEmpty())) {
          urlBuilder.addQueryParameter("first_section_mode[]", escapeString(String.valueOf(params.getJSONArray("firstSectionMode"))));
        }

        if (params.has("lastSectionMode") && (!params.getString("lastSectionMode").isEmpty())) {
          urlBuilder.addQueryParameter("last_section_mode[]", escapeString(String.valueOf(params.getJSONArray("lastSectionMode"))));
        }

        if (params.has("maxDurationToPt") && (!params.getString("maxDurationToPt").isEmpty())) {
          urlBuilder.addQueryParameter("max_duration_to_pt", escapeString(String.valueOf(params.getInt("maxDurationToPt"))));
        }

        if (params.has("maxWalkingDurationToPt") && (!params.getString("maxWalkingDurationToPt").isEmpty())) {
          urlBuilder.addQueryParameter("max_walking_duration_to_pt", escapeString(String.valueOf(params.getInt("maxWalkingDurationToPt"))));
        }

        if (params.has("maxBikeDurationToPt") && (!params.getString("maxBikeDurationToPt").isEmpty())) {
          urlBuilder.addQueryParameter("max_bike_duration_to_pt", escapeString(String.valueOf(params.getInt("maxBikeDurationToPt"))));
        }

        if (params.has("maxBssDurationToPt") && (!params.getString("maxBssDurationToPt").isEmpty())) {
          urlBuilder.addQueryParameter("max_bss_duration_to_pt", escapeString(String.valueOf(params.getInt("maxBssDurationToPt"))));
        }

        if (params.has("maxCarDurationToPt") && (!params.getString("maxCarDurationToPt").isEmpty())) {
          urlBuilder.addQueryParameter("max_car_duration_to_pt", escapeString(String.valueOf(params.getInt("maxCarDurationToPt"))));
        }

        if (params.has("maxRidesharingDurationToPt") && (!params.getString("maxRidesharingDurationToPt").isEmpty())) {
          urlBuilder.addQueryParameter("max_ridesharing_duration_to_pt", escapeString(String.valueOf(params.getInt("maxRidesharingDurationToPt"))));
        }

        if (params.has("maxCarNoParkDurationToPt") && (!params.getString("maxCarNoParkDurationToPt").isEmpty())) {
          urlBuilder.addQueryParameter("max_car_no_park_duration_to_pt", escapeString(String.valueOf(params.getInt("maxCarNoParkDurationToPt"))));
        }

        if (params.has("maxTaxiDurationToPt") && (!params.getString("maxTaxiDurationToPt").isEmpty())) {
          urlBuilder.addQueryParameter("max_taxi_duration_to_pt", escapeString(String.valueOf(params.getInt("maxTaxiDurationToPt"))));
        }

        if (params.has("walkingSpeed") && (!params.getString("walkingSpeed").isEmpty())) {
          urlBuilder.addQueryParameter("walking_speed", escapeString(String.valueOf(params.getLong("walkingSpeed"))));
        }

        if (params.has("bikeSpeed") && (!params.getString("bikeSpeed").isEmpty())) {
          urlBuilder.addQueryParameter("bike_speed", escapeString(String.valueOf(params.getLong("bikeSpeed"))));
        }

        if (params.has("bssSpeed") && (!params.getString("bssSpeed").isEmpty())) {
          urlBuilder.addQueryParameter("bss_speed", escapeString(String.valueOf(params.getLong("bssSpeed"))));
        }

        if (params.has("carSpeed") && (!params.getString("carSpeed").isEmpty())) {
          urlBuilder.addQueryParameter("car_speed", escapeString(String.valueOf(params.getLong("carSpeed"))));
        }

        if (params.has("ridesharingSpeed") && (!params.getString("ridesharingSpeed").isEmpty())) {
          urlBuilder.addQueryParameter("ridesharing_speed", escapeString(String.valueOf(params.getLong("ridesharingSpeed"))));
        }

        if (params.has("carNoParkSpeed") && (!params.getString("carNoParkSpeed").isEmpty())) {
          urlBuilder.addQueryParameter("car_no_park_speed", escapeString(String.valueOf(params.getLong("carNoParkSpeed"))));
        }

        if (params.has("taxiSpeed") && (!params.getString("taxiSpeed").isEmpty())) {
          urlBuilder.addQueryParameter("taxi_speed", escapeString(String.valueOf(params.getLong("taxiSpeed"))));
        }

        if (params.has("forbiddenUris") && (!params.getString("forbiddenUris").isEmpty())) {
          urlBuilder.addQueryParameter("forbidden_uris[]", escapeString(String.valueOf(params.getJSONArray("forbiddenUris"))));
        }

        if (params.has("allowedId") && (!params.getString("allowedId").isEmpty())) {
          urlBuilder.addQueryParameter("allowed_id[]", escapeString(String.valueOf(params.getJSONArray("allowedId"))));
        }

        if (params.has("disruptionActive") && (!params.getString("disruptionActive").isEmpty())) {
          urlBuilder.addQueryParameter("disruption_active", escapeString(String.valueOf(params.getBoolean("disruptionActive"))));
        }

        if (params.has("dataFreshness") && (!params.getString("dataFreshness").isEmpty())) {
          urlBuilder.addQueryParameter("data_freshness", escapeString(params.getString("dataFreshness")));
        }

        if (params.has("maxDuration") && (!params.getString("maxDuration").isEmpty())) {
          urlBuilder.addQueryParameter("max_duration", escapeString(String.valueOf(params.getInt("maxDuration"))));
        }

        if (params.has("wheelchair") && (!params.getString("wheelchair").isEmpty())) {
          urlBuilder.addQueryParameter("wheelchair", escapeString(String.valueOf(params.getBoolean("wheelchair"))));
        }

        if (params.has("travelerType") && (!params.getString("travelerType").isEmpty())) {
          urlBuilder.addQueryParameter("traveler_type", escapeString(params.getString("travelerType")));
        }

        if (params.has("directPath") && (!params.getString("directPath").isEmpty())) {
          urlBuilder.addQueryParameter("direct_path", escapeString(params.getString("directPath")));
        }

        if (params.has("freeRadiusFrom") && (!params.getString("freeRadiusFrom").isEmpty())) {
          urlBuilder.addQueryParameter("free_radius_from", escapeString(String.valueOf(params.getInt("freeRadiusFrom"))));
        }

        if (params.has("freeRadiusTo") && (!params.getString("freeRadiusTo").isEmpty())) {
          urlBuilder.addQueryParameter("free_radius_to", escapeString(String.valueOf(params.getInt("freeRadiusTo"))));
        }

        if (params.has("directPathMode") && (!params.getString("directPathMode").isEmpty())) {
          urlBuilder.addQueryParameter("direct_path_mode[]", escapeString(String.valueOf(params.getJSONArray("directPathMode"))));
        }

        if (params.has("partnerServices") && (!params.getString("partnerServices").isEmpty())) {
          urlBuilder.addQueryParameter("partner_services[]", escapeString(String.valueOf(params.getJSONArray("partnerServices"))));
        }

        if (params.has("minDuration") && (!params.getString("minDuration").isEmpty())) {
          urlBuilder.addQueryParameter("min_duration", escapeString(String.valueOf(params.getInt("minDuration"))));
        }

        if (params.has("boundaryDuration") && (!params.getString("boundaryDuration").isEmpty())) {
          urlBuilder.addQueryParameter("boundary_duration[]", escapeString(String.valueOf(params.getJSONArray("boundaryDuration"))));
        }

        HttpUrl url = urlBuilder
          .addPathSegments(path)
          .build();
        Request request = requestBuilder.url(url)
          .build();

        client.newCall(request).enqueue(new Callback() {

          @Override
          public void onFailure(@NonNull Call call, @NonNull IOException e) {
            String errorMessage = "Problem during request | " + String.valueOf(e.hashCode()) + ": " + e.getMessage();
            callbackContext.error(errorMessage);
          }

          @Override
          public void onResponse(@NonNull Call call, @NonNull Response response) {
            if (response.isSuccessful()) {
              try {
                JSONObject jsonObject = new JSONObject(Objects.requireNonNull(response.body()).string());
                callbackContext.success(jsonObject);
              } catch (Exception e) {
                String errorMessage = "Problem during response parsing";
                callbackContext.error(errorMessage);
              }
            } else {
              callbackContext.error("Unexpected code " + response.code() + " | message: " + response.message());
            }
          }
        });
      } catch (Exception e) {
        String errorMessage = "Problem during request building | " + e.hashCode() + ": " + e.getMessage();
        callbackContext.error(errorMessage);
      }
    });
  }

  private void coverageRegionIsochrones(final JSONObject params, final CallbackContext callbackContext) {
    cordova.getThreadPool().execute(() -> {
      try {
        HttpUrl.Builder urlBuilder = new HttpUrl.Builder()
          .scheme("https")
          .host("api.navitia.io")
          .addPathSegment("v1");
        Request.Builder requestBuilder = new Request.Builder()
          .header("Authorization", token);
        String path = "/coverage/{region}/isochrones".substring(1);

        if (params.has("region") && (!params.getString("region").isEmpty())) {
          path = path.replaceAll("\\{" + "region" + "\\}", escapeString(params.getString("region")));
        }

        if (params.has("from") && (!params.getString("from").isEmpty())) {
          urlBuilder.addQueryParameter("from", escapeString(params.getString("from")));
        }

        if (params.has("to") && (!params.getString("to").isEmpty())) {
          urlBuilder.addQueryParameter("to", escapeString(params.getString("to")));
        }

        if (params.has("datetime") && (!params.getString("datetime").isEmpty())) {
          urlBuilder.addQueryParameter("datetime", escapeString(String.valueOf(params.getString("datetime"))));
        }

        if (params.has("datetimeRepresents") && (!params.getString("datetimeRepresents").isEmpty())) {
          urlBuilder.addQueryParameter("datetime_represents", escapeString(params.getString("datetimeRepresents")));
        }

        if (params.has("maxNbTransfers") && (!params.getString("maxNbTransfers").isEmpty())) {
          urlBuilder.addQueryParameter("max_nb_transfers", escapeString(String.valueOf(params.getInt("maxNbTransfers"))));
        }

        if (params.has("minNbTransfers") && (!params.getString("minNbTransfers").isEmpty())) {
          urlBuilder.addQueryParameter("min_nb_transfers", escapeString(String.valueOf(params.getInt("minNbTransfers"))));
        }

        if (params.has("firstSectionMode") && (!params.getString("firstSectionMode").isEmpty())) {
          urlBuilder.addQueryParameter("first_section_mode[]", escapeString(String.valueOf(params.getJSONArray("firstSectionMode"))));
        }

        if (params.has("lastSectionMode") && (!params.getString("lastSectionMode").isEmpty())) {
          urlBuilder.addQueryParameter("last_section_mode[]", escapeString(String.valueOf(params.getJSONArray("lastSectionMode"))));
        }

        if (params.has("maxDurationToPt") && (!params.getString("maxDurationToPt").isEmpty())) {
          urlBuilder.addQueryParameter("max_duration_to_pt", escapeString(String.valueOf(params.getInt("maxDurationToPt"))));
        }

        if (params.has("maxWalkingDurationToPt") && (!params.getString("maxWalkingDurationToPt").isEmpty())) {
          urlBuilder.addQueryParameter("max_walking_duration_to_pt", escapeString(String.valueOf(params.getInt("maxWalkingDurationToPt"))));
        }

        if (params.has("maxBikeDurationToPt") && (!params.getString("maxBikeDurationToPt").isEmpty())) {
          urlBuilder.addQueryParameter("max_bike_duration_to_pt", escapeString(String.valueOf(params.getInt("maxBikeDurationToPt"))));
        }

        if (params.has("maxBssDurationToPt") && (!params.getString("maxBssDurationToPt").isEmpty())) {
          urlBuilder.addQueryParameter("max_bss_duration_to_pt", escapeString(String.valueOf(params.getInt("maxBssDurationToPt"))));
        }

        if (params.has("maxCarDurationToPt") && (!params.getString("maxCarDurationToPt").isEmpty())) {
          urlBuilder.addQueryParameter("max_car_duration_to_pt", escapeString(String.valueOf(params.getInt("maxCarDurationToPt"))));
        }

        if (params.has("maxRidesharingDurationToPt") && (!params.getString("maxRidesharingDurationToPt").isEmpty())) {
          urlBuilder.addQueryParameter("max_ridesharing_duration_to_pt", escapeString(String.valueOf(params.getInt("maxRidesharingDurationToPt"))));
        }

        if (params.has("maxCarNoParkDurationToPt") && (!params.getString("maxCarNoParkDurationToPt").isEmpty())) {
          urlBuilder.addQueryParameter("max_car_no_park_duration_to_pt", escapeString(String.valueOf(params.getInt("maxCarNoParkDurationToPt"))));
        }

        if (params.has("maxTaxiDurationToPt") && (!params.getString("maxTaxiDurationToPt").isEmpty())) {
          urlBuilder.addQueryParameter("max_taxi_duration_to_pt", escapeString(String.valueOf(params.getInt("maxTaxiDurationToPt"))));
        }

        if (params.has("walkingSpeed") && (!params.getString("walkingSpeed").isEmpty())) {
          urlBuilder.addQueryParameter("walking_speed", escapeString(String.valueOf(params.getLong("walkingSpeed"))));
        }

        if (params.has("bikeSpeed") && (!params.getString("bikeSpeed").isEmpty())) {
          urlBuilder.addQueryParameter("bike_speed", escapeString(String.valueOf(params.getLong("bikeSpeed"))));
        }

        if (params.has("bssSpeed") && (!params.getString("bssSpeed").isEmpty())) {
          urlBuilder.addQueryParameter("bss_speed", escapeString(String.valueOf(params.getLong("bssSpeed"))));
        }

        if (params.has("carSpeed") && (!params.getString("carSpeed").isEmpty())) {
          urlBuilder.addQueryParameter("car_speed", escapeString(String.valueOf(params.getLong("carSpeed"))));
        }

        if (params.has("ridesharingSpeed") && (!params.getString("ridesharingSpeed").isEmpty())) {
          urlBuilder.addQueryParameter("ridesharing_speed", escapeString(String.valueOf(params.getLong("ridesharingSpeed"))));
        }

        if (params.has("carNoParkSpeed") && (!params.getString("carNoParkSpeed").isEmpty())) {
          urlBuilder.addQueryParameter("car_no_park_speed", escapeString(String.valueOf(params.getLong("carNoParkSpeed"))));
        }

        if (params.has("taxiSpeed") && (!params.getString("taxiSpeed").isEmpty())) {
          urlBuilder.addQueryParameter("taxi_speed", escapeString(String.valueOf(params.getLong("taxiSpeed"))));
        }

        if (params.has("forbiddenUris") && (!params.getString("forbiddenUris").isEmpty())) {
          urlBuilder.addQueryParameter("forbidden_uris[]", escapeString(String.valueOf(params.getJSONArray("forbiddenUris"))));
        }

        if (params.has("allowedId") && (!params.getString("allowedId").isEmpty())) {
          urlBuilder.addQueryParameter("allowed_id[]", escapeString(String.valueOf(params.getJSONArray("allowedId"))));
        }

        if (params.has("disruptionActive") && (!params.getString("disruptionActive").isEmpty())) {
          urlBuilder.addQueryParameter("disruption_active", escapeString(String.valueOf(params.getBoolean("disruptionActive"))));
        }

        if (params.has("dataFreshness") && (!params.getString("dataFreshness").isEmpty())) {
          urlBuilder.addQueryParameter("data_freshness", escapeString(params.getString("dataFreshness")));
        }

        if (params.has("maxDuration") && (!params.getString("maxDuration").isEmpty())) {
          urlBuilder.addQueryParameter("max_duration", escapeString(String.valueOf(params.getInt("maxDuration"))));
        }

        if (params.has("wheelchair") && (!params.getString("wheelchair").isEmpty())) {
          urlBuilder.addQueryParameter("wheelchair", escapeString(String.valueOf(params.getBoolean("wheelchair"))));
        }

        if (params.has("travelerType") && (!params.getString("travelerType").isEmpty())) {
          urlBuilder.addQueryParameter("traveler_type", escapeString(params.getString("travelerType")));
        }

        if (params.has("directPath") && (!params.getString("directPath").isEmpty())) {
          urlBuilder.addQueryParameter("direct_path", escapeString(params.getString("directPath")));
        }

        if (params.has("freeRadiusFrom") && (!params.getString("freeRadiusFrom").isEmpty())) {
          urlBuilder.addQueryParameter("free_radius_from", escapeString(String.valueOf(params.getInt("freeRadiusFrom"))));
        }

        if (params.has("freeRadiusTo") && (!params.getString("freeRadiusTo").isEmpty())) {
          urlBuilder.addQueryParameter("free_radius_to", escapeString(String.valueOf(params.getInt("freeRadiusTo"))));
        }

        if (params.has("directPathMode") && (!params.getString("directPathMode").isEmpty())) {
          urlBuilder.addQueryParameter("direct_path_mode[]", escapeString(String.valueOf(params.getJSONArray("directPathMode"))));
        }

        if (params.has("partnerServices") && (!params.getString("partnerServices").isEmpty())) {
          urlBuilder.addQueryParameter("partner_services[]", escapeString(String.valueOf(params.getJSONArray("partnerServices"))));
        }

        if (params.has("minDuration") && (!params.getString("minDuration").isEmpty())) {
          urlBuilder.addQueryParameter("min_duration", escapeString(String.valueOf(params.getInt("minDuration"))));
        }

        if (params.has("boundaryDuration") && (!params.getString("boundaryDuration").isEmpty())) {
          urlBuilder.addQueryParameter("boundary_duration[]", escapeString(String.valueOf(params.getJSONArray("boundaryDuration"))));
        }

        HttpUrl url = urlBuilder
          .addPathSegments(path)
          .build();
        Request request = requestBuilder.url(url)
          .build();

        client.newCall(request).enqueue(new Callback() {

          @Override
          public void onFailure(@NonNull Call call, @NonNull IOException e) {
            String errorMessage = "Problem during request | " + String.valueOf(e.hashCode()) + ": " + e.getMessage();
            callbackContext.error(errorMessage);
          }

          @Override
          public void onResponse(@NonNull Call call, @NonNull Response response) {
            if (response.isSuccessful()) {
              try {
                JSONObject jsonObject = new JSONObject(Objects.requireNonNull(response.body()).string());
                callbackContext.success(jsonObject);
              } catch (Exception e) {
                String errorMessage = "Problem during response parsing";
                callbackContext.error(errorMessage);
              }
            } else {
              callbackContext.error("Unexpected code " + response.code() + " | message: " + response.message());
            }
          }
        });
      } catch (Exception e) {
        String errorMessage = "Problem during request building | " + e.hashCode() + ": " + e.getMessage();
        callbackContext.error(errorMessage);
      }
    });
  }

  private void coverageLonLatHeatMaps(final JSONObject params, final CallbackContext callbackContext) {
    cordova.getThreadPool().execute(() -> {
      try {
        HttpUrl.Builder urlBuilder = new HttpUrl.Builder()
          .scheme("https")
          .host("api.navitia.io")
          .addPathSegment("v1");
        Request.Builder requestBuilder = new Request.Builder()
          .header("Authorization", token);
        String path = "/coverage/{lon};{lat}/heat_maps".substring(1);

        if (params.has("lat") && (!params.getString("lat").isEmpty())) {
          path = path.replaceAll("\\{" + "lat" + "\\}", escapeString(String.valueOf(params.getLong("lat"))));
        }

        if (params.has("lon") && (!params.getString("lon").isEmpty())) {
          path = path.replaceAll("\\{" + "lon" + "\\}", escapeString(String.valueOf(params.getLong("lon"))));
        }

        if (params.has("from") && (!params.getString("from").isEmpty())) {
          urlBuilder.addQueryParameter("from", escapeString(params.getString("from")));
        }

        if (params.has("to") && (!params.getString("to").isEmpty())) {
          urlBuilder.addQueryParameter("to", escapeString(params.getString("to")));
        }

        if (params.has("datetime") && (!params.getString("datetime").isEmpty())) {
          urlBuilder.addQueryParameter("datetime", escapeString(String.valueOf(params.getString("datetime"))));
        }

        if (params.has("datetimeRepresents") && (!params.getString("datetimeRepresents").isEmpty())) {
          urlBuilder.addQueryParameter("datetime_represents", escapeString(params.getString("datetimeRepresents")));
        }

        if (params.has("maxNbTransfers") && (!params.getString("maxNbTransfers").isEmpty())) {
          urlBuilder.addQueryParameter("max_nb_transfers", escapeString(String.valueOf(params.getInt("maxNbTransfers"))));
        }

        if (params.has("minNbTransfers") && (!params.getString("minNbTransfers").isEmpty())) {
          urlBuilder.addQueryParameter("min_nb_transfers", escapeString(String.valueOf(params.getInt("minNbTransfers"))));
        }

        if (params.has("firstSectionMode") && (!params.getString("firstSectionMode").isEmpty())) {
          urlBuilder.addQueryParameter("first_section_mode[]", escapeString(String.valueOf(params.getJSONArray("firstSectionMode"))));
        }

        if (params.has("lastSectionMode") && (!params.getString("lastSectionMode").isEmpty())) {
          urlBuilder.addQueryParameter("last_section_mode[]", escapeString(String.valueOf(params.getJSONArray("lastSectionMode"))));
        }

        if (params.has("maxDurationToPt") && (!params.getString("maxDurationToPt").isEmpty())) {
          urlBuilder.addQueryParameter("max_duration_to_pt", escapeString(String.valueOf(params.getInt("maxDurationToPt"))));
        }

        if (params.has("maxWalkingDurationToPt") && (!params.getString("maxWalkingDurationToPt").isEmpty())) {
          urlBuilder.addQueryParameter("max_walking_duration_to_pt", escapeString(String.valueOf(params.getInt("maxWalkingDurationToPt"))));
        }

        if (params.has("maxBikeDurationToPt") && (!params.getString("maxBikeDurationToPt").isEmpty())) {
          urlBuilder.addQueryParameter("max_bike_duration_to_pt", escapeString(String.valueOf(params.getInt("maxBikeDurationToPt"))));
        }

        if (params.has("maxBssDurationToPt") && (!params.getString("maxBssDurationToPt").isEmpty())) {
          urlBuilder.addQueryParameter("max_bss_duration_to_pt", escapeString(String.valueOf(params.getInt("maxBssDurationToPt"))));
        }

        if (params.has("maxCarDurationToPt") && (!params.getString("maxCarDurationToPt").isEmpty())) {
          urlBuilder.addQueryParameter("max_car_duration_to_pt", escapeString(String.valueOf(params.getInt("maxCarDurationToPt"))));
        }

        if (params.has("maxRidesharingDurationToPt") && (!params.getString("maxRidesharingDurationToPt").isEmpty())) {
          urlBuilder.addQueryParameter("max_ridesharing_duration_to_pt", escapeString(String.valueOf(params.getInt("maxRidesharingDurationToPt"))));
        }

        if (params.has("maxCarNoParkDurationToPt") && (!params.getString("maxCarNoParkDurationToPt").isEmpty())) {
          urlBuilder.addQueryParameter("max_car_no_park_duration_to_pt", escapeString(String.valueOf(params.getInt("maxCarNoParkDurationToPt"))));
        }

        if (params.has("maxTaxiDurationToPt") && (!params.getString("maxTaxiDurationToPt").isEmpty())) {
          urlBuilder.addQueryParameter("max_taxi_duration_to_pt", escapeString(String.valueOf(params.getInt("maxTaxiDurationToPt"))));
        }

        if (params.has("walkingSpeed") && (!params.getString("walkingSpeed").isEmpty())) {
          urlBuilder.addQueryParameter("walking_speed", escapeString(String.valueOf(params.getLong("walkingSpeed"))));
        }

        if (params.has("bikeSpeed") && (!params.getString("bikeSpeed").isEmpty())) {
          urlBuilder.addQueryParameter("bike_speed", escapeString(String.valueOf(params.getLong("bikeSpeed"))));
        }

        if (params.has("bssSpeed") && (!params.getString("bssSpeed").isEmpty())) {
          urlBuilder.addQueryParameter("bss_speed", escapeString(String.valueOf(params.getLong("bssSpeed"))));
        }

        if (params.has("carSpeed") && (!params.getString("carSpeed").isEmpty())) {
          urlBuilder.addQueryParameter("car_speed", escapeString(String.valueOf(params.getLong("carSpeed"))));
        }

        if (params.has("ridesharingSpeed") && (!params.getString("ridesharingSpeed").isEmpty())) {
          urlBuilder.addQueryParameter("ridesharing_speed", escapeString(String.valueOf(params.getLong("ridesharingSpeed"))));
        }

        if (params.has("carNoParkSpeed") && (!params.getString("carNoParkSpeed").isEmpty())) {
          urlBuilder.addQueryParameter("car_no_park_speed", escapeString(String.valueOf(params.getLong("carNoParkSpeed"))));
        }

        if (params.has("taxiSpeed") && (!params.getString("taxiSpeed").isEmpty())) {
          urlBuilder.addQueryParameter("taxi_speed", escapeString(String.valueOf(params.getLong("taxiSpeed"))));
        }

        if (params.has("forbiddenUris") && (!params.getString("forbiddenUris").isEmpty())) {
          urlBuilder.addQueryParameter("forbidden_uris[]", escapeString(String.valueOf(params.getJSONArray("forbiddenUris"))));
        }

        if (params.has("allowedId") && (!params.getString("allowedId").isEmpty())) {
          urlBuilder.addQueryParameter("allowed_id[]", escapeString(String.valueOf(params.getJSONArray("allowedId"))));
        }

        if (params.has("disruptionActive") && (!params.getString("disruptionActive").isEmpty())) {
          urlBuilder.addQueryParameter("disruption_active", escapeString(String.valueOf(params.getBoolean("disruptionActive"))));
        }

        if (params.has("dataFreshness") && (!params.getString("dataFreshness").isEmpty())) {
          urlBuilder.addQueryParameter("data_freshness", escapeString(params.getString("dataFreshness")));
        }

        if (params.has("maxDuration") && (!params.getString("maxDuration").isEmpty())) {
          urlBuilder.addQueryParameter("max_duration", escapeString(String.valueOf(params.getInt("maxDuration"))));
        }

        if (params.has("wheelchair") && (!params.getString("wheelchair").isEmpty())) {
          urlBuilder.addQueryParameter("wheelchair", escapeString(String.valueOf(params.getBoolean("wheelchair"))));
        }

        if (params.has("travelerType") && (!params.getString("travelerType").isEmpty())) {
          urlBuilder.addQueryParameter("traveler_type", escapeString(params.getString("travelerType")));
        }

        if (params.has("directPath") && (!params.getString("directPath").isEmpty())) {
          urlBuilder.addQueryParameter("direct_path", escapeString(params.getString("directPath")));
        }

        if (params.has("freeRadiusFrom") && (!params.getString("freeRadiusFrom").isEmpty())) {
          urlBuilder.addQueryParameter("free_radius_from", escapeString(String.valueOf(params.getInt("freeRadiusFrom"))));
        }

        if (params.has("freeRadiusTo") && (!params.getString("freeRadiusTo").isEmpty())) {
          urlBuilder.addQueryParameter("free_radius_to", escapeString(String.valueOf(params.getInt("freeRadiusTo"))));
        }

        if (params.has("directPathMode") && (!params.getString("directPathMode").isEmpty())) {
          urlBuilder.addQueryParameter("direct_path_mode[]", escapeString(String.valueOf(params.getJSONArray("directPathMode"))));
        }

        if (params.has("partnerServices") && (!params.getString("partnerServices").isEmpty())) {
          urlBuilder.addQueryParameter("partner_services[]", escapeString(String.valueOf(params.getJSONArray("partnerServices"))));
        }

        if (params.has("resolution") && (!params.getString("resolution").isEmpty())) {
          urlBuilder.addQueryParameter("resolution", escapeString(String.valueOf(params.getInt("resolution"))));
        }

        HttpUrl url = urlBuilder
          .addPathSegments(path)
          .build();
        Request request = requestBuilder.url(url)
          .build();

        client.newCall(request).enqueue(new Callback() {

          @Override
          public void onFailure(@NonNull Call call, @NonNull IOException e) {
            String errorMessage = "Problem during request | " + String.valueOf(e.hashCode()) + ": " + e.getMessage();
            callbackContext.error(errorMessage);
          }

          @Override
          public void onResponse(@NonNull Call call, @NonNull Response response) {
            if (response.isSuccessful()) {
              try {
                JSONObject jsonObject = new JSONObject(Objects.requireNonNull(response.body()).string());
                callbackContext.success(jsonObject);
              } catch (Exception e) {
                String errorMessage = "Problem during response parsing";
                callbackContext.error(errorMessage);
              }
            } else {
              callbackContext.error("Unexpected code " + response.code() + " | message: " + response.message());
            }
          }
        });
      } catch (Exception e) {
        String errorMessage = "Problem during request building | " + e.hashCode() + ": " + e.getMessage();
        callbackContext.error(errorMessage);
      }
    });
  }

  private void coverageRegionHeatMaps(final JSONObject params, final CallbackContext callbackContext) {
    cordova.getThreadPool().execute(() -> {
      try {
        HttpUrl.Builder urlBuilder = new HttpUrl.Builder()
          .scheme("https")
          .host("api.navitia.io")
          .addPathSegment("v1");
        Request.Builder requestBuilder = new Request.Builder()
          .header("Authorization", token);
        String path = "/coverage/{region}/heat_maps".substring(1);

        if (params.has("region") && (!params.getString("region").isEmpty())) {
          path = path.replaceAll("\\{" + "region" + "\\}", escapeString(params.getString("region")));
        }

        if (params.has("from") && (!params.getString("from").isEmpty())) {
          urlBuilder.addQueryParameter("from", escapeString(params.getString("from")));
        }

        if (params.has("to") && (!params.getString("to").isEmpty())) {
          urlBuilder.addQueryParameter("to", escapeString(params.getString("to")));
        }

        if (params.has("datetime") && (!params.getString("datetime").isEmpty())) {
          urlBuilder.addQueryParameter("datetime", escapeString(String.valueOf(params.getString("datetime"))));
        }

        if (params.has("datetimeRepresents") && (!params.getString("datetimeRepresents").isEmpty())) {
          urlBuilder.addQueryParameter("datetime_represents", escapeString(params.getString("datetimeRepresents")));
        }

        if (params.has("maxNbTransfers") && (!params.getString("maxNbTransfers").isEmpty())) {
          urlBuilder.addQueryParameter("max_nb_transfers", escapeString(String.valueOf(params.getInt("maxNbTransfers"))));
        }

        if (params.has("minNbTransfers") && (!params.getString("minNbTransfers").isEmpty())) {
          urlBuilder.addQueryParameter("min_nb_transfers", escapeString(String.valueOf(params.getInt("minNbTransfers"))));
        }

        if (params.has("firstSectionMode") && (!params.getString("firstSectionMode").isEmpty())) {
          urlBuilder.addQueryParameter("first_section_mode[]", escapeString(String.valueOf(params.getJSONArray("firstSectionMode"))));
        }

        if (params.has("lastSectionMode") && (!params.getString("lastSectionMode").isEmpty())) {
          urlBuilder.addQueryParameter("last_section_mode[]", escapeString(String.valueOf(params.getJSONArray("lastSectionMode"))));
        }

        if (params.has("maxDurationToPt") && (!params.getString("maxDurationToPt").isEmpty())) {
          urlBuilder.addQueryParameter("max_duration_to_pt", escapeString(String.valueOf(params.getInt("maxDurationToPt"))));
        }

        if (params.has("maxWalkingDurationToPt") && (!params.getString("maxWalkingDurationToPt").isEmpty())) {
          urlBuilder.addQueryParameter("max_walking_duration_to_pt", escapeString(String.valueOf(params.getInt("maxWalkingDurationToPt"))));
        }

        if (params.has("maxBikeDurationToPt") && (!params.getString("maxBikeDurationToPt").isEmpty())) {
          urlBuilder.addQueryParameter("max_bike_duration_to_pt", escapeString(String.valueOf(params.getInt("maxBikeDurationToPt"))));
        }

        if (params.has("maxBssDurationToPt") && (!params.getString("maxBssDurationToPt").isEmpty())) {
          urlBuilder.addQueryParameter("max_bss_duration_to_pt", escapeString(String.valueOf(params.getInt("maxBssDurationToPt"))));
        }

        if (params.has("maxCarDurationToPt") && (!params.getString("maxCarDurationToPt").isEmpty())) {
          urlBuilder.addQueryParameter("max_car_duration_to_pt", escapeString(String.valueOf(params.getInt("maxCarDurationToPt"))));
        }

        if (params.has("maxRidesharingDurationToPt") && (!params.getString("maxRidesharingDurationToPt").isEmpty())) {
          urlBuilder.addQueryParameter("max_ridesharing_duration_to_pt", escapeString(String.valueOf(params.getInt("maxRidesharingDurationToPt"))));
        }

        if (params.has("maxCarNoParkDurationToPt") && (!params.getString("maxCarNoParkDurationToPt").isEmpty())) {
          urlBuilder.addQueryParameter("max_car_no_park_duration_to_pt", escapeString(String.valueOf(params.getInt("maxCarNoParkDurationToPt"))));
        }

        if (params.has("maxTaxiDurationToPt") && (!params.getString("maxTaxiDurationToPt").isEmpty())) {
          urlBuilder.addQueryParameter("max_taxi_duration_to_pt", escapeString(String.valueOf(params.getInt("maxTaxiDurationToPt"))));
        }

        if (params.has("walkingSpeed") && (!params.getString("walkingSpeed").isEmpty())) {
          urlBuilder.addQueryParameter("walking_speed", escapeString(String.valueOf(params.getLong("walkingSpeed"))));
        }

        if (params.has("bikeSpeed") && (!params.getString("bikeSpeed").isEmpty())) {
          urlBuilder.addQueryParameter("bike_speed", escapeString(String.valueOf(params.getLong("bikeSpeed"))));
        }

        if (params.has("bssSpeed") && (!params.getString("bssSpeed").isEmpty())) {
          urlBuilder.addQueryParameter("bss_speed", escapeString(String.valueOf(params.getLong("bssSpeed"))));
        }

        if (params.has("carSpeed") && (!params.getString("carSpeed").isEmpty())) {
          urlBuilder.addQueryParameter("car_speed", escapeString(String.valueOf(params.getLong("carSpeed"))));
        }

        if (params.has("ridesharingSpeed") && (!params.getString("ridesharingSpeed").isEmpty())) {
          urlBuilder.addQueryParameter("ridesharing_speed", escapeString(String.valueOf(params.getLong("ridesharingSpeed"))));
        }

        if (params.has("carNoParkSpeed") && (!params.getString("carNoParkSpeed").isEmpty())) {
          urlBuilder.addQueryParameter("car_no_park_speed", escapeString(String.valueOf(params.getLong("carNoParkSpeed"))));
        }

        if (params.has("taxiSpeed") && (!params.getString("taxiSpeed").isEmpty())) {
          urlBuilder.addQueryParameter("taxi_speed", escapeString(String.valueOf(params.getLong("taxiSpeed"))));
        }

        if (params.has("forbiddenUris") && (!params.getString("forbiddenUris").isEmpty())) {
          urlBuilder.addQueryParameter("forbidden_uris[]", escapeString(String.valueOf(params.getJSONArray("forbiddenUris"))));
        }

        if (params.has("allowedId") && (!params.getString("allowedId").isEmpty())) {
          urlBuilder.addQueryParameter("allowed_id[]", escapeString(String.valueOf(params.getJSONArray("allowedId"))));
        }

        if (params.has("disruptionActive") && (!params.getString("disruptionActive").isEmpty())) {
          urlBuilder.addQueryParameter("disruption_active", escapeString(String.valueOf(params.getBoolean("disruptionActive"))));
        }

        if (params.has("dataFreshness") && (!params.getString("dataFreshness").isEmpty())) {
          urlBuilder.addQueryParameter("data_freshness", escapeString(params.getString("dataFreshness")));
        }

        if (params.has("maxDuration") && (!params.getString("maxDuration").isEmpty())) {
          urlBuilder.addQueryParameter("max_duration", escapeString(String.valueOf(params.getInt("maxDuration"))));
        }

        if (params.has("wheelchair") && (!params.getString("wheelchair").isEmpty())) {
          urlBuilder.addQueryParameter("wheelchair", escapeString(String.valueOf(params.getBoolean("wheelchair"))));
        }

        if (params.has("travelerType") && (!params.getString("travelerType").isEmpty())) {
          urlBuilder.addQueryParameter("traveler_type", escapeString(params.getString("travelerType")));
        }

        if (params.has("directPath") && (!params.getString("directPath").isEmpty())) {
          urlBuilder.addQueryParameter("direct_path", escapeString(params.getString("directPath")));
        }

        if (params.has("freeRadiusFrom") && (!params.getString("freeRadiusFrom").isEmpty())) {
          urlBuilder.addQueryParameter("free_radius_from", escapeString(String.valueOf(params.getInt("freeRadiusFrom"))));
        }

        if (params.has("freeRadiusTo") && (!params.getString("freeRadiusTo").isEmpty())) {
          urlBuilder.addQueryParameter("free_radius_to", escapeString(String.valueOf(params.getInt("freeRadiusTo"))));
        }

        if (params.has("directPathMode") && (!params.getString("directPathMode").isEmpty())) {
          urlBuilder.addQueryParameter("direct_path_mode[]", escapeString(String.valueOf(params.getJSONArray("directPathMode"))));
        }

        if (params.has("partnerServices") && (!params.getString("partnerServices").isEmpty())) {
          urlBuilder.addQueryParameter("partner_services[]", escapeString(String.valueOf(params.getJSONArray("partnerServices"))));
        }

        if (params.has("resolution") && (!params.getString("resolution").isEmpty())) {
          urlBuilder.addQueryParameter("resolution", escapeString(String.valueOf(params.getInt("resolution"))));
        }

        HttpUrl url = urlBuilder
          .addPathSegments(path)
          .build();
        Request request = requestBuilder.url(url)
          .build();

        client.newCall(request).enqueue(new Callback() {

          @Override
          public void onFailure(@NonNull Call call, @NonNull IOException e) {
            String errorMessage = "Problem during request | " + String.valueOf(e.hashCode()) + ": " + e.getMessage();
            callbackContext.error(errorMessage);
          }

          @Override
          public void onResponse(@NonNull Call call, @NonNull Response response) {
            if (response.isSuccessful()) {
              try {
                JSONObject jsonObject = new JSONObject(Objects.requireNonNull(response.body()).string());
                callbackContext.success(jsonObject);
              } catch (Exception e) {
                String errorMessage = "Problem during response parsing";
                callbackContext.error(errorMessage);
              }
            } else {
              callbackContext.error("Unexpected code " + response.code() + " | message: " + response.message());
            }
          }
        });
      } catch (Exception e) {
        String errorMessage = "Problem during request building | " + e.hashCode() + ": " + e.getMessage();
        callbackContext.error(errorMessage);
      }
    });
  }

  private void coverageLonLatJourneyPatternPoints(final JSONObject params, final CallbackContext callbackContext) {
    cordova.getThreadPool().execute(() -> {
      try {
        HttpUrl.Builder urlBuilder = new HttpUrl.Builder()
          .scheme("https")
          .host("api.navitia.io")
          .addPathSegment("v1");
        Request.Builder requestBuilder = new Request.Builder()
          .header("Authorization", token);
        String path = "/coverage/{lon};{lat}/journey_pattern_points".substring(1);

        if (params.has("lat") && (!params.getString("lat").isEmpty())) {
          path = path.replaceAll("\\{" + "lat" + "\\}", escapeString(String.valueOf(params.getLong("lat"))));
        }

        if (params.has("lon") && (!params.getString("lon").isEmpty())) {
          path = path.replaceAll("\\{" + "lon" + "\\}", escapeString(String.valueOf(params.getLong("lon"))));
        }

        if (params.has("startPage") && (!params.getString("startPage").isEmpty())) {
          urlBuilder.addQueryParameter("start_page", escapeString(String.valueOf(params.getInt("startPage"))));
        }

        if (params.has("count") && (!params.getString("count").isEmpty())) {
          urlBuilder.addQueryParameter("count", escapeString(String.valueOf(params.getInt("count"))));
        }

        if (params.has("depth") && (!params.getString("depth").isEmpty())) {
          urlBuilder.addQueryParameter("depth", escapeString(String.valueOf(params.getInt("depth"))));
        }

        if (params.has("forbiddenId") && (!params.getString("forbiddenId").isEmpty())) {
          urlBuilder.addQueryParameter("forbidden_id[]", escapeString(String.valueOf(params.getJSONArray("forbiddenId"))));
        }

        if (params.has("forbiddenUris") && (!params.getString("forbiddenUris").isEmpty())) {
          urlBuilder.addQueryParameter("forbidden_uris[]", escapeString(String.valueOf(params.getJSONArray("forbiddenUris"))));
        }

        if (params.has("externalCode") && (!params.getString("externalCode").isEmpty())) {
          urlBuilder.addQueryParameter("external_code", escapeString(params.getString("externalCode")));
        }

        if (params.has("headsign") && (!params.getString("headsign").isEmpty())) {
          urlBuilder.addQueryParameter("headsign", escapeString(params.getString("headsign")));
        }

        if (params.has("showCodes") && (!params.getString("showCodes").isEmpty())) {
          urlBuilder.addQueryParameter("show_codes", escapeString(String.valueOf(params.getBoolean("showCodes"))));
        }

        if (params.has("odtLevel") && (!params.getString("odtLevel").isEmpty())) {
          urlBuilder.addQueryParameter("odt_level", escapeString(params.getString("odtLevel")));
        }

        if (params.has("dataFreshness") && (!params.getString("dataFreshness").isEmpty())) {
          urlBuilder.addQueryParameter("data_freshness", escapeString(params.getString("dataFreshness")));
        }

        if (params.has("distance") && (!params.getString("distance").isEmpty())) {
          urlBuilder.addQueryParameter("distance", escapeString(String.valueOf(params.getInt("distance"))));
        }

        if (params.has("since") && (!params.getString("since").isEmpty())) {
          urlBuilder.addQueryParameter("since", escapeString(String.valueOf(params.getString("since"))));
        }

        if (params.has("until") && (!params.getString("until").isEmpty())) {
          urlBuilder.addQueryParameter("until", escapeString(String.valueOf(params.getString("until"))));
        }

        if (params.has("disableGeojson") && (!params.getString("disableGeojson").isEmpty())) {
          urlBuilder.addQueryParameter("disable_geojson", escapeString(String.valueOf(params.getBoolean("disableGeojson"))));
        }

        if (params.has("disableDisruption") && (!params.getString("disableDisruption").isEmpty())) {
          urlBuilder.addQueryParameter("disable_disruption", escapeString(String.valueOf(params.getBoolean("disableDisruption"))));
        }

        if (params.has("filter") && (!params.getString("filter").isEmpty())) {
          urlBuilder.addQueryParameter("filter", escapeString(params.getString("filter")));
        }

        if (params.has("tags") && (!params.getString("tags").isEmpty())) {
          urlBuilder.addQueryParameter("tags[]", escapeString(String.valueOf(params.getJSONArray("tags"))));
        }

        HttpUrl url = urlBuilder
          .addPathSegments(path)
          .build();
        Request request = requestBuilder.url(url)
          .build();

        client.newCall(request).enqueue(new Callback() {

          @Override
          public void onFailure(@NonNull Call call, @NonNull IOException e) {
            String errorMessage = "Problem during request | " + String.valueOf(e.hashCode()) + ": " + e.getMessage();
            callbackContext.error(errorMessage);
          }

          @Override
          public void onResponse(@NonNull Call call, @NonNull Response response) {
            if (response.isSuccessful()) {
              try {
                JSONObject jsonObject = new JSONObject(Objects.requireNonNull(response.body()).string());
                callbackContext.success(jsonObject);
              } catch (Exception e) {
                String errorMessage = "Problem during response parsing";
                callbackContext.error(errorMessage);
              }
            } else {
              callbackContext.error("Unexpected code " + response.code() + " | message: " + response.message());
            }
          }
        });
      } catch (Exception e) {
        String errorMessage = "Problem during request building | " + e.hashCode() + ": " + e.getMessage();
        callbackContext.error(errorMessage);
      }
    });
  }

  private void coverageLonLatJourneyPatternPointsId(final JSONObject params, final CallbackContext callbackContext) {
    cordova.getThreadPool().execute(() -> {
      try {
        HttpUrl.Builder urlBuilder = new HttpUrl.Builder()
          .scheme("https")
          .host("api.navitia.io")
          .addPathSegment("v1");
        Request.Builder requestBuilder = new Request.Builder()
          .header("Authorization", token);
        String path = "/coverage/{lon};{lat}/journey_pattern_points/{id}".substring(1);

        if (params.has("lat") && (!params.getString("lat").isEmpty())) {
          path = path.replaceAll("\\{" + "lat" + "\\}", escapeString(String.valueOf(params.getLong("lat"))));
        }

        if (params.has("lon") && (!params.getString("lon").isEmpty())) {
          path = path.replaceAll("\\{" + "lon" + "\\}", escapeString(String.valueOf(params.getLong("lon"))));
        }

        if (params.has("id") && (!params.getString("id").isEmpty())) {
          path = path.replaceAll("\\{" + "id" + "\\}", escapeString(params.getString("id")));
        }

        if (params.has("startPage") && (!params.getString("startPage").isEmpty())) {
          urlBuilder.addQueryParameter("start_page", escapeString(String.valueOf(params.getInt("startPage"))));
        }

        if (params.has("count") && (!params.getString("count").isEmpty())) {
          urlBuilder.addQueryParameter("count", escapeString(String.valueOf(params.getInt("count"))));
        }

        if (params.has("depth") && (!params.getString("depth").isEmpty())) {
          urlBuilder.addQueryParameter("depth", escapeString(String.valueOf(params.getInt("depth"))));
        }

        if (params.has("forbiddenId") && (!params.getString("forbiddenId").isEmpty())) {
          urlBuilder.addQueryParameter("forbidden_id[]", escapeString(String.valueOf(params.getJSONArray("forbiddenId"))));
        }

        if (params.has("forbiddenUris") && (!params.getString("forbiddenUris").isEmpty())) {
          urlBuilder.addQueryParameter("forbidden_uris[]", escapeString(String.valueOf(params.getJSONArray("forbiddenUris"))));
        }

        if (params.has("externalCode") && (!params.getString("externalCode").isEmpty())) {
          urlBuilder.addQueryParameter("external_code", escapeString(params.getString("externalCode")));
        }

        if (params.has("headsign") && (!params.getString("headsign").isEmpty())) {
          urlBuilder.addQueryParameter("headsign", escapeString(params.getString("headsign")));
        }

        if (params.has("showCodes") && (!params.getString("showCodes").isEmpty())) {
          urlBuilder.addQueryParameter("show_codes", escapeString(String.valueOf(params.getBoolean("showCodes"))));
        }

        if (params.has("odtLevel") && (!params.getString("odtLevel").isEmpty())) {
          urlBuilder.addQueryParameter("odt_level", escapeString(params.getString("odtLevel")));
        }

        if (params.has("dataFreshness") && (!params.getString("dataFreshness").isEmpty())) {
          urlBuilder.addQueryParameter("data_freshness", escapeString(params.getString("dataFreshness")));
        }

        if (params.has("distance") && (!params.getString("distance").isEmpty())) {
          urlBuilder.addQueryParameter("distance", escapeString(String.valueOf(params.getInt("distance"))));
        }

        if (params.has("since") && (!params.getString("since").isEmpty())) {
          urlBuilder.addQueryParameter("since", escapeString(String.valueOf(params.getString("since"))));
        }

        if (params.has("until") && (!params.getString("until").isEmpty())) {
          urlBuilder.addQueryParameter("until", escapeString(String.valueOf(params.getString("until"))));
        }

        if (params.has("disableGeojson") && (!params.getString("disableGeojson").isEmpty())) {
          urlBuilder.addQueryParameter("disable_geojson", escapeString(String.valueOf(params.getBoolean("disableGeojson"))));
        }

        if (params.has("disableDisruption") && (!params.getString("disableDisruption").isEmpty())) {
          urlBuilder.addQueryParameter("disable_disruption", escapeString(String.valueOf(params.getBoolean("disableDisruption"))));
        }

        if (params.has("tags") && (!params.getString("tags").isEmpty())) {
          urlBuilder.addQueryParameter("tags[]", escapeString(String.valueOf(params.getJSONArray("tags"))));
        }

        HttpUrl url = urlBuilder
          .addPathSegments(path)
          .build();
        Request request = requestBuilder.url(url)
          .build();

        client.newCall(request).enqueue(new Callback() {

          @Override
          public void onFailure(@NonNull Call call, @NonNull IOException e) {
            String errorMessage = "Problem during request | " + String.valueOf(e.hashCode()) + ": " + e.getMessage();
            callbackContext.error(errorMessage);
          }

          @Override
          public void onResponse(@NonNull Call call, @NonNull Response response) {
            if (response.isSuccessful()) {
              try {
                JSONObject jsonObject = new JSONObject(Objects.requireNonNull(response.body()).string());
                callbackContext.success(jsonObject);
              } catch (Exception e) {
                String errorMessage = "Problem during response parsing";
                callbackContext.error(errorMessage);
              }
            } else {
              callbackContext.error("Unexpected code " + response.code() + " | message: " + response.message());
            }
          }
        });
      } catch (Exception e) {
        String errorMessage = "Problem during request building | " + e.hashCode() + ": " + e.getMessage();
        callbackContext.error(errorMessage);
      }
    });
  }

  private void coverageLonLatUriJourneyPatternPoints(final JSONObject params, final CallbackContext callbackContext) {
    cordova.getThreadPool().execute(() -> {
      try {
        HttpUrl.Builder urlBuilder = new HttpUrl.Builder()
          .scheme("https")
          .host("api.navitia.io")
          .addPathSegment("v1");
        Request.Builder requestBuilder = new Request.Builder()
          .header("Authorization", token);
        String path = "/coverage/{lon};{lat}/{uri}/journey_pattern_points".substring(1);

        if (params.has("lat") && (!params.getString("lat").isEmpty())) {
          path = path.replaceAll("\\{" + "lat" + "\\}", escapeString(String.valueOf(params.getLong("lat"))));
        }

        if (params.has("lon") && (!params.getString("lon").isEmpty())) {
          path = path.replaceAll("\\{" + "lon" + "\\}", escapeString(String.valueOf(params.getLong("lon"))));
        }

        if (params.has("uri") && (!params.getString("uri").isEmpty())) {
          path = path.replaceAll("\\{" + "uri" + "\\}", escapeString(params.getString("uri")));
        }

        if (params.has("startPage") && (!params.getString("startPage").isEmpty())) {
          urlBuilder.addQueryParameter("start_page", escapeString(String.valueOf(params.getInt("startPage"))));
        }

        if (params.has("count") && (!params.getString("count").isEmpty())) {
          urlBuilder.addQueryParameter("count", escapeString(String.valueOf(params.getInt("count"))));
        }

        if (params.has("depth") && (!params.getString("depth").isEmpty())) {
          urlBuilder.addQueryParameter("depth", escapeString(String.valueOf(params.getInt("depth"))));
        }

        if (params.has("forbiddenId") && (!params.getString("forbiddenId").isEmpty())) {
          urlBuilder.addQueryParameter("forbidden_id[]", escapeString(String.valueOf(params.getJSONArray("forbiddenId"))));
        }

        if (params.has("forbiddenUris") && (!params.getString("forbiddenUris").isEmpty())) {
          urlBuilder.addQueryParameter("forbidden_uris[]", escapeString(String.valueOf(params.getJSONArray("forbiddenUris"))));
        }

        if (params.has("externalCode") && (!params.getString("externalCode").isEmpty())) {
          urlBuilder.addQueryParameter("external_code", escapeString(params.getString("externalCode")));
        }

        if (params.has("headsign") && (!params.getString("headsign").isEmpty())) {
          urlBuilder.addQueryParameter("headsign", escapeString(params.getString("headsign")));
        }

        if (params.has("showCodes") && (!params.getString("showCodes").isEmpty())) {
          urlBuilder.addQueryParameter("show_codes", escapeString(String.valueOf(params.getBoolean("showCodes"))));
        }

        if (params.has("odtLevel") && (!params.getString("odtLevel").isEmpty())) {
          urlBuilder.addQueryParameter("odt_level", escapeString(params.getString("odtLevel")));
        }

        if (params.has("dataFreshness") && (!params.getString("dataFreshness").isEmpty())) {
          urlBuilder.addQueryParameter("data_freshness", escapeString(params.getString("dataFreshness")));
        }

        if (params.has("distance") && (!params.getString("distance").isEmpty())) {
          urlBuilder.addQueryParameter("distance", escapeString(String.valueOf(params.getInt("distance"))));
        }

        if (params.has("since") && (!params.getString("since").isEmpty())) {
          urlBuilder.addQueryParameter("since", escapeString(String.valueOf(params.getString("since"))));
        }

        if (params.has("until") && (!params.getString("until").isEmpty())) {
          urlBuilder.addQueryParameter("until", escapeString(String.valueOf(params.getString("until"))));
        }

        if (params.has("disableGeojson") && (!params.getString("disableGeojson").isEmpty())) {
          urlBuilder.addQueryParameter("disable_geojson", escapeString(String.valueOf(params.getBoolean("disableGeojson"))));
        }

        if (params.has("disableDisruption") && (!params.getString("disableDisruption").isEmpty())) {
          urlBuilder.addQueryParameter("disable_disruption", escapeString(String.valueOf(params.getBoolean("disableDisruption"))));
        }

        if (params.has("filter") && (!params.getString("filter").isEmpty())) {
          urlBuilder.addQueryParameter("filter", escapeString(params.getString("filter")));
        }

        if (params.has("tags") && (!params.getString("tags").isEmpty())) {
          urlBuilder.addQueryParameter("tags[]", escapeString(String.valueOf(params.getJSONArray("tags"))));
        }

        HttpUrl url = urlBuilder
          .addPathSegments(path)
          .build();
        Request request = requestBuilder.url(url)
          .build();

        client.newCall(request).enqueue(new Callback() {

          @Override
          public void onFailure(@NonNull Call call, @NonNull IOException e) {
            String errorMessage = "Problem during request | " + String.valueOf(e.hashCode()) + ": " + e.getMessage();
            callbackContext.error(errorMessage);
          }

          @Override
          public void onResponse(@NonNull Call call, @NonNull Response response) {
            if (response.isSuccessful()) {
              try {
                JSONObject jsonObject = new JSONObject(Objects.requireNonNull(response.body()).string());
                callbackContext.success(jsonObject);
              } catch (Exception e) {
                String errorMessage = "Problem during response parsing";
                callbackContext.error(errorMessage);
              }
            } else {
              callbackContext.error("Unexpected code " + response.code() + " | message: " + response.message());
            }
          }
        });
      } catch (Exception e) {
        String errorMessage = "Problem during request building | " + e.hashCode() + ": " + e.getMessage();
        callbackContext.error(errorMessage);
      }
    });
  }

  private void coverageLonLatUriJourneyPatternPointsId(final JSONObject params, final CallbackContext callbackContext) {
    cordova.getThreadPool().execute(() -> {
      try {
        HttpUrl.Builder urlBuilder = new HttpUrl.Builder()
          .scheme("https")
          .host("api.navitia.io")
          .addPathSegment("v1");
        Request.Builder requestBuilder = new Request.Builder()
          .header("Authorization", token);
        String path = "/coverage/{lon};{lat}/{uri}/journey_pattern_points/{id}".substring(1);

        if (params.has("lat") && (!params.getString("lat").isEmpty())) {
          path = path.replaceAll("\\{" + "lat" + "\\}", escapeString(String.valueOf(params.getLong("lat"))));
        }

        if (params.has("lon") && (!params.getString("lon").isEmpty())) {
          path = path.replaceAll("\\{" + "lon" + "\\}", escapeString(String.valueOf(params.getLong("lon"))));
        }

        if (params.has("uri") && (!params.getString("uri").isEmpty())) {
          path = path.replaceAll("\\{" + "uri" + "\\}", escapeString(params.getString("uri")));
        }

        if (params.has("id") && (!params.getString("id").isEmpty())) {
          path = path.replaceAll("\\{" + "id" + "\\}", escapeString(params.getString("id")));
        }

        if (params.has("startPage") && (!params.getString("startPage").isEmpty())) {
          urlBuilder.addQueryParameter("start_page", escapeString(String.valueOf(params.getInt("startPage"))));
        }

        if (params.has("count") && (!params.getString("count").isEmpty())) {
          urlBuilder.addQueryParameter("count", escapeString(String.valueOf(params.getInt("count"))));
        }

        if (params.has("depth") && (!params.getString("depth").isEmpty())) {
          urlBuilder.addQueryParameter("depth", escapeString(String.valueOf(params.getInt("depth"))));
        }

        if (params.has("forbiddenId") && (!params.getString("forbiddenId").isEmpty())) {
          urlBuilder.addQueryParameter("forbidden_id[]", escapeString(String.valueOf(params.getJSONArray("forbiddenId"))));
        }

        if (params.has("forbiddenUris") && (!params.getString("forbiddenUris").isEmpty())) {
          urlBuilder.addQueryParameter("forbidden_uris[]", escapeString(String.valueOf(params.getJSONArray("forbiddenUris"))));
        }

        if (params.has("externalCode") && (!params.getString("externalCode").isEmpty())) {
          urlBuilder.addQueryParameter("external_code", escapeString(params.getString("externalCode")));
        }

        if (params.has("headsign") && (!params.getString("headsign").isEmpty())) {
          urlBuilder.addQueryParameter("headsign", escapeString(params.getString("headsign")));
        }

        if (params.has("showCodes") && (!params.getString("showCodes").isEmpty())) {
          urlBuilder.addQueryParameter("show_codes", escapeString(String.valueOf(params.getBoolean("showCodes"))));
        }

        if (params.has("odtLevel") && (!params.getString("odtLevel").isEmpty())) {
          urlBuilder.addQueryParameter("odt_level", escapeString(params.getString("odtLevel")));
        }

        if (params.has("dataFreshness") && (!params.getString("dataFreshness").isEmpty())) {
          urlBuilder.addQueryParameter("data_freshness", escapeString(params.getString("dataFreshness")));
        }

        if (params.has("distance") && (!params.getString("distance").isEmpty())) {
          urlBuilder.addQueryParameter("distance", escapeString(String.valueOf(params.getInt("distance"))));
        }

        if (params.has("since") && (!params.getString("since").isEmpty())) {
          urlBuilder.addQueryParameter("since", escapeString(String.valueOf(params.getString("since"))));
        }

        if (params.has("until") && (!params.getString("until").isEmpty())) {
          urlBuilder.addQueryParameter("until", escapeString(String.valueOf(params.getString("until"))));
        }

        if (params.has("disableGeojson") && (!params.getString("disableGeojson").isEmpty())) {
          urlBuilder.addQueryParameter("disable_geojson", escapeString(String.valueOf(params.getBoolean("disableGeojson"))));
        }

        if (params.has("disableDisruption") && (!params.getString("disableDisruption").isEmpty())) {
          urlBuilder.addQueryParameter("disable_disruption", escapeString(String.valueOf(params.getBoolean("disableDisruption"))));
        }

        if (params.has("tags") && (!params.getString("tags").isEmpty())) {
          urlBuilder.addQueryParameter("tags[]", escapeString(String.valueOf(params.getJSONArray("tags"))));
        }

        HttpUrl url = urlBuilder
          .addPathSegments(path)
          .build();
        Request request = requestBuilder.url(url)
          .build();

        client.newCall(request).enqueue(new Callback() {

          @Override
          public void onFailure(@NonNull Call call, @NonNull IOException e) {
            String errorMessage = "Problem during request | " + String.valueOf(e.hashCode()) + ": " + e.getMessage();
            callbackContext.error(errorMessage);
          }

          @Override
          public void onResponse(@NonNull Call call, @NonNull Response response) {
            if (response.isSuccessful()) {
              try {
                JSONObject jsonObject = new JSONObject(Objects.requireNonNull(response.body()).string());
                callbackContext.success(jsonObject);
              } catch (Exception e) {
                String errorMessage = "Problem during response parsing";
                callbackContext.error(errorMessage);
              }
            } else {
              callbackContext.error("Unexpected code " + response.code() + " | message: " + response.message());
            }
          }
        });
      } catch (Exception e) {
        String errorMessage = "Problem during request building | " + e.hashCode() + ": " + e.getMessage();
        callbackContext.error(errorMessage);
      }
    });
  }

  private void coverageRegionJourneyPatternPoints(final JSONObject params, final CallbackContext callbackContext) {
    cordova.getThreadPool().execute(() -> {
      try {
        HttpUrl.Builder urlBuilder = new HttpUrl.Builder()
          .scheme("https")
          .host("api.navitia.io")
          .addPathSegment("v1");
        Request.Builder requestBuilder = new Request.Builder()
          .header("Authorization", token);
        String path = "/coverage/{region}/journey_pattern_points".substring(1);

        if (params.has("region") && (!params.getString("region").isEmpty())) {
          path = path.replaceAll("\\{" + "region" + "\\}", escapeString(params.getString("region")));
        }

        if (params.has("startPage") && (!params.getString("startPage").isEmpty())) {
          urlBuilder.addQueryParameter("start_page", escapeString(String.valueOf(params.getInt("startPage"))));
        }

        if (params.has("count") && (!params.getString("count").isEmpty())) {
          urlBuilder.addQueryParameter("count", escapeString(String.valueOf(params.getInt("count"))));
        }

        if (params.has("depth") && (!params.getString("depth").isEmpty())) {
          urlBuilder.addQueryParameter("depth", escapeString(String.valueOf(params.getInt("depth"))));
        }

        if (params.has("forbiddenId") && (!params.getString("forbiddenId").isEmpty())) {
          urlBuilder.addQueryParameter("forbidden_id[]", escapeString(String.valueOf(params.getJSONArray("forbiddenId"))));
        }

        if (params.has("forbiddenUris") && (!params.getString("forbiddenUris").isEmpty())) {
          urlBuilder.addQueryParameter("forbidden_uris[]", escapeString(String.valueOf(params.getJSONArray("forbiddenUris"))));
        }

        if (params.has("externalCode") && (!params.getString("externalCode").isEmpty())) {
          urlBuilder.addQueryParameter("external_code", escapeString(params.getString("externalCode")));
        }

        if (params.has("headsign") && (!params.getString("headsign").isEmpty())) {
          urlBuilder.addQueryParameter("headsign", escapeString(params.getString("headsign")));
        }

        if (params.has("showCodes") && (!params.getString("showCodes").isEmpty())) {
          urlBuilder.addQueryParameter("show_codes", escapeString(String.valueOf(params.getBoolean("showCodes"))));
        }

        if (params.has("odtLevel") && (!params.getString("odtLevel").isEmpty())) {
          urlBuilder.addQueryParameter("odt_level", escapeString(params.getString("odtLevel")));
        }

        if (params.has("dataFreshness") && (!params.getString("dataFreshness").isEmpty())) {
          urlBuilder.addQueryParameter("data_freshness", escapeString(params.getString("dataFreshness")));
        }

        if (params.has("distance") && (!params.getString("distance").isEmpty())) {
          urlBuilder.addQueryParameter("distance", escapeString(String.valueOf(params.getInt("distance"))));
        }

        if (params.has("since") && (!params.getString("since").isEmpty())) {
          urlBuilder.addQueryParameter("since", escapeString(String.valueOf(params.getString("since"))));
        }

        if (params.has("until") && (!params.getString("until").isEmpty())) {
          urlBuilder.addQueryParameter("until", escapeString(String.valueOf(params.getString("until"))));
        }

        if (params.has("disableGeojson") && (!params.getString("disableGeojson").isEmpty())) {
          urlBuilder.addQueryParameter("disable_geojson", escapeString(String.valueOf(params.getBoolean("disableGeojson"))));
        }

        if (params.has("disableDisruption") && (!params.getString("disableDisruption").isEmpty())) {
          urlBuilder.addQueryParameter("disable_disruption", escapeString(String.valueOf(params.getBoolean("disableDisruption"))));
        }

        if (params.has("filter") && (!params.getString("filter").isEmpty())) {
          urlBuilder.addQueryParameter("filter", escapeString(params.getString("filter")));
        }

        if (params.has("tags") && (!params.getString("tags").isEmpty())) {
          urlBuilder.addQueryParameter("tags[]", escapeString(String.valueOf(params.getJSONArray("tags"))));
        }

        HttpUrl url = urlBuilder
          .addPathSegments(path)
          .build();
        Request request = requestBuilder.url(url)
          .build();

        client.newCall(request).enqueue(new Callback() {

          @Override
          public void onFailure(@NonNull Call call, @NonNull IOException e) {
            String errorMessage = "Problem during request | " + String.valueOf(e.hashCode()) + ": " + e.getMessage();
            callbackContext.error(errorMessage);
          }

          @Override
          public void onResponse(@NonNull Call call, @NonNull Response response) {
            if (response.isSuccessful()) {
              try {
                JSONObject jsonObject = new JSONObject(Objects.requireNonNull(response.body()).string());
                callbackContext.success(jsonObject);
              } catch (Exception e) {
                String errorMessage = "Problem during response parsing";
                callbackContext.error(errorMessage);
              }
            } else {
              callbackContext.error("Unexpected code " + response.code() + " | message: " + response.message());
            }
          }
        });
      } catch (Exception e) {
        String errorMessage = "Problem during request building | " + e.hashCode() + ": " + e.getMessage();
        callbackContext.error(errorMessage);
      }
    });
  }

  private void coverageRegionJourneyPatternPointsId(final JSONObject params, final CallbackContext callbackContext) {
    cordova.getThreadPool().execute(() -> {
      try {
        HttpUrl.Builder urlBuilder = new HttpUrl.Builder()
          .scheme("https")
          .host("api.navitia.io")
          .addPathSegment("v1");
        Request.Builder requestBuilder = new Request.Builder()
          .header("Authorization", token);
        String path = "/coverage/{region}/journey_pattern_points/{id}".substring(1);

        if (params.has("region") && (!params.getString("region").isEmpty())) {
          path = path.replaceAll("\\{" + "region" + "\\}", escapeString(params.getString("region")));
        }

        if (params.has("id") && (!params.getString("id").isEmpty())) {
          path = path.replaceAll("\\{" + "id" + "\\}", escapeString(params.getString("id")));
        }

        if (params.has("startPage") && (!params.getString("startPage").isEmpty())) {
          urlBuilder.addQueryParameter("start_page", escapeString(String.valueOf(params.getInt("startPage"))));
        }

        if (params.has("count") && (!params.getString("count").isEmpty())) {
          urlBuilder.addQueryParameter("count", escapeString(String.valueOf(params.getInt("count"))));
        }

        if (params.has("depth") && (!params.getString("depth").isEmpty())) {
          urlBuilder.addQueryParameter("depth", escapeString(String.valueOf(params.getInt("depth"))));
        }

        if (params.has("forbiddenId") && (!params.getString("forbiddenId").isEmpty())) {
          urlBuilder.addQueryParameter("forbidden_id[]", escapeString(String.valueOf(params.getJSONArray("forbiddenId"))));
        }

        if (params.has("forbiddenUris") && (!params.getString("forbiddenUris").isEmpty())) {
          urlBuilder.addQueryParameter("forbidden_uris[]", escapeString(String.valueOf(params.getJSONArray("forbiddenUris"))));
        }

        if (params.has("externalCode") && (!params.getString("externalCode").isEmpty())) {
          urlBuilder.addQueryParameter("external_code", escapeString(params.getString("externalCode")));
        }

        if (params.has("headsign") && (!params.getString("headsign").isEmpty())) {
          urlBuilder.addQueryParameter("headsign", escapeString(params.getString("headsign")));
        }

        if (params.has("showCodes") && (!params.getString("showCodes").isEmpty())) {
          urlBuilder.addQueryParameter("show_codes", escapeString(String.valueOf(params.getBoolean("showCodes"))));
        }

        if (params.has("odtLevel") && (!params.getString("odtLevel").isEmpty())) {
          urlBuilder.addQueryParameter("odt_level", escapeString(params.getString("odtLevel")));
        }

        if (params.has("dataFreshness") && (!params.getString("dataFreshness").isEmpty())) {
          urlBuilder.addQueryParameter("data_freshness", escapeString(params.getString("dataFreshness")));
        }

        if (params.has("distance") && (!params.getString("distance").isEmpty())) {
          urlBuilder.addQueryParameter("distance", escapeString(String.valueOf(params.getInt("distance"))));
        }

        if (params.has("since") && (!params.getString("since").isEmpty())) {
          urlBuilder.addQueryParameter("since", escapeString(String.valueOf(params.getString("since"))));
        }

        if (params.has("until") && (!params.getString("until").isEmpty())) {
          urlBuilder.addQueryParameter("until", escapeString(String.valueOf(params.getString("until"))));
        }

        if (params.has("disableGeojson") && (!params.getString("disableGeojson").isEmpty())) {
          urlBuilder.addQueryParameter("disable_geojson", escapeString(String.valueOf(params.getBoolean("disableGeojson"))));
        }

        if (params.has("disableDisruption") && (!params.getString("disableDisruption").isEmpty())) {
          urlBuilder.addQueryParameter("disable_disruption", escapeString(String.valueOf(params.getBoolean("disableDisruption"))));
        }

        if (params.has("tags") && (!params.getString("tags").isEmpty())) {
          urlBuilder.addQueryParameter("tags[]", escapeString(String.valueOf(params.getJSONArray("tags"))));
        }

        HttpUrl url = urlBuilder
          .addPathSegments(path)
          .build();
        Request request = requestBuilder.url(url)
          .build();

        client.newCall(request).enqueue(new Callback() {

          @Override
          public void onFailure(@NonNull Call call, @NonNull IOException e) {
            String errorMessage = "Problem during request | " + String.valueOf(e.hashCode()) + ": " + e.getMessage();
            callbackContext.error(errorMessage);
          }

          @Override
          public void onResponse(@NonNull Call call, @NonNull Response response) {
            if (response.isSuccessful()) {
              try {
                JSONObject jsonObject = new JSONObject(Objects.requireNonNull(response.body()).string());
                callbackContext.success(jsonObject);
              } catch (Exception e) {
                String errorMessage = "Problem during response parsing";
                callbackContext.error(errorMessage);
              }
            } else {
              callbackContext.error("Unexpected code " + response.code() + " | message: " + response.message());
            }
          }
        });
      } catch (Exception e) {
        String errorMessage = "Problem during request building | " + e.hashCode() + ": " + e.getMessage();
        callbackContext.error(errorMessage);
      }
    });
  }

  private void coverageRegionUriJourneyPatternPoints(final JSONObject params, final CallbackContext callbackContext) {
    cordova.getThreadPool().execute(() -> {
      try {
        HttpUrl.Builder urlBuilder = new HttpUrl.Builder()
          .scheme("https")
          .host("api.navitia.io")
          .addPathSegment("v1");
        Request.Builder requestBuilder = new Request.Builder()
          .header("Authorization", token);
        String path = "/coverage/{region}/{uri}/journey_pattern_points".substring(1);

        if (params.has("region") && (!params.getString("region").isEmpty())) {
          path = path.replaceAll("\\{" + "region" + "\\}", escapeString(params.getString("region")));
        }

        if (params.has("uri") && (!params.getString("uri").isEmpty())) {
          path = path.replaceAll("\\{" + "uri" + "\\}", escapeString(params.getString("uri")));
        }

        if (params.has("startPage") && (!params.getString("startPage").isEmpty())) {
          urlBuilder.addQueryParameter("start_page", escapeString(String.valueOf(params.getInt("startPage"))));
        }

        if (params.has("count") && (!params.getString("count").isEmpty())) {
          urlBuilder.addQueryParameter("count", escapeString(String.valueOf(params.getInt("count"))));
        }

        if (params.has("depth") && (!params.getString("depth").isEmpty())) {
          urlBuilder.addQueryParameter("depth", escapeString(String.valueOf(params.getInt("depth"))));
        }

        if (params.has("forbiddenId") && (!params.getString("forbiddenId").isEmpty())) {
          urlBuilder.addQueryParameter("forbidden_id[]", escapeString(String.valueOf(params.getJSONArray("forbiddenId"))));
        }

        if (params.has("forbiddenUris") && (!params.getString("forbiddenUris").isEmpty())) {
          urlBuilder.addQueryParameter("forbidden_uris[]", escapeString(String.valueOf(params.getJSONArray("forbiddenUris"))));
        }

        if (params.has("externalCode") && (!params.getString("externalCode").isEmpty())) {
          urlBuilder.addQueryParameter("external_code", escapeString(params.getString("externalCode")));
        }

        if (params.has("headsign") && (!params.getString("headsign").isEmpty())) {
          urlBuilder.addQueryParameter("headsign", escapeString(params.getString("headsign")));
        }

        if (params.has("showCodes") && (!params.getString("showCodes").isEmpty())) {
          urlBuilder.addQueryParameter("show_codes", escapeString(String.valueOf(params.getBoolean("showCodes"))));
        }

        if (params.has("odtLevel") && (!params.getString("odtLevel").isEmpty())) {
          urlBuilder.addQueryParameter("odt_level", escapeString(params.getString("odtLevel")));
        }

        if (params.has("dataFreshness") && (!params.getString("dataFreshness").isEmpty())) {
          urlBuilder.addQueryParameter("data_freshness", escapeString(params.getString("dataFreshness")));
        }

        if (params.has("distance") && (!params.getString("distance").isEmpty())) {
          urlBuilder.addQueryParameter("distance", escapeString(String.valueOf(params.getInt("distance"))));
        }

        if (params.has("since") && (!params.getString("since").isEmpty())) {
          urlBuilder.addQueryParameter("since", escapeString(String.valueOf(params.getString("since"))));
        }

        if (params.has("until") && (!params.getString("until").isEmpty())) {
          urlBuilder.addQueryParameter("until", escapeString(String.valueOf(params.getString("until"))));
        }

        if (params.has("disableGeojson") && (!params.getString("disableGeojson").isEmpty())) {
          urlBuilder.addQueryParameter("disable_geojson", escapeString(String.valueOf(params.getBoolean("disableGeojson"))));
        }

        if (params.has("disableDisruption") && (!params.getString("disableDisruption").isEmpty())) {
          urlBuilder.addQueryParameter("disable_disruption", escapeString(String.valueOf(params.getBoolean("disableDisruption"))));
        }

        if (params.has("filter") && (!params.getString("filter").isEmpty())) {
          urlBuilder.addQueryParameter("filter", escapeString(params.getString("filter")));
        }

        if (params.has("tags") && (!params.getString("tags").isEmpty())) {
          urlBuilder.addQueryParameter("tags[]", escapeString(String.valueOf(params.getJSONArray("tags"))));
        }

        HttpUrl url = urlBuilder
          .addPathSegments(path)
          .build();
        Request request = requestBuilder.url(url)
          .build();

        client.newCall(request).enqueue(new Callback() {

          @Override
          public void onFailure(@NonNull Call call, @NonNull IOException e) {
            String errorMessage = "Problem during request | " + String.valueOf(e.hashCode()) + ": " + e.getMessage();
            callbackContext.error(errorMessage);
          }

          @Override
          public void onResponse(@NonNull Call call, @NonNull Response response) {
            if (response.isSuccessful()) {
              try {
                JSONObject jsonObject = new JSONObject(Objects.requireNonNull(response.body()).string());
                callbackContext.success(jsonObject);
              } catch (Exception e) {
                String errorMessage = "Problem during response parsing";
                callbackContext.error(errorMessage);
              }
            } else {
              callbackContext.error("Unexpected code " + response.code() + " | message: " + response.message());
            }
          }
        });
      } catch (Exception e) {
        String errorMessage = "Problem during request building | " + e.hashCode() + ": " + e.getMessage();
        callbackContext.error(errorMessage);
      }
    });
  }

  private void coverageRegionUriJourneyPatternPointsId(final JSONObject params, final CallbackContext callbackContext) {
    cordova.getThreadPool().execute(() -> {
      try {
        HttpUrl.Builder urlBuilder = new HttpUrl.Builder()
          .scheme("https")
          .host("api.navitia.io")
          .addPathSegment("v1");
        Request.Builder requestBuilder = new Request.Builder()
          .header("Authorization", token);
        String path = "/coverage/{region}/{uri}/journey_pattern_points/{id}".substring(1);

        if (params.has("region") && (!params.getString("region").isEmpty())) {
          path = path.replaceAll("\\{" + "region" + "\\}", escapeString(params.getString("region")));
        }

        if (params.has("uri") && (!params.getString("uri").isEmpty())) {
          path = path.replaceAll("\\{" + "uri" + "\\}", escapeString(params.getString("uri")));
        }

        if (params.has("id") && (!params.getString("id").isEmpty())) {
          path = path.replaceAll("\\{" + "id" + "\\}", escapeString(params.getString("id")));
        }

        if (params.has("startPage") && (!params.getString("startPage").isEmpty())) {
          urlBuilder.addQueryParameter("start_page", escapeString(String.valueOf(params.getInt("startPage"))));
        }

        if (params.has("count") && (!params.getString("count").isEmpty())) {
          urlBuilder.addQueryParameter("count", escapeString(String.valueOf(params.getInt("count"))));
        }

        if (params.has("depth") && (!params.getString("depth").isEmpty())) {
          urlBuilder.addQueryParameter("depth", escapeString(String.valueOf(params.getInt("depth"))));
        }

        if (params.has("forbiddenId") && (!params.getString("forbiddenId").isEmpty())) {
          urlBuilder.addQueryParameter("forbidden_id[]", escapeString(String.valueOf(params.getJSONArray("forbiddenId"))));
        }

        if (params.has("forbiddenUris") && (!params.getString("forbiddenUris").isEmpty())) {
          urlBuilder.addQueryParameter("forbidden_uris[]", escapeString(String.valueOf(params.getJSONArray("forbiddenUris"))));
        }

        if (params.has("externalCode") && (!params.getString("externalCode").isEmpty())) {
          urlBuilder.addQueryParameter("external_code", escapeString(params.getString("externalCode")));
        }

        if (params.has("headsign") && (!params.getString("headsign").isEmpty())) {
          urlBuilder.addQueryParameter("headsign", escapeString(params.getString("headsign")));
        }

        if (params.has("showCodes") && (!params.getString("showCodes").isEmpty())) {
          urlBuilder.addQueryParameter("show_codes", escapeString(String.valueOf(params.getBoolean("showCodes"))));
        }

        if (params.has("odtLevel") && (!params.getString("odtLevel").isEmpty())) {
          urlBuilder.addQueryParameter("odt_level", escapeString(params.getString("odtLevel")));
        }

        if (params.has("dataFreshness") && (!params.getString("dataFreshness").isEmpty())) {
          urlBuilder.addQueryParameter("data_freshness", escapeString(params.getString("dataFreshness")));
        }

        if (params.has("distance") && (!params.getString("distance").isEmpty())) {
          urlBuilder.addQueryParameter("distance", escapeString(String.valueOf(params.getInt("distance"))));
        }

        if (params.has("since") && (!params.getString("since").isEmpty())) {
          urlBuilder.addQueryParameter("since", escapeString(String.valueOf(params.getString("since"))));
        }

        if (params.has("until") && (!params.getString("until").isEmpty())) {
          urlBuilder.addQueryParameter("until", escapeString(String.valueOf(params.getString("until"))));
        }

        if (params.has("disableGeojson") && (!params.getString("disableGeojson").isEmpty())) {
          urlBuilder.addQueryParameter("disable_geojson", escapeString(String.valueOf(params.getBoolean("disableGeojson"))));
        }

        if (params.has("disableDisruption") && (!params.getString("disableDisruption").isEmpty())) {
          urlBuilder.addQueryParameter("disable_disruption", escapeString(String.valueOf(params.getBoolean("disableDisruption"))));
        }

        if (params.has("tags") && (!params.getString("tags").isEmpty())) {
          urlBuilder.addQueryParameter("tags[]", escapeString(String.valueOf(params.getJSONArray("tags"))));
        }

        HttpUrl url = urlBuilder
          .addPathSegments(path)
          .build();
        Request request = requestBuilder.url(url)
          .build();

        client.newCall(request).enqueue(new Callback() {

          @Override
          public void onFailure(@NonNull Call call, @NonNull IOException e) {
            String errorMessage = "Problem during request | " + String.valueOf(e.hashCode()) + ": " + e.getMessage();
            callbackContext.error(errorMessage);
          }

          @Override
          public void onResponse(@NonNull Call call, @NonNull Response response) {
            if (response.isSuccessful()) {
              try {
                JSONObject jsonObject = new JSONObject(Objects.requireNonNull(response.body()).string());
                callbackContext.success(jsonObject);
              } catch (Exception e) {
                String errorMessage = "Problem during response parsing";
                callbackContext.error(errorMessage);
              }
            } else {
              callbackContext.error("Unexpected code " + response.code() + " | message: " + response.message());
            }
          }
        });
      } catch (Exception e) {
        String errorMessage = "Problem during request building | " + e.hashCode() + ": " + e.getMessage();
        callbackContext.error(errorMessage);
      }
    });
  }

  private void coverageLonLatJourneyPatterns(final JSONObject params, final CallbackContext callbackContext) {
    cordova.getThreadPool().execute(() -> {
      try {
        HttpUrl.Builder urlBuilder = new HttpUrl.Builder()
          .scheme("https")
          .host("api.navitia.io")
          .addPathSegment("v1");
        Request.Builder requestBuilder = new Request.Builder()
          .header("Authorization", token);
        String path = "/coverage/{lon};{lat}/journey_patterns".substring(1);

        if (params.has("lat") && (!params.getString("lat").isEmpty())) {
          path = path.replaceAll("\\{" + "lat" + "\\}", escapeString(String.valueOf(params.getLong("lat"))));
        }

        if (params.has("lon") && (!params.getString("lon").isEmpty())) {
          path = path.replaceAll("\\{" + "lon" + "\\}", escapeString(String.valueOf(params.getLong("lon"))));
        }

        if (params.has("startPage") && (!params.getString("startPage").isEmpty())) {
          urlBuilder.addQueryParameter("start_page", escapeString(String.valueOf(params.getInt("startPage"))));
        }

        if (params.has("count") && (!params.getString("count").isEmpty())) {
          urlBuilder.addQueryParameter("count", escapeString(String.valueOf(params.getInt("count"))));
        }

        if (params.has("depth") && (!params.getString("depth").isEmpty())) {
          urlBuilder.addQueryParameter("depth", escapeString(String.valueOf(params.getInt("depth"))));
        }

        if (params.has("forbiddenId") && (!params.getString("forbiddenId").isEmpty())) {
          urlBuilder.addQueryParameter("forbidden_id[]", escapeString(String.valueOf(params.getJSONArray("forbiddenId"))));
        }

        if (params.has("forbiddenUris") && (!params.getString("forbiddenUris").isEmpty())) {
          urlBuilder.addQueryParameter("forbidden_uris[]", escapeString(String.valueOf(params.getJSONArray("forbiddenUris"))));
        }

        if (params.has("externalCode") && (!params.getString("externalCode").isEmpty())) {
          urlBuilder.addQueryParameter("external_code", escapeString(params.getString("externalCode")));
        }

        if (params.has("headsign") && (!params.getString("headsign").isEmpty())) {
          urlBuilder.addQueryParameter("headsign", escapeString(params.getString("headsign")));
        }

        if (params.has("showCodes") && (!params.getString("showCodes").isEmpty())) {
          urlBuilder.addQueryParameter("show_codes", escapeString(String.valueOf(params.getBoolean("showCodes"))));
        }

        if (params.has("odtLevel") && (!params.getString("odtLevel").isEmpty())) {
          urlBuilder.addQueryParameter("odt_level", escapeString(params.getString("odtLevel")));
        }

        if (params.has("dataFreshness") && (!params.getString("dataFreshness").isEmpty())) {
          urlBuilder.addQueryParameter("data_freshness", escapeString(params.getString("dataFreshness")));
        }

        if (params.has("distance") && (!params.getString("distance").isEmpty())) {
          urlBuilder.addQueryParameter("distance", escapeString(String.valueOf(params.getInt("distance"))));
        }

        if (params.has("since") && (!params.getString("since").isEmpty())) {
          urlBuilder.addQueryParameter("since", escapeString(String.valueOf(params.getString("since"))));
        }

        if (params.has("until") && (!params.getString("until").isEmpty())) {
          urlBuilder.addQueryParameter("until", escapeString(String.valueOf(params.getString("until"))));
        }

        if (params.has("disableGeojson") && (!params.getString("disableGeojson").isEmpty())) {
          urlBuilder.addQueryParameter("disable_geojson", escapeString(String.valueOf(params.getBoolean("disableGeojson"))));
        }

        if (params.has("disableDisruption") && (!params.getString("disableDisruption").isEmpty())) {
          urlBuilder.addQueryParameter("disable_disruption", escapeString(String.valueOf(params.getBoolean("disableDisruption"))));
        }

        if (params.has("filter") && (!params.getString("filter").isEmpty())) {
          urlBuilder.addQueryParameter("filter", escapeString(params.getString("filter")));
        }

        if (params.has("tags") && (!params.getString("tags").isEmpty())) {
          urlBuilder.addQueryParameter("tags[]", escapeString(String.valueOf(params.getJSONArray("tags"))));
        }

        HttpUrl url = urlBuilder
          .addPathSegments(path)
          .build();
        Request request = requestBuilder.url(url)
          .build();

        client.newCall(request).enqueue(new Callback() {

          @Override
          public void onFailure(@NonNull Call call, @NonNull IOException e) {
            String errorMessage = "Problem during request | " + String.valueOf(e.hashCode()) + ": " + e.getMessage();
            callbackContext.error(errorMessage);
          }

          @Override
          public void onResponse(@NonNull Call call, @NonNull Response response) {
            if (response.isSuccessful()) {
              try {
                JSONObject jsonObject = new JSONObject(Objects.requireNonNull(response.body()).string());
                callbackContext.success(jsonObject);
              } catch (Exception e) {
                String errorMessage = "Problem during response parsing";
                callbackContext.error(errorMessage);
              }
            } else {
              callbackContext.error("Unexpected code " + response.code() + " | message: " + response.message());
            }
          }
        });
      } catch (Exception e) {
        String errorMessage = "Problem during request building | " + e.hashCode() + ": " + e.getMessage();
        callbackContext.error(errorMessage);
      }
    });
  }

  private void coverageLonLatJourneyPatternsId(final JSONObject params, final CallbackContext callbackContext) {
    cordova.getThreadPool().execute(() -> {
      try {
        HttpUrl.Builder urlBuilder = new HttpUrl.Builder()
          .scheme("https")
          .host("api.navitia.io")
          .addPathSegment("v1");
        Request.Builder requestBuilder = new Request.Builder()
          .header("Authorization", token);
        String path = "/coverage/{lon};{lat}/journey_patterns/{id}".substring(1);

        if (params.has("lat") && (!params.getString("lat").isEmpty())) {
          path = path.replaceAll("\\{" + "lat" + "\\}", escapeString(String.valueOf(params.getLong("lat"))));
        }

        if (params.has("lon") && (!params.getString("lon").isEmpty())) {
          path = path.replaceAll("\\{" + "lon" + "\\}", escapeString(String.valueOf(params.getLong("lon"))));
        }

        if (params.has("id") && (!params.getString("id").isEmpty())) {
          path = path.replaceAll("\\{" + "id" + "\\}", escapeString(params.getString("id")));
        }

        if (params.has("startPage") && (!params.getString("startPage").isEmpty())) {
          urlBuilder.addQueryParameter("start_page", escapeString(String.valueOf(params.getInt("startPage"))));
        }

        if (params.has("count") && (!params.getString("count").isEmpty())) {
          urlBuilder.addQueryParameter("count", escapeString(String.valueOf(params.getInt("count"))));
        }

        if (params.has("depth") && (!params.getString("depth").isEmpty())) {
          urlBuilder.addQueryParameter("depth", escapeString(String.valueOf(params.getInt("depth"))));
        }

        if (params.has("forbiddenId") && (!params.getString("forbiddenId").isEmpty())) {
          urlBuilder.addQueryParameter("forbidden_id[]", escapeString(String.valueOf(params.getJSONArray("forbiddenId"))));
        }

        if (params.has("forbiddenUris") && (!params.getString("forbiddenUris").isEmpty())) {
          urlBuilder.addQueryParameter("forbidden_uris[]", escapeString(String.valueOf(params.getJSONArray("forbiddenUris"))));
        }

        if (params.has("externalCode") && (!params.getString("externalCode").isEmpty())) {
          urlBuilder.addQueryParameter("external_code", escapeString(params.getString("externalCode")));
        }

        if (params.has("headsign") && (!params.getString("headsign").isEmpty())) {
          urlBuilder.addQueryParameter("headsign", escapeString(params.getString("headsign")));
        }

        if (params.has("showCodes") && (!params.getString("showCodes").isEmpty())) {
          urlBuilder.addQueryParameter("show_codes", escapeString(String.valueOf(params.getBoolean("showCodes"))));
        }

        if (params.has("odtLevel") && (!params.getString("odtLevel").isEmpty())) {
          urlBuilder.addQueryParameter("odt_level", escapeString(params.getString("odtLevel")));
        }

        if (params.has("dataFreshness") && (!params.getString("dataFreshness").isEmpty())) {
          urlBuilder.addQueryParameter("data_freshness", escapeString(params.getString("dataFreshness")));
        }

        if (params.has("distance") && (!params.getString("distance").isEmpty())) {
          urlBuilder.addQueryParameter("distance", escapeString(String.valueOf(params.getInt("distance"))));
        }

        if (params.has("since") && (!params.getString("since").isEmpty())) {
          urlBuilder.addQueryParameter("since", escapeString(String.valueOf(params.getString("since"))));
        }

        if (params.has("until") && (!params.getString("until").isEmpty())) {
          urlBuilder.addQueryParameter("until", escapeString(String.valueOf(params.getString("until"))));
        }

        if (params.has("disableGeojson") && (!params.getString("disableGeojson").isEmpty())) {
          urlBuilder.addQueryParameter("disable_geojson", escapeString(String.valueOf(params.getBoolean("disableGeojson"))));
        }

        if (params.has("disableDisruption") && (!params.getString("disableDisruption").isEmpty())) {
          urlBuilder.addQueryParameter("disable_disruption", escapeString(String.valueOf(params.getBoolean("disableDisruption"))));
        }

        if (params.has("tags") && (!params.getString("tags").isEmpty())) {
          urlBuilder.addQueryParameter("tags[]", escapeString(String.valueOf(params.getJSONArray("tags"))));
        }

        HttpUrl url = urlBuilder
          .addPathSegments(path)
          .build();
        Request request = requestBuilder.url(url)
          .build();

        client.newCall(request).enqueue(new Callback() {

          @Override
          public void onFailure(@NonNull Call call, @NonNull IOException e) {
            String errorMessage = "Problem during request | " + String.valueOf(e.hashCode()) + ": " + e.getMessage();
            callbackContext.error(errorMessage);
          }

          @Override
          public void onResponse(@NonNull Call call, @NonNull Response response) {
            if (response.isSuccessful()) {
              try {
                JSONObject jsonObject = new JSONObject(Objects.requireNonNull(response.body()).string());
                callbackContext.success(jsonObject);
              } catch (Exception e) {
                String errorMessage = "Problem during response parsing";
                callbackContext.error(errorMessage);
              }
            } else {
              callbackContext.error("Unexpected code " + response.code() + " | message: " + response.message());
            }
          }
        });
      } catch (Exception e) {
        String errorMessage = "Problem during request building | " + e.hashCode() + ": " + e.getMessage();
        callbackContext.error(errorMessage);
      }
    });
  }

  private void coverageLonLatUriJourneyPatterns(final JSONObject params, final CallbackContext callbackContext) {
    cordova.getThreadPool().execute(() -> {
      try {
        HttpUrl.Builder urlBuilder = new HttpUrl.Builder()
          .scheme("https")
          .host("api.navitia.io")
          .addPathSegment("v1");
        Request.Builder requestBuilder = new Request.Builder()
          .header("Authorization", token);
        String path = "/coverage/{lon};{lat}/{uri}/journey_patterns".substring(1);

        if (params.has("lat") && (!params.getString("lat").isEmpty())) {
          path = path.replaceAll("\\{" + "lat" + "\\}", escapeString(String.valueOf(params.getLong("lat"))));
        }

        if (params.has("lon") && (!params.getString("lon").isEmpty())) {
          path = path.replaceAll("\\{" + "lon" + "\\}", escapeString(String.valueOf(params.getLong("lon"))));
        }

        if (params.has("uri") && (!params.getString("uri").isEmpty())) {
          path = path.replaceAll("\\{" + "uri" + "\\}", escapeString(params.getString("uri")));
        }

        if (params.has("startPage") && (!params.getString("startPage").isEmpty())) {
          urlBuilder.addQueryParameter("start_page", escapeString(String.valueOf(params.getInt("startPage"))));
        }

        if (params.has("count") && (!params.getString("count").isEmpty())) {
          urlBuilder.addQueryParameter("count", escapeString(String.valueOf(params.getInt("count"))));
        }

        if (params.has("depth") && (!params.getString("depth").isEmpty())) {
          urlBuilder.addQueryParameter("depth", escapeString(String.valueOf(params.getInt("depth"))));
        }

        if (params.has("forbiddenId") && (!params.getString("forbiddenId").isEmpty())) {
          urlBuilder.addQueryParameter("forbidden_id[]", escapeString(String.valueOf(params.getJSONArray("forbiddenId"))));
        }

        if (params.has("forbiddenUris") && (!params.getString("forbiddenUris").isEmpty())) {
          urlBuilder.addQueryParameter("forbidden_uris[]", escapeString(String.valueOf(params.getJSONArray("forbiddenUris"))));
        }

        if (params.has("externalCode") && (!params.getString("externalCode").isEmpty())) {
          urlBuilder.addQueryParameter("external_code", escapeString(params.getString("externalCode")));
        }

        if (params.has("headsign") && (!params.getString("headsign").isEmpty())) {
          urlBuilder.addQueryParameter("headsign", escapeString(params.getString("headsign")));
        }

        if (params.has("showCodes") && (!params.getString("showCodes").isEmpty())) {
          urlBuilder.addQueryParameter("show_codes", escapeString(String.valueOf(params.getBoolean("showCodes"))));
        }

        if (params.has("odtLevel") && (!params.getString("odtLevel").isEmpty())) {
          urlBuilder.addQueryParameter("odt_level", escapeString(params.getString("odtLevel")));
        }

        if (params.has("dataFreshness") && (!params.getString("dataFreshness").isEmpty())) {
          urlBuilder.addQueryParameter("data_freshness", escapeString(params.getString("dataFreshness")));
        }

        if (params.has("distance") && (!params.getString("distance").isEmpty())) {
          urlBuilder.addQueryParameter("distance", escapeString(String.valueOf(params.getInt("distance"))));
        }

        if (params.has("since") && (!params.getString("since").isEmpty())) {
          urlBuilder.addQueryParameter("since", escapeString(String.valueOf(params.getString("since"))));
        }

        if (params.has("until") && (!params.getString("until").isEmpty())) {
          urlBuilder.addQueryParameter("until", escapeString(String.valueOf(params.getString("until"))));
        }

        if (params.has("disableGeojson") && (!params.getString("disableGeojson").isEmpty())) {
          urlBuilder.addQueryParameter("disable_geojson", escapeString(String.valueOf(params.getBoolean("disableGeojson"))));
        }

        if (params.has("disableDisruption") && (!params.getString("disableDisruption").isEmpty())) {
          urlBuilder.addQueryParameter("disable_disruption", escapeString(String.valueOf(params.getBoolean("disableDisruption"))));
        }

        if (params.has("filter") && (!params.getString("filter").isEmpty())) {
          urlBuilder.addQueryParameter("filter", escapeString(params.getString("filter")));
        }

        if (params.has("tags") && (!params.getString("tags").isEmpty())) {
          urlBuilder.addQueryParameter("tags[]", escapeString(String.valueOf(params.getJSONArray("tags"))));
        }

        HttpUrl url = urlBuilder
          .addPathSegments(path)
          .build();
        Request request = requestBuilder.url(url)
          .build();

        client.newCall(request).enqueue(new Callback() {

          @Override
          public void onFailure(@NonNull Call call, @NonNull IOException e) {
            String errorMessage = "Problem during request | " + String.valueOf(e.hashCode()) + ": " + e.getMessage();
            callbackContext.error(errorMessage);
          }

          @Override
          public void onResponse(@NonNull Call call, @NonNull Response response) {
            if (response.isSuccessful()) {
              try {
                JSONObject jsonObject = new JSONObject(Objects.requireNonNull(response.body()).string());
                callbackContext.success(jsonObject);
              } catch (Exception e) {
                String errorMessage = "Problem during response parsing";
                callbackContext.error(errorMessage);
              }
            } else {
              callbackContext.error("Unexpected code " + response.code() + " | message: " + response.message());
            }
          }
        });
      } catch (Exception e) {
        String errorMessage = "Problem during request building | " + e.hashCode() + ": " + e.getMessage();
        callbackContext.error(errorMessage);
      }
    });
  }

  private void coverageLonLatUriJourneyPatternsId(final JSONObject params, final CallbackContext callbackContext) {
    cordova.getThreadPool().execute(() -> {
      try {
        HttpUrl.Builder urlBuilder = new HttpUrl.Builder()
          .scheme("https")
          .host("api.navitia.io")
          .addPathSegment("v1");
        Request.Builder requestBuilder = new Request.Builder()
          .header("Authorization", token);
        String path = "/coverage/{lon};{lat}/{uri}/journey_patterns/{id}".substring(1);

        if (params.has("lat") && (!params.getString("lat").isEmpty())) {
          path = path.replaceAll("\\{" + "lat" + "\\}", escapeString(String.valueOf(params.getLong("lat"))));
        }

        if (params.has("lon") && (!params.getString("lon").isEmpty())) {
          path = path.replaceAll("\\{" + "lon" + "\\}", escapeString(String.valueOf(params.getLong("lon"))));
        }

        if (params.has("uri") && (!params.getString("uri").isEmpty())) {
          path = path.replaceAll("\\{" + "uri" + "\\}", escapeString(params.getString("uri")));
        }

        if (params.has("id") && (!params.getString("id").isEmpty())) {
          path = path.replaceAll("\\{" + "id" + "\\}", escapeString(params.getString("id")));
        }

        if (params.has("startPage") && (!params.getString("startPage").isEmpty())) {
          urlBuilder.addQueryParameter("start_page", escapeString(String.valueOf(params.getInt("startPage"))));
        }

        if (params.has("count") && (!params.getString("count").isEmpty())) {
          urlBuilder.addQueryParameter("count", escapeString(String.valueOf(params.getInt("count"))));
        }

        if (params.has("depth") && (!params.getString("depth").isEmpty())) {
          urlBuilder.addQueryParameter("depth", escapeString(String.valueOf(params.getInt("depth"))));
        }

        if (params.has("forbiddenId") && (!params.getString("forbiddenId").isEmpty())) {
          urlBuilder.addQueryParameter("forbidden_id[]", escapeString(String.valueOf(params.getJSONArray("forbiddenId"))));
        }

        if (params.has("forbiddenUris") && (!params.getString("forbiddenUris").isEmpty())) {
          urlBuilder.addQueryParameter("forbidden_uris[]", escapeString(String.valueOf(params.getJSONArray("forbiddenUris"))));
        }

        if (params.has("externalCode") && (!params.getString("externalCode").isEmpty())) {
          urlBuilder.addQueryParameter("external_code", escapeString(params.getString("externalCode")));
        }

        if (params.has("headsign") && (!params.getString("headsign").isEmpty())) {
          urlBuilder.addQueryParameter("headsign", escapeString(params.getString("headsign")));
        }

        if (params.has("showCodes") && (!params.getString("showCodes").isEmpty())) {
          urlBuilder.addQueryParameter("show_codes", escapeString(String.valueOf(params.getBoolean("showCodes"))));
        }

        if (params.has("odtLevel") && (!params.getString("odtLevel").isEmpty())) {
          urlBuilder.addQueryParameter("odt_level", escapeString(params.getString("odtLevel")));
        }

        if (params.has("dataFreshness") && (!params.getString("dataFreshness").isEmpty())) {
          urlBuilder.addQueryParameter("data_freshness", escapeString(params.getString("dataFreshness")));
        }

        if (params.has("distance") && (!params.getString("distance").isEmpty())) {
          urlBuilder.addQueryParameter("distance", escapeString(String.valueOf(params.getInt("distance"))));
        }

        if (params.has("since") && (!params.getString("since").isEmpty())) {
          urlBuilder.addQueryParameter("since", escapeString(String.valueOf(params.getString("since"))));
        }

        if (params.has("until") && (!params.getString("until").isEmpty())) {
          urlBuilder.addQueryParameter("until", escapeString(String.valueOf(params.getString("until"))));
        }

        if (params.has("disableGeojson") && (!params.getString("disableGeojson").isEmpty())) {
          urlBuilder.addQueryParameter("disable_geojson", escapeString(String.valueOf(params.getBoolean("disableGeojson"))));
        }

        if (params.has("disableDisruption") && (!params.getString("disableDisruption").isEmpty())) {
          urlBuilder.addQueryParameter("disable_disruption", escapeString(String.valueOf(params.getBoolean("disableDisruption"))));
        }

        if (params.has("tags") && (!params.getString("tags").isEmpty())) {
          urlBuilder.addQueryParameter("tags[]", escapeString(String.valueOf(params.getJSONArray("tags"))));
        }

        HttpUrl url = urlBuilder
          .addPathSegments(path)
          .build();
        Request request = requestBuilder.url(url)
          .build();

        client.newCall(request).enqueue(new Callback() {

          @Override
          public void onFailure(@NonNull Call call, @NonNull IOException e) {
            String errorMessage = "Problem during request | " + String.valueOf(e.hashCode()) + ": " + e.getMessage();
            callbackContext.error(errorMessage);
          }

          @Override
          public void onResponse(@NonNull Call call, @NonNull Response response) {
            if (response.isSuccessful()) {
              try {
                JSONObject jsonObject = new JSONObject(Objects.requireNonNull(response.body()).string());
                callbackContext.success(jsonObject);
              } catch (Exception e) {
                String errorMessage = "Problem during response parsing";
                callbackContext.error(errorMessage);
              }
            } else {
              callbackContext.error("Unexpected code " + response.code() + " | message: " + response.message());
            }
          }
        });
      } catch (Exception e) {
        String errorMessage = "Problem during request building | " + e.hashCode() + ": " + e.getMessage();
        callbackContext.error(errorMessage);
      }
    });
  }

  private void coverageRegionJourneyPatterns(final JSONObject params, final CallbackContext callbackContext) {
    cordova.getThreadPool().execute(() -> {
      try {
        HttpUrl.Builder urlBuilder = new HttpUrl.Builder()
          .scheme("https")
          .host("api.navitia.io")
          .addPathSegment("v1");
        Request.Builder requestBuilder = new Request.Builder()
          .header("Authorization", token);
        String path = "/coverage/{region}/journey_patterns".substring(1);

        if (params.has("region") && (!params.getString("region").isEmpty())) {
          path = path.replaceAll("\\{" + "region" + "\\}", escapeString(params.getString("region")));
        }

        if (params.has("startPage") && (!params.getString("startPage").isEmpty())) {
          urlBuilder.addQueryParameter("start_page", escapeString(String.valueOf(params.getInt("startPage"))));
        }

        if (params.has("count") && (!params.getString("count").isEmpty())) {
          urlBuilder.addQueryParameter("count", escapeString(String.valueOf(params.getInt("count"))));
        }

        if (params.has("depth") && (!params.getString("depth").isEmpty())) {
          urlBuilder.addQueryParameter("depth", escapeString(String.valueOf(params.getInt("depth"))));
        }

        if (params.has("forbiddenId") && (!params.getString("forbiddenId").isEmpty())) {
          urlBuilder.addQueryParameter("forbidden_id[]", escapeString(String.valueOf(params.getJSONArray("forbiddenId"))));
        }

        if (params.has("forbiddenUris") && (!params.getString("forbiddenUris").isEmpty())) {
          urlBuilder.addQueryParameter("forbidden_uris[]", escapeString(String.valueOf(params.getJSONArray("forbiddenUris"))));
        }

        if (params.has("externalCode") && (!params.getString("externalCode").isEmpty())) {
          urlBuilder.addQueryParameter("external_code", escapeString(params.getString("externalCode")));
        }

        if (params.has("headsign") && (!params.getString("headsign").isEmpty())) {
          urlBuilder.addQueryParameter("headsign", escapeString(params.getString("headsign")));
        }

        if (params.has("showCodes") && (!params.getString("showCodes").isEmpty())) {
          urlBuilder.addQueryParameter("show_codes", escapeString(String.valueOf(params.getBoolean("showCodes"))));
        }

        if (params.has("odtLevel") && (!params.getString("odtLevel").isEmpty())) {
          urlBuilder.addQueryParameter("odt_level", escapeString(params.getString("odtLevel")));
        }

        if (params.has("dataFreshness") && (!params.getString("dataFreshness").isEmpty())) {
          urlBuilder.addQueryParameter("data_freshness", escapeString(params.getString("dataFreshness")));
        }

        if (params.has("distance") && (!params.getString("distance").isEmpty())) {
          urlBuilder.addQueryParameter("distance", escapeString(String.valueOf(params.getInt("distance"))));
        }

        if (params.has("since") && (!params.getString("since").isEmpty())) {
          urlBuilder.addQueryParameter("since", escapeString(String.valueOf(params.getString("since"))));
        }

        if (params.has("until") && (!params.getString("until").isEmpty())) {
          urlBuilder.addQueryParameter("until", escapeString(String.valueOf(params.getString("until"))));
        }

        if (params.has("disableGeojson") && (!params.getString("disableGeojson").isEmpty())) {
          urlBuilder.addQueryParameter("disable_geojson", escapeString(String.valueOf(params.getBoolean("disableGeojson"))));
        }

        if (params.has("disableDisruption") && (!params.getString("disableDisruption").isEmpty())) {
          urlBuilder.addQueryParameter("disable_disruption", escapeString(String.valueOf(params.getBoolean("disableDisruption"))));
        }

        if (params.has("filter") && (!params.getString("filter").isEmpty())) {
          urlBuilder.addQueryParameter("filter", escapeString(params.getString("filter")));
        }

        if (params.has("tags") && (!params.getString("tags").isEmpty())) {
          urlBuilder.addQueryParameter("tags[]", escapeString(String.valueOf(params.getJSONArray("tags"))));
        }

        HttpUrl url = urlBuilder
          .addPathSegments(path)
          .build();
        Request request = requestBuilder.url(url)
          .build();

        client.newCall(request).enqueue(new Callback() {

          @Override
          public void onFailure(@NonNull Call call, @NonNull IOException e) {
            String errorMessage = "Problem during request | " + String.valueOf(e.hashCode()) + ": " + e.getMessage();
            callbackContext.error(errorMessage);
          }

          @Override
          public void onResponse(@NonNull Call call, @NonNull Response response) {
            if (response.isSuccessful()) {
              try {
                JSONObject jsonObject = new JSONObject(Objects.requireNonNull(response.body()).string());
                callbackContext.success(jsonObject);
              } catch (Exception e) {
                String errorMessage = "Problem during response parsing";
                callbackContext.error(errorMessage);
              }
            } else {
              callbackContext.error("Unexpected code " + response.code() + " | message: " + response.message());
            }
          }
        });
      } catch (Exception e) {
        String errorMessage = "Problem during request building | " + e.hashCode() + ": " + e.getMessage();
        callbackContext.error(errorMessage);
      }
    });
  }

  private void coverageRegionJourneyPatternsId(final JSONObject params, final CallbackContext callbackContext) {
    cordova.getThreadPool().execute(() -> {
      try {
        HttpUrl.Builder urlBuilder = new HttpUrl.Builder()
          .scheme("https")
          .host("api.navitia.io")
          .addPathSegment("v1");
        Request.Builder requestBuilder = new Request.Builder()
          .header("Authorization", token);
        String path = "/coverage/{region}/journey_patterns/{id}".substring(1);

        if (params.has("region") && (!params.getString("region").isEmpty())) {
          path = path.replaceAll("\\{" + "region" + "\\}", escapeString(params.getString("region")));
        }

        if (params.has("id") && (!params.getString("id").isEmpty())) {
          path = path.replaceAll("\\{" + "id" + "\\}", escapeString(params.getString("id")));
        }

        if (params.has("startPage") && (!params.getString("startPage").isEmpty())) {
          urlBuilder.addQueryParameter("start_page", escapeString(String.valueOf(params.getInt("startPage"))));
        }

        if (params.has("count") && (!params.getString("count").isEmpty())) {
          urlBuilder.addQueryParameter("count", escapeString(String.valueOf(params.getInt("count"))));
        }

        if (params.has("depth") && (!params.getString("depth").isEmpty())) {
          urlBuilder.addQueryParameter("depth", escapeString(String.valueOf(params.getInt("depth"))));
        }

        if (params.has("forbiddenId") && (!params.getString("forbiddenId").isEmpty())) {
          urlBuilder.addQueryParameter("forbidden_id[]", escapeString(String.valueOf(params.getJSONArray("forbiddenId"))));
        }

        if (params.has("forbiddenUris") && (!params.getString("forbiddenUris").isEmpty())) {
          urlBuilder.addQueryParameter("forbidden_uris[]", escapeString(String.valueOf(params.getJSONArray("forbiddenUris"))));
        }

        if (params.has("externalCode") && (!params.getString("externalCode").isEmpty())) {
          urlBuilder.addQueryParameter("external_code", escapeString(params.getString("externalCode")));
        }

        if (params.has("headsign") && (!params.getString("headsign").isEmpty())) {
          urlBuilder.addQueryParameter("headsign", escapeString(params.getString("headsign")));
        }

        if (params.has("showCodes") && (!params.getString("showCodes").isEmpty())) {
          urlBuilder.addQueryParameter("show_codes", escapeString(String.valueOf(params.getBoolean("showCodes"))));
        }

        if (params.has("odtLevel") && (!params.getString("odtLevel").isEmpty())) {
          urlBuilder.addQueryParameter("odt_level", escapeString(params.getString("odtLevel")));
        }

        if (params.has("dataFreshness") && (!params.getString("dataFreshness").isEmpty())) {
          urlBuilder.addQueryParameter("data_freshness", escapeString(params.getString("dataFreshness")));
        }

        if (params.has("distance") && (!params.getString("distance").isEmpty())) {
          urlBuilder.addQueryParameter("distance", escapeString(String.valueOf(params.getInt("distance"))));
        }

        if (params.has("since") && (!params.getString("since").isEmpty())) {
          urlBuilder.addQueryParameter("since", escapeString(String.valueOf(params.getString("since"))));
        }

        if (params.has("until") && (!params.getString("until").isEmpty())) {
          urlBuilder.addQueryParameter("until", escapeString(String.valueOf(params.getString("until"))));
        }

        if (params.has("disableGeojson") && (!params.getString("disableGeojson").isEmpty())) {
          urlBuilder.addQueryParameter("disable_geojson", escapeString(String.valueOf(params.getBoolean("disableGeojson"))));
        }

        if (params.has("disableDisruption") && (!params.getString("disableDisruption").isEmpty())) {
          urlBuilder.addQueryParameter("disable_disruption", escapeString(String.valueOf(params.getBoolean("disableDisruption"))));
        }

        if (params.has("tags") && (!params.getString("tags").isEmpty())) {
          urlBuilder.addQueryParameter("tags[]", escapeString(String.valueOf(params.getJSONArray("tags"))));
        }

        HttpUrl url = urlBuilder
          .addPathSegments(path)
          .build();
        Request request = requestBuilder.url(url)
          .build();

        client.newCall(request).enqueue(new Callback() {

          @Override
          public void onFailure(@NonNull Call call, @NonNull IOException e) {
            String errorMessage = "Problem during request | " + String.valueOf(e.hashCode()) + ": " + e.getMessage();
            callbackContext.error(errorMessage);
          }

          @Override
          public void onResponse(@NonNull Call call, @NonNull Response response) {
            if (response.isSuccessful()) {
              try {
                JSONObject jsonObject = new JSONObject(Objects.requireNonNull(response.body()).string());
                callbackContext.success(jsonObject);
              } catch (Exception e) {
                String errorMessage = "Problem during response parsing";
                callbackContext.error(errorMessage);
              }
            } else {
              callbackContext.error("Unexpected code " + response.code() + " | message: " + response.message());
            }
          }
        });
      } catch (Exception e) {
        String errorMessage = "Problem during request building | " + e.hashCode() + ": " + e.getMessage();
        callbackContext.error(errorMessage);
      }
    });
  }

  private void coverageRegionUriJourneyPatterns(final JSONObject params, final CallbackContext callbackContext) {
    cordova.getThreadPool().execute(() -> {
      try {
        HttpUrl.Builder urlBuilder = new HttpUrl.Builder()
          .scheme("https")
          .host("api.navitia.io")
          .addPathSegment("v1");
        Request.Builder requestBuilder = new Request.Builder()
          .header("Authorization", token);
        String path = "/coverage/{region}/{uri}/journey_patterns".substring(1);

        if (params.has("region") && (!params.getString("region").isEmpty())) {
          path = path.replaceAll("\\{" + "region" + "\\}", escapeString(params.getString("region")));
        }

        if (params.has("uri") && (!params.getString("uri").isEmpty())) {
          path = path.replaceAll("\\{" + "uri" + "\\}", escapeString(params.getString("uri")));
        }

        if (params.has("startPage") && (!params.getString("startPage").isEmpty())) {
          urlBuilder.addQueryParameter("start_page", escapeString(String.valueOf(params.getInt("startPage"))));
        }

        if (params.has("count") && (!params.getString("count").isEmpty())) {
          urlBuilder.addQueryParameter("count", escapeString(String.valueOf(params.getInt("count"))));
        }

        if (params.has("depth") && (!params.getString("depth").isEmpty())) {
          urlBuilder.addQueryParameter("depth", escapeString(String.valueOf(params.getInt("depth"))));
        }

        if (params.has("forbiddenId") && (!params.getString("forbiddenId").isEmpty())) {
          urlBuilder.addQueryParameter("forbidden_id[]", escapeString(String.valueOf(params.getJSONArray("forbiddenId"))));
        }

        if (params.has("forbiddenUris") && (!params.getString("forbiddenUris").isEmpty())) {
          urlBuilder.addQueryParameter("forbidden_uris[]", escapeString(String.valueOf(params.getJSONArray("forbiddenUris"))));
        }

        if (params.has("externalCode") && (!params.getString("externalCode").isEmpty())) {
          urlBuilder.addQueryParameter("external_code", escapeString(params.getString("externalCode")));
        }

        if (params.has("headsign") && (!params.getString("headsign").isEmpty())) {
          urlBuilder.addQueryParameter("headsign", escapeString(params.getString("headsign")));
        }

        if (params.has("showCodes") && (!params.getString("showCodes").isEmpty())) {
          urlBuilder.addQueryParameter("show_codes", escapeString(String.valueOf(params.getBoolean("showCodes"))));
        }

        if (params.has("odtLevel") && (!params.getString("odtLevel").isEmpty())) {
          urlBuilder.addQueryParameter("odt_level", escapeString(params.getString("odtLevel")));
        }

        if (params.has("dataFreshness") && (!params.getString("dataFreshness").isEmpty())) {
          urlBuilder.addQueryParameter("data_freshness", escapeString(params.getString("dataFreshness")));
        }

        if (params.has("distance") && (!params.getString("distance").isEmpty())) {
          urlBuilder.addQueryParameter("distance", escapeString(String.valueOf(params.getInt("distance"))));
        }

        if (params.has("since") && (!params.getString("since").isEmpty())) {
          urlBuilder.addQueryParameter("since", escapeString(String.valueOf(params.getString("since"))));
        }

        if (params.has("until") && (!params.getString("until").isEmpty())) {
          urlBuilder.addQueryParameter("until", escapeString(String.valueOf(params.getString("until"))));
        }

        if (params.has("disableGeojson") && (!params.getString("disableGeojson").isEmpty())) {
          urlBuilder.addQueryParameter("disable_geojson", escapeString(String.valueOf(params.getBoolean("disableGeojson"))));
        }

        if (params.has("disableDisruption") && (!params.getString("disableDisruption").isEmpty())) {
          urlBuilder.addQueryParameter("disable_disruption", escapeString(String.valueOf(params.getBoolean("disableDisruption"))));
        }

        if (params.has("filter") && (!params.getString("filter").isEmpty())) {
          urlBuilder.addQueryParameter("filter", escapeString(params.getString("filter")));
        }

        if (params.has("tags") && (!params.getString("tags").isEmpty())) {
          urlBuilder.addQueryParameter("tags[]", escapeString(String.valueOf(params.getJSONArray("tags"))));
        }

        HttpUrl url = urlBuilder
          .addPathSegments(path)
          .build();
        Request request = requestBuilder.url(url)
          .build();

        client.newCall(request).enqueue(new Callback() {

          @Override
          public void onFailure(@NonNull Call call, @NonNull IOException e) {
            String errorMessage = "Problem during request | " + String.valueOf(e.hashCode()) + ": " + e.getMessage();
            callbackContext.error(errorMessage);
          }

          @Override
          public void onResponse(@NonNull Call call, @NonNull Response response) {
            if (response.isSuccessful()) {
              try {
                JSONObject jsonObject = new JSONObject(Objects.requireNonNull(response.body()).string());
                callbackContext.success(jsonObject);
              } catch (Exception e) {
                String errorMessage = "Problem during response parsing";
                callbackContext.error(errorMessage);
              }
            } else {
              callbackContext.error("Unexpected code " + response.code() + " | message: " + response.message());
            }
          }
        });
      } catch (Exception e) {
        String errorMessage = "Problem during request building | " + e.hashCode() + ": " + e.getMessage();
        callbackContext.error(errorMessage);
      }
    });
  }

  private void coverageRegionUriJourneyPatternsId(final JSONObject params, final CallbackContext callbackContext) {
    cordova.getThreadPool().execute(() -> {
      try {
        HttpUrl.Builder urlBuilder = new HttpUrl.Builder()
          .scheme("https")
          .host("api.navitia.io")
          .addPathSegment("v1");
        Request.Builder requestBuilder = new Request.Builder()
          .header("Authorization", token);
        String path = "/coverage/{region}/{uri}/journey_patterns/{id}".substring(1);

        if (params.has("region") && (!params.getString("region").isEmpty())) {
          path = path.replaceAll("\\{" + "region" + "\\}", escapeString(params.getString("region")));
        }

        if (params.has("uri") && (!params.getString("uri").isEmpty())) {
          path = path.replaceAll("\\{" + "uri" + "\\}", escapeString(params.getString("uri")));
        }

        if (params.has("id") && (!params.getString("id").isEmpty())) {
          path = path.replaceAll("\\{" + "id" + "\\}", escapeString(params.getString("id")));
        }

        if (params.has("startPage") && (!params.getString("startPage").isEmpty())) {
          urlBuilder.addQueryParameter("start_page", escapeString(String.valueOf(params.getInt("startPage"))));
        }

        if (params.has("count") && (!params.getString("count").isEmpty())) {
          urlBuilder.addQueryParameter("count", escapeString(String.valueOf(params.getInt("count"))));
        }

        if (params.has("depth") && (!params.getString("depth").isEmpty())) {
          urlBuilder.addQueryParameter("depth", escapeString(String.valueOf(params.getInt("depth"))));
        }

        if (params.has("forbiddenId") && (!params.getString("forbiddenId").isEmpty())) {
          urlBuilder.addQueryParameter("forbidden_id[]", escapeString(String.valueOf(params.getJSONArray("forbiddenId"))));
        }

        if (params.has("forbiddenUris") && (!params.getString("forbiddenUris").isEmpty())) {
          urlBuilder.addQueryParameter("forbidden_uris[]", escapeString(String.valueOf(params.getJSONArray("forbiddenUris"))));
        }

        if (params.has("externalCode") && (!params.getString("externalCode").isEmpty())) {
          urlBuilder.addQueryParameter("external_code", escapeString(params.getString("externalCode")));
        }

        if (params.has("headsign") && (!params.getString("headsign").isEmpty())) {
          urlBuilder.addQueryParameter("headsign", escapeString(params.getString("headsign")));
        }

        if (params.has("showCodes") && (!params.getString("showCodes").isEmpty())) {
          urlBuilder.addQueryParameter("show_codes", escapeString(String.valueOf(params.getBoolean("showCodes"))));
        }

        if (params.has("odtLevel") && (!params.getString("odtLevel").isEmpty())) {
          urlBuilder.addQueryParameter("odt_level", escapeString(params.getString("odtLevel")));
        }

        if (params.has("dataFreshness") && (!params.getString("dataFreshness").isEmpty())) {
          urlBuilder.addQueryParameter("data_freshness", escapeString(params.getString("dataFreshness")));
        }

        if (params.has("distance") && (!params.getString("distance").isEmpty())) {
          urlBuilder.addQueryParameter("distance", escapeString(String.valueOf(params.getInt("distance"))));
        }

        if (params.has("since") && (!params.getString("since").isEmpty())) {
          urlBuilder.addQueryParameter("since", escapeString(String.valueOf(params.getString("since"))));
        }

        if (params.has("until") && (!params.getString("until").isEmpty())) {
          urlBuilder.addQueryParameter("until", escapeString(String.valueOf(params.getString("until"))));
        }

        if (params.has("disableGeojson") && (!params.getString("disableGeojson").isEmpty())) {
          urlBuilder.addQueryParameter("disable_geojson", escapeString(String.valueOf(params.getBoolean("disableGeojson"))));
        }

        if (params.has("disableDisruption") && (!params.getString("disableDisruption").isEmpty())) {
          urlBuilder.addQueryParameter("disable_disruption", escapeString(String.valueOf(params.getBoolean("disableDisruption"))));
        }

        if (params.has("tags") && (!params.getString("tags").isEmpty())) {
          urlBuilder.addQueryParameter("tags[]", escapeString(String.valueOf(params.getJSONArray("tags"))));
        }

        HttpUrl url = urlBuilder
          .addPathSegments(path)
          .build();
        Request request = requestBuilder.url(url)
          .build();

        client.newCall(request).enqueue(new Callback() {

          @Override
          public void onFailure(@NonNull Call call, @NonNull IOException e) {
            String errorMessage = "Problem during request | " + String.valueOf(e.hashCode()) + ": " + e.getMessage();
            callbackContext.error(errorMessage);
          }

          @Override
          public void onResponse(@NonNull Call call, @NonNull Response response) {
            if (response.isSuccessful()) {
              try {
                JSONObject jsonObject = new JSONObject(Objects.requireNonNull(response.body()).string());
                callbackContext.success(jsonObject);
              } catch (Exception e) {
                String errorMessage = "Problem during response parsing";
                callbackContext.error(errorMessage);
              }
            } else {
              callbackContext.error("Unexpected code " + response.code() + " | message: " + response.message());
            }
          }
        });
      } catch (Exception e) {
        String errorMessage = "Problem during request building | " + e.hashCode() + ": " + e.getMessage();
        callbackContext.error(errorMessage);
      }
    });
  }

  private void coverageLonLatJourneys(final JSONObject params, final CallbackContext callbackContext) {
    cordova.getThreadPool().execute(() -> {
      try {
        HttpUrl.Builder urlBuilder = new HttpUrl.Builder()
          .scheme("https")
          .host("api.navitia.io")
          .addPathSegment("v1");
        Request.Builder requestBuilder = new Request.Builder()
          .header("Authorization", token);
        String path = "/coverage/{lon};{lat}/journeys".substring(1);

        if (params.has("lat") && (!params.getString("lat").isEmpty())) {
          path = path.replaceAll("\\{" + "lat" + "\\}", escapeString(String.valueOf(params.getLong("lat"))));
        }

        if (params.has("lon") && (!params.getString("lon").isEmpty())) {
          path = path.replaceAll("\\{" + "lon" + "\\}", escapeString(String.valueOf(params.getLong("lon"))));
        }

        if (params.has("from") && (!params.getString("from").isEmpty())) {
          urlBuilder.addQueryParameter("from", escapeString(params.getString("from")));
        }

        if (params.has("to") && (!params.getString("to").isEmpty())) {
          urlBuilder.addQueryParameter("to", escapeString(params.getString("to")));
        }

        if (params.has("datetime") && (!params.getString("datetime").isEmpty())) {
          urlBuilder.addQueryParameter("datetime", escapeString(String.valueOf(params.getString("datetime"))));
        }

        if (params.has("datetimeRepresents") && (!params.getString("datetimeRepresents").isEmpty())) {
          urlBuilder.addQueryParameter("datetime_represents", escapeString(params.getString("datetimeRepresents")));
        }

        if (params.has("maxNbTransfers") && (!params.getString("maxNbTransfers").isEmpty())) {
          urlBuilder.addQueryParameter("max_nb_transfers", escapeString(String.valueOf(params.getInt("maxNbTransfers"))));
        }

        if (params.has("minNbTransfers") && (!params.getString("minNbTransfers").isEmpty())) {
          urlBuilder.addQueryParameter("min_nb_transfers", escapeString(String.valueOf(params.getInt("minNbTransfers"))));
        }

        if (params.has("firstSectionMode") && (!params.getString("firstSectionMode").isEmpty())) {
          urlBuilder.addQueryParameter("first_section_mode[]", escapeString(String.valueOf(params.getJSONArray("firstSectionMode"))));
        }

        if (params.has("lastSectionMode") && (!params.getString("lastSectionMode").isEmpty())) {
          urlBuilder.addQueryParameter("last_section_mode[]", escapeString(String.valueOf(params.getJSONArray("lastSectionMode"))));
        }

        if (params.has("maxDurationToPt") && (!params.getString("maxDurationToPt").isEmpty())) {
          urlBuilder.addQueryParameter("max_duration_to_pt", escapeString(String.valueOf(params.getInt("maxDurationToPt"))));
        }

        if (params.has("maxWalkingDurationToPt") && (!params.getString("maxWalkingDurationToPt").isEmpty())) {
          urlBuilder.addQueryParameter("max_walking_duration_to_pt", escapeString(String.valueOf(params.getInt("maxWalkingDurationToPt"))));
        }

        if (params.has("maxBikeDurationToPt") && (!params.getString("maxBikeDurationToPt").isEmpty())) {
          urlBuilder.addQueryParameter("max_bike_duration_to_pt", escapeString(String.valueOf(params.getInt("maxBikeDurationToPt"))));
        }

        if (params.has("maxBssDurationToPt") && (!params.getString("maxBssDurationToPt").isEmpty())) {
          urlBuilder.addQueryParameter("max_bss_duration_to_pt", escapeString(String.valueOf(params.getInt("maxBssDurationToPt"))));
        }

        if (params.has("maxCarDurationToPt") && (!params.getString("maxCarDurationToPt").isEmpty())) {
          urlBuilder.addQueryParameter("max_car_duration_to_pt", escapeString(String.valueOf(params.getInt("maxCarDurationToPt"))));
        }

        if (params.has("maxRidesharingDurationToPt") && (!params.getString("maxRidesharingDurationToPt").isEmpty())) {
          urlBuilder.addQueryParameter("max_ridesharing_duration_to_pt", escapeString(String.valueOf(params.getInt("maxRidesharingDurationToPt"))));
        }

        if (params.has("maxCarNoParkDurationToPt") && (!params.getString("maxCarNoParkDurationToPt").isEmpty())) {
          urlBuilder.addQueryParameter("max_car_no_park_duration_to_pt", escapeString(String.valueOf(params.getInt("maxCarNoParkDurationToPt"))));
        }

        if (params.has("maxTaxiDurationToPt") && (!params.getString("maxTaxiDurationToPt").isEmpty())) {
          urlBuilder.addQueryParameter("max_taxi_duration_to_pt", escapeString(String.valueOf(params.getInt("maxTaxiDurationToPt"))));
        }

        if (params.has("walkingSpeed") && (!params.getString("walkingSpeed").isEmpty())) {
          urlBuilder.addQueryParameter("walking_speed", escapeString(String.valueOf(params.getLong("walkingSpeed"))));
        }

        if (params.has("bikeSpeed") && (!params.getString("bikeSpeed").isEmpty())) {
          urlBuilder.addQueryParameter("bike_speed", escapeString(String.valueOf(params.getLong("bikeSpeed"))));
        }

        if (params.has("bssSpeed") && (!params.getString("bssSpeed").isEmpty())) {
          urlBuilder.addQueryParameter("bss_speed", escapeString(String.valueOf(params.getLong("bssSpeed"))));
        }

        if (params.has("carSpeed") && (!params.getString("carSpeed").isEmpty())) {
          urlBuilder.addQueryParameter("car_speed", escapeString(String.valueOf(params.getLong("carSpeed"))));
        }

        if (params.has("ridesharingSpeed") && (!params.getString("ridesharingSpeed").isEmpty())) {
          urlBuilder.addQueryParameter("ridesharing_speed", escapeString(String.valueOf(params.getLong("ridesharingSpeed"))));
        }

        if (params.has("carNoParkSpeed") && (!params.getString("carNoParkSpeed").isEmpty())) {
          urlBuilder.addQueryParameter("car_no_park_speed", escapeString(String.valueOf(params.getLong("carNoParkSpeed"))));
        }

        if (params.has("taxiSpeed") && (!params.getString("taxiSpeed").isEmpty())) {
          urlBuilder.addQueryParameter("taxi_speed", escapeString(String.valueOf(params.getLong("taxiSpeed"))));
        }

        if (params.has("forbiddenUris") && (!params.getString("forbiddenUris").isEmpty())) {
          urlBuilder.addQueryParameter("forbidden_uris[]", escapeString(String.valueOf(params.getJSONArray("forbiddenUris"))));
        }

        if (params.has("allowedId") && (!params.getString("allowedId").isEmpty())) {
          urlBuilder.addQueryParameter("allowed_id[]", escapeString(String.valueOf(params.getJSONArray("allowedId"))));
        }

        if (params.has("disruptionActive") && (!params.getString("disruptionActive").isEmpty())) {
          urlBuilder.addQueryParameter("disruption_active", escapeString(String.valueOf(params.getBoolean("disruptionActive"))));
        }

        if (params.has("dataFreshness") && (!params.getString("dataFreshness").isEmpty())) {
          urlBuilder.addQueryParameter("data_freshness", escapeString(params.getString("dataFreshness")));
        }

        if (params.has("maxDuration") && (!params.getString("maxDuration").isEmpty())) {
          urlBuilder.addQueryParameter("max_duration", escapeString(String.valueOf(params.getInt("maxDuration"))));
        }

        if (params.has("wheelchair") && (!params.getString("wheelchair").isEmpty())) {
          urlBuilder.addQueryParameter("wheelchair", escapeString(String.valueOf(params.getBoolean("wheelchair"))));
        }

        if (params.has("travelerType") && (!params.getString("travelerType").isEmpty())) {
          urlBuilder.addQueryParameter("traveler_type", escapeString(params.getString("travelerType")));
        }

        if (params.has("directPath") && (!params.getString("directPath").isEmpty())) {
          urlBuilder.addQueryParameter("direct_path", escapeString(params.getString("directPath")));
        }

        if (params.has("freeRadiusFrom") && (!params.getString("freeRadiusFrom").isEmpty())) {
          urlBuilder.addQueryParameter("free_radius_from", escapeString(String.valueOf(params.getInt("freeRadiusFrom"))));
        }

        if (params.has("freeRadiusTo") && (!params.getString("freeRadiusTo").isEmpty())) {
          urlBuilder.addQueryParameter("free_radius_to", escapeString(String.valueOf(params.getInt("freeRadiusTo"))));
        }

        if (params.has("directPathMode") && (!params.getString("directPathMode").isEmpty())) {
          urlBuilder.addQueryParameter("direct_path_mode[]", escapeString(String.valueOf(params.getJSONArray("directPathMode"))));
        }

        if (params.has("partnerServices") && (!params.getString("partnerServices").isEmpty())) {
          urlBuilder.addQueryParameter("partner_services[]", escapeString(String.valueOf(params.getJSONArray("partnerServices"))));
        }

        if (params.has("count") && (!params.getString("count").isEmpty())) {
          urlBuilder.addQueryParameter("count", escapeString(String.valueOf(params.getInt("count"))));
        }

        if (params.has("isJourneySchedules") && (!params.getString("isJourneySchedules").isEmpty())) {
          urlBuilder.addQueryParameter("is_journey_schedules", escapeString(String.valueOf(params.getBoolean("isJourneySchedules"))));
        }

        if (params.has("minNbJourneys") && (!params.getString("minNbJourneys").isEmpty())) {
          urlBuilder.addQueryParameter("min_nb_journeys", escapeString(String.valueOf(params.getInt("minNbJourneys"))));
        }

        if (params.has("maxNbJourneys") && (!params.getString("maxNbJourneys").isEmpty())) {
          urlBuilder.addQueryParameter("max_nb_journeys", escapeString(String.valueOf(params.getInt("maxNbJourneys"))));
        }

        if (params.has("bssStands") && (!params.getString("bssStands").isEmpty())) {
          urlBuilder.addQueryParameter("bss_stands", escapeString(String.valueOf(params.getBoolean("bssStands"))));
        }

        if (params.has("addPoiInfos") && (!params.getString("addPoiInfos").isEmpty())) {
          urlBuilder.addQueryParameter("add_poi_infos[]", escapeString(String.valueOf(params.getJSONArray("addPoiInfos"))));
        }

        if (params.has("timeframeDuration") && (!params.getString("timeframeDuration").isEmpty())) {
          urlBuilder.addQueryParameter("timeframe_duration", escapeString(String.valueOf(params.getInt("timeframeDuration"))));
        }

        if (params.has("equipmentDetails") && (!params.getString("equipmentDetails").isEmpty())) {
          urlBuilder.addQueryParameter("equipment_details", escapeString(String.valueOf(params.getBoolean("equipmentDetails"))));
        }

        if (params.has("maxTaxiDirectPathDuration") && (!params.getString("maxTaxiDirectPathDuration").isEmpty())) {
          urlBuilder.addQueryParameter("max_taxi_direct_path_duration", escapeString(String.valueOf(params.getInt("maxTaxiDirectPathDuration"))));
        }

        if (params.has("maxWalkingDirectPathDuration") && (!params.getString("maxWalkingDirectPathDuration").isEmpty())) {
          urlBuilder.addQueryParameter("max_walking_direct_path_duration", escapeString(String.valueOf(params.getInt("maxWalkingDirectPathDuration"))));
        }

        if (params.has("maxCarNoParkDirectPathDuration") && (!params.getString("maxCarNoParkDirectPathDuration").isEmpty())) {
          urlBuilder.addQueryParameter("max_car_no_park_direct_path_duration", escapeString(String.valueOf(params.getInt("maxCarNoParkDirectPathDuration"))));
        }

        if (params.has("maxCarDirectPathDuration") && (!params.getString("maxCarDirectPathDuration").isEmpty())) {
          urlBuilder.addQueryParameter("max_car_direct_path_duration", escapeString(String.valueOf(params.getInt("maxCarDirectPathDuration"))));
        }

        if (params.has("maxRidesharingDirectPathDuration") && (!params.getString("maxRidesharingDirectPathDuration").isEmpty())) {
          urlBuilder.addQueryParameter("max_ridesharing_direct_path_duration", escapeString(String.valueOf(params.getInt("maxRidesharingDirectPathDuration"))));
        }

        if (params.has("maxBssDirectPathDuration") && (!params.getString("maxBssDirectPathDuration").isEmpty())) {
          urlBuilder.addQueryParameter("max_bss_direct_path_duration", escapeString(String.valueOf(params.getInt("maxBssDirectPathDuration"))));
        }

        if (params.has("maxBikeDirectPathDuration") && (!params.getString("maxBikeDirectPathDuration").isEmpty())) {
          urlBuilder.addQueryParameter("max_bike_direct_path_duration", escapeString(String.valueOf(params.getInt("maxBikeDirectPathDuration"))));
        }

        if (params.has("depth") && (!params.getString("depth").isEmpty())) {
          urlBuilder.addQueryParameter("depth", escapeString(String.valueOf(params.getInt("depth"))));
        }

        if (params.has("maxWaitingDuration") && (!params.getString("maxWaitingDuration").isEmpty())) {
          urlBuilder.addQueryParameter("max_waiting_duration", escapeString(String.valueOf(params.getInt("maxWaitingDuration"))));
        }

        HttpUrl url = urlBuilder
          .addPathSegments(path)
          .build();
        Request request = requestBuilder.url(url)
          .build();

        client.newCall(request).enqueue(new Callback() {

          @Override
          public void onFailure(@NonNull Call call, @NonNull IOException e) {
            String errorMessage = "Problem during request | " + String.valueOf(e.hashCode()) + ": " + e.getMessage();
            callbackContext.error(errorMessage);
          }

          @Override
          public void onResponse(@NonNull Call call, @NonNull Response response) {
            if (response.isSuccessful()) {
              try {
                JSONObject jsonObject = new JSONObject(Objects.requireNonNull(response.body()).string());
                callbackContext.success(jsonObject);
              } catch (Exception e) {
                String errorMessage = "Problem during response parsing";
                callbackContext.error(errorMessage);
              }
            } else {
              callbackContext.error("Unexpected code " + response.code() + " | message: " + response.message());
            }
          }
        });
      } catch (Exception e) {
        String errorMessage = "Problem during request building | " + e.hashCode() + ": " + e.getMessage();
        callbackContext.error(errorMessage);
      }
    });
  }

  private void coverageRegionJourneys(final JSONObject params, final CallbackContext callbackContext) {
    cordova.getThreadPool().execute(() -> {
      try {
        HttpUrl.Builder urlBuilder = new HttpUrl.Builder()
          .scheme("https")
          .host("api.navitia.io")
          .addPathSegment("v1");
        Request.Builder requestBuilder = new Request.Builder()
          .header("Authorization", token);
        String path = "/coverage/{region}/journeys".substring(1);

        if (params.has("region") && (!params.getString("region").isEmpty())) {
          path = path.replaceAll("\\{" + "region" + "\\}", escapeString(params.getString("region")));
        }

        if (params.has("from") && (!params.getString("from").isEmpty())) {
          urlBuilder.addQueryParameter("from", escapeString(params.getString("from")));
        }

        if (params.has("to") && (!params.getString("to").isEmpty())) {
          urlBuilder.addQueryParameter("to", escapeString(params.getString("to")));
        }

        if (params.has("datetime") && (!params.getString("datetime").isEmpty())) {
          urlBuilder.addQueryParameter("datetime", escapeString(String.valueOf(params.getString("datetime"))));
        }

        if (params.has("datetimeRepresents") && (!params.getString("datetimeRepresents").isEmpty())) {
          urlBuilder.addQueryParameter("datetime_represents", escapeString(params.getString("datetimeRepresents")));
        }

        if (params.has("maxNbTransfers") && (!params.getString("maxNbTransfers").isEmpty())) {
          urlBuilder.addQueryParameter("max_nb_transfers", escapeString(String.valueOf(params.getInt("maxNbTransfers"))));
        }

        if (params.has("minNbTransfers") && (!params.getString("minNbTransfers").isEmpty())) {
          urlBuilder.addQueryParameter("min_nb_transfers", escapeString(String.valueOf(params.getInt("minNbTransfers"))));
        }

        if (params.has("firstSectionMode") && (!params.getString("firstSectionMode").isEmpty())) {
          urlBuilder.addQueryParameter("first_section_mode[]", escapeString(String.valueOf(params.getJSONArray("firstSectionMode"))));
        }

        if (params.has("lastSectionMode") && (!params.getString("lastSectionMode").isEmpty())) {
          urlBuilder.addQueryParameter("last_section_mode[]", escapeString(String.valueOf(params.getJSONArray("lastSectionMode"))));
        }

        if (params.has("maxDurationToPt") && (!params.getString("maxDurationToPt").isEmpty())) {
          urlBuilder.addQueryParameter("max_duration_to_pt", escapeString(String.valueOf(params.getInt("maxDurationToPt"))));
        }

        if (params.has("maxWalkingDurationToPt") && (!params.getString("maxWalkingDurationToPt").isEmpty())) {
          urlBuilder.addQueryParameter("max_walking_duration_to_pt", escapeString(String.valueOf(params.getInt("maxWalkingDurationToPt"))));
        }

        if (params.has("maxBikeDurationToPt") && (!params.getString("maxBikeDurationToPt").isEmpty())) {
          urlBuilder.addQueryParameter("max_bike_duration_to_pt", escapeString(String.valueOf(params.getInt("maxBikeDurationToPt"))));
        }

        if (params.has("maxBssDurationToPt") && (!params.getString("maxBssDurationToPt").isEmpty())) {
          urlBuilder.addQueryParameter("max_bss_duration_to_pt", escapeString(String.valueOf(params.getInt("maxBssDurationToPt"))));
        }

        if (params.has("maxCarDurationToPt") && (!params.getString("maxCarDurationToPt").isEmpty())) {
          urlBuilder.addQueryParameter("max_car_duration_to_pt", escapeString(String.valueOf(params.getInt("maxCarDurationToPt"))));
        }

        if (params.has("maxRidesharingDurationToPt") && (!params.getString("maxRidesharingDurationToPt").isEmpty())) {
          urlBuilder.addQueryParameter("max_ridesharing_duration_to_pt", escapeString(String.valueOf(params.getInt("maxRidesharingDurationToPt"))));
        }

        if (params.has("maxCarNoParkDurationToPt") && (!params.getString("maxCarNoParkDurationToPt").isEmpty())) {
          urlBuilder.addQueryParameter("max_car_no_park_duration_to_pt", escapeString(String.valueOf(params.getInt("maxCarNoParkDurationToPt"))));
        }

        if (params.has("maxTaxiDurationToPt") && (!params.getString("maxTaxiDurationToPt").isEmpty())) {
          urlBuilder.addQueryParameter("max_taxi_duration_to_pt", escapeString(String.valueOf(params.getInt("maxTaxiDurationToPt"))));
        }

        if (params.has("walkingSpeed") && (!params.getString("walkingSpeed").isEmpty())) {
          urlBuilder.addQueryParameter("walking_speed", escapeString(String.valueOf(params.getLong("walkingSpeed"))));
        }

        if (params.has("bikeSpeed") && (!params.getString("bikeSpeed").isEmpty())) {
          urlBuilder.addQueryParameter("bike_speed", escapeString(String.valueOf(params.getLong("bikeSpeed"))));
        }

        if (params.has("bssSpeed") && (!params.getString("bssSpeed").isEmpty())) {
          urlBuilder.addQueryParameter("bss_speed", escapeString(String.valueOf(params.getLong("bssSpeed"))));
        }

        if (params.has("carSpeed") && (!params.getString("carSpeed").isEmpty())) {
          urlBuilder.addQueryParameter("car_speed", escapeString(String.valueOf(params.getLong("carSpeed"))));
        }

        if (params.has("ridesharingSpeed") && (!params.getString("ridesharingSpeed").isEmpty())) {
          urlBuilder.addQueryParameter("ridesharing_speed", escapeString(String.valueOf(params.getLong("ridesharingSpeed"))));
        }

        if (params.has("carNoParkSpeed") && (!params.getString("carNoParkSpeed").isEmpty())) {
          urlBuilder.addQueryParameter("car_no_park_speed", escapeString(String.valueOf(params.getLong("carNoParkSpeed"))));
        }

        if (params.has("taxiSpeed") && (!params.getString("taxiSpeed").isEmpty())) {
          urlBuilder.addQueryParameter("taxi_speed", escapeString(String.valueOf(params.getLong("taxiSpeed"))));
        }

        if (params.has("forbiddenUris") && (!params.getString("forbiddenUris").isEmpty())) {
          urlBuilder.addQueryParameter("forbidden_uris[]", escapeString(String.valueOf(params.getJSONArray("forbiddenUris"))));
        }

        if (params.has("allowedId") && (!params.getString("allowedId").isEmpty())) {
          urlBuilder.addQueryParameter("allowed_id[]", escapeString(String.valueOf(params.getJSONArray("allowedId"))));
        }

        if (params.has("disruptionActive") && (!params.getString("disruptionActive").isEmpty())) {
          urlBuilder.addQueryParameter("disruption_active", escapeString(String.valueOf(params.getBoolean("disruptionActive"))));
        }

        if (params.has("dataFreshness") && (!params.getString("dataFreshness").isEmpty())) {
          urlBuilder.addQueryParameter("data_freshness", escapeString(params.getString("dataFreshness")));
        }

        if (params.has("maxDuration") && (!params.getString("maxDuration").isEmpty())) {
          urlBuilder.addQueryParameter("max_duration", escapeString(String.valueOf(params.getInt("maxDuration"))));
        }

        if (params.has("wheelchair") && (!params.getString("wheelchair").isEmpty())) {
          urlBuilder.addQueryParameter("wheelchair", escapeString(String.valueOf(params.getBoolean("wheelchair"))));
        }

        if (params.has("travelerType") && (!params.getString("travelerType").isEmpty())) {
          urlBuilder.addQueryParameter("traveler_type", escapeString(params.getString("travelerType")));
        }

        if (params.has("directPath") && (!params.getString("directPath").isEmpty())) {
          urlBuilder.addQueryParameter("direct_path", escapeString(params.getString("directPath")));
        }

        if (params.has("freeRadiusFrom") && (!params.getString("freeRadiusFrom").isEmpty())) {
          urlBuilder.addQueryParameter("free_radius_from", escapeString(String.valueOf(params.getInt("freeRadiusFrom"))));
        }

        if (params.has("freeRadiusTo") && (!params.getString("freeRadiusTo").isEmpty())) {
          urlBuilder.addQueryParameter("free_radius_to", escapeString(String.valueOf(params.getInt("freeRadiusTo"))));
        }

        if (params.has("directPathMode") && (!params.getString("directPathMode").isEmpty())) {
          urlBuilder.addQueryParameter("direct_path_mode[]", escapeString(String.valueOf(params.getJSONArray("directPathMode"))));
        }

        if (params.has("partnerServices") && (!params.getString("partnerServices").isEmpty())) {
          urlBuilder.addQueryParameter("partner_services[]", escapeString(String.valueOf(params.getJSONArray("partnerServices"))));
        }

        if (params.has("count") && (!params.getString("count").isEmpty())) {
          urlBuilder.addQueryParameter("count", escapeString(String.valueOf(params.getInt("count"))));
        }

        if (params.has("isJourneySchedules") && (!params.getString("isJourneySchedules").isEmpty())) {
          urlBuilder.addQueryParameter("is_journey_schedules", escapeString(String.valueOf(params.getBoolean("isJourneySchedules"))));
        }

        if (params.has("minNbJourneys") && (!params.getString("minNbJourneys").isEmpty())) {
          urlBuilder.addQueryParameter("min_nb_journeys", escapeString(String.valueOf(params.getInt("minNbJourneys"))));
        }

        if (params.has("maxNbJourneys") && (!params.getString("maxNbJourneys").isEmpty())) {
          urlBuilder.addQueryParameter("max_nb_journeys", escapeString(String.valueOf(params.getInt("maxNbJourneys"))));
        }

        if (params.has("bssStands") && (!params.getString("bssStands").isEmpty())) {
          urlBuilder.addQueryParameter("bss_stands", escapeString(String.valueOf(params.getBoolean("bssStands"))));
        }

        if (params.has("addPoiInfos") && (!params.getString("addPoiInfos").isEmpty())) {
          urlBuilder.addQueryParameter("add_poi_infos[]", escapeString(String.valueOf(params.getJSONArray("addPoiInfos"))));
        }

        if (params.has("timeframeDuration") && (!params.getString("timeframeDuration").isEmpty())) {
          urlBuilder.addQueryParameter("timeframe_duration", escapeString(String.valueOf(params.getInt("timeframeDuration"))));
        }

        if (params.has("equipmentDetails") && (!params.getString("equipmentDetails").isEmpty())) {
          urlBuilder.addQueryParameter("equipment_details", escapeString(String.valueOf(params.getBoolean("equipmentDetails"))));
        }

        if (params.has("maxTaxiDirectPathDuration") && (!params.getString("maxTaxiDirectPathDuration").isEmpty())) {
          urlBuilder.addQueryParameter("max_taxi_direct_path_duration", escapeString(String.valueOf(params.getInt("maxTaxiDirectPathDuration"))));
        }

        if (params.has("maxWalkingDirectPathDuration") && (!params.getString("maxWalkingDirectPathDuration").isEmpty())) {
          urlBuilder.addQueryParameter("max_walking_direct_path_duration", escapeString(String.valueOf(params.getInt("maxWalkingDirectPathDuration"))));
        }

        if (params.has("maxCarNoParkDirectPathDuration") && (!params.getString("maxCarNoParkDirectPathDuration").isEmpty())) {
          urlBuilder.addQueryParameter("max_car_no_park_direct_path_duration", escapeString(String.valueOf(params.getInt("maxCarNoParkDirectPathDuration"))));
        }

        if (params.has("maxCarDirectPathDuration") && (!params.getString("maxCarDirectPathDuration").isEmpty())) {
          urlBuilder.addQueryParameter("max_car_direct_path_duration", escapeString(String.valueOf(params.getInt("maxCarDirectPathDuration"))));
        }

        if (params.has("maxRidesharingDirectPathDuration") && (!params.getString("maxRidesharingDirectPathDuration").isEmpty())) {
          urlBuilder.addQueryParameter("max_ridesharing_direct_path_duration", escapeString(String.valueOf(params.getInt("maxRidesharingDirectPathDuration"))));
        }

        if (params.has("maxBssDirectPathDuration") && (!params.getString("maxBssDirectPathDuration").isEmpty())) {
          urlBuilder.addQueryParameter("max_bss_direct_path_duration", escapeString(String.valueOf(params.getInt("maxBssDirectPathDuration"))));
        }

        if (params.has("maxBikeDirectPathDuration") && (!params.getString("maxBikeDirectPathDuration").isEmpty())) {
          urlBuilder.addQueryParameter("max_bike_direct_path_duration", escapeString(String.valueOf(params.getInt("maxBikeDirectPathDuration"))));
        }

        if (params.has("depth") && (!params.getString("depth").isEmpty())) {
          urlBuilder.addQueryParameter("depth", escapeString(String.valueOf(params.getInt("depth"))));
        }

        if (params.has("maxWaitingDuration") && (!params.getString("maxWaitingDuration").isEmpty())) {
          urlBuilder.addQueryParameter("max_waiting_duration", escapeString(String.valueOf(params.getInt("maxWaitingDuration"))));
        }

        HttpUrl url = urlBuilder
          .addPathSegments(path)
          .build();
        Request request = requestBuilder.url(url)
          .build();

        client.newCall(request).enqueue(new Callback() {

          @Override
          public void onFailure(@NonNull Call call, @NonNull IOException e) {
            String errorMessage = "Problem during request | " + String.valueOf(e.hashCode()) + ": " + e.getMessage();
            callbackContext.error(errorMessage);
          }

          @Override
          public void onResponse(@NonNull Call call, @NonNull Response response) {
            if (response.isSuccessful()) {
              try {
                JSONObject jsonObject = new JSONObject(Objects.requireNonNull(response.body()).string());
                callbackContext.success(jsonObject);
              } catch (Exception e) {
                String errorMessage = "Problem during response parsing";
                callbackContext.error(errorMessage);
              }
            } else {
              callbackContext.error("Unexpected code " + response.code() + " | message: " + response.message());
            }
          }
        });
      } catch (Exception e) {
        String errorMessage = "Problem during request building | " + e.hashCode() + ": " + e.getMessage();
        callbackContext.error(errorMessage);
      }
    });
  }

  private void journeys(final JSONObject params, final CallbackContext callbackContext) {
    cordova.getThreadPool().execute(() -> {
      try {
        HttpUrl.Builder urlBuilder = new HttpUrl.Builder()
          .scheme("https")
          .host("api.navitia.io")
          .addPathSegment("v1");
        Request.Builder requestBuilder = new Request.Builder()
          .header("Authorization", token);
        String path = "/journeys".substring(1);

        if (params.has("from") && (!params.getString("from").isEmpty())) {
          urlBuilder.addQueryParameter("from", escapeString(params.getString("from")));
        }

        if (params.has("to") && (!params.getString("to").isEmpty())) {
          urlBuilder.addQueryParameter("to", escapeString(params.getString("to")));
        }

        if (params.has("datetime") && (!params.getString("datetime").isEmpty())) {
          urlBuilder.addQueryParameter("datetime", escapeString(String.valueOf(params.getString("datetime"))));
        }

        if (params.has("datetimeRepresents") && (!params.getString("datetimeRepresents").isEmpty())) {
          urlBuilder.addQueryParameter("datetime_represents", escapeString(params.getString("datetimeRepresents")));
        }

        if (params.has("maxNbTransfers") && (!params.getString("maxNbTransfers").isEmpty())) {
          urlBuilder.addQueryParameter("max_nb_transfers", escapeString(String.valueOf(params.getInt("maxNbTransfers"))));
        }

        if (params.has("minNbTransfers") && (!params.getString("minNbTransfers").isEmpty())) {
          urlBuilder.addQueryParameter("min_nb_transfers", escapeString(String.valueOf(params.getInt("minNbTransfers"))));
        }

        if (params.has("firstSectionMode") && (!params.getString("firstSectionMode").isEmpty())) {
          urlBuilder.addQueryParameter("first_section_mode[]", escapeString(String.valueOf(params.getJSONArray("firstSectionMode"))));
        }

        if (params.has("lastSectionMode") && (!params.getString("lastSectionMode").isEmpty())) {
          urlBuilder.addQueryParameter("last_section_mode[]", escapeString(String.valueOf(params.getJSONArray("lastSectionMode"))));
        }

        if (params.has("maxDurationToPt") && (!params.getString("maxDurationToPt").isEmpty())) {
          urlBuilder.addQueryParameter("max_duration_to_pt", escapeString(String.valueOf(params.getInt("maxDurationToPt"))));
        }

        if (params.has("maxWalkingDurationToPt") && (!params.getString("maxWalkingDurationToPt").isEmpty())) {
          urlBuilder.addQueryParameter("max_walking_duration_to_pt", escapeString(String.valueOf(params.getInt("maxWalkingDurationToPt"))));
        }

        if (params.has("maxBikeDurationToPt") && (!params.getString("maxBikeDurationToPt").isEmpty())) {
          urlBuilder.addQueryParameter("max_bike_duration_to_pt", escapeString(String.valueOf(params.getInt("maxBikeDurationToPt"))));
        }

        if (params.has("maxBssDurationToPt") && (!params.getString("maxBssDurationToPt").isEmpty())) {
          urlBuilder.addQueryParameter("max_bss_duration_to_pt", escapeString(String.valueOf(params.getInt("maxBssDurationToPt"))));
        }

        if (params.has("maxCarDurationToPt") && (!params.getString("maxCarDurationToPt").isEmpty())) {
          urlBuilder.addQueryParameter("max_car_duration_to_pt", escapeString(String.valueOf(params.getInt("maxCarDurationToPt"))));
        }

        if (params.has("maxRidesharingDurationToPt") && (!params.getString("maxRidesharingDurationToPt").isEmpty())) {
          urlBuilder.addQueryParameter("max_ridesharing_duration_to_pt", escapeString(String.valueOf(params.getInt("maxRidesharingDurationToPt"))));
        }

        if (params.has("maxCarNoParkDurationToPt") && (!params.getString("maxCarNoParkDurationToPt").isEmpty())) {
          urlBuilder.addQueryParameter("max_car_no_park_duration_to_pt", escapeString(String.valueOf(params.getInt("maxCarNoParkDurationToPt"))));
        }

        if (params.has("maxTaxiDurationToPt") && (!params.getString("maxTaxiDurationToPt").isEmpty())) {
          urlBuilder.addQueryParameter("max_taxi_duration_to_pt", escapeString(String.valueOf(params.getInt("maxTaxiDurationToPt"))));
        }

        if (params.has("walkingSpeed") && (!params.getString("walkingSpeed").isEmpty())) {
          urlBuilder.addQueryParameter("walking_speed", escapeString(String.valueOf(params.getLong("walkingSpeed"))));
        }

        if (params.has("bikeSpeed") && (!params.getString("bikeSpeed").isEmpty())) {
          urlBuilder.addQueryParameter("bike_speed", escapeString(String.valueOf(params.getLong("bikeSpeed"))));
        }

        if (params.has("bssSpeed") && (!params.getString("bssSpeed").isEmpty())) {
          urlBuilder.addQueryParameter("bss_speed", escapeString(String.valueOf(params.getLong("bssSpeed"))));
        }

        if (params.has("carSpeed") && (!params.getString("carSpeed").isEmpty())) {
          urlBuilder.addQueryParameter("car_speed", escapeString(String.valueOf(params.getLong("carSpeed"))));
        }

        if (params.has("ridesharingSpeed") && (!params.getString("ridesharingSpeed").isEmpty())) {
          urlBuilder.addQueryParameter("ridesharing_speed", escapeString(String.valueOf(params.getLong("ridesharingSpeed"))));
        }

        if (params.has("carNoParkSpeed") && (!params.getString("carNoParkSpeed").isEmpty())) {
          urlBuilder.addQueryParameter("car_no_park_speed", escapeString(String.valueOf(params.getLong("carNoParkSpeed"))));
        }

        if (params.has("taxiSpeed") && (!params.getString("taxiSpeed").isEmpty())) {
          urlBuilder.addQueryParameter("taxi_speed", escapeString(String.valueOf(params.getLong("taxiSpeed"))));
        }

        if (params.has("forbiddenUris") && (!params.getString("forbiddenUris").isEmpty())) {
          urlBuilder.addQueryParameter("forbidden_uris[]", escapeString(String.valueOf(params.getJSONArray("forbiddenUris"))));
        }

        if (params.has("allowedId") && (!params.getString("allowedId").isEmpty())) {
          urlBuilder.addQueryParameter("allowed_id[]", escapeString(String.valueOf(params.getJSONArray("allowedId"))));
        }

        if (params.has("disruptionActive") && (!params.getString("disruptionActive").isEmpty())) {
          urlBuilder.addQueryParameter("disruption_active", escapeString(String.valueOf(params.getBoolean("disruptionActive"))));
        }

        if (params.has("dataFreshness") && (!params.getString("dataFreshness").isEmpty())) {
          urlBuilder.addQueryParameter("data_freshness", escapeString(params.getString("dataFreshness")));
        }

        if (params.has("maxDuration") && (!params.getString("maxDuration").isEmpty())) {
          urlBuilder.addQueryParameter("max_duration", escapeString(String.valueOf(params.getInt("maxDuration"))));
        }

        if (params.has("wheelchair") && (!params.getString("wheelchair").isEmpty())) {
          urlBuilder.addQueryParameter("wheelchair", escapeString(String.valueOf(params.getBoolean("wheelchair"))));
        }

        if (params.has("travelerType") && (!params.getString("travelerType").isEmpty())) {
          urlBuilder.addQueryParameter("traveler_type", escapeString(params.getString("travelerType")));
        }

        if (params.has("directPath") && (!params.getString("directPath").isEmpty())) {
          urlBuilder.addQueryParameter("direct_path", escapeString(params.getString("directPath")));
        }

        if (params.has("freeRadiusFrom") && (!params.getString("freeRadiusFrom").isEmpty())) {
          urlBuilder.addQueryParameter("free_radius_from", escapeString(String.valueOf(params.getInt("freeRadiusFrom"))));
        }

        if (params.has("freeRadiusTo") && (!params.getString("freeRadiusTo").isEmpty())) {
          urlBuilder.addQueryParameter("free_radius_to", escapeString(String.valueOf(params.getInt("freeRadiusTo"))));
        }

        if (params.has("directPathMode") && (!params.getString("directPathMode").isEmpty())) {
          urlBuilder.addQueryParameter("direct_path_mode[]", escapeString(String.valueOf(params.getJSONArray("directPathMode"))));
        }

        if (params.has("partnerServices") && (!params.getString("partnerServices").isEmpty())) {
          urlBuilder.addQueryParameter("partner_services[]", escapeString(String.valueOf(params.getJSONArray("partnerServices"))));
        }

        if (params.has("count") && (!params.getString("count").isEmpty())) {
          urlBuilder.addQueryParameter("count", escapeString(String.valueOf(params.getInt("count"))));
        }

        if (params.has("isJourneySchedules") && (!params.getString("isJourneySchedules").isEmpty())) {
          urlBuilder.addQueryParameter("is_journey_schedules", escapeString(String.valueOf(params.getBoolean("isJourneySchedules"))));
        }

        if (params.has("minNbJourneys") && (!params.getString("minNbJourneys").isEmpty())) {
          urlBuilder.addQueryParameter("min_nb_journeys", escapeString(String.valueOf(params.getInt("minNbJourneys"))));
        }

        if (params.has("maxNbJourneys") && (!params.getString("maxNbJourneys").isEmpty())) {
          urlBuilder.addQueryParameter("max_nb_journeys", escapeString(String.valueOf(params.getInt("maxNbJourneys"))));
        }

        if (params.has("bssStands") && (!params.getString("bssStands").isEmpty())) {
          urlBuilder.addQueryParameter("bss_stands", escapeString(String.valueOf(params.getBoolean("bssStands"))));
        }

        if (params.has("addPoiInfos") && (!params.getString("addPoiInfos").isEmpty())) {
          urlBuilder.addQueryParameter("add_poi_infos[]", escapeString(String.valueOf(params.getJSONArray("addPoiInfos"))));
        }

        if (params.has("timeframeDuration") && (!params.getString("timeframeDuration").isEmpty())) {
          urlBuilder.addQueryParameter("timeframe_duration", escapeString(String.valueOf(params.getInt("timeframeDuration"))));
        }

        if (params.has("equipmentDetails") && (!params.getString("equipmentDetails").isEmpty())) {
          urlBuilder.addQueryParameter("equipment_details", escapeString(String.valueOf(params.getBoolean("equipmentDetails"))));
        }

        if (params.has("maxTaxiDirectPathDuration") && (!params.getString("maxTaxiDirectPathDuration").isEmpty())) {
          urlBuilder.addQueryParameter("max_taxi_direct_path_duration", escapeString(String.valueOf(params.getInt("maxTaxiDirectPathDuration"))));
        }

        if (params.has("maxWalkingDirectPathDuration") && (!params.getString("maxWalkingDirectPathDuration").isEmpty())) {
          urlBuilder.addQueryParameter("max_walking_direct_path_duration", escapeString(String.valueOf(params.getInt("maxWalkingDirectPathDuration"))));
        }

        if (params.has("maxCarNoParkDirectPathDuration") && (!params.getString("maxCarNoParkDirectPathDuration").isEmpty())) {
          urlBuilder.addQueryParameter("max_car_no_park_direct_path_duration", escapeString(String.valueOf(params.getInt("maxCarNoParkDirectPathDuration"))));
        }

        if (params.has("maxCarDirectPathDuration") && (!params.getString("maxCarDirectPathDuration").isEmpty())) {
          urlBuilder.addQueryParameter("max_car_direct_path_duration", escapeString(String.valueOf(params.getInt("maxCarDirectPathDuration"))));
        }

        if (params.has("maxRidesharingDirectPathDuration") && (!params.getString("maxRidesharingDirectPathDuration").isEmpty())) {
          urlBuilder.addQueryParameter("max_ridesharing_direct_path_duration", escapeString(String.valueOf(params.getInt("maxRidesharingDirectPathDuration"))));
        }

        if (params.has("maxBssDirectPathDuration") && (!params.getString("maxBssDirectPathDuration").isEmpty())) {
          urlBuilder.addQueryParameter("max_bss_direct_path_duration", escapeString(String.valueOf(params.getInt("maxBssDirectPathDuration"))));
        }

        if (params.has("maxBikeDirectPathDuration") && (!params.getString("maxBikeDirectPathDuration").isEmpty())) {
          urlBuilder.addQueryParameter("max_bike_direct_path_duration", escapeString(String.valueOf(params.getInt("maxBikeDirectPathDuration"))));
        }

        if (params.has("depth") && (!params.getString("depth").isEmpty())) {
          urlBuilder.addQueryParameter("depth", escapeString(String.valueOf(params.getInt("depth"))));
        }

        if (params.has("maxWaitingDuration") && (!params.getString("maxWaitingDuration").isEmpty())) {
          urlBuilder.addQueryParameter("max_waiting_duration", escapeString(String.valueOf(params.getInt("maxWaitingDuration"))));
        }

        HttpUrl url = urlBuilder
          .addPathSegments(path)
          .build();
        Request request = requestBuilder.url(url)
          .build();

        client.newCall(request).enqueue(new Callback() {

          @Override
          public void onFailure(@NonNull Call call, @NonNull IOException e) {
            String errorMessage = "Problem during request | " + String.valueOf(e.hashCode()) + ": " + e.getMessage();
            callbackContext.error(errorMessage);
          }

          @Override
          public void onResponse(@NonNull Call call, @NonNull Response response) {
            if (response.isSuccessful()) {
              try {
                JSONObject jsonObject = new JSONObject(Objects.requireNonNull(response.body()).string());
                callbackContext.success(jsonObject);
              } catch (Exception e) {
                String errorMessage = "Problem during response parsing";
                callbackContext.error(errorMessage);
              }
            } else {
              //callbackContext.error("Unexpected code " + response.code() + " | message: " + response.message());
              callbackContext.error(response.getRequest().getUrl() + " | Unexpected code " + response.code() + " | message: " + response.message());
            }
          }
        });
      } catch (Exception e) {
        String errorMessage = "Problem during request building | " + e.hashCode() + ": " + e.getMessage();
        callbackContext.error(errorMessage);
      }
    });
  }

  private void coverageLonLatLineGroups(final JSONObject params, final CallbackContext callbackContext) {
    cordova.getThreadPool().execute(() -> {
      try {
        HttpUrl.Builder urlBuilder = new HttpUrl.Builder()
          .scheme("https")
          .host("api.navitia.io")
          .addPathSegment("v1");
        Request.Builder requestBuilder = new Request.Builder()
          .header("Authorization", token);
        String path = "/coverage/{lon};{lat}/line_groups".substring(1);

        if (params.has("lat") && (!params.getString("lat").isEmpty())) {
          path = path.replaceAll("\\{" + "lat" + "\\}", escapeString(String.valueOf(params.getLong("lat"))));
        }

        if (params.has("lon") && (!params.getString("lon").isEmpty())) {
          path = path.replaceAll("\\{" + "lon" + "\\}", escapeString(String.valueOf(params.getLong("lon"))));
        }

        if (params.has("startPage") && (!params.getString("startPage").isEmpty())) {
          urlBuilder.addQueryParameter("start_page", escapeString(String.valueOf(params.getInt("startPage"))));
        }

        if (params.has("count") && (!params.getString("count").isEmpty())) {
          urlBuilder.addQueryParameter("count", escapeString(String.valueOf(params.getInt("count"))));
        }

        if (params.has("depth") && (!params.getString("depth").isEmpty())) {
          urlBuilder.addQueryParameter("depth", escapeString(String.valueOf(params.getInt("depth"))));
        }

        if (params.has("forbiddenId") && (!params.getString("forbiddenId").isEmpty())) {
          urlBuilder.addQueryParameter("forbidden_id[]", escapeString(String.valueOf(params.getJSONArray("forbiddenId"))));
        }

        if (params.has("forbiddenUris") && (!params.getString("forbiddenUris").isEmpty())) {
          urlBuilder.addQueryParameter("forbidden_uris[]", escapeString(String.valueOf(params.getJSONArray("forbiddenUris"))));
        }

        if (params.has("externalCode") && (!params.getString("externalCode").isEmpty())) {
          urlBuilder.addQueryParameter("external_code", escapeString(params.getString("externalCode")));
        }

        if (params.has("headsign") && (!params.getString("headsign").isEmpty())) {
          urlBuilder.addQueryParameter("headsign", escapeString(params.getString("headsign")));
        }

        if (params.has("showCodes") && (!params.getString("showCodes").isEmpty())) {
          urlBuilder.addQueryParameter("show_codes", escapeString(String.valueOf(params.getBoolean("showCodes"))));
        }

        if (params.has("odtLevel") && (!params.getString("odtLevel").isEmpty())) {
          urlBuilder.addQueryParameter("odt_level", escapeString(params.getString("odtLevel")));
        }

        if (params.has("dataFreshness") && (!params.getString("dataFreshness").isEmpty())) {
          urlBuilder.addQueryParameter("data_freshness", escapeString(params.getString("dataFreshness")));
        }

        if (params.has("distance") && (!params.getString("distance").isEmpty())) {
          urlBuilder.addQueryParameter("distance", escapeString(String.valueOf(params.getInt("distance"))));
        }

        if (params.has("since") && (!params.getString("since").isEmpty())) {
          urlBuilder.addQueryParameter("since", escapeString(String.valueOf(params.getString("since"))));
        }

        if (params.has("until") && (!params.getString("until").isEmpty())) {
          urlBuilder.addQueryParameter("until", escapeString(String.valueOf(params.getString("until"))));
        }

        if (params.has("disableGeojson") && (!params.getString("disableGeojson").isEmpty())) {
          urlBuilder.addQueryParameter("disable_geojson", escapeString(String.valueOf(params.getBoolean("disableGeojson"))));
        }

        if (params.has("disableDisruption") && (!params.getString("disableDisruption").isEmpty())) {
          urlBuilder.addQueryParameter("disable_disruption", escapeString(String.valueOf(params.getBoolean("disableDisruption"))));
        }

        if (params.has("filter") && (!params.getString("filter").isEmpty())) {
          urlBuilder.addQueryParameter("filter", escapeString(params.getString("filter")));
        }

        if (params.has("tags") && (!params.getString("tags").isEmpty())) {
          urlBuilder.addQueryParameter("tags[]", escapeString(String.valueOf(params.getJSONArray("tags"))));
        }

        if (params.has("originalId") && (!params.getString("originalId").isEmpty())) {
          urlBuilder.addQueryParameter("original_id", escapeString(params.getString("originalId")));
        }

        HttpUrl url = urlBuilder
          .addPathSegments(path)
          .build();
        Request request = requestBuilder.url(url)
          .build();

        client.newCall(request).enqueue(new Callback() {

          @Override
          public void onFailure(@NonNull Call call, @NonNull IOException e) {
            String errorMessage = "Problem during request | " + String.valueOf(e.hashCode()) + ": " + e.getMessage();
            callbackContext.error(errorMessage);
          }

          @Override
          public void onResponse(@NonNull Call call, @NonNull Response response) {
            if (response.isSuccessful()) {
              try {
                JSONObject jsonObject = new JSONObject(Objects.requireNonNull(response.body()).string());
                callbackContext.success(jsonObject);
              } catch (Exception e) {
                String errorMessage = "Problem during response parsing";
                callbackContext.error(errorMessage);
              }
            } else {
              callbackContext.error("Unexpected code " + response.code() + " | message: " + response.message());
            }
          }
        });
      } catch (Exception e) {
        String errorMessage = "Problem during request building | " + e.hashCode() + ": " + e.getMessage();
        callbackContext.error(errorMessage);
      }
    });
  }

  private void coverageLonLatLineGroupsId(final JSONObject params, final CallbackContext callbackContext) {
    cordova.getThreadPool().execute(() -> {
      try {
        HttpUrl.Builder urlBuilder = new HttpUrl.Builder()
          .scheme("https")
          .host("api.navitia.io")
          .addPathSegment("v1");
        Request.Builder requestBuilder = new Request.Builder()
          .header("Authorization", token);
        String path = "/coverage/{lon};{lat}/line_groups/{id}".substring(1);

        if (params.has("lat") && (!params.getString("lat").isEmpty())) {
          path = path.replaceAll("\\{" + "lat" + "\\}", escapeString(String.valueOf(params.getLong("lat"))));
        }

        if (params.has("lon") && (!params.getString("lon").isEmpty())) {
          path = path.replaceAll("\\{" + "lon" + "\\}", escapeString(String.valueOf(params.getLong("lon"))));
        }

        if (params.has("id") && (!params.getString("id").isEmpty())) {
          path = path.replaceAll("\\{" + "id" + "\\}", escapeString(params.getString("id")));
        }

        if (params.has("startPage") && (!params.getString("startPage").isEmpty())) {
          urlBuilder.addQueryParameter("start_page", escapeString(String.valueOf(params.getInt("startPage"))));
        }

        if (params.has("count") && (!params.getString("count").isEmpty())) {
          urlBuilder.addQueryParameter("count", escapeString(String.valueOf(params.getInt("count"))));
        }

        if (params.has("depth") && (!params.getString("depth").isEmpty())) {
          urlBuilder.addQueryParameter("depth", escapeString(String.valueOf(params.getInt("depth"))));
        }

        if (params.has("forbiddenId") && (!params.getString("forbiddenId").isEmpty())) {
          urlBuilder.addQueryParameter("forbidden_id[]", escapeString(String.valueOf(params.getJSONArray("forbiddenId"))));
        }

        if (params.has("forbiddenUris") && (!params.getString("forbiddenUris").isEmpty())) {
          urlBuilder.addQueryParameter("forbidden_uris[]", escapeString(String.valueOf(params.getJSONArray("forbiddenUris"))));
        }

        if (params.has("externalCode") && (!params.getString("externalCode").isEmpty())) {
          urlBuilder.addQueryParameter("external_code", escapeString(params.getString("externalCode")));
        }

        if (params.has("headsign") && (!params.getString("headsign").isEmpty())) {
          urlBuilder.addQueryParameter("headsign", escapeString(params.getString("headsign")));
        }

        if (params.has("showCodes") && (!params.getString("showCodes").isEmpty())) {
          urlBuilder.addQueryParameter("show_codes", escapeString(String.valueOf(params.getBoolean("showCodes"))));
        }

        if (params.has("odtLevel") && (!params.getString("odtLevel").isEmpty())) {
          urlBuilder.addQueryParameter("odt_level", escapeString(params.getString("odtLevel")));
        }

        if (params.has("dataFreshness") && (!params.getString("dataFreshness").isEmpty())) {
          urlBuilder.addQueryParameter("data_freshness", escapeString(params.getString("dataFreshness")));
        }

        if (params.has("distance") && (!params.getString("distance").isEmpty())) {
          urlBuilder.addQueryParameter("distance", escapeString(String.valueOf(params.getInt("distance"))));
        }

        if (params.has("since") && (!params.getString("since").isEmpty())) {
          urlBuilder.addQueryParameter("since", escapeString(String.valueOf(params.getString("since"))));
        }

        if (params.has("until") && (!params.getString("until").isEmpty())) {
          urlBuilder.addQueryParameter("until", escapeString(String.valueOf(params.getString("until"))));
        }

        if (params.has("disableGeojson") && (!params.getString("disableGeojson").isEmpty())) {
          urlBuilder.addQueryParameter("disable_geojson", escapeString(String.valueOf(params.getBoolean("disableGeojson"))));
        }

        if (params.has("disableDisruption") && (!params.getString("disableDisruption").isEmpty())) {
          urlBuilder.addQueryParameter("disable_disruption", escapeString(String.valueOf(params.getBoolean("disableDisruption"))));
        }

        if (params.has("tags") && (!params.getString("tags").isEmpty())) {
          urlBuilder.addQueryParameter("tags[]", escapeString(String.valueOf(params.getJSONArray("tags"))));
        }

        if (params.has("originalId") && (!params.getString("originalId").isEmpty())) {
          urlBuilder.addQueryParameter("original_id", escapeString(params.getString("originalId")));
        }

        HttpUrl url = urlBuilder
          .addPathSegments(path)
          .build();
        Request request = requestBuilder.url(url)
          .build();

        client.newCall(request).enqueue(new Callback() {

          @Override
          public void onFailure(@NonNull Call call, @NonNull IOException e) {
            String errorMessage = "Problem during request | " + String.valueOf(e.hashCode()) + ": " + e.getMessage();
            callbackContext.error(errorMessage);
          }

          @Override
          public void onResponse(@NonNull Call call, @NonNull Response response) {
            if (response.isSuccessful()) {
              try {
                JSONObject jsonObject = new JSONObject(Objects.requireNonNull(response.body()).string());
                callbackContext.success(jsonObject);
              } catch (Exception e) {
                String errorMessage = "Problem during response parsing";
                callbackContext.error(errorMessage);
              }
            } else {
              callbackContext.error("Unexpected code " + response.code() + " | message: " + response.message());
            }
          }
        });
      } catch (Exception e) {
        String errorMessage = "Problem during request building | " + e.hashCode() + ": " + e.getMessage();
        callbackContext.error(errorMessage);
      }
    });
  }

  private void coverageLonLatUriLineGroups(final JSONObject params, final CallbackContext callbackContext) {
    cordova.getThreadPool().execute(() -> {
      try {
        HttpUrl.Builder urlBuilder = new HttpUrl.Builder()
          .scheme("https")
          .host("api.navitia.io")
          .addPathSegment("v1");
        Request.Builder requestBuilder = new Request.Builder()
          .header("Authorization", token);
        String path = "/coverage/{lon};{lat}/{uri}/line_groups".substring(1);

        if (params.has("lat") && (!params.getString("lat").isEmpty())) {
          path = path.replaceAll("\\{" + "lat" + "\\}", escapeString(String.valueOf(params.getLong("lat"))));
        }

        if (params.has("lon") && (!params.getString("lon").isEmpty())) {
          path = path.replaceAll("\\{" + "lon" + "\\}", escapeString(String.valueOf(params.getLong("lon"))));
        }

        if (params.has("uri") && (!params.getString("uri").isEmpty())) {
          path = path.replaceAll("\\{" + "uri" + "\\}", escapeString(params.getString("uri")));
        }

        if (params.has("startPage") && (!params.getString("startPage").isEmpty())) {
          urlBuilder.addQueryParameter("start_page", escapeString(String.valueOf(params.getInt("startPage"))));
        }

        if (params.has("count") && (!params.getString("count").isEmpty())) {
          urlBuilder.addQueryParameter("count", escapeString(String.valueOf(params.getInt("count"))));
        }

        if (params.has("depth") && (!params.getString("depth").isEmpty())) {
          urlBuilder.addQueryParameter("depth", escapeString(String.valueOf(params.getInt("depth"))));
        }

        if (params.has("forbiddenId") && (!params.getString("forbiddenId").isEmpty())) {
          urlBuilder.addQueryParameter("forbidden_id[]", escapeString(String.valueOf(params.getJSONArray("forbiddenId"))));
        }

        if (params.has("forbiddenUris") && (!params.getString("forbiddenUris").isEmpty())) {
          urlBuilder.addQueryParameter("forbidden_uris[]", escapeString(String.valueOf(params.getJSONArray("forbiddenUris"))));
        }

        if (params.has("externalCode") && (!params.getString("externalCode").isEmpty())) {
          urlBuilder.addQueryParameter("external_code", escapeString(params.getString("externalCode")));
        }

        if (params.has("headsign") && (!params.getString("headsign").isEmpty())) {
          urlBuilder.addQueryParameter("headsign", escapeString(params.getString("headsign")));
        }

        if (params.has("showCodes") && (!params.getString("showCodes").isEmpty())) {
          urlBuilder.addQueryParameter("show_codes", escapeString(String.valueOf(params.getBoolean("showCodes"))));
        }

        if (params.has("odtLevel") && (!params.getString("odtLevel").isEmpty())) {
          urlBuilder.addQueryParameter("odt_level", escapeString(params.getString("odtLevel")));
        }

        if (params.has("dataFreshness") && (!params.getString("dataFreshness").isEmpty())) {
          urlBuilder.addQueryParameter("data_freshness", escapeString(params.getString("dataFreshness")));
        }

        if (params.has("distance") && (!params.getString("distance").isEmpty())) {
          urlBuilder.addQueryParameter("distance", escapeString(String.valueOf(params.getInt("distance"))));
        }

        if (params.has("since") && (!params.getString("since").isEmpty())) {
          urlBuilder.addQueryParameter("since", escapeString(String.valueOf(params.getString("since"))));
        }

        if (params.has("until") && (!params.getString("until").isEmpty())) {
          urlBuilder.addQueryParameter("until", escapeString(String.valueOf(params.getString("until"))));
        }

        if (params.has("disableGeojson") && (!params.getString("disableGeojson").isEmpty())) {
          urlBuilder.addQueryParameter("disable_geojson", escapeString(String.valueOf(params.getBoolean("disableGeojson"))));
        }

        if (params.has("disableDisruption") && (!params.getString("disableDisruption").isEmpty())) {
          urlBuilder.addQueryParameter("disable_disruption", escapeString(String.valueOf(params.getBoolean("disableDisruption"))));
        }

        if (params.has("filter") && (!params.getString("filter").isEmpty())) {
          urlBuilder.addQueryParameter("filter", escapeString(params.getString("filter")));
        }

        if (params.has("tags") && (!params.getString("tags").isEmpty())) {
          urlBuilder.addQueryParameter("tags[]", escapeString(String.valueOf(params.getJSONArray("tags"))));
        }

        if (params.has("originalId") && (!params.getString("originalId").isEmpty())) {
          urlBuilder.addQueryParameter("original_id", escapeString(params.getString("originalId")));
        }

        HttpUrl url = urlBuilder
          .addPathSegments(path)
          .build();
        Request request = requestBuilder.url(url)
          .build();

        client.newCall(request).enqueue(new Callback() {

          @Override
          public void onFailure(@NonNull Call call, @NonNull IOException e) {
            String errorMessage = "Problem during request | " + String.valueOf(e.hashCode()) + ": " + e.getMessage();
            callbackContext.error(errorMessage);
          }

          @Override
          public void onResponse(@NonNull Call call, @NonNull Response response) {
            if (response.isSuccessful()) {
              try {
                JSONObject jsonObject = new JSONObject(Objects.requireNonNull(response.body()).string());
                callbackContext.success(jsonObject);
              } catch (Exception e) {
                String errorMessage = "Problem during response parsing";
                callbackContext.error(errorMessage);
              }
            } else {
              callbackContext.error("Unexpected code " + response.code() + " | message: " + response.message());
            }
          }
        });
      } catch (Exception e) {
        String errorMessage = "Problem during request building | " + e.hashCode() + ": " + e.getMessage();
        callbackContext.error(errorMessage);
      }
    });
  }

  private void coverageLonLatUriLineGroupsId(final JSONObject params, final CallbackContext callbackContext) {
    cordova.getThreadPool().execute(() -> {
      try {
        HttpUrl.Builder urlBuilder = new HttpUrl.Builder()
          .scheme("https")
          .host("api.navitia.io")
          .addPathSegment("v1");
        Request.Builder requestBuilder = new Request.Builder()
          .header("Authorization", token);
        String path = "/coverage/{lon};{lat}/{uri}/line_groups/{id}".substring(1);

        if (params.has("lat") && (!params.getString("lat").isEmpty())) {
          path = path.replaceAll("\\{" + "lat" + "\\}", escapeString(String.valueOf(params.getLong("lat"))));
        }

        if (params.has("lon") && (!params.getString("lon").isEmpty())) {
          path = path.replaceAll("\\{" + "lon" + "\\}", escapeString(String.valueOf(params.getLong("lon"))));
        }

        if (params.has("uri") && (!params.getString("uri").isEmpty())) {
          path = path.replaceAll("\\{" + "uri" + "\\}", escapeString(params.getString("uri")));
        }

        if (params.has("id") && (!params.getString("id").isEmpty())) {
          path = path.replaceAll("\\{" + "id" + "\\}", escapeString(params.getString("id")));
        }

        if (params.has("startPage") && (!params.getString("startPage").isEmpty())) {
          urlBuilder.addQueryParameter("start_page", escapeString(String.valueOf(params.getInt("startPage"))));
        }

        if (params.has("count") && (!params.getString("count").isEmpty())) {
          urlBuilder.addQueryParameter("count", escapeString(String.valueOf(params.getInt("count"))));
        }

        if (params.has("depth") && (!params.getString("depth").isEmpty())) {
          urlBuilder.addQueryParameter("depth", escapeString(String.valueOf(params.getInt("depth"))));
        }

        if (params.has("forbiddenId") && (!params.getString("forbiddenId").isEmpty())) {
          urlBuilder.addQueryParameter("forbidden_id[]", escapeString(String.valueOf(params.getJSONArray("forbiddenId"))));
        }

        if (params.has("forbiddenUris") && (!params.getString("forbiddenUris").isEmpty())) {
          urlBuilder.addQueryParameter("forbidden_uris[]", escapeString(String.valueOf(params.getJSONArray("forbiddenUris"))));
        }

        if (params.has("externalCode") && (!params.getString("externalCode").isEmpty())) {
          urlBuilder.addQueryParameter("external_code", escapeString(params.getString("externalCode")));
        }

        if (params.has("headsign") && (!params.getString("headsign").isEmpty())) {
          urlBuilder.addQueryParameter("headsign", escapeString(params.getString("headsign")));
        }

        if (params.has("showCodes") && (!params.getString("showCodes").isEmpty())) {
          urlBuilder.addQueryParameter("show_codes", escapeString(String.valueOf(params.getBoolean("showCodes"))));
        }

        if (params.has("odtLevel") && (!params.getString("odtLevel").isEmpty())) {
          urlBuilder.addQueryParameter("odt_level", escapeString(params.getString("odtLevel")));
        }

        if (params.has("dataFreshness") && (!params.getString("dataFreshness").isEmpty())) {
          urlBuilder.addQueryParameter("data_freshness", escapeString(params.getString("dataFreshness")));
        }

        if (params.has("distance") && (!params.getString("distance").isEmpty())) {
          urlBuilder.addQueryParameter("distance", escapeString(String.valueOf(params.getInt("distance"))));
        }

        if (params.has("since") && (!params.getString("since").isEmpty())) {
          urlBuilder.addQueryParameter("since", escapeString(String.valueOf(params.getString("since"))));
        }

        if (params.has("until") && (!params.getString("until").isEmpty())) {
          urlBuilder.addQueryParameter("until", escapeString(String.valueOf(params.getString("until"))));
        }

        if (params.has("disableGeojson") && (!params.getString("disableGeojson").isEmpty())) {
          urlBuilder.addQueryParameter("disable_geojson", escapeString(String.valueOf(params.getBoolean("disableGeojson"))));
        }

        if (params.has("disableDisruption") && (!params.getString("disableDisruption").isEmpty())) {
          urlBuilder.addQueryParameter("disable_disruption", escapeString(String.valueOf(params.getBoolean("disableDisruption"))));
        }

        if (params.has("tags") && (!params.getString("tags").isEmpty())) {
          urlBuilder.addQueryParameter("tags[]", escapeString(String.valueOf(params.getJSONArray("tags"))));
        }

        if (params.has("originalId") && (!params.getString("originalId").isEmpty())) {
          urlBuilder.addQueryParameter("original_id", escapeString(params.getString("originalId")));
        }

        HttpUrl url = urlBuilder
          .addPathSegments(path)
          .build();
        Request request = requestBuilder.url(url)
          .build();

        client.newCall(request).enqueue(new Callback() {

          @Override
          public void onFailure(@NonNull Call call, @NonNull IOException e) {
            String errorMessage = "Problem during request | " + String.valueOf(e.hashCode()) + ": " + e.getMessage();
            callbackContext.error(errorMessage);
          }

          @Override
          public void onResponse(@NonNull Call call, @NonNull Response response) {
            if (response.isSuccessful()) {
              try {
                JSONObject jsonObject = new JSONObject(Objects.requireNonNull(response.body()).string());
                callbackContext.success(jsonObject);
              } catch (Exception e) {
                String errorMessage = "Problem during response parsing";
                callbackContext.error(errorMessage);
              }
            } else {
              callbackContext.error("Unexpected code " + response.code() + " | message: " + response.message());
            }
          }
        });
      } catch (Exception e) {
        String errorMessage = "Problem during request building | " + e.hashCode() + ": " + e.getMessage();
        callbackContext.error(errorMessage);
      }
    });
  }

  private void coverageRegionLineGroups(final JSONObject params, final CallbackContext callbackContext) {
    cordova.getThreadPool().execute(() -> {
      try {
        HttpUrl.Builder urlBuilder = new HttpUrl.Builder()
          .scheme("https")
          .host("api.navitia.io")
          .addPathSegment("v1");
        Request.Builder requestBuilder = new Request.Builder()
          .header("Authorization", token);
        String path = "/coverage/{region}/line_groups".substring(1);

        if (params.has("region") && (!params.getString("region").isEmpty())) {
          path = path.replaceAll("\\{" + "region" + "\\}", escapeString(params.getString("region")));
        }

        if (params.has("startPage") && (!params.getString("startPage").isEmpty())) {
          urlBuilder.addQueryParameter("start_page", escapeString(String.valueOf(params.getInt("startPage"))));
        }

        if (params.has("count") && (!params.getString("count").isEmpty())) {
          urlBuilder.addQueryParameter("count", escapeString(String.valueOf(params.getInt("count"))));
        }

        if (params.has("depth") && (!params.getString("depth").isEmpty())) {
          urlBuilder.addQueryParameter("depth", escapeString(String.valueOf(params.getInt("depth"))));
        }

        if (params.has("forbiddenId") && (!params.getString("forbiddenId").isEmpty())) {
          urlBuilder.addQueryParameter("forbidden_id[]", escapeString(String.valueOf(params.getJSONArray("forbiddenId"))));
        }

        if (params.has("forbiddenUris") && (!params.getString("forbiddenUris").isEmpty())) {
          urlBuilder.addQueryParameter("forbidden_uris[]", escapeString(String.valueOf(params.getJSONArray("forbiddenUris"))));
        }

        if (params.has("externalCode") && (!params.getString("externalCode").isEmpty())) {
          urlBuilder.addQueryParameter("external_code", escapeString(params.getString("externalCode")));
        }

        if (params.has("headsign") && (!params.getString("headsign").isEmpty())) {
          urlBuilder.addQueryParameter("headsign", escapeString(params.getString("headsign")));
        }

        if (params.has("showCodes") && (!params.getString("showCodes").isEmpty())) {
          urlBuilder.addQueryParameter("show_codes", escapeString(String.valueOf(params.getBoolean("showCodes"))));
        }

        if (params.has("odtLevel") && (!params.getString("odtLevel").isEmpty())) {
          urlBuilder.addQueryParameter("odt_level", escapeString(params.getString("odtLevel")));
        }

        if (params.has("dataFreshness") && (!params.getString("dataFreshness").isEmpty())) {
          urlBuilder.addQueryParameter("data_freshness", escapeString(params.getString("dataFreshness")));
        }

        if (params.has("distance") && (!params.getString("distance").isEmpty())) {
          urlBuilder.addQueryParameter("distance", escapeString(String.valueOf(params.getInt("distance"))));
        }

        if (params.has("since") && (!params.getString("since").isEmpty())) {
          urlBuilder.addQueryParameter("since", escapeString(String.valueOf(params.getString("since"))));
        }

        if (params.has("until") && (!params.getString("until").isEmpty())) {
          urlBuilder.addQueryParameter("until", escapeString(String.valueOf(params.getString("until"))));
        }

        if (params.has("disableGeojson") && (!params.getString("disableGeojson").isEmpty())) {
          urlBuilder.addQueryParameter("disable_geojson", escapeString(String.valueOf(params.getBoolean("disableGeojson"))));
        }

        if (params.has("disableDisruption") && (!params.getString("disableDisruption").isEmpty())) {
          urlBuilder.addQueryParameter("disable_disruption", escapeString(String.valueOf(params.getBoolean("disableDisruption"))));
        }

        if (params.has("filter") && (!params.getString("filter").isEmpty())) {
          urlBuilder.addQueryParameter("filter", escapeString(params.getString("filter")));
        }

        if (params.has("tags") && (!params.getString("tags").isEmpty())) {
          urlBuilder.addQueryParameter("tags[]", escapeString(String.valueOf(params.getJSONArray("tags"))));
        }

        if (params.has("originalId") && (!params.getString("originalId").isEmpty())) {
          urlBuilder.addQueryParameter("original_id", escapeString(params.getString("originalId")));
        }

        HttpUrl url = urlBuilder
          .addPathSegments(path)
          .build();
        Request request = requestBuilder.url(url)
          .build();

        client.newCall(request).enqueue(new Callback() {

          @Override
          public void onFailure(@NonNull Call call, @NonNull IOException e) {
            String errorMessage = "Problem during request | " + String.valueOf(e.hashCode()) + ": " + e.getMessage();
            callbackContext.error(errorMessage);
          }

          @Override
          public void onResponse(@NonNull Call call, @NonNull Response response) {
            if (response.isSuccessful()) {
              try {
                JSONObject jsonObject = new JSONObject(Objects.requireNonNull(response.body()).string());
                callbackContext.success(jsonObject);
              } catch (Exception e) {
                String errorMessage = "Problem during response parsing";
                callbackContext.error(errorMessage);
              }
            } else {
              callbackContext.error("Unexpected code " + response.code() + " | message: " + response.message());
            }
          }
        });
      } catch (Exception e) {
        String errorMessage = "Problem during request building | " + e.hashCode() + ": " + e.getMessage();
        callbackContext.error(errorMessage);
      }
    });
  }

  private void coverageRegionLineGroupsId(final JSONObject params, final CallbackContext callbackContext) {
    cordova.getThreadPool().execute(() -> {
      try {
        HttpUrl.Builder urlBuilder = new HttpUrl.Builder()
          .scheme("https")
          .host("api.navitia.io")
          .addPathSegment("v1");
        Request.Builder requestBuilder = new Request.Builder()
          .header("Authorization", token);
        String path = "/coverage/{region}/line_groups/{id}".substring(1);

        if (params.has("region") && (!params.getString("region").isEmpty())) {
          path = path.replaceAll("\\{" + "region" + "\\}", escapeString(params.getString("region")));
        }

        if (params.has("id") && (!params.getString("id").isEmpty())) {
          path = path.replaceAll("\\{" + "id" + "\\}", escapeString(params.getString("id")));
        }

        if (params.has("startPage") && (!params.getString("startPage").isEmpty())) {
          urlBuilder.addQueryParameter("start_page", escapeString(String.valueOf(params.getInt("startPage"))));
        }

        if (params.has("count") && (!params.getString("count").isEmpty())) {
          urlBuilder.addQueryParameter("count", escapeString(String.valueOf(params.getInt("count"))));
        }

        if (params.has("depth") && (!params.getString("depth").isEmpty())) {
          urlBuilder.addQueryParameter("depth", escapeString(String.valueOf(params.getInt("depth"))));
        }

        if (params.has("forbiddenId") && (!params.getString("forbiddenId").isEmpty())) {
          urlBuilder.addQueryParameter("forbidden_id[]", escapeString(String.valueOf(params.getJSONArray("forbiddenId"))));
        }

        if (params.has("forbiddenUris") && (!params.getString("forbiddenUris").isEmpty())) {
          urlBuilder.addQueryParameter("forbidden_uris[]", escapeString(String.valueOf(params.getJSONArray("forbiddenUris"))));
        }

        if (params.has("externalCode") && (!params.getString("externalCode").isEmpty())) {
          urlBuilder.addQueryParameter("external_code", escapeString(params.getString("externalCode")));
        }

        if (params.has("headsign") && (!params.getString("headsign").isEmpty())) {
          urlBuilder.addQueryParameter("headsign", escapeString(params.getString("headsign")));
        }

        if (params.has("showCodes") && (!params.getString("showCodes").isEmpty())) {
          urlBuilder.addQueryParameter("show_codes", escapeString(String.valueOf(params.getBoolean("showCodes"))));
        }

        if (params.has("odtLevel") && (!params.getString("odtLevel").isEmpty())) {
          urlBuilder.addQueryParameter("odt_level", escapeString(params.getString("odtLevel")));
        }

        if (params.has("dataFreshness") && (!params.getString("dataFreshness").isEmpty())) {
          urlBuilder.addQueryParameter("data_freshness", escapeString(params.getString("dataFreshness")));
        }

        if (params.has("distance") && (!params.getString("distance").isEmpty())) {
          urlBuilder.addQueryParameter("distance", escapeString(String.valueOf(params.getInt("distance"))));
        }

        if (params.has("since") && (!params.getString("since").isEmpty())) {
          urlBuilder.addQueryParameter("since", escapeString(String.valueOf(params.getString("since"))));
        }

        if (params.has("until") && (!params.getString("until").isEmpty())) {
          urlBuilder.addQueryParameter("until", escapeString(String.valueOf(params.getString("until"))));
        }

        if (params.has("disableGeojson") && (!params.getString("disableGeojson").isEmpty())) {
          urlBuilder.addQueryParameter("disable_geojson", escapeString(String.valueOf(params.getBoolean("disableGeojson"))));
        }

        if (params.has("disableDisruption") && (!params.getString("disableDisruption").isEmpty())) {
          urlBuilder.addQueryParameter("disable_disruption", escapeString(String.valueOf(params.getBoolean("disableDisruption"))));
        }

        if (params.has("tags") && (!params.getString("tags").isEmpty())) {
          urlBuilder.addQueryParameter("tags[]", escapeString(String.valueOf(params.getJSONArray("tags"))));
        }

        if (params.has("originalId") && (!params.getString("originalId").isEmpty())) {
          urlBuilder.addQueryParameter("original_id", escapeString(params.getString("originalId")));
        }

        HttpUrl url = urlBuilder
          .addPathSegments(path)
          .build();
        Request request = requestBuilder.url(url)
          .build();

        client.newCall(request).enqueue(new Callback() {

          @Override
          public void onFailure(@NonNull Call call, @NonNull IOException e) {
            String errorMessage = "Problem during request | " + String.valueOf(e.hashCode()) + ": " + e.getMessage();
            callbackContext.error(errorMessage);
          }

          @Override
          public void onResponse(@NonNull Call call, @NonNull Response response) {
            if (response.isSuccessful()) {
              try {
                JSONObject jsonObject = new JSONObject(Objects.requireNonNull(response.body()).string());
                callbackContext.success(jsonObject);
              } catch (Exception e) {
                String errorMessage = "Problem during response parsing";
                callbackContext.error(errorMessage);
              }
            } else {
              callbackContext.error("Unexpected code " + response.code() + " | message: " + response.message());
            }
          }
        });
      } catch (Exception e) {
        String errorMessage = "Problem during request building | " + e.hashCode() + ": " + e.getMessage();
        callbackContext.error(errorMessage);
      }
    });
  }

  private void coverageRegionUriLineGroups(final JSONObject params, final CallbackContext callbackContext) {
    cordova.getThreadPool().execute(() -> {
      try {
        HttpUrl.Builder urlBuilder = new HttpUrl.Builder()
          .scheme("https")
          .host("api.navitia.io")
          .addPathSegment("v1");
        Request.Builder requestBuilder = new Request.Builder()
          .header("Authorization", token);
        String path = "/coverage/{region}/{uri}/line_groups".substring(1);

        if (params.has("region") && (!params.getString("region").isEmpty())) {
          path = path.replaceAll("\\{" + "region" + "\\}", escapeString(params.getString("region")));
        }

        if (params.has("uri") && (!params.getString("uri").isEmpty())) {
          path = path.replaceAll("\\{" + "uri" + "\\}", escapeString(params.getString("uri")));
        }

        if (params.has("startPage") && (!params.getString("startPage").isEmpty())) {
          urlBuilder.addQueryParameter("start_page", escapeString(String.valueOf(params.getInt("startPage"))));
        }

        if (params.has("count") && (!params.getString("count").isEmpty())) {
          urlBuilder.addQueryParameter("count", escapeString(String.valueOf(params.getInt("count"))));
        }

        if (params.has("depth") && (!params.getString("depth").isEmpty())) {
          urlBuilder.addQueryParameter("depth", escapeString(String.valueOf(params.getInt("depth"))));
        }

        if (params.has("forbiddenId") && (!params.getString("forbiddenId").isEmpty())) {
          urlBuilder.addQueryParameter("forbidden_id[]", escapeString(String.valueOf(params.getJSONArray("forbiddenId"))));
        }

        if (params.has("forbiddenUris") && (!params.getString("forbiddenUris").isEmpty())) {
          urlBuilder.addQueryParameter("forbidden_uris[]", escapeString(String.valueOf(params.getJSONArray("forbiddenUris"))));
        }

        if (params.has("externalCode") && (!params.getString("externalCode").isEmpty())) {
          urlBuilder.addQueryParameter("external_code", escapeString(params.getString("externalCode")));
        }

        if (params.has("headsign") && (!params.getString("headsign").isEmpty())) {
          urlBuilder.addQueryParameter("headsign", escapeString(params.getString("headsign")));
        }

        if (params.has("showCodes") && (!params.getString("showCodes").isEmpty())) {
          urlBuilder.addQueryParameter("show_codes", escapeString(String.valueOf(params.getBoolean("showCodes"))));
        }

        if (params.has("odtLevel") && (!params.getString("odtLevel").isEmpty())) {
          urlBuilder.addQueryParameter("odt_level", escapeString(params.getString("odtLevel")));
        }

        if (params.has("dataFreshness") && (!params.getString("dataFreshness").isEmpty())) {
          urlBuilder.addQueryParameter("data_freshness", escapeString(params.getString("dataFreshness")));
        }

        if (params.has("distance") && (!params.getString("distance").isEmpty())) {
          urlBuilder.addQueryParameter("distance", escapeString(String.valueOf(params.getInt("distance"))));
        }

        if (params.has("since") && (!params.getString("since").isEmpty())) {
          urlBuilder.addQueryParameter("since", escapeString(String.valueOf(params.getString("since"))));
        }

        if (params.has("until") && (!params.getString("until").isEmpty())) {
          urlBuilder.addQueryParameter("until", escapeString(String.valueOf(params.getString("until"))));
        }

        if (params.has("disableGeojson") && (!params.getString("disableGeojson").isEmpty())) {
          urlBuilder.addQueryParameter("disable_geojson", escapeString(String.valueOf(params.getBoolean("disableGeojson"))));
        }

        if (params.has("disableDisruption") && (!params.getString("disableDisruption").isEmpty())) {
          urlBuilder.addQueryParameter("disable_disruption", escapeString(String.valueOf(params.getBoolean("disableDisruption"))));
        }

        if (params.has("filter") && (!params.getString("filter").isEmpty())) {
          urlBuilder.addQueryParameter("filter", escapeString(params.getString("filter")));
        }

        if (params.has("tags") && (!params.getString("tags").isEmpty())) {
          urlBuilder.addQueryParameter("tags[]", escapeString(String.valueOf(params.getJSONArray("tags"))));
        }

        if (params.has("originalId") && (!params.getString("originalId").isEmpty())) {
          urlBuilder.addQueryParameter("original_id", escapeString(params.getString("originalId")));
        }

        HttpUrl url = urlBuilder
          .addPathSegments(path)
          .build();
        Request request = requestBuilder.url(url)
          .build();

        client.newCall(request).enqueue(new Callback() {

          @Override
          public void onFailure(@NonNull Call call, @NonNull IOException e) {
            String errorMessage = "Problem during request | " + String.valueOf(e.hashCode()) + ": " + e.getMessage();
            callbackContext.error(errorMessage);
          }

          @Override
          public void onResponse(@NonNull Call call, @NonNull Response response) {
            if (response.isSuccessful()) {
              try {
                JSONObject jsonObject = new JSONObject(Objects.requireNonNull(response.body()).string());
                callbackContext.success(jsonObject);
              } catch (Exception e) {
                String errorMessage = "Problem during response parsing";
                callbackContext.error(errorMessage);
              }
            } else {
              callbackContext.error("Unexpected code " + response.code() + " | message: " + response.message());
            }
          }
        });
      } catch (Exception e) {
        String errorMessage = "Problem during request building | " + e.hashCode() + ": " + e.getMessage();
        callbackContext.error(errorMessage);
      }
    });
  }

  private void coverageRegionUriLineGroupsId(final JSONObject params, final CallbackContext callbackContext) {
    cordova.getThreadPool().execute(() -> {
      try {
        HttpUrl.Builder urlBuilder = new HttpUrl.Builder()
          .scheme("https")
          .host("api.navitia.io")
          .addPathSegment("v1");
        Request.Builder requestBuilder = new Request.Builder()
          .header("Authorization", token);
        String path = "/coverage/{region}/{uri}/line_groups/{id}".substring(1);

        if (params.has("region") && (!params.getString("region").isEmpty())) {
          path = path.replaceAll("\\{" + "region" + "\\}", escapeString(params.getString("region")));
        }

        if (params.has("uri") && (!params.getString("uri").isEmpty())) {
          path = path.replaceAll("\\{" + "uri" + "\\}", escapeString(params.getString("uri")));
        }

        if (params.has("id") && (!params.getString("id").isEmpty())) {
          path = path.replaceAll("\\{" + "id" + "\\}", escapeString(params.getString("id")));
        }

        if (params.has("startPage") && (!params.getString("startPage").isEmpty())) {
          urlBuilder.addQueryParameter("start_page", escapeString(String.valueOf(params.getInt("startPage"))));
        }

        if (params.has("count") && (!params.getString("count").isEmpty())) {
          urlBuilder.addQueryParameter("count", escapeString(String.valueOf(params.getInt("count"))));
        }

        if (params.has("depth") && (!params.getString("depth").isEmpty())) {
          urlBuilder.addQueryParameter("depth", escapeString(String.valueOf(params.getInt("depth"))));
        }

        if (params.has("forbiddenId") && (!params.getString("forbiddenId").isEmpty())) {
          urlBuilder.addQueryParameter("forbidden_id[]", escapeString(String.valueOf(params.getJSONArray("forbiddenId"))));
        }

        if (params.has("forbiddenUris") && (!params.getString("forbiddenUris").isEmpty())) {
          urlBuilder.addQueryParameter("forbidden_uris[]", escapeString(String.valueOf(params.getJSONArray("forbiddenUris"))));
        }

        if (params.has("externalCode") && (!params.getString("externalCode").isEmpty())) {
          urlBuilder.addQueryParameter("external_code", escapeString(params.getString("externalCode")));
        }

        if (params.has("headsign") && (!params.getString("headsign").isEmpty())) {
          urlBuilder.addQueryParameter("headsign", escapeString(params.getString("headsign")));
        }

        if (params.has("showCodes") && (!params.getString("showCodes").isEmpty())) {
          urlBuilder.addQueryParameter("show_codes", escapeString(String.valueOf(params.getBoolean("showCodes"))));
        }

        if (params.has("odtLevel") && (!params.getString("odtLevel").isEmpty())) {
          urlBuilder.addQueryParameter("odt_level", escapeString(params.getString("odtLevel")));
        }

        if (params.has("dataFreshness") && (!params.getString("dataFreshness").isEmpty())) {
          urlBuilder.addQueryParameter("data_freshness", escapeString(params.getString("dataFreshness")));
        }

        if (params.has("distance") && (!params.getString("distance").isEmpty())) {
          urlBuilder.addQueryParameter("distance", escapeString(String.valueOf(params.getInt("distance"))));
        }

        if (params.has("since") && (!params.getString("since").isEmpty())) {
          urlBuilder.addQueryParameter("since", escapeString(String.valueOf(params.getString("since"))));
        }

        if (params.has("until") && (!params.getString("until").isEmpty())) {
          urlBuilder.addQueryParameter("until", escapeString(String.valueOf(params.getString("until"))));
        }

        if (params.has("disableGeojson") && (!params.getString("disableGeojson").isEmpty())) {
          urlBuilder.addQueryParameter("disable_geojson", escapeString(String.valueOf(params.getBoolean("disableGeojson"))));
        }

        if (params.has("disableDisruption") && (!params.getString("disableDisruption").isEmpty())) {
          urlBuilder.addQueryParameter("disable_disruption", escapeString(String.valueOf(params.getBoolean("disableDisruption"))));
        }

        if (params.has("tags") && (!params.getString("tags").isEmpty())) {
          urlBuilder.addQueryParameter("tags[]", escapeString(String.valueOf(params.getJSONArray("tags"))));
        }

        if (params.has("originalId") && (!params.getString("originalId").isEmpty())) {
          urlBuilder.addQueryParameter("original_id", escapeString(params.getString("originalId")));
        }

        HttpUrl url = urlBuilder
          .addPathSegments(path)
          .build();
        Request request = requestBuilder.url(url)
          .build();

        client.newCall(request).enqueue(new Callback() {

          @Override
          public void onFailure(@NonNull Call call, @NonNull IOException e) {
            String errorMessage = "Problem during request | " + String.valueOf(e.hashCode()) + ": " + e.getMessage();
            callbackContext.error(errorMessage);
          }

          @Override
          public void onResponse(@NonNull Call call, @NonNull Response response) {
            if (response.isSuccessful()) {
              try {
                JSONObject jsonObject = new JSONObject(Objects.requireNonNull(response.body()).string());
                callbackContext.success(jsonObject);
              } catch (Exception e) {
                String errorMessage = "Problem during response parsing";
                callbackContext.error(errorMessage);
              }
            } else {
              callbackContext.error("Unexpected code " + response.code() + " | message: " + response.message());
            }
          }
        });
      } catch (Exception e) {
        String errorMessage = "Problem during request building | " + e.hashCode() + ": " + e.getMessage();
        callbackContext.error(errorMessage);
      }
    });
  }

  private void lineGroups(final JSONObject params, final CallbackContext callbackContext) {
    cordova.getThreadPool().execute(() -> {
      try {
        HttpUrl.Builder urlBuilder = new HttpUrl.Builder()
          .scheme("https")
          .host("api.navitia.io")
          .addPathSegment("v1");
        Request.Builder requestBuilder = new Request.Builder()
          .header("Authorization", token);
        String path = "/line_groups".substring(1);

        if (params.has("externalCode") && (!params.getString("externalCode").isEmpty())) {
          urlBuilder.addQueryParameter("external_code", escapeString(params.getString("externalCode")));
        }

        if (params.has("startPage") && (!params.getString("startPage").isEmpty())) {
          urlBuilder.addQueryParameter("start_page", escapeString(String.valueOf(params.getInt("startPage"))));
        }

        if (params.has("count") && (!params.getString("count").isEmpty())) {
          urlBuilder.addQueryParameter("count", escapeString(String.valueOf(params.getInt("count"))));
        }

        if (params.has("depth") && (!params.getString("depth").isEmpty())) {
          urlBuilder.addQueryParameter("depth", escapeString(String.valueOf(params.getInt("depth"))));
        }

        if (params.has("forbiddenId") && (!params.getString("forbiddenId").isEmpty())) {
          urlBuilder.addQueryParameter("forbidden_id[]", escapeString(String.valueOf(params.getJSONArray("forbiddenId"))));
        }

        if (params.has("forbiddenUris") && (!params.getString("forbiddenUris").isEmpty())) {
          urlBuilder.addQueryParameter("forbidden_uris[]", escapeString(String.valueOf(params.getJSONArray("forbiddenUris"))));
        }

        if (params.has("headsign") && (!params.getString("headsign").isEmpty())) {
          urlBuilder.addQueryParameter("headsign", escapeString(params.getString("headsign")));
        }

        if (params.has("showCodes") && (!params.getString("showCodes").isEmpty())) {
          urlBuilder.addQueryParameter("show_codes", escapeString(String.valueOf(params.getBoolean("showCodes"))));
        }

        if (params.has("odtLevel") && (!params.getString("odtLevel").isEmpty())) {
          urlBuilder.addQueryParameter("odt_level", escapeString(params.getString("odtLevel")));
        }

        if (params.has("dataFreshness") && (!params.getString("dataFreshness").isEmpty())) {
          urlBuilder.addQueryParameter("data_freshness", escapeString(params.getString("dataFreshness")));
        }

        if (params.has("distance") && (!params.getString("distance").isEmpty())) {
          urlBuilder.addQueryParameter("distance", escapeString(String.valueOf(params.getInt("distance"))));
        }

        if (params.has("since") && (!params.getString("since").isEmpty())) {
          urlBuilder.addQueryParameter("since", escapeString(String.valueOf(params.getString("since"))));
        }

        if (params.has("until") && (!params.getString("until").isEmpty())) {
          urlBuilder.addQueryParameter("until", escapeString(String.valueOf(params.getString("until"))));
        }

        if (params.has("disableGeojson") && (!params.getString("disableGeojson").isEmpty())) {
          urlBuilder.addQueryParameter("disable_geojson", escapeString(String.valueOf(params.getBoolean("disableGeojson"))));
        }

        if (params.has("disableDisruption") && (!params.getString("disableDisruption").isEmpty())) {
          urlBuilder.addQueryParameter("disable_disruption", escapeString(String.valueOf(params.getBoolean("disableDisruption"))));
        }

        if (params.has("filter") && (!params.getString("filter").isEmpty())) {
          urlBuilder.addQueryParameter("filter", escapeString(params.getString("filter")));
        }

        if (params.has("tags") && (!params.getString("tags").isEmpty())) {
          urlBuilder.addQueryParameter("tags[]", escapeString(String.valueOf(params.getJSONArray("tags"))));
        }

        if (params.has("originalId") && (!params.getString("originalId").isEmpty())) {
          urlBuilder.addQueryParameter("original_id", escapeString(params.getString("originalId")));
        }

        HttpUrl url = urlBuilder
          .addPathSegments(path)
          .build();
        Request request = requestBuilder.url(url)
          .build();

        client.newCall(request).enqueue(new Callback() {

          @Override
          public void onFailure(@NonNull Call call, @NonNull IOException e) {
            String errorMessage = "Problem during request | " + String.valueOf(e.hashCode()) + ": " + e.getMessage();
            callbackContext.error(errorMessage);
          }

          @Override
          public void onResponse(@NonNull Call call, @NonNull Response response) {
            if (response.isSuccessful()) {
              try {
                JSONObject jsonObject = new JSONObject(Objects.requireNonNull(response.body()).string());
                callbackContext.success(jsonObject);
              } catch (Exception e) {
                String errorMessage = "Problem during response parsing";
                callbackContext.error(errorMessage);
              }
            } else {
              callbackContext.error("Unexpected code " + response.code() + " | message: " + response.message());
            }
          }
        });
      } catch (Exception e) {
        String errorMessage = "Problem during request building | " + e.hashCode() + ": " + e.getMessage();
        callbackContext.error(errorMessage);
      }
    });
  }

  private void coverageLonLatLineReports(final JSONObject params, final CallbackContext callbackContext) {
    cordova.getThreadPool().execute(() -> {
      try {
        HttpUrl.Builder urlBuilder = new HttpUrl.Builder()
          .scheme("https")
          .host("api.navitia.io")
          .addPathSegment("v1");
        Request.Builder requestBuilder = new Request.Builder()
          .header("Authorization", token);
        String path = "/coverage/{lon};{lat}/line_reports".substring(1);

        if (params.has("lat") && (!params.getString("lat").isEmpty())) {
          path = path.replaceAll("\\{" + "lat" + "\\}", escapeString(String.valueOf(params.getLong("lat"))));
        }

        if (params.has("lon") && (!params.getString("lon").isEmpty())) {
          path = path.replaceAll("\\{" + "lon" + "\\}", escapeString(String.valueOf(params.getLong("lon"))));
        }

        if (params.has("depth") && (!params.getString("depth").isEmpty())) {
          urlBuilder.addQueryParameter("depth", escapeString(String.valueOf(params.getInt("depth"))));
        }

        if (params.has("count") && (!params.getString("count").isEmpty())) {
          urlBuilder.addQueryParameter("count", escapeString(String.valueOf(params.getInt("count"))));
        }

        if (params.has("startPage") && (!params.getString("startPage").isEmpty())) {
          urlBuilder.addQueryParameter("start_page", escapeString(String.valueOf(params.getInt("startPage"))));
        }

        if (params.has("forbiddenUris") && (!params.getString("forbiddenUris").isEmpty())) {
          urlBuilder.addQueryParameter("forbidden_uris[]", escapeString(String.valueOf(params.getJSONArray("forbiddenUris"))));
        }

        if (params.has("disableGeojson") && (!params.getString("disableGeojson").isEmpty())) {
          urlBuilder.addQueryParameter("disable_geojson", escapeString(String.valueOf(params.getBoolean("disableGeojson"))));
        }

        if (params.has("since") && (!params.getString("since").isEmpty())) {
          urlBuilder.addQueryParameter("since", escapeString(String.valueOf(params.getString("since"))));
        }

        if (params.has("until") && (!params.getString("until").isEmpty())) {
          urlBuilder.addQueryParameter("until", escapeString(String.valueOf(params.getString("until"))));
        }

        HttpUrl url = urlBuilder
          .addPathSegments(path)
          .build();
        Request request = requestBuilder.url(url)
          .build();

        client.newCall(request).enqueue(new Callback() {

          @Override
          public void onFailure(@NonNull Call call, @NonNull IOException e) {
            String errorMessage = "Problem during request | " + String.valueOf(e.hashCode()) + ": " + e.getMessage();
            callbackContext.error(errorMessage);
          }

          @Override
          public void onResponse(@NonNull Call call, @NonNull Response response) {
            if (response.isSuccessful()) {
              try {
                JSONObject jsonObject = new JSONObject(Objects.requireNonNull(response.body()).string());
                callbackContext.success(jsonObject);
              } catch (Exception e) {
                String errorMessage = "Problem during response parsing";
                callbackContext.error(errorMessage);
              }
            } else {
              callbackContext.error("Unexpected code " + response.code() + " | message: " + response.message());
            }
          }
        });
      } catch (Exception e) {
        String errorMessage = "Problem during request building | " + e.hashCode() + ": " + e.getMessage();
        callbackContext.error(errorMessage);
      }
    });
  }

  private void coverageLonLatUriLineReports(final JSONObject params, final CallbackContext callbackContext) {
    cordova.getThreadPool().execute(() -> {
      try {
        HttpUrl.Builder urlBuilder = new HttpUrl.Builder()
          .scheme("https")
          .host("api.navitia.io")
          .addPathSegment("v1");
        Request.Builder requestBuilder = new Request.Builder()
          .header("Authorization", token);
        String path = "/coverage/{lon};{lat}/{uri}/line_reports".substring(1);

        if (params.has("lat") && (!params.getString("lat").isEmpty())) {
          path = path.replaceAll("\\{" + "lat" + "\\}", escapeString(String.valueOf(params.getLong("lat"))));
        }

        if (params.has("lon") && (!params.getString("lon").isEmpty())) {
          path = path.replaceAll("\\{" + "lon" + "\\}", escapeString(String.valueOf(params.getLong("lon"))));
        }

        if (params.has("uri") && (!params.getString("uri").isEmpty())) {
          path = path.replaceAll("\\{" + "uri" + "\\}", escapeString(params.getString("uri")));
        }

        if (params.has("depth") && (!params.getString("depth").isEmpty())) {
          urlBuilder.addQueryParameter("depth", escapeString(String.valueOf(params.getInt("depth"))));
        }

        if (params.has("count") && (!params.getString("count").isEmpty())) {
          urlBuilder.addQueryParameter("count", escapeString(String.valueOf(params.getInt("count"))));
        }

        if (params.has("startPage") && (!params.getString("startPage").isEmpty())) {
          urlBuilder.addQueryParameter("start_page", escapeString(String.valueOf(params.getInt("startPage"))));
        }

        if (params.has("forbiddenUris") && (!params.getString("forbiddenUris").isEmpty())) {
          urlBuilder.addQueryParameter("forbidden_uris[]", escapeString(String.valueOf(params.getJSONArray("forbiddenUris"))));
        }

        if (params.has("disableGeojson") && (!params.getString("disableGeojson").isEmpty())) {
          urlBuilder.addQueryParameter("disable_geojson", escapeString(String.valueOf(params.getBoolean("disableGeojson"))));
        }

        if (params.has("since") && (!params.getString("since").isEmpty())) {
          urlBuilder.addQueryParameter("since", escapeString(String.valueOf(params.getString("since"))));
        }

        if (params.has("until") && (!params.getString("until").isEmpty())) {
          urlBuilder.addQueryParameter("until", escapeString(String.valueOf(params.getString("until"))));
        }

        HttpUrl url = urlBuilder
          .addPathSegments(path)
          .build();
        Request request = requestBuilder.url(url)
          .build();

        client.newCall(request).enqueue(new Callback() {

          @Override
          public void onFailure(@NonNull Call call, @NonNull IOException e) {
            String errorMessage = "Problem during request | " + String.valueOf(e.hashCode()) + ": " + e.getMessage();
            callbackContext.error(errorMessage);
          }

          @Override
          public void onResponse(@NonNull Call call, @NonNull Response response) {
            if (response.isSuccessful()) {
              try {
                JSONObject jsonObject = new JSONObject(Objects.requireNonNull(response.body()).string());
                callbackContext.success(jsonObject);
              } catch (Exception e) {
                String errorMessage = "Problem during response parsing";
                callbackContext.error(errorMessage);
              }
            } else {
              callbackContext.error("Unexpected code " + response.code() + " | message: " + response.message());
            }
          }
        });
      } catch (Exception e) {
        String errorMessage = "Problem during request building | " + e.hashCode() + ": " + e.getMessage();
        callbackContext.error(errorMessage);
      }
    });
  }

  private void coverageRegionLineReports(final JSONObject params, final CallbackContext callbackContext) {
    cordova.getThreadPool().execute(() -> {
      try {
        HttpUrl.Builder urlBuilder = new HttpUrl.Builder()
          .scheme("https")
          .host("api.navitia.io")
          .addPathSegment("v1");
        Request.Builder requestBuilder = new Request.Builder()
          .header("Authorization", token);
        String path = "/coverage/{region}/line_reports".substring(1);

        if (params.has("region") && (!params.getString("region").isEmpty())) {
          path = path.replaceAll("\\{" + "region" + "\\}", escapeString(params.getString("region")));
        }

        if (params.has("depth") && (!params.getString("depth").isEmpty())) {
          urlBuilder.addQueryParameter("depth", escapeString(String.valueOf(params.getInt("depth"))));
        }

        if (params.has("count") && (!params.getString("count").isEmpty())) {
          urlBuilder.addQueryParameter("count", escapeString(String.valueOf(params.getInt("count"))));
        }

        if (params.has("startPage") && (!params.getString("startPage").isEmpty())) {
          urlBuilder.addQueryParameter("start_page", escapeString(String.valueOf(params.getInt("startPage"))));
        }

        if (params.has("forbiddenUris") && (!params.getString("forbiddenUris").isEmpty())) {
          urlBuilder.addQueryParameter("forbidden_uris[]", escapeString(String.valueOf(params.getJSONArray("forbiddenUris"))));
        }

        if (params.has("disableGeojson") && (!params.getString("disableGeojson").isEmpty())) {
          urlBuilder.addQueryParameter("disable_geojson", escapeString(String.valueOf(params.getBoolean("disableGeojson"))));
        }

        if (params.has("since") && (!params.getString("since").isEmpty())) {
          urlBuilder.addQueryParameter("since", escapeString(String.valueOf(params.getString("since"))));
        }

        if (params.has("until") && (!params.getString("until").isEmpty())) {
          urlBuilder.addQueryParameter("until", escapeString(String.valueOf(params.getString("until"))));
        }

        HttpUrl url = urlBuilder
          .addPathSegments(path)
          .build();
        Request request = requestBuilder.url(url)
          .build();

        client.newCall(request).enqueue(new Callback() {

          @Override
          public void onFailure(@NonNull Call call, @NonNull IOException e) {
            String errorMessage = "Problem during request | " + String.valueOf(e.hashCode()) + ": " + e.getMessage();
            callbackContext.error(errorMessage);
          }

          @Override
          public void onResponse(@NonNull Call call, @NonNull Response response) {
            if (response.isSuccessful()) {
              try {
                JSONObject jsonObject = new JSONObject(Objects.requireNonNull(response.body()).string());
                callbackContext.success(jsonObject);
              } catch (Exception e) {
                String errorMessage = "Problem during response parsing";
                callbackContext.error(errorMessage);
              }
            } else {
              callbackContext.error("Unexpected code " + response.code() + " | message: " + response.message());
            }
          }
        });
      } catch (Exception e) {
        String errorMessage = "Problem during request building | " + e.hashCode() + ": " + e.getMessage();
        callbackContext.error(errorMessage);
      }
    });
  }

  private void coverageRegionUriLineReports(final JSONObject params, final CallbackContext callbackContext) {
    cordova.getThreadPool().execute(() -> {
      try {
        HttpUrl.Builder urlBuilder = new HttpUrl.Builder()
          .scheme("https")
          .host("api.navitia.io")
          .addPathSegment("v1");
        Request.Builder requestBuilder = new Request.Builder()
          .header("Authorization", token);
        String path = "/coverage/{region}/{uri}/line_reports".substring(1);

        if (params.has("region") && (!params.getString("region").isEmpty())) {
          path = path.replaceAll("\\{" + "region" + "\\}", escapeString(params.getString("region")));
        }

        if (params.has("uri") && (!params.getString("uri").isEmpty())) {
          path = path.replaceAll("\\{" + "uri" + "\\}", escapeString(params.getString("uri")));
        }

        if (params.has("depth") && (!params.getString("depth").isEmpty())) {
          urlBuilder.addQueryParameter("depth", escapeString(String.valueOf(params.getInt("depth"))));
        }

        if (params.has("count") && (!params.getString("count").isEmpty())) {
          urlBuilder.addQueryParameter("count", escapeString(String.valueOf(params.getInt("count"))));
        }

        if (params.has("startPage") && (!params.getString("startPage").isEmpty())) {
          urlBuilder.addQueryParameter("start_page", escapeString(String.valueOf(params.getInt("startPage"))));
        }

        if (params.has("forbiddenUris") && (!params.getString("forbiddenUris").isEmpty())) {
          urlBuilder.addQueryParameter("forbidden_uris[]", escapeString(String.valueOf(params.getJSONArray("forbiddenUris"))));
        }

        if (params.has("disableGeojson") && (!params.getString("disableGeojson").isEmpty())) {
          urlBuilder.addQueryParameter("disable_geojson", escapeString(String.valueOf(params.getBoolean("disableGeojson"))));
        }

        if (params.has("since") && (!params.getString("since").isEmpty())) {
          urlBuilder.addQueryParameter("since", escapeString(String.valueOf(params.getString("since"))));
        }

        if (params.has("until") && (!params.getString("until").isEmpty())) {
          urlBuilder.addQueryParameter("until", escapeString(String.valueOf(params.getString("until"))));
        }

        HttpUrl url = urlBuilder
          .addPathSegments(path)
          .build();
        Request request = requestBuilder.url(url)
          .build();

        client.newCall(request).enqueue(new Callback() {

          @Override
          public void onFailure(@NonNull Call call, @NonNull IOException e) {
            String errorMessage = "Problem during request | " + String.valueOf(e.hashCode()) + ": " + e.getMessage();
            callbackContext.error(errorMessage);
          }

          @Override
          public void onResponse(@NonNull Call call, @NonNull Response response) {
            if (response.isSuccessful()) {
              try {
                JSONObject jsonObject = new JSONObject(Objects.requireNonNull(response.body()).string());
                callbackContext.success(jsonObject);
              } catch (Exception e) {
                String errorMessage = "Problem during response parsing";
                callbackContext.error(errorMessage);
              }
            } else {
              callbackContext.error("Unexpected code " + response.code() + " | message: " + response.message());
            }
          }
        });
      } catch (Exception e) {
        String errorMessage = "Problem during request building | " + e.hashCode() + ": " + e.getMessage();
        callbackContext.error(errorMessage);
      }
    });
  }

  private void coverageLonLatLines(final JSONObject params, final CallbackContext callbackContext) {
    cordova.getThreadPool().execute(() -> {
      try {
        HttpUrl.Builder urlBuilder = new HttpUrl.Builder()
          .scheme("https")
          .host("api.navitia.io")
          .addPathSegment("v1");
        Request.Builder requestBuilder = new Request.Builder()
          .header("Authorization", token);
        String path = "/coverage/{lon};{lat}/lines".substring(1);

        if (params.has("lat") && (!params.getString("lat").isEmpty())) {
          path = path.replaceAll("\\{" + "lat" + "\\}", escapeString(String.valueOf(params.getLong("lat"))));
        }

        if (params.has("lon") && (!params.getString("lon").isEmpty())) {
          path = path.replaceAll("\\{" + "lon" + "\\}", escapeString(String.valueOf(params.getLong("lon"))));
        }

        if (params.has("startPage") && (!params.getString("startPage").isEmpty())) {
          urlBuilder.addQueryParameter("start_page", escapeString(String.valueOf(params.getInt("startPage"))));
        }

        if (params.has("count") && (!params.getString("count").isEmpty())) {
          urlBuilder.addQueryParameter("count", escapeString(String.valueOf(params.getInt("count"))));
        }

        if (params.has("depth") && (!params.getString("depth").isEmpty())) {
          urlBuilder.addQueryParameter("depth", escapeString(String.valueOf(params.getInt("depth"))));
        }

        if (params.has("forbiddenId") && (!params.getString("forbiddenId").isEmpty())) {
          urlBuilder.addQueryParameter("forbidden_id[]", escapeString(String.valueOf(params.getJSONArray("forbiddenId"))));
        }

        if (params.has("forbiddenUris") && (!params.getString("forbiddenUris").isEmpty())) {
          urlBuilder.addQueryParameter("forbidden_uris[]", escapeString(String.valueOf(params.getJSONArray("forbiddenUris"))));
        }

        if (params.has("externalCode") && (!params.getString("externalCode").isEmpty())) {
          urlBuilder.addQueryParameter("external_code", escapeString(params.getString("externalCode")));
        }

        if (params.has("headsign") && (!params.getString("headsign").isEmpty())) {
          urlBuilder.addQueryParameter("headsign", escapeString(params.getString("headsign")));
        }

        if (params.has("showCodes") && (!params.getString("showCodes").isEmpty())) {
          urlBuilder.addQueryParameter("show_codes", escapeString(String.valueOf(params.getBoolean("showCodes"))));
        }

        if (params.has("odtLevel") && (!params.getString("odtLevel").isEmpty())) {
          urlBuilder.addQueryParameter("odt_level", escapeString(params.getString("odtLevel")));
        }

        if (params.has("dataFreshness") && (!params.getString("dataFreshness").isEmpty())) {
          urlBuilder.addQueryParameter("data_freshness", escapeString(params.getString("dataFreshness")));
        }

        if (params.has("distance") && (!params.getString("distance").isEmpty())) {
          urlBuilder.addQueryParameter("distance", escapeString(String.valueOf(params.getInt("distance"))));
        }

        if (params.has("since") && (!params.getString("since").isEmpty())) {
          urlBuilder.addQueryParameter("since", escapeString(String.valueOf(params.getString("since"))));
        }

        if (params.has("until") && (!params.getString("until").isEmpty())) {
          urlBuilder.addQueryParameter("until", escapeString(String.valueOf(params.getString("until"))));
        }

        if (params.has("disableGeojson") && (!params.getString("disableGeojson").isEmpty())) {
          urlBuilder.addQueryParameter("disable_geojson", escapeString(String.valueOf(params.getBoolean("disableGeojson"))));
        }

        if (params.has("disableDisruption") && (!params.getString("disableDisruption").isEmpty())) {
          urlBuilder.addQueryParameter("disable_disruption", escapeString(String.valueOf(params.getBoolean("disableDisruption"))));
        }

        if (params.has("filter") && (!params.getString("filter").isEmpty())) {
          urlBuilder.addQueryParameter("filter", escapeString(params.getString("filter")));
        }

        if (params.has("tags") && (!params.getString("tags").isEmpty())) {
          urlBuilder.addQueryParameter("tags[]", escapeString(String.valueOf(params.getJSONArray("tags"))));
        }

        if (params.has("originalId") && (!params.getString("originalId").isEmpty())) {
          urlBuilder.addQueryParameter("original_id", escapeString(params.getString("originalId")));
        }

        HttpUrl url = urlBuilder
          .addPathSegments(path)
          .build();
        Request request = requestBuilder.url(url)
          .build();

        client.newCall(request).enqueue(new Callback() {

          @Override
          public void onFailure(@NonNull Call call, @NonNull IOException e) {
            String errorMessage = "Problem during request | " + String.valueOf(e.hashCode()) + ": " + e.getMessage();
            callbackContext.error(errorMessage);
          }

          @Override
          public void onResponse(@NonNull Call call, @NonNull Response response) {
            if (response.isSuccessful()) {
              try {
                JSONObject jsonObject = new JSONObject(Objects.requireNonNull(response.body()).string());
                callbackContext.success(jsonObject);
              } catch (Exception e) {
                String errorMessage = "Problem during response parsing";
                callbackContext.error(errorMessage);
              }
            } else {
              callbackContext.error("Unexpected code " + response.code() + " | message: " + response.message());
            }
          }
        });
      } catch (Exception e) {
        String errorMessage = "Problem during request building | " + e.hashCode() + ": " + e.getMessage();
        callbackContext.error(errorMessage);
      }
    });
  }

  private void coverageLonLatLinesId(final JSONObject params, final CallbackContext callbackContext) {
    cordova.getThreadPool().execute(() -> {
      try {
        HttpUrl.Builder urlBuilder = new HttpUrl.Builder()
          .scheme("https")
          .host("api.navitia.io")
          .addPathSegment("v1");
        Request.Builder requestBuilder = new Request.Builder()
          .header("Authorization", token);
        String path = "/coverage/{lon};{lat}/lines/{id}".substring(1);

        if (params.has("lat") && (!params.getString("lat").isEmpty())) {
          path = path.replaceAll("\\{" + "lat" + "\\}", escapeString(String.valueOf(params.getLong("lat"))));
        }

        if (params.has("lon") && (!params.getString("lon").isEmpty())) {
          path = path.replaceAll("\\{" + "lon" + "\\}", escapeString(String.valueOf(params.getLong("lon"))));
        }

        if (params.has("id") && (!params.getString("id").isEmpty())) {
          path = path.replaceAll("\\{" + "id" + "\\}", escapeString(params.getString("id")));
        }

        if (params.has("startPage") && (!params.getString("startPage").isEmpty())) {
          urlBuilder.addQueryParameter("start_page", escapeString(String.valueOf(params.getInt("startPage"))));
        }

        if (params.has("count") && (!params.getString("count").isEmpty())) {
          urlBuilder.addQueryParameter("count", escapeString(String.valueOf(params.getInt("count"))));
        }

        if (params.has("depth") && (!params.getString("depth").isEmpty())) {
          urlBuilder.addQueryParameter("depth", escapeString(String.valueOf(params.getInt("depth"))));
        }

        if (params.has("forbiddenId") && (!params.getString("forbiddenId").isEmpty())) {
          urlBuilder.addQueryParameter("forbidden_id[]", escapeString(String.valueOf(params.getJSONArray("forbiddenId"))));
        }

        if (params.has("forbiddenUris") && (!params.getString("forbiddenUris").isEmpty())) {
          urlBuilder.addQueryParameter("forbidden_uris[]", escapeString(String.valueOf(params.getJSONArray("forbiddenUris"))));
        }

        if (params.has("externalCode") && (!params.getString("externalCode").isEmpty())) {
          urlBuilder.addQueryParameter("external_code", escapeString(params.getString("externalCode")));
        }

        if (params.has("headsign") && (!params.getString("headsign").isEmpty())) {
          urlBuilder.addQueryParameter("headsign", escapeString(params.getString("headsign")));
        }

        if (params.has("showCodes") && (!params.getString("showCodes").isEmpty())) {
          urlBuilder.addQueryParameter("show_codes", escapeString(String.valueOf(params.getBoolean("showCodes"))));
        }

        if (params.has("odtLevel") && (!params.getString("odtLevel").isEmpty())) {
          urlBuilder.addQueryParameter("odt_level", escapeString(params.getString("odtLevel")));
        }

        if (params.has("dataFreshness") && (!params.getString("dataFreshness").isEmpty())) {
          urlBuilder.addQueryParameter("data_freshness", escapeString(params.getString("dataFreshness")));
        }

        if (params.has("distance") && (!params.getString("distance").isEmpty())) {
          urlBuilder.addQueryParameter("distance", escapeString(String.valueOf(params.getInt("distance"))));
        }

        if (params.has("since") && (!params.getString("since").isEmpty())) {
          urlBuilder.addQueryParameter("since", escapeString(String.valueOf(params.getString("since"))));
        }

        if (params.has("until") && (!params.getString("until").isEmpty())) {
          urlBuilder.addQueryParameter("until", escapeString(String.valueOf(params.getString("until"))));
        }

        if (params.has("disableGeojson") && (!params.getString("disableGeojson").isEmpty())) {
          urlBuilder.addQueryParameter("disable_geojson", escapeString(String.valueOf(params.getBoolean("disableGeojson"))));
        }

        if (params.has("disableDisruption") && (!params.getString("disableDisruption").isEmpty())) {
          urlBuilder.addQueryParameter("disable_disruption", escapeString(String.valueOf(params.getBoolean("disableDisruption"))));
        }

        if (params.has("tags") && (!params.getString("tags").isEmpty())) {
          urlBuilder.addQueryParameter("tags[]", escapeString(String.valueOf(params.getJSONArray("tags"))));
        }

        if (params.has("originalId") && (!params.getString("originalId").isEmpty())) {
          urlBuilder.addQueryParameter("original_id", escapeString(params.getString("originalId")));
        }

        HttpUrl url = urlBuilder
          .addPathSegments(path)
          .build();
        Request request = requestBuilder.url(url)
          .build();

        client.newCall(request).enqueue(new Callback() {

          @Override
          public void onFailure(@NonNull Call call, @NonNull IOException e) {
            String errorMessage = "Problem during request | " + String.valueOf(e.hashCode()) + ": " + e.getMessage();
            callbackContext.error(errorMessage);
          }

          @Override
          public void onResponse(@NonNull Call call, @NonNull Response response) {
            if (response.isSuccessful()) {
              try {
                JSONObject jsonObject = new JSONObject(Objects.requireNonNull(response.body()).string());
                callbackContext.success(jsonObject);
              } catch (Exception e) {
                String errorMessage = "Problem during response parsing";
                callbackContext.error(errorMessage);
              }
            } else {
              callbackContext.error("Unexpected code " + response.code() + " | message: " + response.message());
            }
          }
        });
      } catch (Exception e) {
        String errorMessage = "Problem during request building | " + e.hashCode() + ": " + e.getMessage();
        callbackContext.error(errorMessage);
      }
    });
  }

  private void coverageLonLatUriLines(final JSONObject params, final CallbackContext callbackContext) {
    cordova.getThreadPool().execute(() -> {
      try {
        HttpUrl.Builder urlBuilder = new HttpUrl.Builder()
          .scheme("https")
          .host("api.navitia.io")
          .addPathSegment("v1");
        Request.Builder requestBuilder = new Request.Builder()
          .header("Authorization", token);
        String path = "/coverage/{lon};{lat}/{uri}/lines".substring(1);

        if (params.has("lat") && (!params.getString("lat").isEmpty())) {
          path = path.replaceAll("\\{" + "lat" + "\\}", escapeString(String.valueOf(params.getLong("lat"))));
        }

        if (params.has("lon") && (!params.getString("lon").isEmpty())) {
          path = path.replaceAll("\\{" + "lon" + "\\}", escapeString(String.valueOf(params.getLong("lon"))));
        }

        if (params.has("uri") && (!params.getString("uri").isEmpty())) {
          path = path.replaceAll("\\{" + "uri" + "\\}", escapeString(params.getString("uri")));
        }

        if (params.has("startPage") && (!params.getString("startPage").isEmpty())) {
          urlBuilder.addQueryParameter("start_page", escapeString(String.valueOf(params.getInt("startPage"))));
        }

        if (params.has("count") && (!params.getString("count").isEmpty())) {
          urlBuilder.addQueryParameter("count", escapeString(String.valueOf(params.getInt("count"))));
        }

        if (params.has("depth") && (!params.getString("depth").isEmpty())) {
          urlBuilder.addQueryParameter("depth", escapeString(String.valueOf(params.getInt("depth"))));
        }

        if (params.has("forbiddenId") && (!params.getString("forbiddenId").isEmpty())) {
          urlBuilder.addQueryParameter("forbidden_id[]", escapeString(String.valueOf(params.getJSONArray("forbiddenId"))));
        }

        if (params.has("forbiddenUris") && (!params.getString("forbiddenUris").isEmpty())) {
          urlBuilder.addQueryParameter("forbidden_uris[]", escapeString(String.valueOf(params.getJSONArray("forbiddenUris"))));
        }

        if (params.has("externalCode") && (!params.getString("externalCode").isEmpty())) {
          urlBuilder.addQueryParameter("external_code", escapeString(params.getString("externalCode")));
        }

        if (params.has("headsign") && (!params.getString("headsign").isEmpty())) {
          urlBuilder.addQueryParameter("headsign", escapeString(params.getString("headsign")));
        }

        if (params.has("showCodes") && (!params.getString("showCodes").isEmpty())) {
          urlBuilder.addQueryParameter("show_codes", escapeString(String.valueOf(params.getBoolean("showCodes"))));
        }

        if (params.has("odtLevel") && (!params.getString("odtLevel").isEmpty())) {
          urlBuilder.addQueryParameter("odt_level", escapeString(params.getString("odtLevel")));
        }

        if (params.has("dataFreshness") && (!params.getString("dataFreshness").isEmpty())) {
          urlBuilder.addQueryParameter("data_freshness", escapeString(params.getString("dataFreshness")));
        }

        if (params.has("distance") && (!params.getString("distance").isEmpty())) {
          urlBuilder.addQueryParameter("distance", escapeString(String.valueOf(params.getInt("distance"))));
        }

        if (params.has("since") && (!params.getString("since").isEmpty())) {
          urlBuilder.addQueryParameter("since", escapeString(String.valueOf(params.getString("since"))));
        }

        if (params.has("until") && (!params.getString("until").isEmpty())) {
          urlBuilder.addQueryParameter("until", escapeString(String.valueOf(params.getString("until"))));
        }

        if (params.has("disableGeojson") && (!params.getString("disableGeojson").isEmpty())) {
          urlBuilder.addQueryParameter("disable_geojson", escapeString(String.valueOf(params.getBoolean("disableGeojson"))));
        }

        if (params.has("disableDisruption") && (!params.getString("disableDisruption").isEmpty())) {
          urlBuilder.addQueryParameter("disable_disruption", escapeString(String.valueOf(params.getBoolean("disableDisruption"))));
        }

        if (params.has("filter") && (!params.getString("filter").isEmpty())) {
          urlBuilder.addQueryParameter("filter", escapeString(params.getString("filter")));
        }

        if (params.has("tags") && (!params.getString("tags").isEmpty())) {
          urlBuilder.addQueryParameter("tags[]", escapeString(String.valueOf(params.getJSONArray("tags"))));
        }

        if (params.has("originalId") && (!params.getString("originalId").isEmpty())) {
          urlBuilder.addQueryParameter("original_id", escapeString(params.getString("originalId")));
        }

        HttpUrl url = urlBuilder
          .addPathSegments(path)
          .build();
        Request request = requestBuilder.url(url)
          .build();

        client.newCall(request).enqueue(new Callback() {

          @Override
          public void onFailure(@NonNull Call call, @NonNull IOException e) {
            String errorMessage = "Problem during request | " + String.valueOf(e.hashCode()) + ": " + e.getMessage();
            callbackContext.error(errorMessage);
          }

          @Override
          public void onResponse(@NonNull Call call, @NonNull Response response) {
            if (response.isSuccessful()) {
              try {
                JSONObject jsonObject = new JSONObject(Objects.requireNonNull(response.body()).string());
                callbackContext.success(jsonObject);
              } catch (Exception e) {
                String errorMessage = "Problem during response parsing";
                callbackContext.error(errorMessage);
              }
            } else {
              callbackContext.error("Unexpected code " + response.code() + " | message: " + response.message());
            }
          }
        });
      } catch (Exception e) {
        String errorMessage = "Problem during request building | " + e.hashCode() + ": " + e.getMessage();
        callbackContext.error(errorMessage);
      }
    });
  }

  private void coverageLonLatUriLinesId(final JSONObject params, final CallbackContext callbackContext) {
    cordova.getThreadPool().execute(() -> {
      try {
        HttpUrl.Builder urlBuilder = new HttpUrl.Builder()
          .scheme("https")
          .host("api.navitia.io")
          .addPathSegment("v1");
        Request.Builder requestBuilder = new Request.Builder()
          .header("Authorization", token);
        String path = "/coverage/{lon};{lat}/{uri}/lines/{id}".substring(1);

        if (params.has("lat") && (!params.getString("lat").isEmpty())) {
          path = path.replaceAll("\\{" + "lat" + "\\}", escapeString(String.valueOf(params.getLong("lat"))));
        }

        if (params.has("lon") && (!params.getString("lon").isEmpty())) {
          path = path.replaceAll("\\{" + "lon" + "\\}", escapeString(String.valueOf(params.getLong("lon"))));
        }

        if (params.has("uri") && (!params.getString("uri").isEmpty())) {
          path = path.replaceAll("\\{" + "uri" + "\\}", escapeString(params.getString("uri")));
        }

        if (params.has("id") && (!params.getString("id").isEmpty())) {
          path = path.replaceAll("\\{" + "id" + "\\}", escapeString(params.getString("id")));
        }

        if (params.has("startPage") && (!params.getString("startPage").isEmpty())) {
          urlBuilder.addQueryParameter("start_page", escapeString(String.valueOf(params.getInt("startPage"))));
        }

        if (params.has("count") && (!params.getString("count").isEmpty())) {
          urlBuilder.addQueryParameter("count", escapeString(String.valueOf(params.getInt("count"))));
        }

        if (params.has("depth") && (!params.getString("depth").isEmpty())) {
          urlBuilder.addQueryParameter("depth", escapeString(String.valueOf(params.getInt("depth"))));
        }

        if (params.has("forbiddenId") && (!params.getString("forbiddenId").isEmpty())) {
          urlBuilder.addQueryParameter("forbidden_id[]", escapeString(String.valueOf(params.getJSONArray("forbiddenId"))));
        }

        if (params.has("forbiddenUris") && (!params.getString("forbiddenUris").isEmpty())) {
          urlBuilder.addQueryParameter("forbidden_uris[]", escapeString(String.valueOf(params.getJSONArray("forbiddenUris"))));
        }

        if (params.has("externalCode") && (!params.getString("externalCode").isEmpty())) {
          urlBuilder.addQueryParameter("external_code", escapeString(params.getString("externalCode")));
        }

        if (params.has("headsign") && (!params.getString("headsign").isEmpty())) {
          urlBuilder.addQueryParameter("headsign", escapeString(params.getString("headsign")));
        }

        if (params.has("showCodes") && (!params.getString("showCodes").isEmpty())) {
          urlBuilder.addQueryParameter("show_codes", escapeString(String.valueOf(params.getBoolean("showCodes"))));
        }

        if (params.has("odtLevel") && (!params.getString("odtLevel").isEmpty())) {
          urlBuilder.addQueryParameter("odt_level", escapeString(params.getString("odtLevel")));
        }

        if (params.has("dataFreshness") && (!params.getString("dataFreshness").isEmpty())) {
          urlBuilder.addQueryParameter("data_freshness", escapeString(params.getString("dataFreshness")));
        }

        if (params.has("distance") && (!params.getString("distance").isEmpty())) {
          urlBuilder.addQueryParameter("distance", escapeString(String.valueOf(params.getInt("distance"))));
        }

        if (params.has("since") && (!params.getString("since").isEmpty())) {
          urlBuilder.addQueryParameter("since", escapeString(String.valueOf(params.getString("since"))));
        }

        if (params.has("until") && (!params.getString("until").isEmpty())) {
          urlBuilder.addQueryParameter("until", escapeString(String.valueOf(params.getString("until"))));
        }

        if (params.has("disableGeojson") && (!params.getString("disableGeojson").isEmpty())) {
          urlBuilder.addQueryParameter("disable_geojson", escapeString(String.valueOf(params.getBoolean("disableGeojson"))));
        }

        if (params.has("disableDisruption") && (!params.getString("disableDisruption").isEmpty())) {
          urlBuilder.addQueryParameter("disable_disruption", escapeString(String.valueOf(params.getBoolean("disableDisruption"))));
        }

        if (params.has("tags") && (!params.getString("tags").isEmpty())) {
          urlBuilder.addQueryParameter("tags[]", escapeString(String.valueOf(params.getJSONArray("tags"))));
        }

        if (params.has("originalId") && (!params.getString("originalId").isEmpty())) {
          urlBuilder.addQueryParameter("original_id", escapeString(params.getString("originalId")));
        }

        HttpUrl url = urlBuilder
          .addPathSegments(path)
          .build();
        Request request = requestBuilder.url(url)
          .build();

        client.newCall(request).enqueue(new Callback() {

          @Override
          public void onFailure(@NonNull Call call, @NonNull IOException e) {
            String errorMessage = "Problem during request | " + String.valueOf(e.hashCode()) + ": " + e.getMessage();
            callbackContext.error(errorMessage);
          }

          @Override
          public void onResponse(@NonNull Call call, @NonNull Response response) {
            if (response.isSuccessful()) {
              try {
                JSONObject jsonObject = new JSONObject(Objects.requireNonNull(response.body()).string());
                callbackContext.success(jsonObject);
              } catch (Exception e) {
                String errorMessage = "Problem during response parsing";
                callbackContext.error(errorMessage);
              }
            } else {
              callbackContext.error("Unexpected code " + response.code() + " | message: " + response.message());
            }
          }
        });
      } catch (Exception e) {
        String errorMessage = "Problem during request building | " + e.hashCode() + ": " + e.getMessage();
        callbackContext.error(errorMessage);
      }
    });
  }

  private void coverageRegionLines(final JSONObject params, final CallbackContext callbackContext) {
    cordova.getThreadPool().execute(() -> {
      try {
        HttpUrl.Builder urlBuilder = new HttpUrl.Builder()
          .scheme("https")
          .host("api.navitia.io")
          .addPathSegment("v1");
        Request.Builder requestBuilder = new Request.Builder()
          .header("Authorization", token);
        String path = "/coverage/{region}/lines".substring(1);

        if (params.has("region") && (!params.getString("region").isEmpty())) {
          path = path.replaceAll("\\{" + "region" + "\\}", escapeString(params.getString("region")));
        }

        if (params.has("startPage") && (!params.getString("startPage").isEmpty())) {
          urlBuilder.addQueryParameter("start_page", escapeString(String.valueOf(params.getInt("startPage"))));
        }

        if (params.has("count") && (!params.getString("count").isEmpty())) {
          urlBuilder.addQueryParameter("count", escapeString(String.valueOf(params.getInt("count"))));
        }

        if (params.has("depth") && (!params.getString("depth").isEmpty())) {
          urlBuilder.addQueryParameter("depth", escapeString(String.valueOf(params.getInt("depth"))));
        }

        if (params.has("forbiddenId") && (!params.getString("forbiddenId").isEmpty())) {
          urlBuilder.addQueryParameter("forbidden_id[]", escapeString(String.valueOf(params.getJSONArray("forbiddenId"))));
        }

        if (params.has("forbiddenUris") && (!params.getString("forbiddenUris").isEmpty())) {
          urlBuilder.addQueryParameter("forbidden_uris[]", escapeString(String.valueOf(params.getJSONArray("forbiddenUris"))));
        }

        if (params.has("externalCode") && (!params.getString("externalCode").isEmpty())) {
          urlBuilder.addQueryParameter("external_code", escapeString(params.getString("externalCode")));
        }

        if (params.has("headsign") && (!params.getString("headsign").isEmpty())) {
          urlBuilder.addQueryParameter("headsign", escapeString(params.getString("headsign")));
        }

        if (params.has("showCodes") && (!params.getString("showCodes").isEmpty())) {
          urlBuilder.addQueryParameter("show_codes", escapeString(String.valueOf(params.getBoolean("showCodes"))));
        }

        if (params.has("odtLevel") && (!params.getString("odtLevel").isEmpty())) {
          urlBuilder.addQueryParameter("odt_level", escapeString(params.getString("odtLevel")));
        }

        if (params.has("dataFreshness") && (!params.getString("dataFreshness").isEmpty())) {
          urlBuilder.addQueryParameter("data_freshness", escapeString(params.getString("dataFreshness")));
        }

        if (params.has("distance") && (!params.getString("distance").isEmpty())) {
          urlBuilder.addQueryParameter("distance", escapeString(String.valueOf(params.getInt("distance"))));
        }

        if (params.has("since") && (!params.getString("since").isEmpty())) {
          urlBuilder.addQueryParameter("since", escapeString(String.valueOf(params.getString("since"))));
        }

        if (params.has("until") && (!params.getString("until").isEmpty())) {
          urlBuilder.addQueryParameter("until", escapeString(String.valueOf(params.getString("until"))));
        }

        if (params.has("disableGeojson") && (!params.getString("disableGeojson").isEmpty())) {
          urlBuilder.addQueryParameter("disable_geojson", escapeString(String.valueOf(params.getBoolean("disableGeojson"))));
        }

        if (params.has("disableDisruption") && (!params.getString("disableDisruption").isEmpty())) {
          urlBuilder.addQueryParameter("disable_disruption", escapeString(String.valueOf(params.getBoolean("disableDisruption"))));
        }

        if (params.has("filter") && (!params.getString("filter").isEmpty())) {
          urlBuilder.addQueryParameter("filter", escapeString(params.getString("filter")));
        }

        if (params.has("tags") && (!params.getString("tags").isEmpty())) {
          urlBuilder.addQueryParameter("tags[]", escapeString(String.valueOf(params.getJSONArray("tags"))));
        }

        if (params.has("originalId") && (!params.getString("originalId").isEmpty())) {
          urlBuilder.addQueryParameter("original_id", escapeString(params.getString("originalId")));
        }

        HttpUrl url = urlBuilder
          .addPathSegments(path)
          .build();
        Request request = requestBuilder.url(url)
          .build();

        client.newCall(request).enqueue(new Callback() {

          @Override
          public void onFailure(@NonNull Call call, @NonNull IOException e) {
            String errorMessage = "Problem during request | " + String.valueOf(e.hashCode()) + ": " + e.getMessage();
            callbackContext.error(errorMessage);
          }

          @Override
          public void onResponse(@NonNull Call call, @NonNull Response response) {
            if (response.isSuccessful()) {
              try {
                JSONObject jsonObject = new JSONObject(Objects.requireNonNull(response.body()).string());
                callbackContext.success(jsonObject);
              } catch (Exception e) {
                String errorMessage = "Problem during response parsing";
                callbackContext.error(errorMessage);
              }
            } else {
              callbackContext.error("Unexpected code " + response.code() + " | message: " + response.message());
            }
          }
        });
      } catch (Exception e) {
        String errorMessage = "Problem during request building | " + e.hashCode() + ": " + e.getMessage();
        callbackContext.error(errorMessage);
      }
    });
  }

  private void coverageRegionLinesId(final JSONObject params, final CallbackContext callbackContext) {
    cordova.getThreadPool().execute(() -> {
      try {
        HttpUrl.Builder urlBuilder = new HttpUrl.Builder()
          .scheme("https")
          .host("api.navitia.io")
          .addPathSegment("v1");
        Request.Builder requestBuilder = new Request.Builder()
          .header("Authorization", token);
        String path = "/coverage/{region}/lines/{id}".substring(1);

        if (params.has("region") && (!params.getString("region").isEmpty())) {
          path = path.replaceAll("\\{" + "region" + "\\}", escapeString(params.getString("region")));
        }

        if (params.has("id") && (!params.getString("id").isEmpty())) {
          path = path.replaceAll("\\{" + "id" + "\\}", escapeString(params.getString("id")));
        }

        if (params.has("startPage") && (!params.getString("startPage").isEmpty())) {
          urlBuilder.addQueryParameter("start_page", escapeString(String.valueOf(params.getInt("startPage"))));
        }

        if (params.has("count") && (!params.getString("count").isEmpty())) {
          urlBuilder.addQueryParameter("count", escapeString(String.valueOf(params.getInt("count"))));
        }

        if (params.has("depth") && (!params.getString("depth").isEmpty())) {
          urlBuilder.addQueryParameter("depth", escapeString(String.valueOf(params.getInt("depth"))));
        }

        if (params.has("forbiddenId") && (!params.getString("forbiddenId").isEmpty())) {
          urlBuilder.addQueryParameter("forbidden_id[]", escapeString(String.valueOf(params.getJSONArray("forbiddenId"))));
        }

        if (params.has("forbiddenUris") && (!params.getString("forbiddenUris").isEmpty())) {
          urlBuilder.addQueryParameter("forbidden_uris[]", escapeString(String.valueOf(params.getJSONArray("forbiddenUris"))));
        }

        if (params.has("externalCode") && (!params.getString("externalCode").isEmpty())) {
          urlBuilder.addQueryParameter("external_code", escapeString(params.getString("externalCode")));
        }

        if (params.has("headsign") && (!params.getString("headsign").isEmpty())) {
          urlBuilder.addQueryParameter("headsign", escapeString(params.getString("headsign")));
        }

        if (params.has("showCodes") && (!params.getString("showCodes").isEmpty())) {
          urlBuilder.addQueryParameter("show_codes", escapeString(String.valueOf(params.getBoolean("showCodes"))));
        }

        if (params.has("odtLevel") && (!params.getString("odtLevel").isEmpty())) {
          urlBuilder.addQueryParameter("odt_level", escapeString(params.getString("odtLevel")));
        }

        if (params.has("dataFreshness") && (!params.getString("dataFreshness").isEmpty())) {
          urlBuilder.addQueryParameter("data_freshness", escapeString(params.getString("dataFreshness")));
        }

        if (params.has("distance") && (!params.getString("distance").isEmpty())) {
          urlBuilder.addQueryParameter("distance", escapeString(String.valueOf(params.getInt("distance"))));
        }

        if (params.has("since") && (!params.getString("since").isEmpty())) {
          urlBuilder.addQueryParameter("since", escapeString(String.valueOf(params.getString("since"))));
        }

        if (params.has("until") && (!params.getString("until").isEmpty())) {
          urlBuilder.addQueryParameter("until", escapeString(String.valueOf(params.getString("until"))));
        }

        if (params.has("disableGeojson") && (!params.getString("disableGeojson").isEmpty())) {
          urlBuilder.addQueryParameter("disable_geojson", escapeString(String.valueOf(params.getBoolean("disableGeojson"))));
        }

        if (params.has("disableDisruption") && (!params.getString("disableDisruption").isEmpty())) {
          urlBuilder.addQueryParameter("disable_disruption", escapeString(String.valueOf(params.getBoolean("disableDisruption"))));
        }

        if (params.has("tags") && (!params.getString("tags").isEmpty())) {
          urlBuilder.addQueryParameter("tags[]", escapeString(String.valueOf(params.getJSONArray("tags"))));
        }

        if (params.has("originalId") && (!params.getString("originalId").isEmpty())) {
          urlBuilder.addQueryParameter("original_id", escapeString(params.getString("originalId")));
        }

        HttpUrl url = urlBuilder
          .addPathSegments(path)
          .build();
        Request request = requestBuilder.url(url)
          .build();

        client.newCall(request).enqueue(new Callback() {

          @Override
          public void onFailure(@NonNull Call call, @NonNull IOException e) {
            String errorMessage = "Problem during request | " + String.valueOf(e.hashCode()) + ": " + e.getMessage();
            callbackContext.error(errorMessage);
          }

          @Override
          public void onResponse(@NonNull Call call, @NonNull Response response) {
            if (response.isSuccessful()) {
              try {
                JSONObject jsonObject = new JSONObject(Objects.requireNonNull(response.body()).string());
                callbackContext.success(jsonObject);
              } catch (Exception e) {
                String errorMessage = "Problem during response parsing";
                callbackContext.error(errorMessage);
              }
            } else {
              callbackContext.error("Unexpected code " + response.code() + " | message: " + response.message());
            }
          }
        });
      } catch (Exception e) {
        String errorMessage = "Problem during request building | " + e.hashCode() + ": " + e.getMessage();
        callbackContext.error(errorMessage);
      }
    });
  }

  private void coverageRegionUriLines(final JSONObject params, final CallbackContext callbackContext) {
    cordova.getThreadPool().execute(() -> {
      try {
        HttpUrl.Builder urlBuilder = new HttpUrl.Builder()
          .scheme("https")
          .host("api.navitia.io")
          .addPathSegment("v1");
        Request.Builder requestBuilder = new Request.Builder()
          .header("Authorization", token);
        String path = "/coverage/{region}/{uri}/lines".substring(1);

        if (params.has("region") && (!params.getString("region").isEmpty())) {
          path = path.replaceAll("\\{" + "region" + "\\}", escapeString(params.getString("region")));
        }

        if (params.has("uri") && (!params.getString("uri").isEmpty())) {
          path = path.replaceAll("\\{" + "uri" + "\\}", escapeString(params.getString("uri")));
        }

        if (params.has("startPage") && (!params.getString("startPage").isEmpty())) {
          urlBuilder.addQueryParameter("start_page", escapeString(String.valueOf(params.getInt("startPage"))));
        }

        if (params.has("count") && (!params.getString("count").isEmpty())) {
          urlBuilder.addQueryParameter("count", escapeString(String.valueOf(params.getInt("count"))));
        }

        if (params.has("depth") && (!params.getString("depth").isEmpty())) {
          urlBuilder.addQueryParameter("depth", escapeString(String.valueOf(params.getInt("depth"))));
        }

        if (params.has("forbiddenId") && (!params.getString("forbiddenId").isEmpty())) {
          urlBuilder.addQueryParameter("forbidden_id[]", escapeString(String.valueOf(params.getJSONArray("forbiddenId"))));
        }

        if (params.has("forbiddenUris") && (!params.getString("forbiddenUris").isEmpty())) {
          urlBuilder.addQueryParameter("forbidden_uris[]", escapeString(String.valueOf(params.getJSONArray("forbiddenUris"))));
        }

        if (params.has("externalCode") && (!params.getString("externalCode").isEmpty())) {
          urlBuilder.addQueryParameter("external_code", escapeString(params.getString("externalCode")));
        }

        if (params.has("headsign") && (!params.getString("headsign").isEmpty())) {
          urlBuilder.addQueryParameter("headsign", escapeString(params.getString("headsign")));
        }

        if (params.has("showCodes") && (!params.getString("showCodes").isEmpty())) {
          urlBuilder.addQueryParameter("show_codes", escapeString(String.valueOf(params.getBoolean("showCodes"))));
        }

        if (params.has("odtLevel") && (!params.getString("odtLevel").isEmpty())) {
          urlBuilder.addQueryParameter("odt_level", escapeString(params.getString("odtLevel")));
        }

        if (params.has("dataFreshness") && (!params.getString("dataFreshness").isEmpty())) {
          urlBuilder.addQueryParameter("data_freshness", escapeString(params.getString("dataFreshness")));
        }

        if (params.has("distance") && (!params.getString("distance").isEmpty())) {
          urlBuilder.addQueryParameter("distance", escapeString(String.valueOf(params.getInt("distance"))));
        }

        if (params.has("since") && (!params.getString("since").isEmpty())) {
          urlBuilder.addQueryParameter("since", escapeString(String.valueOf(params.getString("since"))));
        }

        if (params.has("until") && (!params.getString("until").isEmpty())) {
          urlBuilder.addQueryParameter("until", escapeString(String.valueOf(params.getString("until"))));
        }

        if (params.has("disableGeojson") && (!params.getString("disableGeojson").isEmpty())) {
          urlBuilder.addQueryParameter("disable_geojson", escapeString(String.valueOf(params.getBoolean("disableGeojson"))));
        }

        if (params.has("disableDisruption") && (!params.getString("disableDisruption").isEmpty())) {
          urlBuilder.addQueryParameter("disable_disruption", escapeString(String.valueOf(params.getBoolean("disableDisruption"))));
        }

        if (params.has("filter") && (!params.getString("filter").isEmpty())) {
          urlBuilder.addQueryParameter("filter", escapeString(params.getString("filter")));
        }

        if (params.has("tags") && (!params.getString("tags").isEmpty())) {
          urlBuilder.addQueryParameter("tags[]", escapeString(String.valueOf(params.getJSONArray("tags"))));
        }

        if (params.has("originalId") && (!params.getString("originalId").isEmpty())) {
          urlBuilder.addQueryParameter("original_id", escapeString(params.getString("originalId")));
        }

        HttpUrl url = urlBuilder
          .addPathSegments(path)
          .build();
        Request request = requestBuilder.url(url)
          .build();

        client.newCall(request).enqueue(new Callback() {

          @Override
          public void onFailure(@NonNull Call call, @NonNull IOException e) {
            String errorMessage = "Problem during request | " + String.valueOf(e.hashCode()) + ": " + e.getMessage();
            callbackContext.error(errorMessage);
          }

          @Override
          public void onResponse(@NonNull Call call, @NonNull Response response) {
            if (response.isSuccessful()) {
              try {
                JSONObject jsonObject = new JSONObject(Objects.requireNonNull(response.body()).string());
                callbackContext.success(jsonObject);
              } catch (Exception e) {
                String errorMessage = "Problem during response parsing";
                callbackContext.error(errorMessage);
              }
            } else {
              callbackContext.error("Unexpected code " + response.code() + " | message: " + response.message());
            }
          }
        });
      } catch (Exception e) {
        String errorMessage = "Problem during request building | " + e.hashCode() + ": " + e.getMessage();
        callbackContext.error(errorMessage);
      }
    });
  }

  private void coverageRegionUriLinesId(final JSONObject params, final CallbackContext callbackContext) {
    cordova.getThreadPool().execute(() -> {
      try {
        HttpUrl.Builder urlBuilder = new HttpUrl.Builder()
          .scheme("https")
          .host("api.navitia.io")
          .addPathSegment("v1");
        Request.Builder requestBuilder = new Request.Builder()
          .header("Authorization", token);
        String path = "/coverage/{region}/{uri}/lines/{id}".substring(1);

        if (params.has("region") && (!params.getString("region").isEmpty())) {
          path = path.replaceAll("\\{" + "region" + "\\}", escapeString(params.getString("region")));
        }

        if (params.has("uri") && (!params.getString("uri").isEmpty())) {
          path = path.replaceAll("\\{" + "uri" + "\\}", escapeString(params.getString("uri")));
        }

        if (params.has("id") && (!params.getString("id").isEmpty())) {
          path = path.replaceAll("\\{" + "id" + "\\}", escapeString(params.getString("id")));
        }

        if (params.has("startPage") && (!params.getString("startPage").isEmpty())) {
          urlBuilder.addQueryParameter("start_page", escapeString(String.valueOf(params.getInt("startPage"))));
        }

        if (params.has("count") && (!params.getString("count").isEmpty())) {
          urlBuilder.addQueryParameter("count", escapeString(String.valueOf(params.getInt("count"))));
        }

        if (params.has("depth") && (!params.getString("depth").isEmpty())) {
          urlBuilder.addQueryParameter("depth", escapeString(String.valueOf(params.getInt("depth"))));
        }

        if (params.has("forbiddenId") && (!params.getString("forbiddenId").isEmpty())) {
          urlBuilder.addQueryParameter("forbidden_id[]", escapeString(String.valueOf(params.getJSONArray("forbiddenId"))));
        }

        if (params.has("forbiddenUris") && (!params.getString("forbiddenUris").isEmpty())) {
          urlBuilder.addQueryParameter("forbidden_uris[]", escapeString(String.valueOf(params.getJSONArray("forbiddenUris"))));
        }

        if (params.has("externalCode") && (!params.getString("externalCode").isEmpty())) {
          urlBuilder.addQueryParameter("external_code", escapeString(params.getString("externalCode")));
        }

        if (params.has("headsign") && (!params.getString("headsign").isEmpty())) {
          urlBuilder.addQueryParameter("headsign", escapeString(params.getString("headsign")));
        }

        if (params.has("showCodes") && (!params.getString("showCodes").isEmpty())) {
          urlBuilder.addQueryParameter("show_codes", escapeString(String.valueOf(params.getBoolean("showCodes"))));
        }

        if (params.has("odtLevel") && (!params.getString("odtLevel").isEmpty())) {
          urlBuilder.addQueryParameter("odt_level", escapeString(params.getString("odtLevel")));
        }

        if (params.has("dataFreshness") && (!params.getString("dataFreshness").isEmpty())) {
          urlBuilder.addQueryParameter("data_freshness", escapeString(params.getString("dataFreshness")));
        }

        if (params.has("distance") && (!params.getString("distance").isEmpty())) {
          urlBuilder.addQueryParameter("distance", escapeString(String.valueOf(params.getInt("distance"))));
        }

        if (params.has("since") && (!params.getString("since").isEmpty())) {
          urlBuilder.addQueryParameter("since", escapeString(String.valueOf(params.getString("since"))));
        }

        if (params.has("until") && (!params.getString("until").isEmpty())) {
          urlBuilder.addQueryParameter("until", escapeString(String.valueOf(params.getString("until"))));
        }

        if (params.has("disableGeojson") && (!params.getString("disableGeojson").isEmpty())) {
          urlBuilder.addQueryParameter("disable_geojson", escapeString(String.valueOf(params.getBoolean("disableGeojson"))));
        }

        if (params.has("disableDisruption") && (!params.getString("disableDisruption").isEmpty())) {
          urlBuilder.addQueryParameter("disable_disruption", escapeString(String.valueOf(params.getBoolean("disableDisruption"))));
        }

        if (params.has("tags") && (!params.getString("tags").isEmpty())) {
          urlBuilder.addQueryParameter("tags[]", escapeString(String.valueOf(params.getJSONArray("tags"))));
        }

        if (params.has("originalId") && (!params.getString("originalId").isEmpty())) {
          urlBuilder.addQueryParameter("original_id", escapeString(params.getString("originalId")));
        }

        HttpUrl url = urlBuilder
          .addPathSegments(path)
          .build();
        Request request = requestBuilder.url(url)
          .build();

        client.newCall(request).enqueue(new Callback() {

          @Override
          public void onFailure(@NonNull Call call, @NonNull IOException e) {
            String errorMessage = "Problem during request | " + String.valueOf(e.hashCode()) + ": " + e.getMessage();
            callbackContext.error(errorMessage);
          }

          @Override
          public void onResponse(@NonNull Call call, @NonNull Response response) {
            if (response.isSuccessful()) {
              try {
                JSONObject jsonObject = new JSONObject(Objects.requireNonNull(response.body()).string());
                callbackContext.success(jsonObject);
              } catch (Exception e) {
                String errorMessage = "Problem during response parsing";
                callbackContext.error(errorMessage);
              }
            } else {
              callbackContext.error("Unexpected code " + response.code() + " | message: " + response.message());
            }
          }
        });
      } catch (Exception e) {
        String errorMessage = "Problem during request building | " + e.hashCode() + ": " + e.getMessage();
        callbackContext.error(errorMessage);
      }
    });
  }

  private void lines(final JSONObject params, final CallbackContext callbackContext) {
    cordova.getThreadPool().execute(() -> {
      try {
        HttpUrl.Builder urlBuilder = new HttpUrl.Builder()
          .scheme("https")
          .host("api.navitia.io")
          .addPathSegment("v1");
        Request.Builder requestBuilder = new Request.Builder()
          .header("Authorization", token);
        String path = "/lines".substring(1);

        if (params.has("externalCode") && (!params.getString("externalCode").isEmpty())) {
          urlBuilder.addQueryParameter("external_code", escapeString(params.getString("externalCode")));
        }

        if (params.has("startPage") && (!params.getString("startPage").isEmpty())) {
          urlBuilder.addQueryParameter("start_page", escapeString(String.valueOf(params.getInt("startPage"))));
        }

        if (params.has("count") && (!params.getString("count").isEmpty())) {
          urlBuilder.addQueryParameter("count", escapeString(String.valueOf(params.getInt("count"))));
        }

        if (params.has("depth") && (!params.getString("depth").isEmpty())) {
          urlBuilder.addQueryParameter("depth", escapeString(String.valueOf(params.getInt("depth"))));
        }

        if (params.has("forbiddenId") && (!params.getString("forbiddenId").isEmpty())) {
          urlBuilder.addQueryParameter("forbidden_id[]", escapeString(String.valueOf(params.getJSONArray("forbiddenId"))));
        }

        if (params.has("forbiddenUris") && (!params.getString("forbiddenUris").isEmpty())) {
          urlBuilder.addQueryParameter("forbidden_uris[]", escapeString(String.valueOf(params.getJSONArray("forbiddenUris"))));
        }

        if (params.has("headsign") && (!params.getString("headsign").isEmpty())) {
          urlBuilder.addQueryParameter("headsign", escapeString(params.getString("headsign")));
        }

        if (params.has("showCodes") && (!params.getString("showCodes").isEmpty())) {
          urlBuilder.addQueryParameter("show_codes", escapeString(String.valueOf(params.getBoolean("showCodes"))));
        }

        if (params.has("odtLevel") && (!params.getString("odtLevel").isEmpty())) {
          urlBuilder.addQueryParameter("odt_level", escapeString(params.getString("odtLevel")));
        }

        if (params.has("dataFreshness") && (!params.getString("dataFreshness").isEmpty())) {
          urlBuilder.addQueryParameter("data_freshness", escapeString(params.getString("dataFreshness")));
        }

        if (params.has("distance") && (!params.getString("distance").isEmpty())) {
          urlBuilder.addQueryParameter("distance", escapeString(String.valueOf(params.getInt("distance"))));
        }

        if (params.has("since") && (!params.getString("since").isEmpty())) {
          urlBuilder.addQueryParameter("since", escapeString(String.valueOf(params.getString("since"))));
        }

        if (params.has("until") && (!params.getString("until").isEmpty())) {
          urlBuilder.addQueryParameter("until", escapeString(String.valueOf(params.getString("until"))));
        }

        if (params.has("disableGeojson") && (!params.getString("disableGeojson").isEmpty())) {
          urlBuilder.addQueryParameter("disable_geojson", escapeString(String.valueOf(params.getBoolean("disableGeojson"))));
        }

        if (params.has("disableDisruption") && (!params.getString("disableDisruption").isEmpty())) {
          urlBuilder.addQueryParameter("disable_disruption", escapeString(String.valueOf(params.getBoolean("disableDisruption"))));
        }

        if (params.has("filter") && (!params.getString("filter").isEmpty())) {
          urlBuilder.addQueryParameter("filter", escapeString(params.getString("filter")));
        }

        if (params.has("tags") && (!params.getString("tags").isEmpty())) {
          urlBuilder.addQueryParameter("tags[]", escapeString(String.valueOf(params.getJSONArray("tags"))));
        }

        if (params.has("originalId") && (!params.getString("originalId").isEmpty())) {
          urlBuilder.addQueryParameter("original_id", escapeString(params.getString("originalId")));
        }

        HttpUrl url = urlBuilder
          .addPathSegments(path)
          .build();
        Request request = requestBuilder.url(url)
          .build();

        client.newCall(request).enqueue(new Callback() {

          @Override
          public void onFailure(@NonNull Call call, @NonNull IOException e) {
            String errorMessage = "Problem during request | " + String.valueOf(e.hashCode()) + ": " + e.getMessage();
            callbackContext.error(errorMessage);
          }

          @Override
          public void onResponse(@NonNull Call call, @NonNull Response response) {
            if (response.isSuccessful()) {
              try {
                JSONObject jsonObject = new JSONObject(Objects.requireNonNull(response.body()).string());
                callbackContext.success(jsonObject);
              } catch (Exception e) {
                String errorMessage = "Problem during response parsing";
                callbackContext.error(errorMessage);
              }
            } else {
              callbackContext.error("Unexpected code " + response.code() + " | message: " + response.message());
            }
          }
        });
      } catch (Exception e) {
        String errorMessage = "Problem during request building | " + e.hashCode() + ": " + e.getMessage();
        callbackContext.error(errorMessage);
      }
    });
  }

  private void coverageLonLatNetworks(final JSONObject params, final CallbackContext callbackContext) {
    cordova.getThreadPool().execute(() -> {
      try {
        HttpUrl.Builder urlBuilder = new HttpUrl.Builder()
          .scheme("https")
          .host("api.navitia.io")
          .addPathSegment("v1");
        Request.Builder requestBuilder = new Request.Builder()
          .header("Authorization", token);
        String path = "/coverage/{lon};{lat}/networks".substring(1);

        if (params.has("lat") && (!params.getString("lat").isEmpty())) {
          path = path.replaceAll("\\{" + "lat" + "\\}", escapeString(String.valueOf(params.getLong("lat"))));
        }

        if (params.has("lon") && (!params.getString("lon").isEmpty())) {
          path = path.replaceAll("\\{" + "lon" + "\\}", escapeString(String.valueOf(params.getLong("lon"))));
        }

        if (params.has("startPage") && (!params.getString("startPage").isEmpty())) {
          urlBuilder.addQueryParameter("start_page", escapeString(String.valueOf(params.getInt("startPage"))));
        }

        if (params.has("count") && (!params.getString("count").isEmpty())) {
          urlBuilder.addQueryParameter("count", escapeString(String.valueOf(params.getInt("count"))));
        }

        if (params.has("depth") && (!params.getString("depth").isEmpty())) {
          urlBuilder.addQueryParameter("depth", escapeString(String.valueOf(params.getInt("depth"))));
        }

        if (params.has("forbiddenId") && (!params.getString("forbiddenId").isEmpty())) {
          urlBuilder.addQueryParameter("forbidden_id[]", escapeString(String.valueOf(params.getJSONArray("forbiddenId"))));
        }

        if (params.has("forbiddenUris") && (!params.getString("forbiddenUris").isEmpty())) {
          urlBuilder.addQueryParameter("forbidden_uris[]", escapeString(String.valueOf(params.getJSONArray("forbiddenUris"))));
        }

        if (params.has("externalCode") && (!params.getString("externalCode").isEmpty())) {
          urlBuilder.addQueryParameter("external_code", escapeString(params.getString("externalCode")));
        }

        if (params.has("headsign") && (!params.getString("headsign").isEmpty())) {
          urlBuilder.addQueryParameter("headsign", escapeString(params.getString("headsign")));
        }

        if (params.has("showCodes") && (!params.getString("showCodes").isEmpty())) {
          urlBuilder.addQueryParameter("show_codes", escapeString(String.valueOf(params.getBoolean("showCodes"))));
        }

        if (params.has("odtLevel") && (!params.getString("odtLevel").isEmpty())) {
          urlBuilder.addQueryParameter("odt_level", escapeString(params.getString("odtLevel")));
        }

        if (params.has("dataFreshness") && (!params.getString("dataFreshness").isEmpty())) {
          urlBuilder.addQueryParameter("data_freshness", escapeString(params.getString("dataFreshness")));
        }

        if (params.has("distance") && (!params.getString("distance").isEmpty())) {
          urlBuilder.addQueryParameter("distance", escapeString(String.valueOf(params.getInt("distance"))));
        }

        if (params.has("since") && (!params.getString("since").isEmpty())) {
          urlBuilder.addQueryParameter("since", escapeString(String.valueOf(params.getString("since"))));
        }

        if (params.has("until") && (!params.getString("until").isEmpty())) {
          urlBuilder.addQueryParameter("until", escapeString(String.valueOf(params.getString("until"))));
        }

        if (params.has("disableGeojson") && (!params.getString("disableGeojson").isEmpty())) {
          urlBuilder.addQueryParameter("disable_geojson", escapeString(String.valueOf(params.getBoolean("disableGeojson"))));
        }

        if (params.has("disableDisruption") && (!params.getString("disableDisruption").isEmpty())) {
          urlBuilder.addQueryParameter("disable_disruption", escapeString(String.valueOf(params.getBoolean("disableDisruption"))));
        }

        if (params.has("filter") && (!params.getString("filter").isEmpty())) {
          urlBuilder.addQueryParameter("filter", escapeString(params.getString("filter")));
        }

        if (params.has("tags") && (!params.getString("tags").isEmpty())) {
          urlBuilder.addQueryParameter("tags[]", escapeString(String.valueOf(params.getJSONArray("tags"))));
        }

        if (params.has("originalId") && (!params.getString("originalId").isEmpty())) {
          urlBuilder.addQueryParameter("original_id", escapeString(params.getString("originalId")));
        }

        HttpUrl url = urlBuilder
          .addPathSegments(path)
          .build();
        Request request = requestBuilder.url(url)
          .build();

        client.newCall(request).enqueue(new Callback() {

          @Override
          public void onFailure(@NonNull Call call, @NonNull IOException e) {
            String errorMessage = "Problem during request | " + String.valueOf(e.hashCode()) + ": " + e.getMessage();
            callbackContext.error(errorMessage);
          }

          @Override
          public void onResponse(@NonNull Call call, @NonNull Response response) {
            if (response.isSuccessful()) {
              try {
                JSONObject jsonObject = new JSONObject(Objects.requireNonNull(response.body()).string());
                callbackContext.success(jsonObject);
              } catch (Exception e) {
                String errorMessage = "Problem during response parsing";
                callbackContext.error(errorMessage);
              }
            } else {
              callbackContext.error("Unexpected code " + response.code() + " | message: " + response.message());
            }
          }
        });
      } catch (Exception e) {
        String errorMessage = "Problem during request building | " + e.hashCode() + ": " + e.getMessage();
        callbackContext.error(errorMessage);
      }
    });
  }

  private void coverageLonLatNetworksId(final JSONObject params, final CallbackContext callbackContext) {
    cordova.getThreadPool().execute(() -> {
      try {
        HttpUrl.Builder urlBuilder = new HttpUrl.Builder()
          .scheme("https")
          .host("api.navitia.io")
          .addPathSegment("v1");
        Request.Builder requestBuilder = new Request.Builder()
          .header("Authorization", token);
        String path = "/coverage/{lon};{lat}/networks/{id}".substring(1);

        if (params.has("lat") && (!params.getString("lat").isEmpty())) {
          path = path.replaceAll("\\{" + "lat" + "\\}", escapeString(String.valueOf(params.getLong("lat"))));
        }

        if (params.has("lon") && (!params.getString("lon").isEmpty())) {
          path = path.replaceAll("\\{" + "lon" + "\\}", escapeString(String.valueOf(params.getLong("lon"))));
        }

        if (params.has("id") && (!params.getString("id").isEmpty())) {
          path = path.replaceAll("\\{" + "id" + "\\}", escapeString(params.getString("id")));
        }

        if (params.has("startPage") && (!params.getString("startPage").isEmpty())) {
          urlBuilder.addQueryParameter("start_page", escapeString(String.valueOf(params.getInt("startPage"))));
        }

        if (params.has("count") && (!params.getString("count").isEmpty())) {
          urlBuilder.addQueryParameter("count", escapeString(String.valueOf(params.getInt("count"))));
        }

        if (params.has("depth") && (!params.getString("depth").isEmpty())) {
          urlBuilder.addQueryParameter("depth", escapeString(String.valueOf(params.getInt("depth"))));
        }

        if (params.has("forbiddenId") && (!params.getString("forbiddenId").isEmpty())) {
          urlBuilder.addQueryParameter("forbidden_id[]", escapeString(String.valueOf(params.getJSONArray("forbiddenId"))));
        }

        if (params.has("forbiddenUris") && (!params.getString("forbiddenUris").isEmpty())) {
          urlBuilder.addQueryParameter("forbidden_uris[]", escapeString(String.valueOf(params.getJSONArray("forbiddenUris"))));
        }

        if (params.has("externalCode") && (!params.getString("externalCode").isEmpty())) {
          urlBuilder.addQueryParameter("external_code", escapeString(params.getString("externalCode")));
        }

        if (params.has("headsign") && (!params.getString("headsign").isEmpty())) {
          urlBuilder.addQueryParameter("headsign", escapeString(params.getString("headsign")));
        }

        if (params.has("showCodes") && (!params.getString("showCodes").isEmpty())) {
          urlBuilder.addQueryParameter("show_codes", escapeString(String.valueOf(params.getBoolean("showCodes"))));
        }

        if (params.has("odtLevel") && (!params.getString("odtLevel").isEmpty())) {
          urlBuilder.addQueryParameter("odt_level", escapeString(params.getString("odtLevel")));
        }

        if (params.has("dataFreshness") && (!params.getString("dataFreshness").isEmpty())) {
          urlBuilder.addQueryParameter("data_freshness", escapeString(params.getString("dataFreshness")));
        }

        if (params.has("distance") && (!params.getString("distance").isEmpty())) {
          urlBuilder.addQueryParameter("distance", escapeString(String.valueOf(params.getInt("distance"))));
        }

        if (params.has("since") && (!params.getString("since").isEmpty())) {
          urlBuilder.addQueryParameter("since", escapeString(String.valueOf(params.getString("since"))));
        }

        if (params.has("until") && (!params.getString("until").isEmpty())) {
          urlBuilder.addQueryParameter("until", escapeString(String.valueOf(params.getString("until"))));
        }

        if (params.has("disableGeojson") && (!params.getString("disableGeojson").isEmpty())) {
          urlBuilder.addQueryParameter("disable_geojson", escapeString(String.valueOf(params.getBoolean("disableGeojson"))));
        }

        if (params.has("disableDisruption") && (!params.getString("disableDisruption").isEmpty())) {
          urlBuilder.addQueryParameter("disable_disruption", escapeString(String.valueOf(params.getBoolean("disableDisruption"))));
        }

        if (params.has("tags") && (!params.getString("tags").isEmpty())) {
          urlBuilder.addQueryParameter("tags[]", escapeString(String.valueOf(params.getJSONArray("tags"))));
        }

        if (params.has("originalId") && (!params.getString("originalId").isEmpty())) {
          urlBuilder.addQueryParameter("original_id", escapeString(params.getString("originalId")));
        }

        HttpUrl url = urlBuilder
          .addPathSegments(path)
          .build();
        Request request = requestBuilder.url(url)
          .build();

        client.newCall(request).enqueue(new Callback() {

          @Override
          public void onFailure(@NonNull Call call, @NonNull IOException e) {
            String errorMessage = "Problem during request | " + String.valueOf(e.hashCode()) + ": " + e.getMessage();
            callbackContext.error(errorMessage);
          }

          @Override
          public void onResponse(@NonNull Call call, @NonNull Response response) {
            if (response.isSuccessful()) {
              try {
                JSONObject jsonObject = new JSONObject(Objects.requireNonNull(response.body()).string());
                callbackContext.success(jsonObject);
              } catch (Exception e) {
                String errorMessage = "Problem during response parsing";
                callbackContext.error(errorMessage);
              }
            } else {
              callbackContext.error("Unexpected code " + response.code() + " | message: " + response.message());
            }
          }
        });
      } catch (Exception e) {
        String errorMessage = "Problem during request building | " + e.hashCode() + ": " + e.getMessage();
        callbackContext.error(errorMessage);
      }
    });
  }

  private void coverageLonLatUriNetworks(final JSONObject params, final CallbackContext callbackContext) {
    cordova.getThreadPool().execute(() -> {
      try {
        HttpUrl.Builder urlBuilder = new HttpUrl.Builder()
          .scheme("https")
          .host("api.navitia.io")
          .addPathSegment("v1");
        Request.Builder requestBuilder = new Request.Builder()
          .header("Authorization", token);
        String path = "/coverage/{lon};{lat}/{uri}/networks".substring(1);

        if (params.has("lat") && (!params.getString("lat").isEmpty())) {
          path = path.replaceAll("\\{" + "lat" + "\\}", escapeString(String.valueOf(params.getLong("lat"))));
        }

        if (params.has("lon") && (!params.getString("lon").isEmpty())) {
          path = path.replaceAll("\\{" + "lon" + "\\}", escapeString(String.valueOf(params.getLong("lon"))));
        }

        if (params.has("uri") && (!params.getString("uri").isEmpty())) {
          path = path.replaceAll("\\{" + "uri" + "\\}", escapeString(params.getString("uri")));
        }

        if (params.has("startPage") && (!params.getString("startPage").isEmpty())) {
          urlBuilder.addQueryParameter("start_page", escapeString(String.valueOf(params.getInt("startPage"))));
        }

        if (params.has("count") && (!params.getString("count").isEmpty())) {
          urlBuilder.addQueryParameter("count", escapeString(String.valueOf(params.getInt("count"))));
        }

        if (params.has("depth") && (!params.getString("depth").isEmpty())) {
          urlBuilder.addQueryParameter("depth", escapeString(String.valueOf(params.getInt("depth"))));
        }

        if (params.has("forbiddenId") && (!params.getString("forbiddenId").isEmpty())) {
          urlBuilder.addQueryParameter("forbidden_id[]", escapeString(String.valueOf(params.getJSONArray("forbiddenId"))));
        }

        if (params.has("forbiddenUris") && (!params.getString("forbiddenUris").isEmpty())) {
          urlBuilder.addQueryParameter("forbidden_uris[]", escapeString(String.valueOf(params.getJSONArray("forbiddenUris"))));
        }

        if (params.has("externalCode") && (!params.getString("externalCode").isEmpty())) {
          urlBuilder.addQueryParameter("external_code", escapeString(params.getString("externalCode")));
        }

        if (params.has("headsign") && (!params.getString("headsign").isEmpty())) {
          urlBuilder.addQueryParameter("headsign", escapeString(params.getString("headsign")));
        }

        if (params.has("showCodes") && (!params.getString("showCodes").isEmpty())) {
          urlBuilder.addQueryParameter("show_codes", escapeString(String.valueOf(params.getBoolean("showCodes"))));
        }

        if (params.has("odtLevel") && (!params.getString("odtLevel").isEmpty())) {
          urlBuilder.addQueryParameter("odt_level", escapeString(params.getString("odtLevel")));
        }

        if (params.has("dataFreshness") && (!params.getString("dataFreshness").isEmpty())) {
          urlBuilder.addQueryParameter("data_freshness", escapeString(params.getString("dataFreshness")));
        }

        if (params.has("distance") && (!params.getString("distance").isEmpty())) {
          urlBuilder.addQueryParameter("distance", escapeString(String.valueOf(params.getInt("distance"))));
        }

        if (params.has("since") && (!params.getString("since").isEmpty())) {
          urlBuilder.addQueryParameter("since", escapeString(String.valueOf(params.getString("since"))));
        }

        if (params.has("until") && (!params.getString("until").isEmpty())) {
          urlBuilder.addQueryParameter("until", escapeString(String.valueOf(params.getString("until"))));
        }

        if (params.has("disableGeojson") && (!params.getString("disableGeojson").isEmpty())) {
          urlBuilder.addQueryParameter("disable_geojson", escapeString(String.valueOf(params.getBoolean("disableGeojson"))));
        }

        if (params.has("disableDisruption") && (!params.getString("disableDisruption").isEmpty())) {
          urlBuilder.addQueryParameter("disable_disruption", escapeString(String.valueOf(params.getBoolean("disableDisruption"))));
        }

        if (params.has("filter") && (!params.getString("filter").isEmpty())) {
          urlBuilder.addQueryParameter("filter", escapeString(params.getString("filter")));
        }

        if (params.has("tags") && (!params.getString("tags").isEmpty())) {
          urlBuilder.addQueryParameter("tags[]", escapeString(String.valueOf(params.getJSONArray("tags"))));
        }

        if (params.has("originalId") && (!params.getString("originalId").isEmpty())) {
          urlBuilder.addQueryParameter("original_id", escapeString(params.getString("originalId")));
        }

        HttpUrl url = urlBuilder
          .addPathSegments(path)
          .build();
        Request request = requestBuilder.url(url)
          .build();

        client.newCall(request).enqueue(new Callback() {

          @Override
          public void onFailure(@NonNull Call call, @NonNull IOException e) {
            String errorMessage = "Problem during request | " + String.valueOf(e.hashCode()) + ": " + e.getMessage();
            callbackContext.error(errorMessage);
          }

          @Override
          public void onResponse(@NonNull Call call, @NonNull Response response) {
            if (response.isSuccessful()) {
              try {
                JSONObject jsonObject = new JSONObject(Objects.requireNonNull(response.body()).string());
                callbackContext.success(jsonObject);
              } catch (Exception e) {
                String errorMessage = "Problem during response parsing";
                callbackContext.error(errorMessage);
              }
            } else {
              callbackContext.error("Unexpected code " + response.code() + " | message: " + response.message());
            }
          }
        });
      } catch (Exception e) {
        String errorMessage = "Problem during request building | " + e.hashCode() + ": " + e.getMessage();
        callbackContext.error(errorMessage);
      }
    });
  }

  private void coverageLonLatUriNetworksId(final JSONObject params, final CallbackContext callbackContext) {
    cordova.getThreadPool().execute(() -> {
      try {
        HttpUrl.Builder urlBuilder = new HttpUrl.Builder()
          .scheme("https")
          .host("api.navitia.io")
          .addPathSegment("v1");
        Request.Builder requestBuilder = new Request.Builder()
          .header("Authorization", token);
        String path = "/coverage/{lon};{lat}/{uri}/networks/{id}".substring(1);

        if (params.has("lat") && (!params.getString("lat").isEmpty())) {
          path = path.replaceAll("\\{" + "lat" + "\\}", escapeString(String.valueOf(params.getLong("lat"))));
        }

        if (params.has("lon") && (!params.getString("lon").isEmpty())) {
          path = path.replaceAll("\\{" + "lon" + "\\}", escapeString(String.valueOf(params.getLong("lon"))));
        }

        if (params.has("uri") && (!params.getString("uri").isEmpty())) {
          path = path.replaceAll("\\{" + "uri" + "\\}", escapeString(params.getString("uri")));
        }

        if (params.has("id") && (!params.getString("id").isEmpty())) {
          path = path.replaceAll("\\{" + "id" + "\\}", escapeString(params.getString("id")));
        }

        if (params.has("startPage") && (!params.getString("startPage").isEmpty())) {
          urlBuilder.addQueryParameter("start_page", escapeString(String.valueOf(params.getInt("startPage"))));
        }

        if (params.has("count") && (!params.getString("count").isEmpty())) {
          urlBuilder.addQueryParameter("count", escapeString(String.valueOf(params.getInt("count"))));
        }

        if (params.has("depth") && (!params.getString("depth").isEmpty())) {
          urlBuilder.addQueryParameter("depth", escapeString(String.valueOf(params.getInt("depth"))));
        }

        if (params.has("forbiddenId") && (!params.getString("forbiddenId").isEmpty())) {
          urlBuilder.addQueryParameter("forbidden_id[]", escapeString(String.valueOf(params.getJSONArray("forbiddenId"))));
        }

        if (params.has("forbiddenUris") && (!params.getString("forbiddenUris").isEmpty())) {
          urlBuilder.addQueryParameter("forbidden_uris[]", escapeString(String.valueOf(params.getJSONArray("forbiddenUris"))));
        }

        if (params.has("externalCode") && (!params.getString("externalCode").isEmpty())) {
          urlBuilder.addQueryParameter("external_code", escapeString(params.getString("externalCode")));
        }

        if (params.has("headsign") && (!params.getString("headsign").isEmpty())) {
          urlBuilder.addQueryParameter("headsign", escapeString(params.getString("headsign")));
        }

        if (params.has("showCodes") && (!params.getString("showCodes").isEmpty())) {
          urlBuilder.addQueryParameter("show_codes", escapeString(String.valueOf(params.getBoolean("showCodes"))));
        }

        if (params.has("odtLevel") && (!params.getString("odtLevel").isEmpty())) {
          urlBuilder.addQueryParameter("odt_level", escapeString(params.getString("odtLevel")));
        }

        if (params.has("dataFreshness") && (!params.getString("dataFreshness").isEmpty())) {
          urlBuilder.addQueryParameter("data_freshness", escapeString(params.getString("dataFreshness")));
        }

        if (params.has("distance") && (!params.getString("distance").isEmpty())) {
          urlBuilder.addQueryParameter("distance", escapeString(String.valueOf(params.getInt("distance"))));
        }

        if (params.has("since") && (!params.getString("since").isEmpty())) {
          urlBuilder.addQueryParameter("since", escapeString(String.valueOf(params.getString("since"))));
        }

        if (params.has("until") && (!params.getString("until").isEmpty())) {
          urlBuilder.addQueryParameter("until", escapeString(String.valueOf(params.getString("until"))));
        }

        if (params.has("disableGeojson") && (!params.getString("disableGeojson").isEmpty())) {
          urlBuilder.addQueryParameter("disable_geojson", escapeString(String.valueOf(params.getBoolean("disableGeojson"))));
        }

        if (params.has("disableDisruption") && (!params.getString("disableDisruption").isEmpty())) {
          urlBuilder.addQueryParameter("disable_disruption", escapeString(String.valueOf(params.getBoolean("disableDisruption"))));
        }

        if (params.has("tags") && (!params.getString("tags").isEmpty())) {
          urlBuilder.addQueryParameter("tags[]", escapeString(String.valueOf(params.getJSONArray("tags"))));
        }

        if (params.has("originalId") && (!params.getString("originalId").isEmpty())) {
          urlBuilder.addQueryParameter("original_id", escapeString(params.getString("originalId")));
        }

        HttpUrl url = urlBuilder
          .addPathSegments(path)
          .build();
        Request request = requestBuilder.url(url)
          .build();

        client.newCall(request).enqueue(new Callback() {

          @Override
          public void onFailure(@NonNull Call call, @NonNull IOException e) {
            String errorMessage = "Problem during request | " + String.valueOf(e.hashCode()) + ": " + e.getMessage();
            callbackContext.error(errorMessage);
          }

          @Override
          public void onResponse(@NonNull Call call, @NonNull Response response) {
            if (response.isSuccessful()) {
              try {
                JSONObject jsonObject = new JSONObject(Objects.requireNonNull(response.body()).string());
                callbackContext.success(jsonObject);
              } catch (Exception e) {
                String errorMessage = "Problem during response parsing";
                callbackContext.error(errorMessage);
              }
            } else {
              callbackContext.error("Unexpected code " + response.code() + " | message: " + response.message());
            }
          }
        });
      } catch (Exception e) {
        String errorMessage = "Problem during request building | " + e.hashCode() + ": " + e.getMessage();
        callbackContext.error(errorMessage);
      }
    });
  }

  private void coverageRegionNetworks(final JSONObject params, final CallbackContext callbackContext) {
    cordova.getThreadPool().execute(() -> {
      try {
        HttpUrl.Builder urlBuilder = new HttpUrl.Builder()
          .scheme("https")
          .host("api.navitia.io")
          .addPathSegment("v1");
        Request.Builder requestBuilder = new Request.Builder()
          .header("Authorization", token);
        String path = "/coverage/{region}/networks".substring(1);

        if (params.has("region") && (!params.getString("region").isEmpty())) {
          path = path.replaceAll("\\{" + "region" + "\\}", escapeString(params.getString("region")));
        }

        if (params.has("startPage") && (!params.getString("startPage").isEmpty())) {
          urlBuilder.addQueryParameter("start_page", escapeString(String.valueOf(params.getInt("startPage"))));
        }

        if (params.has("count") && (!params.getString("count").isEmpty())) {
          urlBuilder.addQueryParameter("count", escapeString(String.valueOf(params.getInt("count"))));
        }

        if (params.has("depth") && (!params.getString("depth").isEmpty())) {
          urlBuilder.addQueryParameter("depth", escapeString(String.valueOf(params.getInt("depth"))));
        }

        if (params.has("forbiddenId") && (!params.getString("forbiddenId").isEmpty())) {
          urlBuilder.addQueryParameter("forbidden_id[]", escapeString(String.valueOf(params.getJSONArray("forbiddenId"))));
        }

        if (params.has("forbiddenUris") && (!params.getString("forbiddenUris").isEmpty())) {
          urlBuilder.addQueryParameter("forbidden_uris[]", escapeString(String.valueOf(params.getJSONArray("forbiddenUris"))));
        }

        if (params.has("externalCode") && (!params.getString("externalCode").isEmpty())) {
          urlBuilder.addQueryParameter("external_code", escapeString(params.getString("externalCode")));
        }

        if (params.has("headsign") && (!params.getString("headsign").isEmpty())) {
          urlBuilder.addQueryParameter("headsign", escapeString(params.getString("headsign")));
        }

        if (params.has("showCodes") && (!params.getString("showCodes").isEmpty())) {
          urlBuilder.addQueryParameter("show_codes", escapeString(String.valueOf(params.getBoolean("showCodes"))));
        }

        if (params.has("odtLevel") && (!params.getString("odtLevel").isEmpty())) {
          urlBuilder.addQueryParameter("odt_level", escapeString(params.getString("odtLevel")));
        }

        if (params.has("dataFreshness") && (!params.getString("dataFreshness").isEmpty())) {
          urlBuilder.addQueryParameter("data_freshness", escapeString(params.getString("dataFreshness")));
        }

        if (params.has("distance") && (!params.getString("distance").isEmpty())) {
          urlBuilder.addQueryParameter("distance", escapeString(String.valueOf(params.getInt("distance"))));
        }

        if (params.has("since") && (!params.getString("since").isEmpty())) {
          urlBuilder.addQueryParameter("since", escapeString(String.valueOf(params.getString("since"))));
        }

        if (params.has("until") && (!params.getString("until").isEmpty())) {
          urlBuilder.addQueryParameter("until", escapeString(String.valueOf(params.getString("until"))));
        }

        if (params.has("disableGeojson") && (!params.getString("disableGeojson").isEmpty())) {
          urlBuilder.addQueryParameter("disable_geojson", escapeString(String.valueOf(params.getBoolean("disableGeojson"))));
        }

        if (params.has("disableDisruption") && (!params.getString("disableDisruption").isEmpty())) {
          urlBuilder.addQueryParameter("disable_disruption", escapeString(String.valueOf(params.getBoolean("disableDisruption"))));
        }

        if (params.has("filter") && (!params.getString("filter").isEmpty())) {
          urlBuilder.addQueryParameter("filter", escapeString(params.getString("filter")));
        }

        if (params.has("tags") && (!params.getString("tags").isEmpty())) {
          urlBuilder.addQueryParameter("tags[]", escapeString(String.valueOf(params.getJSONArray("tags"))));
        }

        if (params.has("originalId") && (!params.getString("originalId").isEmpty())) {
          urlBuilder.addQueryParameter("original_id", escapeString(params.getString("originalId")));
        }

        HttpUrl url = urlBuilder
          .addPathSegments(path)
          .build();
        Request request = requestBuilder.url(url)
          .build();

        client.newCall(request).enqueue(new Callback() {

          @Override
          public void onFailure(@NonNull Call call, @NonNull IOException e) {
            String errorMessage = "Problem during request | " + String.valueOf(e.hashCode()) + ": " + e.getMessage();
            callbackContext.error(errorMessage);
          }

          @Override
          public void onResponse(@NonNull Call call, @NonNull Response response) {
            if (response.isSuccessful()) {
              try {
                JSONObject jsonObject = new JSONObject(Objects.requireNonNull(response.body()).string());
                callbackContext.success(jsonObject);
              } catch (Exception e) {
                String errorMessage = "Problem during response parsing";
                callbackContext.error(errorMessage);
              }
            } else {
              callbackContext.error("Unexpected code " + response.code() + " | message: " + response.message());
            }
          }
        });
      } catch (Exception e) {
        String errorMessage = "Problem during request building | " + e.hashCode() + ": " + e.getMessage();
        callbackContext.error(errorMessage);
      }
    });
  }

  private void coverageRegionNetworksId(final JSONObject params, final CallbackContext callbackContext) {
    cordova.getThreadPool().execute(() -> {
      try {
        HttpUrl.Builder urlBuilder = new HttpUrl.Builder()
          .scheme("https")
          .host("api.navitia.io")
          .addPathSegment("v1");
        Request.Builder requestBuilder = new Request.Builder()
          .header("Authorization", token);
        String path = "/coverage/{region}/networks/{id}".substring(1);

        if (params.has("region") && (!params.getString("region").isEmpty())) {
          path = path.replaceAll("\\{" + "region" + "\\}", escapeString(params.getString("region")));
        }

        if (params.has("id") && (!params.getString("id").isEmpty())) {
          path = path.replaceAll("\\{" + "id" + "\\}", escapeString(params.getString("id")));
        }

        if (params.has("startPage") && (!params.getString("startPage").isEmpty())) {
          urlBuilder.addQueryParameter("start_page", escapeString(String.valueOf(params.getInt("startPage"))));
        }

        if (params.has("count") && (!params.getString("count").isEmpty())) {
          urlBuilder.addQueryParameter("count", escapeString(String.valueOf(params.getInt("count"))));
        }

        if (params.has("depth") && (!params.getString("depth").isEmpty())) {
          urlBuilder.addQueryParameter("depth", escapeString(String.valueOf(params.getInt("depth"))));
        }

        if (params.has("forbiddenId") && (!params.getString("forbiddenId").isEmpty())) {
          urlBuilder.addQueryParameter("forbidden_id[]", escapeString(String.valueOf(params.getJSONArray("forbiddenId"))));
        }

        if (params.has("forbiddenUris") && (!params.getString("forbiddenUris").isEmpty())) {
          urlBuilder.addQueryParameter("forbidden_uris[]", escapeString(String.valueOf(params.getJSONArray("forbiddenUris"))));
        }

        if (params.has("externalCode") && (!params.getString("externalCode").isEmpty())) {
          urlBuilder.addQueryParameter("external_code", escapeString(params.getString("externalCode")));
        }

        if (params.has("headsign") && (!params.getString("headsign").isEmpty())) {
          urlBuilder.addQueryParameter("headsign", escapeString(params.getString("headsign")));
        }

        if (params.has("showCodes") && (!params.getString("showCodes").isEmpty())) {
          urlBuilder.addQueryParameter("show_codes", escapeString(String.valueOf(params.getBoolean("showCodes"))));
        }

        if (params.has("odtLevel") && (!params.getString("odtLevel").isEmpty())) {
          urlBuilder.addQueryParameter("odt_level", escapeString(params.getString("odtLevel")));
        }

        if (params.has("dataFreshness") && (!params.getString("dataFreshness").isEmpty())) {
          urlBuilder.addQueryParameter("data_freshness", escapeString(params.getString("dataFreshness")));
        }

        if (params.has("distance") && (!params.getString("distance").isEmpty())) {
          urlBuilder.addQueryParameter("distance", escapeString(String.valueOf(params.getInt("distance"))));
        }

        if (params.has("since") && (!params.getString("since").isEmpty())) {
          urlBuilder.addQueryParameter("since", escapeString(String.valueOf(params.getString("since"))));
        }

        if (params.has("until") && (!params.getString("until").isEmpty())) {
          urlBuilder.addQueryParameter("until", escapeString(String.valueOf(params.getString("until"))));
        }

        if (params.has("disableGeojson") && (!params.getString("disableGeojson").isEmpty())) {
          urlBuilder.addQueryParameter("disable_geojson", escapeString(String.valueOf(params.getBoolean("disableGeojson"))));
        }

        if (params.has("disableDisruption") && (!params.getString("disableDisruption").isEmpty())) {
          urlBuilder.addQueryParameter("disable_disruption", escapeString(String.valueOf(params.getBoolean("disableDisruption"))));
        }

        if (params.has("tags") && (!params.getString("tags").isEmpty())) {
          urlBuilder.addQueryParameter("tags[]", escapeString(String.valueOf(params.getJSONArray("tags"))));
        }

        if (params.has("originalId") && (!params.getString("originalId").isEmpty())) {
          urlBuilder.addQueryParameter("original_id", escapeString(params.getString("originalId")));
        }

        HttpUrl url = urlBuilder
          .addPathSegments(path)
          .build();
        Request request = requestBuilder.url(url)
          .build();

        client.newCall(request).enqueue(new Callback() {

          @Override
          public void onFailure(@NonNull Call call, @NonNull IOException e) {
            String errorMessage = "Problem during request | " + String.valueOf(e.hashCode()) + ": " + e.getMessage();
            callbackContext.error(errorMessage);
          }

          @Override
          public void onResponse(@NonNull Call call, @NonNull Response response) {
            if (response.isSuccessful()) {
              try {
                JSONObject jsonObject = new JSONObject(Objects.requireNonNull(response.body()).string());
                callbackContext.success(jsonObject);
              } catch (Exception e) {
                String errorMessage = "Problem during response parsing";
                callbackContext.error(errorMessage);
              }
            } else {
              callbackContext.error("Unexpected code " + response.code() + " | message: " + response.message());
            }
          }
        });
      } catch (Exception e) {
        String errorMessage = "Problem during request building | " + e.hashCode() + ": " + e.getMessage();
        callbackContext.error(errorMessage);
      }
    });
  }

  private void coverageRegionUriNetworks(final JSONObject params, final CallbackContext callbackContext) {
    cordova.getThreadPool().execute(() -> {
      try {
        HttpUrl.Builder urlBuilder = new HttpUrl.Builder()
          .scheme("https")
          .host("api.navitia.io")
          .addPathSegment("v1");
        Request.Builder requestBuilder = new Request.Builder()
          .header("Authorization", token);
        String path = "/coverage/{region}/{uri}/networks".substring(1);

        if (params.has("region") && (!params.getString("region").isEmpty())) {
          path = path.replaceAll("\\{" + "region" + "\\}", escapeString(params.getString("region")));
        }

        if (params.has("uri") && (!params.getString("uri").isEmpty())) {
          path = path.replaceAll("\\{" + "uri" + "\\}", escapeString(params.getString("uri")));
        }

        if (params.has("startPage") && (!params.getString("startPage").isEmpty())) {
          urlBuilder.addQueryParameter("start_page", escapeString(String.valueOf(params.getInt("startPage"))));
        }

        if (params.has("count") && (!params.getString("count").isEmpty())) {
          urlBuilder.addQueryParameter("count", escapeString(String.valueOf(params.getInt("count"))));
        }

        if (params.has("depth") && (!params.getString("depth").isEmpty())) {
          urlBuilder.addQueryParameter("depth", escapeString(String.valueOf(params.getInt("depth"))));
        }

        if (params.has("forbiddenId") && (!params.getString("forbiddenId").isEmpty())) {
          urlBuilder.addQueryParameter("forbidden_id[]", escapeString(String.valueOf(params.getJSONArray("forbiddenId"))));
        }

        if (params.has("forbiddenUris") && (!params.getString("forbiddenUris").isEmpty())) {
          urlBuilder.addQueryParameter("forbidden_uris[]", escapeString(String.valueOf(params.getJSONArray("forbiddenUris"))));
        }

        if (params.has("externalCode") && (!params.getString("externalCode").isEmpty())) {
          urlBuilder.addQueryParameter("external_code", escapeString(params.getString("externalCode")));
        }

        if (params.has("headsign") && (!params.getString("headsign").isEmpty())) {
          urlBuilder.addQueryParameter("headsign", escapeString(params.getString("headsign")));
        }

        if (params.has("showCodes") && (!params.getString("showCodes").isEmpty())) {
          urlBuilder.addQueryParameter("show_codes", escapeString(String.valueOf(params.getBoolean("showCodes"))));
        }

        if (params.has("odtLevel") && (!params.getString("odtLevel").isEmpty())) {
          urlBuilder.addQueryParameter("odt_level", escapeString(params.getString("odtLevel")));
        }

        if (params.has("dataFreshness") && (!params.getString("dataFreshness").isEmpty())) {
          urlBuilder.addQueryParameter("data_freshness", escapeString(params.getString("dataFreshness")));
        }

        if (params.has("distance") && (!params.getString("distance").isEmpty())) {
          urlBuilder.addQueryParameter("distance", escapeString(String.valueOf(params.getInt("distance"))));
        }

        if (params.has("since") && (!params.getString("since").isEmpty())) {
          urlBuilder.addQueryParameter("since", escapeString(String.valueOf(params.getString("since"))));
        }

        if (params.has("until") && (!params.getString("until").isEmpty())) {
          urlBuilder.addQueryParameter("until", escapeString(String.valueOf(params.getString("until"))));
        }

        if (params.has("disableGeojson") && (!params.getString("disableGeojson").isEmpty())) {
          urlBuilder.addQueryParameter("disable_geojson", escapeString(String.valueOf(params.getBoolean("disableGeojson"))));
        }

        if (params.has("disableDisruption") && (!params.getString("disableDisruption").isEmpty())) {
          urlBuilder.addQueryParameter("disable_disruption", escapeString(String.valueOf(params.getBoolean("disableDisruption"))));
        }

        if (params.has("filter") && (!params.getString("filter").isEmpty())) {
          urlBuilder.addQueryParameter("filter", escapeString(params.getString("filter")));
        }

        if (params.has("tags") && (!params.getString("tags").isEmpty())) {
          urlBuilder.addQueryParameter("tags[]", escapeString(String.valueOf(params.getJSONArray("tags"))));
        }

        if (params.has("originalId") && (!params.getString("originalId").isEmpty())) {
          urlBuilder.addQueryParameter("original_id", escapeString(params.getString("originalId")));
        }

        HttpUrl url = urlBuilder
          .addPathSegments(path)
          .build();
        Request request = requestBuilder.url(url)
          .build();

        client.newCall(request).enqueue(new Callback() {

          @Override
          public void onFailure(@NonNull Call call, @NonNull IOException e) {
            String errorMessage = "Problem during request | " + String.valueOf(e.hashCode()) + ": " + e.getMessage();
            callbackContext.error(errorMessage);
          }

          @Override
          public void onResponse(@NonNull Call call, @NonNull Response response) {
            if (response.isSuccessful()) {
              try {
                JSONObject jsonObject = new JSONObject(Objects.requireNonNull(response.body()).string());
                callbackContext.success(jsonObject);
              } catch (Exception e) {
                String errorMessage = "Problem during response parsing";
                callbackContext.error(errorMessage);
              }
            } else {
              callbackContext.error("Unexpected code " + response.code() + " | message: " + response.message());
            }
          }
        });
      } catch (Exception e) {
        String errorMessage = "Problem during request building | " + e.hashCode() + ": " + e.getMessage();
        callbackContext.error(errorMessage);
      }
    });
  }

  private void coverageRegionUriNetworksId(final JSONObject params, final CallbackContext callbackContext) {
    cordova.getThreadPool().execute(() -> {
      try {
        HttpUrl.Builder urlBuilder = new HttpUrl.Builder()
          .scheme("https")
          .host("api.navitia.io")
          .addPathSegment("v1");
        Request.Builder requestBuilder = new Request.Builder()
          .header("Authorization", token);
        String path = "/coverage/{region}/{uri}/networks/{id}".substring(1);

        if (params.has("region") && (!params.getString("region").isEmpty())) {
          path = path.replaceAll("\\{" + "region" + "\\}", escapeString(params.getString("region")));
        }

        if (params.has("uri") && (!params.getString("uri").isEmpty())) {
          path = path.replaceAll("\\{" + "uri" + "\\}", escapeString(params.getString("uri")));
        }

        if (params.has("id") && (!params.getString("id").isEmpty())) {
          path = path.replaceAll("\\{" + "id" + "\\}", escapeString(params.getString("id")));
        }

        if (params.has("startPage") && (!params.getString("startPage").isEmpty())) {
          urlBuilder.addQueryParameter("start_page", escapeString(String.valueOf(params.getInt("startPage"))));
        }

        if (params.has("count") && (!params.getString("count").isEmpty())) {
          urlBuilder.addQueryParameter("count", escapeString(String.valueOf(params.getInt("count"))));
        }

        if (params.has("depth") && (!params.getString("depth").isEmpty())) {
          urlBuilder.addQueryParameter("depth", escapeString(String.valueOf(params.getInt("depth"))));
        }

        if (params.has("forbiddenId") && (!params.getString("forbiddenId").isEmpty())) {
          urlBuilder.addQueryParameter("forbidden_id[]", escapeString(String.valueOf(params.getJSONArray("forbiddenId"))));
        }

        if (params.has("forbiddenUris") && (!params.getString("forbiddenUris").isEmpty())) {
          urlBuilder.addQueryParameter("forbidden_uris[]", escapeString(String.valueOf(params.getJSONArray("forbiddenUris"))));
        }

        if (params.has("externalCode") && (!params.getString("externalCode").isEmpty())) {
          urlBuilder.addQueryParameter("external_code", escapeString(params.getString("externalCode")));
        }

        if (params.has("headsign") && (!params.getString("headsign").isEmpty())) {
          urlBuilder.addQueryParameter("headsign", escapeString(params.getString("headsign")));
        }

        if (params.has("showCodes") && (!params.getString("showCodes").isEmpty())) {
          urlBuilder.addQueryParameter("show_codes", escapeString(String.valueOf(params.getBoolean("showCodes"))));
        }

        if (params.has("odtLevel") && (!params.getString("odtLevel").isEmpty())) {
          urlBuilder.addQueryParameter("odt_level", escapeString(params.getString("odtLevel")));
        }

        if (params.has("dataFreshness") && (!params.getString("dataFreshness").isEmpty())) {
          urlBuilder.addQueryParameter("data_freshness", escapeString(params.getString("dataFreshness")));
        }

        if (params.has("distance") && (!params.getString("distance").isEmpty())) {
          urlBuilder.addQueryParameter("distance", escapeString(String.valueOf(params.getInt("distance"))));
        }

        if (params.has("since") && (!params.getString("since").isEmpty())) {
          urlBuilder.addQueryParameter("since", escapeString(String.valueOf(params.getString("since"))));
        }

        if (params.has("until") && (!params.getString("until").isEmpty())) {
          urlBuilder.addQueryParameter("until", escapeString(String.valueOf(params.getString("until"))));
        }

        if (params.has("disableGeojson") && (!params.getString("disableGeojson").isEmpty())) {
          urlBuilder.addQueryParameter("disable_geojson", escapeString(String.valueOf(params.getBoolean("disableGeojson"))));
        }

        if (params.has("disableDisruption") && (!params.getString("disableDisruption").isEmpty())) {
          urlBuilder.addQueryParameter("disable_disruption", escapeString(String.valueOf(params.getBoolean("disableDisruption"))));
        }

        if (params.has("tags") && (!params.getString("tags").isEmpty())) {
          urlBuilder.addQueryParameter("tags[]", escapeString(String.valueOf(params.getJSONArray("tags"))));
        }

        if (params.has("originalId") && (!params.getString("originalId").isEmpty())) {
          urlBuilder.addQueryParameter("original_id", escapeString(params.getString("originalId")));
        }

        HttpUrl url = urlBuilder
          .addPathSegments(path)
          .build();
        Request request = requestBuilder.url(url)
          .build();

        client.newCall(request).enqueue(new Callback() {

          @Override
          public void onFailure(@NonNull Call call, @NonNull IOException e) {
            String errorMessage = "Problem during request | " + String.valueOf(e.hashCode()) + ": " + e.getMessage();
            callbackContext.error(errorMessage);
          }

          @Override
          public void onResponse(@NonNull Call call, @NonNull Response response) {
            if (response.isSuccessful()) {
              try {
                JSONObject jsonObject = new JSONObject(Objects.requireNonNull(response.body()).string());
                callbackContext.success(jsonObject);
              } catch (Exception e) {
                String errorMessage = "Problem during response parsing";
                callbackContext.error(errorMessage);
              }
            } else {
              callbackContext.error("Unexpected code " + response.code() + " | message: " + response.message());
            }
          }
        });
      } catch (Exception e) {
        String errorMessage = "Problem during request building | " + e.hashCode() + ": " + e.getMessage();
        callbackContext.error(errorMessage);
      }
    });
  }

  private void networks(final JSONObject params, final CallbackContext callbackContext) {
    cordova.getThreadPool().execute(() -> {
      try {
        HttpUrl.Builder urlBuilder = new HttpUrl.Builder()
          .scheme("https")
          .host("api.navitia.io")
          .addPathSegment("v1");
        Request.Builder requestBuilder = new Request.Builder()
          .header("Authorization", token);
        String path = "/networks".substring(1);

        if (params.has("externalCode") && (!params.getString("externalCode").isEmpty())) {
          urlBuilder.addQueryParameter("external_code", escapeString(params.getString("externalCode")));
        }

        if (params.has("startPage") && (!params.getString("startPage").isEmpty())) {
          urlBuilder.addQueryParameter("start_page", escapeString(String.valueOf(params.getInt("startPage"))));
        }

        if (params.has("count") && (!params.getString("count").isEmpty())) {
          urlBuilder.addQueryParameter("count", escapeString(String.valueOf(params.getInt("count"))));
        }

        if (params.has("depth") && (!params.getString("depth").isEmpty())) {
          urlBuilder.addQueryParameter("depth", escapeString(String.valueOf(params.getInt("depth"))));
        }

        if (params.has("forbiddenId") && (!params.getString("forbiddenId").isEmpty())) {
          urlBuilder.addQueryParameter("forbidden_id[]", escapeString(String.valueOf(params.getJSONArray("forbiddenId"))));
        }

        if (params.has("forbiddenUris") && (!params.getString("forbiddenUris").isEmpty())) {
          urlBuilder.addQueryParameter("forbidden_uris[]", escapeString(String.valueOf(params.getJSONArray("forbiddenUris"))));
        }

        if (params.has("headsign") && (!params.getString("headsign").isEmpty())) {
          urlBuilder.addQueryParameter("headsign", escapeString(params.getString("headsign")));
        }

        if (params.has("showCodes") && (!params.getString("showCodes").isEmpty())) {
          urlBuilder.addQueryParameter("show_codes", escapeString(String.valueOf(params.getBoolean("showCodes"))));
        }

        if (params.has("odtLevel") && (!params.getString("odtLevel").isEmpty())) {
          urlBuilder.addQueryParameter("odt_level", escapeString(params.getString("odtLevel")));
        }

        if (params.has("dataFreshness") && (!params.getString("dataFreshness").isEmpty())) {
          urlBuilder.addQueryParameter("data_freshness", escapeString(params.getString("dataFreshness")));
        }

        if (params.has("distance") && (!params.getString("distance").isEmpty())) {
          urlBuilder.addQueryParameter("distance", escapeString(String.valueOf(params.getInt("distance"))));
        }

        if (params.has("since") && (!params.getString("since").isEmpty())) {
          urlBuilder.addQueryParameter("since", escapeString(String.valueOf(params.getString("since"))));
        }

        if (params.has("until") && (!params.getString("until").isEmpty())) {
          urlBuilder.addQueryParameter("until", escapeString(String.valueOf(params.getString("until"))));
        }

        if (params.has("disableGeojson") && (!params.getString("disableGeojson").isEmpty())) {
          urlBuilder.addQueryParameter("disable_geojson", escapeString(String.valueOf(params.getBoolean("disableGeojson"))));
        }

        if (params.has("disableDisruption") && (!params.getString("disableDisruption").isEmpty())) {
          urlBuilder.addQueryParameter("disable_disruption", escapeString(String.valueOf(params.getBoolean("disableDisruption"))));
        }

        if (params.has("filter") && (!params.getString("filter").isEmpty())) {
          urlBuilder.addQueryParameter("filter", escapeString(params.getString("filter")));
        }

        if (params.has("tags") && (!params.getString("tags").isEmpty())) {
          urlBuilder.addQueryParameter("tags[]", escapeString(String.valueOf(params.getJSONArray("tags"))));
        }

        if (params.has("originalId") && (!params.getString("originalId").isEmpty())) {
          urlBuilder.addQueryParameter("original_id", escapeString(params.getString("originalId")));
        }

        HttpUrl url = urlBuilder
          .addPathSegments(path)
          .build();
        Request request = requestBuilder.url(url)
          .build();

        client.newCall(request).enqueue(new Callback() {

          @Override
          public void onFailure(@NonNull Call call, @NonNull IOException e) {
            String errorMessage = "Problem during request | " + String.valueOf(e.hashCode()) + ": " + e.getMessage();
            callbackContext.error(errorMessage);
          }

          @Override
          public void onResponse(@NonNull Call call, @NonNull Response response) {
            if (response.isSuccessful()) {
              try {
                JSONObject jsonObject = new JSONObject(Objects.requireNonNull(response.body()).string());
                callbackContext.success(jsonObject);
              } catch (Exception e) {
                String errorMessage = "Problem during response parsing";
                callbackContext.error(errorMessage);
              }
            } else {
              callbackContext.error("Unexpected code " + response.code() + " | message: " + response.message());
            }
          }
        });
      } catch (Exception e) {
        String errorMessage = "Problem during request building | " + e.hashCode() + ": " + e.getMessage();
        callbackContext.error(errorMessage);
      }
    });
  }

  private void coverageLonLatArrivals(final JSONObject params, final CallbackContext callbackContext) {
    cordova.getThreadPool().execute(() -> {
      try {
        HttpUrl.Builder urlBuilder = new HttpUrl.Builder()
          .scheme("https")
          .host("api.navitia.io")
          .addPathSegment("v1");
        Request.Builder requestBuilder = new Request.Builder()
          .header("Authorization", token);
        String path = "/coverage/{lon};{lat}/arrivals".substring(1);

        if (params.has("lat") && (!params.getString("lat").isEmpty())) {
          path = path.replaceAll("\\{" + "lat" + "\\}", escapeString(String.valueOf(params.getLong("lat"))));
        }

        if (params.has("lon") && (!params.getString("lon").isEmpty())) {
          path = path.replaceAll("\\{" + "lon" + "\\}", escapeString(String.valueOf(params.getLong("lon"))));
        }

        if (params.has("filter") && (!params.getString("filter").isEmpty())) {
          urlBuilder.addQueryParameter("filter", escapeString(params.getString("filter")));
        }

        if (params.has("fromDatetime") && (!params.getString("fromDatetime").isEmpty())) {
          urlBuilder.addQueryParameter("from_datetime", escapeString(String.valueOf(params.getString("fromDatetime"))));
        }

        if (params.has("untilDatetime") && (!params.getString("untilDatetime").isEmpty())) {
          urlBuilder.addQueryParameter("until_datetime", escapeString(String.valueOf(params.getString("untilDatetime"))));
        }

        if (params.has("duration") && (!params.getString("duration").isEmpty())) {
          urlBuilder.addQueryParameter("duration", escapeString(String.valueOf(params.getInt("duration"))));
        }

        if (params.has("depth") && (!params.getString("depth").isEmpty())) {
          urlBuilder.addQueryParameter("depth", escapeString(String.valueOf(params.getInt("depth"))));
        }

        if (params.has("count") && (!params.getString("count").isEmpty())) {
          urlBuilder.addQueryParameter("count", escapeString(String.valueOf(params.getInt("count"))));
        }

        if (params.has("startPage") && (!params.getString("startPage").isEmpty())) {
          urlBuilder.addQueryParameter("start_page", escapeString(String.valueOf(params.getInt("startPage"))));
        }

        if (params.has("maxDateTimes") && (!params.getString("maxDateTimes").isEmpty())) {
          urlBuilder.addQueryParameter("max_date_times", escapeString(String.valueOf(params.getInt("maxDateTimes"))));
        }

        if (params.has("forbiddenId") && (!params.getString("forbiddenId").isEmpty())) {
          urlBuilder.addQueryParameter("forbidden_id[]", escapeString(String.valueOf(params.getJSONArray("forbiddenId"))));
        }

        if (params.has("forbiddenUris") && (!params.getString("forbiddenUris").isEmpty())) {
          urlBuilder.addQueryParameter("forbidden_uris[]", escapeString(String.valueOf(params.getJSONArray("forbiddenUris"))));
        }

        if (params.has("calendar") && (!params.getString("calendar").isEmpty())) {
          urlBuilder.addQueryParameter("calendar", escapeString(params.getString("calendar")));
        }

        if (params.has("distance") && (!params.getString("distance").isEmpty())) {
          urlBuilder.addQueryParameter("distance", escapeString(String.valueOf(params.getInt("distance"))));
        }

        if (params.has("showCodes") && (!params.getString("showCodes").isEmpty())) {
          urlBuilder.addQueryParameter("show_codes", escapeString(String.valueOf(params.getBoolean("showCodes"))));
        }

        if (params.has("dataFreshness") && (!params.getString("dataFreshness").isEmpty())) {
          urlBuilder.addQueryParameter("data_freshness", escapeString(params.getString("dataFreshness")));
        }

        if (params.has("itemsPerSchedule") && (!params.getString("itemsPerSchedule").isEmpty())) {
          urlBuilder.addQueryParameter("items_per_schedule", escapeString(String.valueOf(params.getInt("itemsPerSchedule"))));
        }

        if (params.has("disableGeojson") && (!params.getString("disableGeojson").isEmpty())) {
          urlBuilder.addQueryParameter("disable_geojson", escapeString(String.valueOf(params.getBoolean("disableGeojson"))));
        }

        if (params.has("directionType") && (!params.getString("directionType").isEmpty())) {
          urlBuilder.addQueryParameter("direction_type", escapeString(params.getString("directionType")));
        }

        HttpUrl url = urlBuilder
          .addPathSegments(path)
          .build();
        Request request = requestBuilder.url(url)
          .build();

        client.newCall(request).enqueue(new Callback() {

          @Override
          public void onFailure(@NonNull Call call, @NonNull IOException e) {
            String errorMessage = "Problem during request | " + String.valueOf(e.hashCode()) + ": " + e.getMessage();
            callbackContext.error(errorMessage);
          }

          @Override
          public void onResponse(@NonNull Call call, @NonNull Response response) {
            if (response.isSuccessful()) {
              try {
                JSONObject jsonObject = new JSONObject(Objects.requireNonNull(response.body()).string());
                callbackContext.success(jsonObject);
              } catch (Exception e) {
                String errorMessage = "Problem during response parsing";
                callbackContext.error(errorMessage);
              }
            } else {
              callbackContext.error("Unexpected code " + response.code() + " | message: " + response.message());
            }
          }
        });
      } catch (Exception e) {
        String errorMessage = "Problem during request building | " + e.hashCode() + ": " + e.getMessage();
        callbackContext.error(errorMessage);
      }
    });
  }

  private void coverageLonLatUriArrivals(final JSONObject params, final CallbackContext callbackContext) {
    cordova.getThreadPool().execute(() -> {
      try {
        HttpUrl.Builder urlBuilder = new HttpUrl.Builder()
          .scheme("https")
          .host("api.navitia.io")
          .addPathSegment("v1");
        Request.Builder requestBuilder = new Request.Builder()
          .header("Authorization", token);
        String path = "/coverage/{lon};{lat}/{uri}/arrivals".substring(1);

        if (params.has("lat") && (!params.getString("lat").isEmpty())) {
          path = path.replaceAll("\\{" + "lat" + "\\}", escapeString(String.valueOf(params.getLong("lat"))));
        }

        if (params.has("lon") && (!params.getString("lon").isEmpty())) {
          path = path.replaceAll("\\{" + "lon" + "\\}", escapeString(String.valueOf(params.getLong("lon"))));
        }

        if (params.has("uri") && (!params.getString("uri").isEmpty())) {
          path = path.replaceAll("\\{" + "uri" + "\\}", escapeString(params.getString("uri")));
        }

        if (params.has("filter") && (!params.getString("filter").isEmpty())) {
          urlBuilder.addQueryParameter("filter", escapeString(params.getString("filter")));
        }

        if (params.has("fromDatetime") && (!params.getString("fromDatetime").isEmpty())) {
          urlBuilder.addQueryParameter("from_datetime", escapeString(String.valueOf(params.getString("fromDatetime"))));
        }

        if (params.has("untilDatetime") && (!params.getString("untilDatetime").isEmpty())) {
          urlBuilder.addQueryParameter("until_datetime", escapeString(String.valueOf(params.getString("untilDatetime"))));
        }

        if (params.has("duration") && (!params.getString("duration").isEmpty())) {
          urlBuilder.addQueryParameter("duration", escapeString(String.valueOf(params.getInt("duration"))));
        }

        if (params.has("depth") && (!params.getString("depth").isEmpty())) {
          urlBuilder.addQueryParameter("depth", escapeString(String.valueOf(params.getInt("depth"))));
        }

        if (params.has("count") && (!params.getString("count").isEmpty())) {
          urlBuilder.addQueryParameter("count", escapeString(String.valueOf(params.getInt("count"))));
        }

        if (params.has("startPage") && (!params.getString("startPage").isEmpty())) {
          urlBuilder.addQueryParameter("start_page", escapeString(String.valueOf(params.getInt("startPage"))));
        }

        if (params.has("maxDateTimes") && (!params.getString("maxDateTimes").isEmpty())) {
          urlBuilder.addQueryParameter("max_date_times", escapeString(String.valueOf(params.getInt("maxDateTimes"))));
        }

        if (params.has("forbiddenId") && (!params.getString("forbiddenId").isEmpty())) {
          urlBuilder.addQueryParameter("forbidden_id[]", escapeString(String.valueOf(params.getJSONArray("forbiddenId"))));
        }

        if (params.has("forbiddenUris") && (!params.getString("forbiddenUris").isEmpty())) {
          urlBuilder.addQueryParameter("forbidden_uris[]", escapeString(String.valueOf(params.getJSONArray("forbiddenUris"))));
        }

        if (params.has("calendar") && (!params.getString("calendar").isEmpty())) {
          urlBuilder.addQueryParameter("calendar", escapeString(params.getString("calendar")));
        }

        if (params.has("distance") && (!params.getString("distance").isEmpty())) {
          urlBuilder.addQueryParameter("distance", escapeString(String.valueOf(params.getInt("distance"))));
        }

        if (params.has("showCodes") && (!params.getString("showCodes").isEmpty())) {
          urlBuilder.addQueryParameter("show_codes", escapeString(String.valueOf(params.getBoolean("showCodes"))));
        }

        if (params.has("dataFreshness") && (!params.getString("dataFreshness").isEmpty())) {
          urlBuilder.addQueryParameter("data_freshness", escapeString(params.getString("dataFreshness")));
        }

        if (params.has("itemsPerSchedule") && (!params.getString("itemsPerSchedule").isEmpty())) {
          urlBuilder.addQueryParameter("items_per_schedule", escapeString(String.valueOf(params.getInt("itemsPerSchedule"))));
        }

        if (params.has("disableGeojson") && (!params.getString("disableGeojson").isEmpty())) {
          urlBuilder.addQueryParameter("disable_geojson", escapeString(String.valueOf(params.getBoolean("disableGeojson"))));
        }

        if (params.has("directionType") && (!params.getString("directionType").isEmpty())) {
          urlBuilder.addQueryParameter("direction_type", escapeString(params.getString("directionType")));
        }

        HttpUrl url = urlBuilder
          .addPathSegments(path)
          .build();
        Request request = requestBuilder.url(url)
          .build();

        client.newCall(request).enqueue(new Callback() {

          @Override
          public void onFailure(@NonNull Call call, @NonNull IOException e) {
            String errorMessage = "Problem during request | " + String.valueOf(e.hashCode()) + ": " + e.getMessage();
            callbackContext.error(errorMessage);
          }

          @Override
          public void onResponse(@NonNull Call call, @NonNull Response response) {
            if (response.isSuccessful()) {
              try {
                JSONObject jsonObject = new JSONObject(Objects.requireNonNull(response.body()).string());
                callbackContext.success(jsonObject);
              } catch (Exception e) {
                String errorMessage = "Problem during response parsing";
                callbackContext.error(errorMessage);
              }
            } else {
              callbackContext.error("Unexpected code " + response.code() + " | message: " + response.message());
            }
          }
        });
      } catch (Exception e) {
        String errorMessage = "Problem during request building | " + e.hashCode() + ": " + e.getMessage();
        callbackContext.error(errorMessage);
      }
    });
  }

  private void coverageRegionArrivals(final JSONObject params, final CallbackContext callbackContext) {
    cordova.getThreadPool().execute(() -> {
      try {
        HttpUrl.Builder urlBuilder = new HttpUrl.Builder()
          .scheme("https")
          .host("api.navitia.io")
          .addPathSegment("v1");
        Request.Builder requestBuilder = new Request.Builder()
          .header("Authorization", token);
        String path = "/coverage/{region}/arrivals".substring(1);

        if (params.has("region") && (!params.getString("region").isEmpty())) {
          path = path.replaceAll("\\{" + "region" + "\\}", escapeString(params.getString("region")));
        }

        if (params.has("filter") && (!params.getString("filter").isEmpty())) {
          urlBuilder.addQueryParameter("filter", escapeString(params.getString("filter")));
        }

        if (params.has("fromDatetime") && (!params.getString("fromDatetime").isEmpty())) {
          urlBuilder.addQueryParameter("from_datetime", escapeString(String.valueOf(params.getString("fromDatetime"))));
        }

        if (params.has("untilDatetime") && (!params.getString("untilDatetime").isEmpty())) {
          urlBuilder.addQueryParameter("until_datetime", escapeString(String.valueOf(params.getString("untilDatetime"))));
        }

        if (params.has("duration") && (!params.getString("duration").isEmpty())) {
          urlBuilder.addQueryParameter("duration", escapeString(String.valueOf(params.getInt("duration"))));
        }

        if (params.has("depth") && (!params.getString("depth").isEmpty())) {
          urlBuilder.addQueryParameter("depth", escapeString(String.valueOf(params.getInt("depth"))));
        }

        if (params.has("count") && (!params.getString("count").isEmpty())) {
          urlBuilder.addQueryParameter("count", escapeString(String.valueOf(params.getInt("count"))));
        }

        if (params.has("startPage") && (!params.getString("startPage").isEmpty())) {
          urlBuilder.addQueryParameter("start_page", escapeString(String.valueOf(params.getInt("startPage"))));
        }

        if (params.has("maxDateTimes") && (!params.getString("maxDateTimes").isEmpty())) {
          urlBuilder.addQueryParameter("max_date_times", escapeString(String.valueOf(params.getInt("maxDateTimes"))));
        }

        if (params.has("forbiddenId") && (!params.getString("forbiddenId").isEmpty())) {
          urlBuilder.addQueryParameter("forbidden_id[]", escapeString(String.valueOf(params.getJSONArray("forbiddenId"))));
        }

        if (params.has("forbiddenUris") && (!params.getString("forbiddenUris").isEmpty())) {
          urlBuilder.addQueryParameter("forbidden_uris[]", escapeString(String.valueOf(params.getJSONArray("forbiddenUris"))));
        }

        if (params.has("calendar") && (!params.getString("calendar").isEmpty())) {
          urlBuilder.addQueryParameter("calendar", escapeString(params.getString("calendar")));
        }

        if (params.has("distance") && (!params.getString("distance").isEmpty())) {
          urlBuilder.addQueryParameter("distance", escapeString(String.valueOf(params.getInt("distance"))));
        }

        if (params.has("showCodes") && (!params.getString("showCodes").isEmpty())) {
          urlBuilder.addQueryParameter("show_codes", escapeString(String.valueOf(params.getBoolean("showCodes"))));
        }

        if (params.has("dataFreshness") && (!params.getString("dataFreshness").isEmpty())) {
          urlBuilder.addQueryParameter("data_freshness", escapeString(params.getString("dataFreshness")));
        }

        if (params.has("itemsPerSchedule") && (!params.getString("itemsPerSchedule").isEmpty())) {
          urlBuilder.addQueryParameter("items_per_schedule", escapeString(String.valueOf(params.getInt("itemsPerSchedule"))));
        }

        if (params.has("disableGeojson") && (!params.getString("disableGeojson").isEmpty())) {
          urlBuilder.addQueryParameter("disable_geojson", escapeString(String.valueOf(params.getBoolean("disableGeojson"))));
        }

        if (params.has("directionType") && (!params.getString("directionType").isEmpty())) {
          urlBuilder.addQueryParameter("direction_type", escapeString(params.getString("directionType")));
        }

        HttpUrl url = urlBuilder
          .addPathSegments(path)
          .build();
        Request request = requestBuilder.url(url)
          .build();

        client.newCall(request).enqueue(new Callback() {

          @Override
          public void onFailure(@NonNull Call call, @NonNull IOException e) {
            String errorMessage = "Problem during request | " + String.valueOf(e.hashCode()) + ": " + e.getMessage();
            callbackContext.error(errorMessage);
          }

          @Override
          public void onResponse(@NonNull Call call, @NonNull Response response) {
            if (response.isSuccessful()) {
              try {
                JSONObject jsonObject = new JSONObject(Objects.requireNonNull(response.body()).string());
                callbackContext.success(jsonObject);
              } catch (Exception e) {
                String errorMessage = "Problem during response parsing";
                callbackContext.error(errorMessage);
              }
            } else {
              callbackContext.error("Unexpected code " + response.code() + " | message: " + response.message());
            }
          }
        });
      } catch (Exception e) {
        String errorMessage = "Problem during request building | " + e.hashCode() + ": " + e.getMessage();
        callbackContext.error(errorMessage);
      }
    });
  }

  private void coverageRegionUriArrivals(final JSONObject params, final CallbackContext callbackContext) {
    cordova.getThreadPool().execute(() -> {
      try {
        HttpUrl.Builder urlBuilder = new HttpUrl.Builder()
          .scheme("https")
          .host("api.navitia.io")
          .addPathSegment("v1");
        Request.Builder requestBuilder = new Request.Builder()
          .header("Authorization", token);
        String path = "/coverage/{region}/{uri}/arrivals".substring(1);

        if (params.has("region") && (!params.getString("region").isEmpty())) {
          path = path.replaceAll("\\{" + "region" + "\\}", escapeString(params.getString("region")));
        }

        if (params.has("uri") && (!params.getString("uri").isEmpty())) {
          path = path.replaceAll("\\{" + "uri" + "\\}", escapeString(params.getString("uri")));
        }

        if (params.has("filter") && (!params.getString("filter").isEmpty())) {
          urlBuilder.addQueryParameter("filter", escapeString(params.getString("filter")));
        }

        if (params.has("fromDatetime") && (!params.getString("fromDatetime").isEmpty())) {
          urlBuilder.addQueryParameter("from_datetime", escapeString(String.valueOf(params.getString("fromDatetime"))));
        }

        if (params.has("untilDatetime") && (!params.getString("untilDatetime").isEmpty())) {
          urlBuilder.addQueryParameter("until_datetime", escapeString(String.valueOf(params.getString("untilDatetime"))));
        }

        if (params.has("duration") && (!params.getString("duration").isEmpty())) {
          urlBuilder.addQueryParameter("duration", escapeString(String.valueOf(params.getInt("duration"))));
        }

        if (params.has("depth") && (!params.getString("depth").isEmpty())) {
          urlBuilder.addQueryParameter("depth", escapeString(String.valueOf(params.getInt("depth"))));
        }

        if (params.has("count") && (!params.getString("count").isEmpty())) {
          urlBuilder.addQueryParameter("count", escapeString(String.valueOf(params.getInt("count"))));
        }

        if (params.has("startPage") && (!params.getString("startPage").isEmpty())) {
          urlBuilder.addQueryParameter("start_page", escapeString(String.valueOf(params.getInt("startPage"))));
        }

        if (params.has("maxDateTimes") && (!params.getString("maxDateTimes").isEmpty())) {
          urlBuilder.addQueryParameter("max_date_times", escapeString(String.valueOf(params.getInt("maxDateTimes"))));
        }

        if (params.has("forbiddenId") && (!params.getString("forbiddenId").isEmpty())) {
          urlBuilder.addQueryParameter("forbidden_id[]", escapeString(String.valueOf(params.getJSONArray("forbiddenId"))));
        }

        if (params.has("forbiddenUris") && (!params.getString("forbiddenUris").isEmpty())) {
          urlBuilder.addQueryParameter("forbidden_uris[]", escapeString(String.valueOf(params.getJSONArray("forbiddenUris"))));
        }

        if (params.has("calendar") && (!params.getString("calendar").isEmpty())) {
          urlBuilder.addQueryParameter("calendar", escapeString(params.getString("calendar")));
        }

        if (params.has("distance") && (!params.getString("distance").isEmpty())) {
          urlBuilder.addQueryParameter("distance", escapeString(String.valueOf(params.getInt("distance"))));
        }

        if (params.has("showCodes") && (!params.getString("showCodes").isEmpty())) {
          urlBuilder.addQueryParameter("show_codes", escapeString(String.valueOf(params.getBoolean("showCodes"))));
        }

        if (params.has("dataFreshness") && (!params.getString("dataFreshness").isEmpty())) {
          urlBuilder.addQueryParameter("data_freshness", escapeString(params.getString("dataFreshness")));
        }

        if (params.has("itemsPerSchedule") && (!params.getString("itemsPerSchedule").isEmpty())) {
          urlBuilder.addQueryParameter("items_per_schedule", escapeString(String.valueOf(params.getInt("itemsPerSchedule"))));
        }

        if (params.has("disableGeojson") && (!params.getString("disableGeojson").isEmpty())) {
          urlBuilder.addQueryParameter("disable_geojson", escapeString(String.valueOf(params.getBoolean("disableGeojson"))));
        }

        if (params.has("directionType") && (!params.getString("directionType").isEmpty())) {
          urlBuilder.addQueryParameter("direction_type", escapeString(params.getString("directionType")));
        }

        HttpUrl url = urlBuilder
          .addPathSegments(path)
          .build();
        Request request = requestBuilder.url(url)
          .build();

        client.newCall(request).enqueue(new Callback() {

          @Override
          public void onFailure(@NonNull Call call, @NonNull IOException e) {
            String errorMessage = "Problem during request | " + String.valueOf(e.hashCode()) + ": " + e.getMessage();
            callbackContext.error(errorMessage);
          }

          @Override
          public void onResponse(@NonNull Call call, @NonNull Response response) {
            if (response.isSuccessful()) {
              try {
                JSONObject jsonObject = new JSONObject(Objects.requireNonNull(response.body()).string());
                callbackContext.success(jsonObject);
              } catch (Exception e) {
                String errorMessage = "Problem during response parsing";
                callbackContext.error(errorMessage);
              }
            } else {
              callbackContext.error("Unexpected code " + response.code() + " | message: " + response.message());
            }
          }
        });
      } catch (Exception e) {
        String errorMessage = "Problem during request building | " + e.hashCode() + ": " + e.getMessage();
        callbackContext.error(errorMessage);
      }
    });
  }

  private void coverageLonLatDepartures(final JSONObject params, final CallbackContext callbackContext) {
    cordova.getThreadPool().execute(() -> {
      try {
        HttpUrl.Builder urlBuilder = new HttpUrl.Builder()
          .scheme("https")
          .host("api.navitia.io")
          .addPathSegment("v1");
        Request.Builder requestBuilder = new Request.Builder()
          .header("Authorization", token);
        String path = "/coverage/{lon};{lat}/departures".substring(1);

        if (params.has("lat") && (!params.getString("lat").isEmpty())) {
          path = path.replaceAll("\\{" + "lat" + "\\}", escapeString(String.valueOf(params.getLong("lat"))));
        }

        if (params.has("lon") && (!params.getString("lon").isEmpty())) {
          path = path.replaceAll("\\{" + "lon" + "\\}", escapeString(String.valueOf(params.getLong("lon"))));
        }

        if (params.has("filter") && (!params.getString("filter").isEmpty())) {
          urlBuilder.addQueryParameter("filter", escapeString(params.getString("filter")));
        }

        if (params.has("fromDatetime") && (!params.getString("fromDatetime").isEmpty())) {
          urlBuilder.addQueryParameter("from_datetime", escapeString(String.valueOf(params.getString("fromDatetime"))));
        }

        if (params.has("untilDatetime") && (!params.getString("untilDatetime").isEmpty())) {
          urlBuilder.addQueryParameter("until_datetime", escapeString(String.valueOf(params.getString("untilDatetime"))));
        }

        if (params.has("duration") && (!params.getString("duration").isEmpty())) {
          urlBuilder.addQueryParameter("duration", escapeString(String.valueOf(params.getInt("duration"))));
        }

        if (params.has("depth") && (!params.getString("depth").isEmpty())) {
          urlBuilder.addQueryParameter("depth", escapeString(String.valueOf(params.getInt("depth"))));
        }

        if (params.has("count") && (!params.getString("count").isEmpty())) {
          urlBuilder.addQueryParameter("count", escapeString(String.valueOf(params.getInt("count"))));
        }

        if (params.has("startPage") && (!params.getString("startPage").isEmpty())) {
          urlBuilder.addQueryParameter("start_page", escapeString(String.valueOf(params.getInt("startPage"))));
        }

        if (params.has("maxDateTimes") && (!params.getString("maxDateTimes").isEmpty())) {
          urlBuilder.addQueryParameter("max_date_times", escapeString(String.valueOf(params.getInt("maxDateTimes"))));
        }

        if (params.has("forbiddenId") && (!params.getString("forbiddenId").isEmpty())) {
          urlBuilder.addQueryParameter("forbidden_id[]", escapeString(String.valueOf(params.getJSONArray("forbiddenId"))));
        }

        if (params.has("forbiddenUris") && (!params.getString("forbiddenUris").isEmpty())) {
          urlBuilder.addQueryParameter("forbidden_uris[]", escapeString(String.valueOf(params.getJSONArray("forbiddenUris"))));
        }

        if (params.has("calendar") && (!params.getString("calendar").isEmpty())) {
          urlBuilder.addQueryParameter("calendar", escapeString(params.getString("calendar")));
        }

        if (params.has("distance") && (!params.getString("distance").isEmpty())) {
          urlBuilder.addQueryParameter("distance", escapeString(String.valueOf(params.getInt("distance"))));
        }

        if (params.has("showCodes") && (!params.getString("showCodes").isEmpty())) {
          urlBuilder.addQueryParameter("show_codes", escapeString(String.valueOf(params.getBoolean("showCodes"))));
        }

        if (params.has("dataFreshness") && (!params.getString("dataFreshness").isEmpty())) {
          urlBuilder.addQueryParameter("data_freshness", escapeString(params.getString("dataFreshness")));
        }

        if (params.has("itemsPerSchedule") && (!params.getString("itemsPerSchedule").isEmpty())) {
          urlBuilder.addQueryParameter("items_per_schedule", escapeString(String.valueOf(params.getInt("itemsPerSchedule"))));
        }

        if (params.has("disableGeojson") && (!params.getString("disableGeojson").isEmpty())) {
          urlBuilder.addQueryParameter("disable_geojson", escapeString(String.valueOf(params.getBoolean("disableGeojson"))));
        }

        if (params.has("directionType") && (!params.getString("directionType").isEmpty())) {
          urlBuilder.addQueryParameter("direction_type", escapeString(params.getString("directionType")));
        }

        HttpUrl url = urlBuilder
          .addPathSegments(path)
          .build();
        Request request = requestBuilder.url(url)
          .build();

        client.newCall(request).enqueue(new Callback() {

          @Override
          public void onFailure(@NonNull Call call, @NonNull IOException e) {
            String errorMessage = "Problem during request | " + String.valueOf(e.hashCode()) + ": " + e.getMessage();
            callbackContext.error(errorMessage);
          }

          @Override
          public void onResponse(@NonNull Call call, @NonNull Response response) {
            if (response.isSuccessful()) {
              try {
                JSONObject jsonObject = new JSONObject(Objects.requireNonNull(response.body()).string());
                callbackContext.success(jsonObject);
              } catch (Exception e) {
                String errorMessage = "Problem during response parsing";
                callbackContext.error(errorMessage);
              }
            } else {
              callbackContext.error("Unexpected code " + response.code() + " | message: " + response.message());
            }
          }
        });
      } catch (Exception e) {
        String errorMessage = "Problem during request building | " + e.hashCode() + ": " + e.getMessage();
        callbackContext.error(errorMessage);
      }
    });
  }

  private void coverageLonLatUriDepartures(final JSONObject params, final CallbackContext callbackContext) {
    cordova.getThreadPool().execute(() -> {
      try {
        HttpUrl.Builder urlBuilder = new HttpUrl.Builder()
          .scheme("https")
          .host("api.navitia.io")
          .addPathSegment("v1");
        Request.Builder requestBuilder = new Request.Builder()
          .header("Authorization", token);
        String path = "/coverage/{lon};{lat}/{uri}/departures".substring(1);

        if (params.has("lat") && (!params.getString("lat").isEmpty())) {
          path = path.replaceAll("\\{" + "lat" + "\\}", escapeString(String.valueOf(params.getLong("lat"))));
        }

        if (params.has("lon") && (!params.getString("lon").isEmpty())) {
          path = path.replaceAll("\\{" + "lon" + "\\}", escapeString(String.valueOf(params.getLong("lon"))));
        }

        if (params.has("uri") && (!params.getString("uri").isEmpty())) {
          path = path.replaceAll("\\{" + "uri" + "\\}", escapeString(params.getString("uri")));
        }

        if (params.has("filter") && (!params.getString("filter").isEmpty())) {
          urlBuilder.addQueryParameter("filter", escapeString(params.getString("filter")));
        }

        if (params.has("fromDatetime") && (!params.getString("fromDatetime").isEmpty())) {
          urlBuilder.addQueryParameter("from_datetime", escapeString(String.valueOf(params.getString("fromDatetime"))));
        }

        if (params.has("untilDatetime") && (!params.getString("untilDatetime").isEmpty())) {
          urlBuilder.addQueryParameter("until_datetime", escapeString(String.valueOf(params.getString("untilDatetime"))));
        }

        if (params.has("duration") && (!params.getString("duration").isEmpty())) {
          urlBuilder.addQueryParameter("duration", escapeString(String.valueOf(params.getInt("duration"))));
        }

        if (params.has("depth") && (!params.getString("depth").isEmpty())) {
          urlBuilder.addQueryParameter("depth", escapeString(String.valueOf(params.getInt("depth"))));
        }

        if (params.has("count") && (!params.getString("count").isEmpty())) {
          urlBuilder.addQueryParameter("count", escapeString(String.valueOf(params.getInt("count"))));
        }

        if (params.has("startPage") && (!params.getString("startPage").isEmpty())) {
          urlBuilder.addQueryParameter("start_page", escapeString(String.valueOf(params.getInt("startPage"))));
        }

        if (params.has("maxDateTimes") && (!params.getString("maxDateTimes").isEmpty())) {
          urlBuilder.addQueryParameter("max_date_times", escapeString(String.valueOf(params.getInt("maxDateTimes"))));
        }

        if (params.has("forbiddenId") && (!params.getString("forbiddenId").isEmpty())) {
          urlBuilder.addQueryParameter("forbidden_id[]", escapeString(String.valueOf(params.getJSONArray("forbiddenId"))));
        }

        if (params.has("forbiddenUris") && (!params.getString("forbiddenUris").isEmpty())) {
          urlBuilder.addQueryParameter("forbidden_uris[]", escapeString(String.valueOf(params.getJSONArray("forbiddenUris"))));
        }

        if (params.has("calendar") && (!params.getString("calendar").isEmpty())) {
          urlBuilder.addQueryParameter("calendar", escapeString(params.getString("calendar")));
        }

        if (params.has("distance") && (!params.getString("distance").isEmpty())) {
          urlBuilder.addQueryParameter("distance", escapeString(String.valueOf(params.getInt("distance"))));
        }

        if (params.has("showCodes") && (!params.getString("showCodes").isEmpty())) {
          urlBuilder.addQueryParameter("show_codes", escapeString(String.valueOf(params.getBoolean("showCodes"))));
        }

        if (params.has("dataFreshness") && (!params.getString("dataFreshness").isEmpty())) {
          urlBuilder.addQueryParameter("data_freshness", escapeString(params.getString("dataFreshness")));
        }

        if (params.has("itemsPerSchedule") && (!params.getString("itemsPerSchedule").isEmpty())) {
          urlBuilder.addQueryParameter("items_per_schedule", escapeString(String.valueOf(params.getInt("itemsPerSchedule"))));
        }

        if (params.has("disableGeojson") && (!params.getString("disableGeojson").isEmpty())) {
          urlBuilder.addQueryParameter("disable_geojson", escapeString(String.valueOf(params.getBoolean("disableGeojson"))));
        }

        if (params.has("directionType") && (!params.getString("directionType").isEmpty())) {
          urlBuilder.addQueryParameter("direction_type", escapeString(params.getString("directionType")));
        }

        HttpUrl url = urlBuilder
          .addPathSegments(path)
          .build();
        Request request = requestBuilder.url(url)
          .build();

        client.newCall(request).enqueue(new Callback() {

          @Override
          public void onFailure(@NonNull Call call, @NonNull IOException e) {
            String errorMessage = "Problem during request | " + String.valueOf(e.hashCode()) + ": " + e.getMessage();
            callbackContext.error(errorMessage);
          }

          @Override
          public void onResponse(@NonNull Call call, @NonNull Response response) {
            if (response.isSuccessful()) {
              try {
                JSONObject jsonObject = new JSONObject(Objects.requireNonNull(response.body()).string());
                callbackContext.success(jsonObject);
              } catch (Exception e) {
                String errorMessage = "Problem during response parsing";
                callbackContext.error(errorMessage);
              }
            } else {
              callbackContext.error("Unexpected code " + response.code() + " | message: " + response.message());
            }
          }
        });
      } catch (Exception e) {
        String errorMessage = "Problem during request building | " + e.hashCode() + ": " + e.getMessage();
        callbackContext.error(errorMessage);
      }
    });
  }

  private void coverageRegionDepartures(final JSONObject params, final CallbackContext callbackContext) {
    cordova.getThreadPool().execute(() -> {
      try {
        HttpUrl.Builder urlBuilder = new HttpUrl.Builder()
          .scheme("https")
          .host("api.navitia.io")
          .addPathSegment("v1");
        Request.Builder requestBuilder = new Request.Builder()
          .header("Authorization", token);
        String path = "/coverage/{region}/departures".substring(1);

        if (params.has("region") && (!params.getString("region").isEmpty())) {
          path = path.replaceAll("\\{" + "region" + "\\}", escapeString(params.getString("region")));
        }

        if (params.has("filter") && (!params.getString("filter").isEmpty())) {
          urlBuilder.addQueryParameter("filter", escapeString(params.getString("filter")));
        }

        if (params.has("fromDatetime") && (!params.getString("fromDatetime").isEmpty())) {
          urlBuilder.addQueryParameter("from_datetime", escapeString(String.valueOf(params.getString("fromDatetime"))));
        }

        if (params.has("untilDatetime") && (!params.getString("untilDatetime").isEmpty())) {
          urlBuilder.addQueryParameter("until_datetime", escapeString(String.valueOf(params.getString("untilDatetime"))));
        }

        if (params.has("duration") && (!params.getString("duration").isEmpty())) {
          urlBuilder.addQueryParameter("duration", escapeString(String.valueOf(params.getInt("duration"))));
        }

        if (params.has("depth") && (!params.getString("depth").isEmpty())) {
          urlBuilder.addQueryParameter("depth", escapeString(String.valueOf(params.getInt("depth"))));
        }

        if (params.has("count") && (!params.getString("count").isEmpty())) {
          urlBuilder.addQueryParameter("count", escapeString(String.valueOf(params.getInt("count"))));
        }

        if (params.has("startPage") && (!params.getString("startPage").isEmpty())) {
          urlBuilder.addQueryParameter("start_page", escapeString(String.valueOf(params.getInt("startPage"))));
        }

        if (params.has("maxDateTimes") && (!params.getString("maxDateTimes").isEmpty())) {
          urlBuilder.addQueryParameter("max_date_times", escapeString(String.valueOf(params.getInt("maxDateTimes"))));
        }

        if (params.has("forbiddenId") && (!params.getString("forbiddenId").isEmpty())) {
          urlBuilder.addQueryParameter("forbidden_id[]", escapeString(String.valueOf(params.getJSONArray("forbiddenId"))));
        }

        if (params.has("forbiddenUris") && (!params.getString("forbiddenUris").isEmpty())) {
          urlBuilder.addQueryParameter("forbidden_uris[]", escapeString(String.valueOf(params.getJSONArray("forbiddenUris"))));
        }

        if (params.has("calendar") && (!params.getString("calendar").isEmpty())) {
          urlBuilder.addQueryParameter("calendar", escapeString(params.getString("calendar")));
        }

        if (params.has("distance") && (!params.getString("distance").isEmpty())) {
          urlBuilder.addQueryParameter("distance", escapeString(String.valueOf(params.getInt("distance"))));
        }

        if (params.has("showCodes") && (!params.getString("showCodes").isEmpty())) {
          urlBuilder.addQueryParameter("show_codes", escapeString(String.valueOf(params.getBoolean("showCodes"))));
        }

        if (params.has("dataFreshness") && (!params.getString("dataFreshness").isEmpty())) {
          urlBuilder.addQueryParameter("data_freshness", escapeString(params.getString("dataFreshness")));
        }

        if (params.has("itemsPerSchedule") && (!params.getString("itemsPerSchedule").isEmpty())) {
          urlBuilder.addQueryParameter("items_per_schedule", escapeString(String.valueOf(params.getInt("itemsPerSchedule"))));
        }

        if (params.has("disableGeojson") && (!params.getString("disableGeojson").isEmpty())) {
          urlBuilder.addQueryParameter("disable_geojson", escapeString(String.valueOf(params.getBoolean("disableGeojson"))));
        }

        if (params.has("directionType") && (!params.getString("directionType").isEmpty())) {
          urlBuilder.addQueryParameter("direction_type", escapeString(params.getString("directionType")));
        }

        HttpUrl url = urlBuilder
          .addPathSegments(path)
          .build();
        Request request = requestBuilder.url(url)
          .build();

        client.newCall(request).enqueue(new Callback() {

          @Override
          public void onFailure(@NonNull Call call, @NonNull IOException e) {
            String errorMessage = "Problem during request | " + String.valueOf(e.hashCode()) + ": " + e.getMessage();
            callbackContext.error(errorMessage);
          }

          @Override
          public void onResponse(@NonNull Call call, @NonNull Response response) {
            if (response.isSuccessful()) {
              try {
                JSONObject jsonObject = new JSONObject(Objects.requireNonNull(response.body()).string());
                callbackContext.success(jsonObject);
              } catch (Exception e) {
                String errorMessage = "Problem during response parsing";
                callbackContext.error(errorMessage);
              }
            } else {
              callbackContext.error("Unexpected code " + response.code() + " | message: " + response.message());
            }
          }
        });
      } catch (Exception e) {
        String errorMessage = "Problem during request building | " + e.hashCode() + ": " + e.getMessage();
        callbackContext.error(errorMessage);
      }
    });
  }

  private void coverageRegionUriDepartures(final JSONObject params, final CallbackContext callbackContext) {
    cordova.getThreadPool().execute(() -> {
      try {
        HttpUrl.Builder urlBuilder = new HttpUrl.Builder()
          .scheme("https")
          .host("api.navitia.io")
          .addPathSegment("v1");
        Request.Builder requestBuilder = new Request.Builder()
          .header("Authorization", token);
        String path = "/coverage/{region}/{uri}/departures".substring(1);

        if (params.has("region") && (!params.getString("region").isEmpty())) {
          path = path.replaceAll("\\{" + "region" + "\\}", escapeString(params.getString("region")));
        }

        if (params.has("uri") && (!params.getString("uri").isEmpty())) {
          path = path.replaceAll("\\{" + "uri" + "\\}", escapeString(params.getString("uri")));
        }

        if (params.has("filter") && (!params.getString("filter").isEmpty())) {
          urlBuilder.addQueryParameter("filter", escapeString(params.getString("filter")));
        }

        if (params.has("fromDatetime") && (!params.getString("fromDatetime").isEmpty())) {
          urlBuilder.addQueryParameter("from_datetime", escapeString(String.valueOf(params.getString("fromDatetime"))));
        }

        if (params.has("untilDatetime") && (!params.getString("untilDatetime").isEmpty())) {
          urlBuilder.addQueryParameter("until_datetime", escapeString(String.valueOf(params.getString("untilDatetime"))));
        }

        if (params.has("duration") && (!params.getString("duration").isEmpty())) {
          urlBuilder.addQueryParameter("duration", escapeString(String.valueOf(params.getInt("duration"))));
        }

        if (params.has("depth") && (!params.getString("depth").isEmpty())) {
          urlBuilder.addQueryParameter("depth", escapeString(String.valueOf(params.getInt("depth"))));
        }

        if (params.has("count") && (!params.getString("count").isEmpty())) {
          urlBuilder.addQueryParameter("count", escapeString(String.valueOf(params.getInt("count"))));
        }

        if (params.has("startPage") && (!params.getString("startPage").isEmpty())) {
          urlBuilder.addQueryParameter("start_page", escapeString(String.valueOf(params.getInt("startPage"))));
        }

        if (params.has("maxDateTimes") && (!params.getString("maxDateTimes").isEmpty())) {
          urlBuilder.addQueryParameter("max_date_times", escapeString(String.valueOf(params.getInt("maxDateTimes"))));
        }

        if (params.has("forbiddenId") && (!params.getString("forbiddenId").isEmpty())) {
          urlBuilder.addQueryParameter("forbidden_id[]", escapeString(String.valueOf(params.getJSONArray("forbiddenId"))));
        }

        if (params.has("forbiddenUris") && (!params.getString("forbiddenUris").isEmpty())) {
          urlBuilder.addQueryParameter("forbidden_uris[]", escapeString(String.valueOf(params.getJSONArray("forbiddenUris"))));
        }

        if (params.has("calendar") && (!params.getString("calendar").isEmpty())) {
          urlBuilder.addQueryParameter("calendar", escapeString(params.getString("calendar")));
        }

        if (params.has("distance") && (!params.getString("distance").isEmpty())) {
          urlBuilder.addQueryParameter("distance", escapeString(String.valueOf(params.getInt("distance"))));
        }

        if (params.has("showCodes") && (!params.getString("showCodes").isEmpty())) {
          urlBuilder.addQueryParameter("show_codes", escapeString(String.valueOf(params.getBoolean("showCodes"))));
        }

        if (params.has("dataFreshness") && (!params.getString("dataFreshness").isEmpty())) {
          urlBuilder.addQueryParameter("data_freshness", escapeString(params.getString("dataFreshness")));
        }

        if (params.has("itemsPerSchedule") && (!params.getString("itemsPerSchedule").isEmpty())) {
          urlBuilder.addQueryParameter("items_per_schedule", escapeString(String.valueOf(params.getInt("itemsPerSchedule"))));
        }

        if (params.has("disableGeojson") && (!params.getString("disableGeojson").isEmpty())) {
          urlBuilder.addQueryParameter("disable_geojson", escapeString(String.valueOf(params.getBoolean("disableGeojson"))));
        }

        if (params.has("directionType") && (!params.getString("directionType").isEmpty())) {
          urlBuilder.addQueryParameter("direction_type", escapeString(params.getString("directionType")));
        }

        HttpUrl url = urlBuilder
          .addPathSegments(path)
          .build();
        Request request = requestBuilder.url(url)
          .build();

        client.newCall(request).enqueue(new Callback() {

          @Override
          public void onFailure(@NonNull Call call, @NonNull IOException e) {
            String errorMessage = "Problem during request | " + String.valueOf(e.hashCode()) + ": " + e.getMessage();
            callbackContext.error(errorMessage);
          }

          @Override
          public void onResponse(@NonNull Call call, @NonNull Response response) {
            if (response.isSuccessful()) {
              try {
                JSONObject jsonObject = new JSONObject(Objects.requireNonNull(response.body()).string());
                callbackContext.success(jsonObject);
              } catch (Exception e) {
                String errorMessage = "Problem during response parsing";
                callbackContext.error(errorMessage);
              }
            } else {
              callbackContext.error("Unexpected code " + response.code() + " | message: " + response.message());
            }
          }
        });
      } catch (Exception e) {
        String errorMessage = "Problem during request building | " + e.hashCode() + ": " + e.getMessage();
        callbackContext.error(errorMessage);
      }
    });
  }

  private void coverageLonLatPhysicalModes(final JSONObject params, final CallbackContext callbackContext) {
    cordova.getThreadPool().execute(() -> {
      try {
        HttpUrl.Builder urlBuilder = new HttpUrl.Builder()
          .scheme("https")
          .host("api.navitia.io")
          .addPathSegment("v1");
        Request.Builder requestBuilder = new Request.Builder()
          .header("Authorization", token);
        String path = "/coverage/{lon};{lat}/physical_modes".substring(1);

        if (params.has("lat") && (!params.getString("lat").isEmpty())) {
          path = path.replaceAll("\\{" + "lat" + "\\}", escapeString(String.valueOf(params.getLong("lat"))));
        }

        if (params.has("lon") && (!params.getString("lon").isEmpty())) {
          path = path.replaceAll("\\{" + "lon" + "\\}", escapeString(String.valueOf(params.getLong("lon"))));
        }

        if (params.has("startPage") && (!params.getString("startPage").isEmpty())) {
          urlBuilder.addQueryParameter("start_page", escapeString(String.valueOf(params.getInt("startPage"))));
        }

        if (params.has("count") && (!params.getString("count").isEmpty())) {
          urlBuilder.addQueryParameter("count", escapeString(String.valueOf(params.getInt("count"))));
        }

        if (params.has("depth") && (!params.getString("depth").isEmpty())) {
          urlBuilder.addQueryParameter("depth", escapeString(String.valueOf(params.getInt("depth"))));
        }

        if (params.has("forbiddenId") && (!params.getString("forbiddenId").isEmpty())) {
          urlBuilder.addQueryParameter("forbidden_id[]", escapeString(String.valueOf(params.getJSONArray("forbiddenId"))));
        }

        if (params.has("forbiddenUris") && (!params.getString("forbiddenUris").isEmpty())) {
          urlBuilder.addQueryParameter("forbidden_uris[]", escapeString(String.valueOf(params.getJSONArray("forbiddenUris"))));
        }

        if (params.has("externalCode") && (!params.getString("externalCode").isEmpty())) {
          urlBuilder.addQueryParameter("external_code", escapeString(params.getString("externalCode")));
        }

        if (params.has("headsign") && (!params.getString("headsign").isEmpty())) {
          urlBuilder.addQueryParameter("headsign", escapeString(params.getString("headsign")));
        }

        if (params.has("showCodes") && (!params.getString("showCodes").isEmpty())) {
          urlBuilder.addQueryParameter("show_codes", escapeString(String.valueOf(params.getBoolean("showCodes"))));
        }

        if (params.has("odtLevel") && (!params.getString("odtLevel").isEmpty())) {
          urlBuilder.addQueryParameter("odt_level", escapeString(params.getString("odtLevel")));
        }

        if (params.has("dataFreshness") && (!params.getString("dataFreshness").isEmpty())) {
          urlBuilder.addQueryParameter("data_freshness", escapeString(params.getString("dataFreshness")));
        }

        if (params.has("distance") && (!params.getString("distance").isEmpty())) {
          urlBuilder.addQueryParameter("distance", escapeString(String.valueOf(params.getInt("distance"))));
        }

        if (params.has("since") && (!params.getString("since").isEmpty())) {
          urlBuilder.addQueryParameter("since", escapeString(String.valueOf(params.getString("since"))));
        }

        if (params.has("until") && (!params.getString("until").isEmpty())) {
          urlBuilder.addQueryParameter("until", escapeString(String.valueOf(params.getString("until"))));
        }

        if (params.has("disableGeojson") && (!params.getString("disableGeojson").isEmpty())) {
          urlBuilder.addQueryParameter("disable_geojson", escapeString(String.valueOf(params.getBoolean("disableGeojson"))));
        }

        if (params.has("disableDisruption") && (!params.getString("disableDisruption").isEmpty())) {
          urlBuilder.addQueryParameter("disable_disruption", escapeString(String.valueOf(params.getBoolean("disableDisruption"))));
        }

        if (params.has("filter") && (!params.getString("filter").isEmpty())) {
          urlBuilder.addQueryParameter("filter", escapeString(params.getString("filter")));
        }

        if (params.has("tags") && (!params.getString("tags").isEmpty())) {
          urlBuilder.addQueryParameter("tags[]", escapeString(String.valueOf(params.getJSONArray("tags"))));
        }

        HttpUrl url = urlBuilder
          .addPathSegments(path)
          .build();
        Request request = requestBuilder.url(url)
          .build();

        client.newCall(request).enqueue(new Callback() {

          @Override
          public void onFailure(@NonNull Call call, @NonNull IOException e) {
            String errorMessage = "Problem during request | " + String.valueOf(e.hashCode()) + ": " + e.getMessage();
            callbackContext.error(errorMessage);
          }

          @Override
          public void onResponse(@NonNull Call call, @NonNull Response response) {
            if (response.isSuccessful()) {
              try {
                JSONObject jsonObject = new JSONObject(Objects.requireNonNull(response.body()).string());
                callbackContext.success(jsonObject);
              } catch (Exception e) {
                String errorMessage = "Problem during response parsing";
                callbackContext.error(errorMessage);
              }
            } else {
              callbackContext.error("Unexpected code " + response.code() + " | message: " + response.message());
            }
          }
        });
      } catch (Exception e) {
        String errorMessage = "Problem during request building | " + e.hashCode() + ": " + e.getMessage();
        callbackContext.error(errorMessage);
      }
    });
  }

  private void coverageLonLatPhysicalModesId(final JSONObject params, final CallbackContext callbackContext) {
    cordova.getThreadPool().execute(() -> {
      try {
        HttpUrl.Builder urlBuilder = new HttpUrl.Builder()
          .scheme("https")
          .host("api.navitia.io")
          .addPathSegment("v1");
        Request.Builder requestBuilder = new Request.Builder()
          .header("Authorization", token);
        String path = "/coverage/{lon};{lat}/physical_modes/{id}".substring(1);

        if (params.has("lat") && (!params.getString("lat").isEmpty())) {
          path = path.replaceAll("\\{" + "lat" + "\\}", escapeString(String.valueOf(params.getLong("lat"))));
        }

        if (params.has("lon") && (!params.getString("lon").isEmpty())) {
          path = path.replaceAll("\\{" + "lon" + "\\}", escapeString(String.valueOf(params.getLong("lon"))));
        }

        if (params.has("id") && (!params.getString("id").isEmpty())) {
          path = path.replaceAll("\\{" + "id" + "\\}", escapeString(params.getString("id")));
        }

        if (params.has("startPage") && (!params.getString("startPage").isEmpty())) {
          urlBuilder.addQueryParameter("start_page", escapeString(String.valueOf(params.getInt("startPage"))));
        }

        if (params.has("count") && (!params.getString("count").isEmpty())) {
          urlBuilder.addQueryParameter("count", escapeString(String.valueOf(params.getInt("count"))));
        }

        if (params.has("depth") && (!params.getString("depth").isEmpty())) {
          urlBuilder.addQueryParameter("depth", escapeString(String.valueOf(params.getInt("depth"))));
        }

        if (params.has("forbiddenId") && (!params.getString("forbiddenId").isEmpty())) {
          urlBuilder.addQueryParameter("forbidden_id[]", escapeString(String.valueOf(params.getJSONArray("forbiddenId"))));
        }

        if (params.has("forbiddenUris") && (!params.getString("forbiddenUris").isEmpty())) {
          urlBuilder.addQueryParameter("forbidden_uris[]", escapeString(String.valueOf(params.getJSONArray("forbiddenUris"))));
        }

        if (params.has("externalCode") && (!params.getString("externalCode").isEmpty())) {
          urlBuilder.addQueryParameter("external_code", escapeString(params.getString("externalCode")));
        }

        if (params.has("headsign") && (!params.getString("headsign").isEmpty())) {
          urlBuilder.addQueryParameter("headsign", escapeString(params.getString("headsign")));
        }

        if (params.has("showCodes") && (!params.getString("showCodes").isEmpty())) {
          urlBuilder.addQueryParameter("show_codes", escapeString(String.valueOf(params.getBoolean("showCodes"))));
        }

        if (params.has("odtLevel") && (!params.getString("odtLevel").isEmpty())) {
          urlBuilder.addQueryParameter("odt_level", escapeString(params.getString("odtLevel")));
        }

        if (params.has("dataFreshness") && (!params.getString("dataFreshness").isEmpty())) {
          urlBuilder.addQueryParameter("data_freshness", escapeString(params.getString("dataFreshness")));
        }

        if (params.has("distance") && (!params.getString("distance").isEmpty())) {
          urlBuilder.addQueryParameter("distance", escapeString(String.valueOf(params.getInt("distance"))));
        }

        if (params.has("since") && (!params.getString("since").isEmpty())) {
          urlBuilder.addQueryParameter("since", escapeString(String.valueOf(params.getString("since"))));
        }

        if (params.has("until") && (!params.getString("until").isEmpty())) {
          urlBuilder.addQueryParameter("until", escapeString(String.valueOf(params.getString("until"))));
        }

        if (params.has("disableGeojson") && (!params.getString("disableGeojson").isEmpty())) {
          urlBuilder.addQueryParameter("disable_geojson", escapeString(String.valueOf(params.getBoolean("disableGeojson"))));
        }

        if (params.has("disableDisruption") && (!params.getString("disableDisruption").isEmpty())) {
          urlBuilder.addQueryParameter("disable_disruption", escapeString(String.valueOf(params.getBoolean("disableDisruption"))));
        }

        if (params.has("tags") && (!params.getString("tags").isEmpty())) {
          urlBuilder.addQueryParameter("tags[]", escapeString(String.valueOf(params.getJSONArray("tags"))));
        }

        HttpUrl url = urlBuilder
          .addPathSegments(path)
          .build();
        Request request = requestBuilder.url(url)
          .build();

        client.newCall(request).enqueue(new Callback() {

          @Override
          public void onFailure(@NonNull Call call, @NonNull IOException e) {
            String errorMessage = "Problem during request | " + String.valueOf(e.hashCode()) + ": " + e.getMessage();
            callbackContext.error(errorMessage);
          }

          @Override
          public void onResponse(@NonNull Call call, @NonNull Response response) {
            if (response.isSuccessful()) {
              try {
                JSONObject jsonObject = new JSONObject(Objects.requireNonNull(response.body()).string());
                callbackContext.success(jsonObject);
              } catch (Exception e) {
                String errorMessage = "Problem during response parsing";
                callbackContext.error(errorMessage);
              }
            } else {
              callbackContext.error("Unexpected code " + response.code() + " | message: " + response.message());
            }
          }
        });
      } catch (Exception e) {
        String errorMessage = "Problem during request building | " + e.hashCode() + ": " + e.getMessage();
        callbackContext.error(errorMessage);
      }
    });
  }

  private void coverageLonLatUriPhysicalModes(final JSONObject params, final CallbackContext callbackContext) {
    cordova.getThreadPool().execute(() -> {
      try {
        HttpUrl.Builder urlBuilder = new HttpUrl.Builder()
          .scheme("https")
          .host("api.navitia.io")
          .addPathSegment("v1");
        Request.Builder requestBuilder = new Request.Builder()
          .header("Authorization", token);
        String path = "/coverage/{lon};{lat}/{uri}/physical_modes".substring(1);

        if (params.has("lat") && (!params.getString("lat").isEmpty())) {
          path = path.replaceAll("\\{" + "lat" + "\\}", escapeString(String.valueOf(params.getLong("lat"))));
        }

        if (params.has("lon") && (!params.getString("lon").isEmpty())) {
          path = path.replaceAll("\\{" + "lon" + "\\}", escapeString(String.valueOf(params.getLong("lon"))));
        }

        if (params.has("uri") && (!params.getString("uri").isEmpty())) {
          path = path.replaceAll("\\{" + "uri" + "\\}", escapeString(params.getString("uri")));
        }

        if (params.has("startPage") && (!params.getString("startPage").isEmpty())) {
          urlBuilder.addQueryParameter("start_page", escapeString(String.valueOf(params.getInt("startPage"))));
        }

        if (params.has("count") && (!params.getString("count").isEmpty())) {
          urlBuilder.addQueryParameter("count", escapeString(String.valueOf(params.getInt("count"))));
        }

        if (params.has("depth") && (!params.getString("depth").isEmpty())) {
          urlBuilder.addQueryParameter("depth", escapeString(String.valueOf(params.getInt("depth"))));
        }

        if (params.has("forbiddenId") && (!params.getString("forbiddenId").isEmpty())) {
          urlBuilder.addQueryParameter("forbidden_id[]", escapeString(String.valueOf(params.getJSONArray("forbiddenId"))));
        }

        if (params.has("forbiddenUris") && (!params.getString("forbiddenUris").isEmpty())) {
          urlBuilder.addQueryParameter("forbidden_uris[]", escapeString(String.valueOf(params.getJSONArray("forbiddenUris"))));
        }

        if (params.has("externalCode") && (!params.getString("externalCode").isEmpty())) {
          urlBuilder.addQueryParameter("external_code", escapeString(params.getString("externalCode")));
        }

        if (params.has("headsign") && (!params.getString("headsign").isEmpty())) {
          urlBuilder.addQueryParameter("headsign", escapeString(params.getString("headsign")));
        }

        if (params.has("showCodes") && (!params.getString("showCodes").isEmpty())) {
          urlBuilder.addQueryParameter("show_codes", escapeString(String.valueOf(params.getBoolean("showCodes"))));
        }

        if (params.has("odtLevel") && (!params.getString("odtLevel").isEmpty())) {
          urlBuilder.addQueryParameter("odt_level", escapeString(params.getString("odtLevel")));
        }

        if (params.has("dataFreshness") && (!params.getString("dataFreshness").isEmpty())) {
          urlBuilder.addQueryParameter("data_freshness", escapeString(params.getString("dataFreshness")));
        }

        if (params.has("distance") && (!params.getString("distance").isEmpty())) {
          urlBuilder.addQueryParameter("distance", escapeString(String.valueOf(params.getInt("distance"))));
        }

        if (params.has("since") && (!params.getString("since").isEmpty())) {
          urlBuilder.addQueryParameter("since", escapeString(String.valueOf(params.getString("since"))));
        }

        if (params.has("until") && (!params.getString("until").isEmpty())) {
          urlBuilder.addQueryParameter("until", escapeString(String.valueOf(params.getString("until"))));
        }

        if (params.has("disableGeojson") && (!params.getString("disableGeojson").isEmpty())) {
          urlBuilder.addQueryParameter("disable_geojson", escapeString(String.valueOf(params.getBoolean("disableGeojson"))));
        }

        if (params.has("disableDisruption") && (!params.getString("disableDisruption").isEmpty())) {
          urlBuilder.addQueryParameter("disable_disruption", escapeString(String.valueOf(params.getBoolean("disableDisruption"))));
        }

        if (params.has("filter") && (!params.getString("filter").isEmpty())) {
          urlBuilder.addQueryParameter("filter", escapeString(params.getString("filter")));
        }

        if (params.has("tags") && (!params.getString("tags").isEmpty())) {
          urlBuilder.addQueryParameter("tags[]", escapeString(String.valueOf(params.getJSONArray("tags"))));
        }

        HttpUrl url = urlBuilder
          .addPathSegments(path)
          .build();
        Request request = requestBuilder.url(url)
          .build();

        client.newCall(request).enqueue(new Callback() {

          @Override
          public void onFailure(@NonNull Call call, @NonNull IOException e) {
            String errorMessage = "Problem during request | " + String.valueOf(e.hashCode()) + ": " + e.getMessage();
            callbackContext.error(errorMessage);
          }

          @Override
          public void onResponse(@NonNull Call call, @NonNull Response response) {
            if (response.isSuccessful()) {
              try {
                JSONObject jsonObject = new JSONObject(Objects.requireNonNull(response.body()).string());
                callbackContext.success(jsonObject);
              } catch (Exception e) {
                String errorMessage = "Problem during response parsing";
                callbackContext.error(errorMessage);
              }
            } else {
              callbackContext.error("Unexpected code " + response.code() + " | message: " + response.message());
            }
          }
        });
      } catch (Exception e) {
        String errorMessage = "Problem during request building | " + e.hashCode() + ": " + e.getMessage();
        callbackContext.error(errorMessage);
      }
    });
  }

  private void coverageLonLatUriPhysicalModesId(final JSONObject params, final CallbackContext callbackContext) {
    cordova.getThreadPool().execute(() -> {
      try {
        HttpUrl.Builder urlBuilder = new HttpUrl.Builder()
          .scheme("https")
          .host("api.navitia.io")
          .addPathSegment("v1");
        Request.Builder requestBuilder = new Request.Builder()
          .header("Authorization", token);
        String path = "/coverage/{lon};{lat}/{uri}/physical_modes/{id}".substring(1);

        if (params.has("lat") && (!params.getString("lat").isEmpty())) {
          path = path.replaceAll("\\{" + "lat" + "\\}", escapeString(String.valueOf(params.getLong("lat"))));
        }

        if (params.has("lon") && (!params.getString("lon").isEmpty())) {
          path = path.replaceAll("\\{" + "lon" + "\\}", escapeString(String.valueOf(params.getLong("lon"))));
        }

        if (params.has("uri") && (!params.getString("uri").isEmpty())) {
          path = path.replaceAll("\\{" + "uri" + "\\}", escapeString(params.getString("uri")));
        }

        if (params.has("id") && (!params.getString("id").isEmpty())) {
          path = path.replaceAll("\\{" + "id" + "\\}", escapeString(params.getString("id")));
        }

        if (params.has("startPage") && (!params.getString("startPage").isEmpty())) {
          urlBuilder.addQueryParameter("start_page", escapeString(String.valueOf(params.getInt("startPage"))));
        }

        if (params.has("count") && (!params.getString("count").isEmpty())) {
          urlBuilder.addQueryParameter("count", escapeString(String.valueOf(params.getInt("count"))));
        }

        if (params.has("depth") && (!params.getString("depth").isEmpty())) {
          urlBuilder.addQueryParameter("depth", escapeString(String.valueOf(params.getInt("depth"))));
        }

        if (params.has("forbiddenId") && (!params.getString("forbiddenId").isEmpty())) {
          urlBuilder.addQueryParameter("forbidden_id[]", escapeString(String.valueOf(params.getJSONArray("forbiddenId"))));
        }

        if (params.has("forbiddenUris") && (!params.getString("forbiddenUris").isEmpty())) {
          urlBuilder.addQueryParameter("forbidden_uris[]", escapeString(String.valueOf(params.getJSONArray("forbiddenUris"))));
        }

        if (params.has("externalCode") && (!params.getString("externalCode").isEmpty())) {
          urlBuilder.addQueryParameter("external_code", escapeString(params.getString("externalCode")));
        }

        if (params.has("headsign") && (!params.getString("headsign").isEmpty())) {
          urlBuilder.addQueryParameter("headsign", escapeString(params.getString("headsign")));
        }

        if (params.has("showCodes") && (!params.getString("showCodes").isEmpty())) {
          urlBuilder.addQueryParameter("show_codes", escapeString(String.valueOf(params.getBoolean("showCodes"))));
        }

        if (params.has("odtLevel") && (!params.getString("odtLevel").isEmpty())) {
          urlBuilder.addQueryParameter("odt_level", escapeString(params.getString("odtLevel")));
        }

        if (params.has("dataFreshness") && (!params.getString("dataFreshness").isEmpty())) {
          urlBuilder.addQueryParameter("data_freshness", escapeString(params.getString("dataFreshness")));
        }

        if (params.has("distance") && (!params.getString("distance").isEmpty())) {
          urlBuilder.addQueryParameter("distance", escapeString(String.valueOf(params.getInt("distance"))));
        }

        if (params.has("since") && (!params.getString("since").isEmpty())) {
          urlBuilder.addQueryParameter("since", escapeString(String.valueOf(params.getString("since"))));
        }

        if (params.has("until") && (!params.getString("until").isEmpty())) {
          urlBuilder.addQueryParameter("until", escapeString(String.valueOf(params.getString("until"))));
        }

        if (params.has("disableGeojson") && (!params.getString("disableGeojson").isEmpty())) {
          urlBuilder.addQueryParameter("disable_geojson", escapeString(String.valueOf(params.getBoolean("disableGeojson"))));
        }

        if (params.has("disableDisruption") && (!params.getString("disableDisruption").isEmpty())) {
          urlBuilder.addQueryParameter("disable_disruption", escapeString(String.valueOf(params.getBoolean("disableDisruption"))));
        }

        if (params.has("tags") && (!params.getString("tags").isEmpty())) {
          urlBuilder.addQueryParameter("tags[]", escapeString(String.valueOf(params.getJSONArray("tags"))));
        }

        HttpUrl url = urlBuilder
          .addPathSegments(path)
          .build();
        Request request = requestBuilder.url(url)
          .build();

        client.newCall(request).enqueue(new Callback() {

          @Override
          public void onFailure(@NonNull Call call, @NonNull IOException e) {
            String errorMessage = "Problem during request | " + String.valueOf(e.hashCode()) + ": " + e.getMessage();
            callbackContext.error(errorMessage);
          }

          @Override
          public void onResponse(@NonNull Call call, @NonNull Response response) {
            if (response.isSuccessful()) {
              try {
                JSONObject jsonObject = new JSONObject(Objects.requireNonNull(response.body()).string());
                callbackContext.success(jsonObject);
              } catch (Exception e) {
                String errorMessage = "Problem during response parsing";
                callbackContext.error(errorMessage);
              }
            } else {
              callbackContext.error("Unexpected code " + response.code() + " | message: " + response.message());
            }
          }
        });
      } catch (Exception e) {
        String errorMessage = "Problem during request building | " + e.hashCode() + ": " + e.getMessage();
        callbackContext.error(errorMessage);
      }
    });
  }

  private void coverageRegionPhysicalModes(final JSONObject params, final CallbackContext callbackContext) {
    cordova.getThreadPool().execute(() -> {
      try {
        HttpUrl.Builder urlBuilder = new HttpUrl.Builder()
          .scheme("https")
          .host("api.navitia.io")
          .addPathSegment("v1");
        Request.Builder requestBuilder = new Request.Builder()
          .header("Authorization", token);
        String path = "/coverage/{region}/physical_modes".substring(1);

        if (params.has("region") && (!params.getString("region").isEmpty())) {
          path = path.replaceAll("\\{" + "region" + "\\}", escapeString(params.getString("region")));
        }

        if (params.has("startPage") && (!params.getString("startPage").isEmpty())) {
          urlBuilder.addQueryParameter("start_page", escapeString(String.valueOf(params.getInt("startPage"))));
        }

        if (params.has("count") && (!params.getString("count").isEmpty())) {
          urlBuilder.addQueryParameter("count", escapeString(String.valueOf(params.getInt("count"))));
        }

        if (params.has("depth") && (!params.getString("depth").isEmpty())) {
          urlBuilder.addQueryParameter("depth", escapeString(String.valueOf(params.getInt("depth"))));
        }

        if (params.has("forbiddenId") && (!params.getString("forbiddenId").isEmpty())) {
          urlBuilder.addQueryParameter("forbidden_id[]", escapeString(String.valueOf(params.getJSONArray("forbiddenId"))));
        }

        if (params.has("forbiddenUris") && (!params.getString("forbiddenUris").isEmpty())) {
          urlBuilder.addQueryParameter("forbidden_uris[]", escapeString(String.valueOf(params.getJSONArray("forbiddenUris"))));
        }

        if (params.has("externalCode") && (!params.getString("externalCode").isEmpty())) {
          urlBuilder.addQueryParameter("external_code", escapeString(params.getString("externalCode")));
        }

        if (params.has("headsign") && (!params.getString("headsign").isEmpty())) {
          urlBuilder.addQueryParameter("headsign", escapeString(params.getString("headsign")));
        }

        if (params.has("showCodes") && (!params.getString("showCodes").isEmpty())) {
          urlBuilder.addQueryParameter("show_codes", escapeString(String.valueOf(params.getBoolean("showCodes"))));
        }

        if (params.has("odtLevel") && (!params.getString("odtLevel").isEmpty())) {
          urlBuilder.addQueryParameter("odt_level", escapeString(params.getString("odtLevel")));
        }

        if (params.has("dataFreshness") && (!params.getString("dataFreshness").isEmpty())) {
          urlBuilder.addQueryParameter("data_freshness", escapeString(params.getString("dataFreshness")));
        }

        if (params.has("distance") && (!params.getString("distance").isEmpty())) {
          urlBuilder.addQueryParameter("distance", escapeString(String.valueOf(params.getInt("distance"))));
        }

        if (params.has("since") && (!params.getString("since").isEmpty())) {
          urlBuilder.addQueryParameter("since", escapeString(String.valueOf(params.getString("since"))));
        }

        if (params.has("until") && (!params.getString("until").isEmpty())) {
          urlBuilder.addQueryParameter("until", escapeString(String.valueOf(params.getString("until"))));
        }

        if (params.has("disableGeojson") && (!params.getString("disableGeojson").isEmpty())) {
          urlBuilder.addQueryParameter("disable_geojson", escapeString(String.valueOf(params.getBoolean("disableGeojson"))));
        }

        if (params.has("disableDisruption") && (!params.getString("disableDisruption").isEmpty())) {
          urlBuilder.addQueryParameter("disable_disruption", escapeString(String.valueOf(params.getBoolean("disableDisruption"))));
        }

        if (params.has("filter") && (!params.getString("filter").isEmpty())) {
          urlBuilder.addQueryParameter("filter", escapeString(params.getString("filter")));
        }

        if (params.has("tags") && (!params.getString("tags").isEmpty())) {
          urlBuilder.addQueryParameter("tags[]", escapeString(String.valueOf(params.getJSONArray("tags"))));
        }

        HttpUrl url = urlBuilder
          .addPathSegments(path)
          .build();
        Request request = requestBuilder.url(url)
          .build();

        client.newCall(request).enqueue(new Callback() {

          @Override
          public void onFailure(@NonNull Call call, @NonNull IOException e) {
            String errorMessage = "Problem during request | " + String.valueOf(e.hashCode()) + ": " + e.getMessage();
            callbackContext.error(errorMessage);
          }

          @Override
          public void onResponse(@NonNull Call call, @NonNull Response response) {
            if (response.isSuccessful()) {
              try {
                JSONObject jsonObject = new JSONObject(Objects.requireNonNull(response.body()).string());
                callbackContext.success(jsonObject);
              } catch (Exception e) {
                String errorMessage = "Problem during response parsing";
                callbackContext.error(errorMessage);
              }
            } else {
              callbackContext.error("Unexpected code " + response.code() + " | message: " + response.message());
            }
          }
        });
      } catch (Exception e) {
        String errorMessage = "Problem during request building | " + e.hashCode() + ": " + e.getMessage();
        callbackContext.error(errorMessage);
      }
    });
  }

  private void coverageRegionPhysicalModesId(final JSONObject params, final CallbackContext callbackContext) {
    cordova.getThreadPool().execute(() -> {
      try {
        HttpUrl.Builder urlBuilder = new HttpUrl.Builder()
          .scheme("https")
          .host("api.navitia.io")
          .addPathSegment("v1");
        Request.Builder requestBuilder = new Request.Builder()
          .header("Authorization", token);
        String path = "/coverage/{region}/physical_modes/{id}".substring(1);

        if (params.has("region") && (!params.getString("region").isEmpty())) {
          path = path.replaceAll("\\{" + "region" + "\\}", escapeString(params.getString("region")));
        }

        if (params.has("id") && (!params.getString("id").isEmpty())) {
          path = path.replaceAll("\\{" + "id" + "\\}", escapeString(params.getString("id")));
        }

        if (params.has("startPage") && (!params.getString("startPage").isEmpty())) {
          urlBuilder.addQueryParameter("start_page", escapeString(String.valueOf(params.getInt("startPage"))));
        }

        if (params.has("count") && (!params.getString("count").isEmpty())) {
          urlBuilder.addQueryParameter("count", escapeString(String.valueOf(params.getInt("count"))));
        }

        if (params.has("depth") && (!params.getString("depth").isEmpty())) {
          urlBuilder.addQueryParameter("depth", escapeString(String.valueOf(params.getInt("depth"))));
        }

        if (params.has("forbiddenId") && (!params.getString("forbiddenId").isEmpty())) {
          urlBuilder.addQueryParameter("forbidden_id[]", escapeString(String.valueOf(params.getJSONArray("forbiddenId"))));
        }

        if (params.has("forbiddenUris") && (!params.getString("forbiddenUris").isEmpty())) {
          urlBuilder.addQueryParameter("forbidden_uris[]", escapeString(String.valueOf(params.getJSONArray("forbiddenUris"))));
        }

        if (params.has("externalCode") && (!params.getString("externalCode").isEmpty())) {
          urlBuilder.addQueryParameter("external_code", escapeString(params.getString("externalCode")));
        }

        if (params.has("headsign") && (!params.getString("headsign").isEmpty())) {
          urlBuilder.addQueryParameter("headsign", escapeString(params.getString("headsign")));
        }

        if (params.has("showCodes") && (!params.getString("showCodes").isEmpty())) {
          urlBuilder.addQueryParameter("show_codes", escapeString(String.valueOf(params.getBoolean("showCodes"))));
        }

        if (params.has("odtLevel") && (!params.getString("odtLevel").isEmpty())) {
          urlBuilder.addQueryParameter("odt_level", escapeString(params.getString("odtLevel")));
        }

        if (params.has("dataFreshness") && (!params.getString("dataFreshness").isEmpty())) {
          urlBuilder.addQueryParameter("data_freshness", escapeString(params.getString("dataFreshness")));
        }

        if (params.has("distance") && (!params.getString("distance").isEmpty())) {
          urlBuilder.addQueryParameter("distance", escapeString(String.valueOf(params.getInt("distance"))));
        }

        if (params.has("since") && (!params.getString("since").isEmpty())) {
          urlBuilder.addQueryParameter("since", escapeString(String.valueOf(params.getString("since"))));
        }

        if (params.has("until") && (!params.getString("until").isEmpty())) {
          urlBuilder.addQueryParameter("until", escapeString(String.valueOf(params.getString("until"))));
        }

        if (params.has("disableGeojson") && (!params.getString("disableGeojson").isEmpty())) {
          urlBuilder.addQueryParameter("disable_geojson", escapeString(String.valueOf(params.getBoolean("disableGeojson"))));
        }

        if (params.has("disableDisruption") && (!params.getString("disableDisruption").isEmpty())) {
          urlBuilder.addQueryParameter("disable_disruption", escapeString(String.valueOf(params.getBoolean("disableDisruption"))));
        }

        if (params.has("tags") && (!params.getString("tags").isEmpty())) {
          urlBuilder.addQueryParameter("tags[]", escapeString(String.valueOf(params.getJSONArray("tags"))));
        }

        HttpUrl url = urlBuilder
          .addPathSegments(path)
          .build();
        Request request = requestBuilder.url(url)
          .build();

        client.newCall(request).enqueue(new Callback() {

          @Override
          public void onFailure(@NonNull Call call, @NonNull IOException e) {
            String errorMessage = "Problem during request | " + String.valueOf(e.hashCode()) + ": " + e.getMessage();
            callbackContext.error(errorMessage);
          }

          @Override
          public void onResponse(@NonNull Call call, @NonNull Response response) {
            if (response.isSuccessful()) {
              try {
                JSONObject jsonObject = new JSONObject(Objects.requireNonNull(response.body()).string());
                callbackContext.success(jsonObject);
              } catch (Exception e) {
                String errorMessage = "Problem during response parsing";
                callbackContext.error(errorMessage);
              }
            } else {
              callbackContext.error("Unexpected code " + response.code() + " | message: " + response.message());
            }
          }
        });
      } catch (Exception e) {
        String errorMessage = "Problem during request building | " + e.hashCode() + ": " + e.getMessage();
        callbackContext.error(errorMessage);
      }
    });
  }

  private void coverageRegionUriPhysicalModes(final JSONObject params, final CallbackContext callbackContext) {
    cordova.getThreadPool().execute(() -> {
      try {
        HttpUrl.Builder urlBuilder = new HttpUrl.Builder()
          .scheme("https")
          .host("api.navitia.io")
          .addPathSegment("v1");
        Request.Builder requestBuilder = new Request.Builder()
          .header("Authorization", token);
        String path = "/coverage/{region}/{uri}/physical_modes".substring(1);

        if (params.has("region") && (!params.getString("region").isEmpty())) {
          path = path.replaceAll("\\{" + "region" + "\\}", escapeString(params.getString("region")));
        }

        if (params.has("uri") && (!params.getString("uri").isEmpty())) {
          path = path.replaceAll("\\{" + "uri" + "\\}", escapeString(params.getString("uri")));
        }

        if (params.has("startPage") && (!params.getString("startPage").isEmpty())) {
          urlBuilder.addQueryParameter("start_page", escapeString(String.valueOf(params.getInt("startPage"))));
        }

        if (params.has("count") && (!params.getString("count").isEmpty())) {
          urlBuilder.addQueryParameter("count", escapeString(String.valueOf(params.getInt("count"))));
        }

        if (params.has("depth") && (!params.getString("depth").isEmpty())) {
          urlBuilder.addQueryParameter("depth", escapeString(String.valueOf(params.getInt("depth"))));
        }

        if (params.has("forbiddenId") && (!params.getString("forbiddenId").isEmpty())) {
          urlBuilder.addQueryParameter("forbidden_id[]", escapeString(String.valueOf(params.getJSONArray("forbiddenId"))));
        }

        if (params.has("forbiddenUris") && (!params.getString("forbiddenUris").isEmpty())) {
          urlBuilder.addQueryParameter("forbidden_uris[]", escapeString(String.valueOf(params.getJSONArray("forbiddenUris"))));
        }

        if (params.has("externalCode") && (!params.getString("externalCode").isEmpty())) {
          urlBuilder.addQueryParameter("external_code", escapeString(params.getString("externalCode")));
        }

        if (params.has("headsign") && (!params.getString("headsign").isEmpty())) {
          urlBuilder.addQueryParameter("headsign", escapeString(params.getString("headsign")));
        }

        if (params.has("showCodes") && (!params.getString("showCodes").isEmpty())) {
          urlBuilder.addQueryParameter("show_codes", escapeString(String.valueOf(params.getBoolean("showCodes"))));
        }

        if (params.has("odtLevel") && (!params.getString("odtLevel").isEmpty())) {
          urlBuilder.addQueryParameter("odt_level", escapeString(params.getString("odtLevel")));
        }

        if (params.has("dataFreshness") && (!params.getString("dataFreshness").isEmpty())) {
          urlBuilder.addQueryParameter("data_freshness", escapeString(params.getString("dataFreshness")));
        }

        if (params.has("distance") && (!params.getString("distance").isEmpty())) {
          urlBuilder.addQueryParameter("distance", escapeString(String.valueOf(params.getInt("distance"))));
        }

        if (params.has("since") && (!params.getString("since").isEmpty())) {
          urlBuilder.addQueryParameter("since", escapeString(String.valueOf(params.getString("since"))));
        }

        if (params.has("until") && (!params.getString("until").isEmpty())) {
          urlBuilder.addQueryParameter("until", escapeString(String.valueOf(params.getString("until"))));
        }

        if (params.has("disableGeojson") && (!params.getString("disableGeojson").isEmpty())) {
          urlBuilder.addQueryParameter("disable_geojson", escapeString(String.valueOf(params.getBoolean("disableGeojson"))));
        }

        if (params.has("disableDisruption") && (!params.getString("disableDisruption").isEmpty())) {
          urlBuilder.addQueryParameter("disable_disruption", escapeString(String.valueOf(params.getBoolean("disableDisruption"))));
        }

        if (params.has("filter") && (!params.getString("filter").isEmpty())) {
          urlBuilder.addQueryParameter("filter", escapeString(params.getString("filter")));
        }

        if (params.has("tags") && (!params.getString("tags").isEmpty())) {
          urlBuilder.addQueryParameter("tags[]", escapeString(String.valueOf(params.getJSONArray("tags"))));
        }

        HttpUrl url = urlBuilder
          .addPathSegments(path)
          .build();
        Request request = requestBuilder.url(url)
          .build();

        client.newCall(request).enqueue(new Callback() {

          @Override
          public void onFailure(@NonNull Call call, @NonNull IOException e) {
            String errorMessage = "Problem during request | " + String.valueOf(e.hashCode()) + ": " + e.getMessage();
            callbackContext.error(errorMessage);
          }

          @Override
          public void onResponse(@NonNull Call call, @NonNull Response response) {
            if (response.isSuccessful()) {
              try {
                JSONObject jsonObject = new JSONObject(Objects.requireNonNull(response.body()).string());
                callbackContext.success(jsonObject);
              } catch (Exception e) {
                String errorMessage = "Problem during response parsing";
                callbackContext.error(errorMessage);
              }
            } else {
              callbackContext.error("Unexpected code " + response.code() + " | message: " + response.message());
            }
          }
        });
      } catch (Exception e) {
        String errorMessage = "Problem during request building | " + e.hashCode() + ": " + e.getMessage();
        callbackContext.error(errorMessage);
      }
    });
  }

  private void coverageRegionUriPhysicalModesId(final JSONObject params, final CallbackContext callbackContext) {
    cordova.getThreadPool().execute(() -> {
      try {
        HttpUrl.Builder urlBuilder = new HttpUrl.Builder()
          .scheme("https")
          .host("api.navitia.io")
          .addPathSegment("v1");
        Request.Builder requestBuilder = new Request.Builder()
          .header("Authorization", token);
        String path = "/coverage/{region}/{uri}/physical_modes/{id}".substring(1);

        if (params.has("region") && (!params.getString("region").isEmpty())) {
          path = path.replaceAll("\\{" + "region" + "\\}", escapeString(params.getString("region")));
        }

        if (params.has("uri") && (!params.getString("uri").isEmpty())) {
          path = path.replaceAll("\\{" + "uri" + "\\}", escapeString(params.getString("uri")));
        }

        if (params.has("id") && (!params.getString("id").isEmpty())) {
          path = path.replaceAll("\\{" + "id" + "\\}", escapeString(params.getString("id")));
        }

        if (params.has("startPage") && (!params.getString("startPage").isEmpty())) {
          urlBuilder.addQueryParameter("start_page", escapeString(String.valueOf(params.getInt("startPage"))));
        }

        if (params.has("count") && (!params.getString("count").isEmpty())) {
          urlBuilder.addQueryParameter("count", escapeString(String.valueOf(params.getInt("count"))));
        }

        if (params.has("depth") && (!params.getString("depth").isEmpty())) {
          urlBuilder.addQueryParameter("depth", escapeString(String.valueOf(params.getInt("depth"))));
        }

        if (params.has("forbiddenId") && (!params.getString("forbiddenId").isEmpty())) {
          urlBuilder.addQueryParameter("forbidden_id[]", escapeString(String.valueOf(params.getJSONArray("forbiddenId"))));
        }

        if (params.has("forbiddenUris") && (!params.getString("forbiddenUris").isEmpty())) {
          urlBuilder.addQueryParameter("forbidden_uris[]", escapeString(String.valueOf(params.getJSONArray("forbiddenUris"))));
        }

        if (params.has("externalCode") && (!params.getString("externalCode").isEmpty())) {
          urlBuilder.addQueryParameter("external_code", escapeString(params.getString("externalCode")));
        }

        if (params.has("headsign") && (!params.getString("headsign").isEmpty())) {
          urlBuilder.addQueryParameter("headsign", escapeString(params.getString("headsign")));
        }

        if (params.has("showCodes") && (!params.getString("showCodes").isEmpty())) {
          urlBuilder.addQueryParameter("show_codes", escapeString(String.valueOf(params.getBoolean("showCodes"))));
        }

        if (params.has("odtLevel") && (!params.getString("odtLevel").isEmpty())) {
          urlBuilder.addQueryParameter("odt_level", escapeString(params.getString("odtLevel")));
        }

        if (params.has("dataFreshness") && (!params.getString("dataFreshness").isEmpty())) {
          urlBuilder.addQueryParameter("data_freshness", escapeString(params.getString("dataFreshness")));
        }

        if (params.has("distance") && (!params.getString("distance").isEmpty())) {
          urlBuilder.addQueryParameter("distance", escapeString(String.valueOf(params.getInt("distance"))));
        }

        if (params.has("since") && (!params.getString("since").isEmpty())) {
          urlBuilder.addQueryParameter("since", escapeString(String.valueOf(params.getString("since"))));
        }

        if (params.has("until") && (!params.getString("until").isEmpty())) {
          urlBuilder.addQueryParameter("until", escapeString(String.valueOf(params.getString("until"))));
        }

        if (params.has("disableGeojson") && (!params.getString("disableGeojson").isEmpty())) {
          urlBuilder.addQueryParameter("disable_geojson", escapeString(String.valueOf(params.getBoolean("disableGeojson"))));
        }

        if (params.has("disableDisruption") && (!params.getString("disableDisruption").isEmpty())) {
          urlBuilder.addQueryParameter("disable_disruption", escapeString(String.valueOf(params.getBoolean("disableDisruption"))));
        }

        if (params.has("tags") && (!params.getString("tags").isEmpty())) {
          urlBuilder.addQueryParameter("tags[]", escapeString(String.valueOf(params.getJSONArray("tags"))));
        }

        HttpUrl url = urlBuilder
          .addPathSegments(path)
          .build();
        Request request = requestBuilder.url(url)
          .build();

        client.newCall(request).enqueue(new Callback() {

          @Override
          public void onFailure(@NonNull Call call, @NonNull IOException e) {
            String errorMessage = "Problem during request | " + String.valueOf(e.hashCode()) + ": " + e.getMessage();
            callbackContext.error(errorMessage);
          }

          @Override
          public void onResponse(@NonNull Call call, @NonNull Response response) {
            if (response.isSuccessful()) {
              try {
                JSONObject jsonObject = new JSONObject(Objects.requireNonNull(response.body()).string());
                callbackContext.success(jsonObject);
              } catch (Exception e) {
                String errorMessage = "Problem during response parsing";
                callbackContext.error(errorMessage);
              }
            } else {
              callbackContext.error("Unexpected code " + response.code() + " | message: " + response.message());
            }
          }
        });
      } catch (Exception e) {
        String errorMessage = "Problem during request building | " + e.hashCode() + ": " + e.getMessage();
        callbackContext.error(errorMessage);
      }
    });
  }

  private void coverageLonLatPlacesId(final JSONObject params, final CallbackContext callbackContext) {
    cordova.getThreadPool().execute(() -> {
      try {
        HttpUrl.Builder urlBuilder = new HttpUrl.Builder()
          .scheme("https")
          .host("api.navitia.io")
          .addPathSegment("v1");
        Request.Builder requestBuilder = new Request.Builder()
          .header("Authorization", token);
        String path = "/coverage/{lon};{lat}/places/{id}".substring(1);

        if (params.has("lat") && (!params.getString("lat").isEmpty())) {
          path = path.replaceAll("\\{" + "lat" + "\\}", escapeString(String.valueOf(params.getLong("lat"))));
        }

        if (params.has("lon") && (!params.getString("lon").isEmpty())) {
          path = path.replaceAll("\\{" + "lon" + "\\}", escapeString(String.valueOf(params.getLong("lon"))));
        }

        if (params.has("id") && (!params.getString("id").isEmpty())) {
          path = path.replaceAll("\\{" + "id" + "\\}", escapeString(params.getString("id")));
        }

        if (params.has("bssStands") && (!params.getString("bssStands").isEmpty())) {
          urlBuilder.addQueryParameter("bss_stands", escapeString(String.valueOf(params.getBoolean("bssStands"))));
        }

        if (params.has("addPoiInfos") && (!params.getString("addPoiInfos").isEmpty())) {
          urlBuilder.addQueryParameter("add_poi_infos[]", escapeString(String.valueOf(params.getJSONArray("addPoiInfos"))));
        }

        if (params.has("disableGeojson") && (!params.getString("disableGeojson").isEmpty())) {
          urlBuilder.addQueryParameter("disable_geojson", escapeString(String.valueOf(params.getBoolean("disableGeojson"))));
        }

        if (params.has("disableDisruption") && (!params.getString("disableDisruption").isEmpty())) {
          urlBuilder.addQueryParameter("disable_disruption", escapeString(String.valueOf(params.getBoolean("disableDisruption"))));
        }

        HttpUrl url = urlBuilder
          .addPathSegments(path)
          .build();
        Request request = requestBuilder.url(url)
          .build();

        client.newCall(request).enqueue(new Callback() {

          @Override
          public void onFailure(@NonNull Call call, @NonNull IOException e) {
            String errorMessage = "Problem during request | " + String.valueOf(e.hashCode()) + ": " + e.getMessage();
            callbackContext.error(errorMessage);
          }

          @Override
          public void onResponse(@NonNull Call call, @NonNull Response response) {
            if (response.isSuccessful()) {
              try {
                JSONObject jsonObject = new JSONObject(Objects.requireNonNull(response.body()).string());
                callbackContext.success(jsonObject);
              } catch (Exception e) {
                String errorMessage = "Problem during response parsing";
                callbackContext.error(errorMessage);
              }
            } else {
              callbackContext.error("Unexpected code " + response.code() + " | message: " + response.message());
            }
          }
        });
      } catch (Exception e) {
        String errorMessage = "Problem during request building | " + e.hashCode() + ": " + e.getMessage();
        callbackContext.error(errorMessage);
      }
    });
  }

  private void coverageRegionPlacesId(final JSONObject params, final CallbackContext callbackContext) {
    cordova.getThreadPool().execute(() -> {
      try {
        HttpUrl.Builder urlBuilder = new HttpUrl.Builder()
          .scheme("https")
          .host("api.navitia.io")
          .addPathSegment("v1");
        Request.Builder requestBuilder = new Request.Builder()
          .header("Authorization", token);
        String path = "/coverage/{region}/places/{id}".substring(1);

        if (params.has("region") && (!params.getString("region").isEmpty())) {
          path = path.replaceAll("\\{" + "region" + "\\}", escapeString(params.getString("region")));
        }

        if (params.has("id") && (!params.getString("id").isEmpty())) {
          path = path.replaceAll("\\{" + "id" + "\\}", escapeString(params.getString("id")));
        }

        if (params.has("bssStands") && (!params.getString("bssStands").isEmpty())) {
          urlBuilder.addQueryParameter("bss_stands", escapeString(String.valueOf(params.getBoolean("bssStands"))));
        }

        if (params.has("addPoiInfos") && (!params.getString("addPoiInfos").isEmpty())) {
          urlBuilder.addQueryParameter("add_poi_infos[]", escapeString(String.valueOf(params.getJSONArray("addPoiInfos"))));
        }

        if (params.has("disableGeojson") && (!params.getString("disableGeojson").isEmpty())) {
          urlBuilder.addQueryParameter("disable_geojson", escapeString(String.valueOf(params.getBoolean("disableGeojson"))));
        }

        if (params.has("disableDisruption") && (!params.getString("disableDisruption").isEmpty())) {
          urlBuilder.addQueryParameter("disable_disruption", escapeString(String.valueOf(params.getBoolean("disableDisruption"))));
        }

        HttpUrl url = urlBuilder
          .addPathSegments(path)
          .build();
        Request request = requestBuilder.url(url)
          .build();

        client.newCall(request).enqueue(new Callback() {

          @Override
          public void onFailure(@NonNull Call call, @NonNull IOException e) {
            String errorMessage = "Problem during request | " + String.valueOf(e.hashCode()) + ": " + e.getMessage();
            callbackContext.error(errorMessage);
          }

          @Override
          public void onResponse(@NonNull Call call, @NonNull Response response) {
            if (response.isSuccessful()) {
              try {
                JSONObject jsonObject = new JSONObject(Objects.requireNonNull(response.body()).string());
                callbackContext.success(jsonObject);
              } catch (Exception e) {
                String errorMessage = "Problem during response parsing";
                callbackContext.error(errorMessage);
              }
            } else {
              callbackContext.error("Unexpected code " + response.code() + " | message: " + response.message());
            }
          }
        });
      } catch (Exception e) {
        String errorMessage = "Problem during request building | " + e.hashCode() + ": " + e.getMessage();
        callbackContext.error(errorMessage);
      }
    });
  }

  private void placesId(final JSONObject params, final CallbackContext callbackContext) {
    cordova.getThreadPool().execute(() -> {
      try {
        HttpUrl.Builder urlBuilder = new HttpUrl.Builder()
          .scheme("https")
          .host("api.navitia.io")
          .addPathSegment("v1");
        Request.Builder requestBuilder = new Request.Builder()
          .header("Authorization", token);
        String path = "/places/{id}".substring(1);

        if (params.has("id") && (!params.getString("id").isEmpty())) {
          path = path.replaceAll("\\{" + "id" + "\\}", escapeString(params.getString("id")));
        }

        if (params.has("bssStands") && (!params.getString("bssStands").isEmpty())) {
          urlBuilder.addQueryParameter("bss_stands", escapeString(String.valueOf(params.getBoolean("bssStands"))));
        }

        if (params.has("addPoiInfos") && (!params.getString("addPoiInfos").isEmpty())) {
          urlBuilder.addQueryParameter("add_poi_infos[]", escapeString(String.valueOf(params.getJSONArray("addPoiInfos"))));
        }

        if (params.has("disableGeojson") && (!params.getString("disableGeojson").isEmpty())) {
          urlBuilder.addQueryParameter("disable_geojson", escapeString(String.valueOf(params.getBoolean("disableGeojson"))));
        }

        if (params.has("disableDisruption") && (!params.getString("disableDisruption").isEmpty())) {
          urlBuilder.addQueryParameter("disable_disruption", escapeString(String.valueOf(params.getBoolean("disableDisruption"))));
        }

        HttpUrl url = urlBuilder
          .addPathSegments(path)
          .build();
        Request request = requestBuilder.url(url)
          .build();

        client.newCall(request).enqueue(new Callback() {

          @Override
          public void onFailure(@NonNull Call call, @NonNull IOException e) {
            String errorMessage = "Problem during request | " + String.valueOf(e.hashCode()) + ": " + e.getMessage();
            callbackContext.error(errorMessage);
          }

          @Override
          public void onResponse(@NonNull Call call, @NonNull Response response) {
            if (response.isSuccessful()) {
              try {
                JSONObject jsonObject = new JSONObject(Objects.requireNonNull(response.body()).string());
                callbackContext.success(jsonObject);
              } catch (Exception e) {
                String errorMessage = "Problem during response parsing";
                callbackContext.error(errorMessage);
              }
            } else {
              callbackContext.error("Unexpected code " + response.code() + " | message: " + response.message());
            }
          }
        });
      } catch (Exception e) {
        String errorMessage = "Problem during request building | " + e.hashCode() + ": " + e.getMessage();
        callbackContext.error(errorMessage);
      }
    });
  }

  private void coverageLonLatPlaces(final JSONObject params, final CallbackContext callbackContext) {
    cordova.getThreadPool().execute(() -> {
      try {
        HttpUrl.Builder urlBuilder = new HttpUrl.Builder()
          .scheme("https")
          .host("api.navitia.io")
          .addPathSegment("v1");
        Request.Builder requestBuilder = new Request.Builder()
          .header("Authorization", token);
        String path = "/coverage/{lon};{lat}/places".substring(1);

        if (params.has("q") && (!params.getString("q").isEmpty())) {
          urlBuilder.addQueryParameter("q", escapeString(params.getString("q")));
        }

        if (params.has("lat") && (!params.getString("lat").isEmpty())) {
          path = path.replaceAll("\\{" + "lat" + "\\}", escapeString(String.valueOf(params.getLong("lat"))));
        }

        if (params.has("lon") && (!params.getString("lon").isEmpty())) {
          path = path.replaceAll("\\{" + "lon" + "\\}", escapeString(String.valueOf(params.getLong("lon"))));
        }

        if (params.has("type") && (!params.getString("type").isEmpty())) {
          urlBuilder.addQueryParameter("type[]", escapeString(String.valueOf(params.getJSONArray("type"))));
        }

        if (params.has("count") && (!params.getString("count").isEmpty())) {
          urlBuilder.addQueryParameter("count", escapeString(String.valueOf(params.getInt("count"))));
        }

        if (params.has("adminUri") && (!params.getString("adminUri").isEmpty())) {
          urlBuilder.addQueryParameter("admin_uri[]", escapeString(String.valueOf(params.getJSONArray("adminUri"))));
        }

        if (params.has("depth") && (!params.getString("depth").isEmpty())) {
          urlBuilder.addQueryParameter("depth", escapeString(String.valueOf(params.getInt("depth"))));
        }

        if (params.has("disableGeojson") && (!params.getString("disableGeojson").isEmpty())) {
          urlBuilder.addQueryParameter("disable_geojson", escapeString(String.valueOf(params.getBoolean("disableGeojson"))));
        }

        if (params.has("from") && (!params.getString("from").isEmpty())) {
          urlBuilder.addQueryParameter("from", escapeString(params.getString("from")));
        }

        if (params.has("shape") && (!params.getString("shape").isEmpty())) {
          urlBuilder.addQueryParameter("shape", escapeString(params.getString("shape")));
        }

        if (params.has("shapeScope") && (!params.getString("shapeScope").isEmpty())) {
          urlBuilder.addQueryParameter("shape_scope[]", escapeString(String.valueOf(params.getJSONArray("shapeScope"))));
        }

        HttpUrl url = urlBuilder
          .addPathSegments(path)
          .build();
        Request request = requestBuilder.url(url)
          .build();

        client.newCall(request).enqueue(new Callback() {

          @Override
          public void onFailure(@NonNull Call call, @NonNull IOException e) {
            String errorMessage = "Problem during request | " + String.valueOf(e.hashCode()) + ": " + e.getMessage();
            callbackContext.error(errorMessage);
          }

          @Override
          public void onResponse(@NonNull Call call, @NonNull Response response) {
            if (response.isSuccessful()) {
              try {
                JSONObject jsonObject = new JSONObject(Objects.requireNonNull(response.body()).string());
                callbackContext.success(jsonObject);
              } catch (Exception e) {
                String errorMessage = "Problem during response parsing";
                callbackContext.error(errorMessage);
              }
            } else {
              callbackContext.error("Unexpected code " + response.code() + " | message: " + response.message());
            }
          }
        });
      } catch (Exception e) {
        String errorMessage = "Problem during request building | " + e.hashCode() + ": " + e.getMessage();
        callbackContext.error(errorMessage);
      }
    });
  }

  private void coverageRegionPlaces(final JSONObject params, final CallbackContext callbackContext) {
    cordova.getThreadPool().execute(() -> {
      try {
        HttpUrl.Builder urlBuilder = new HttpUrl.Builder()
          .scheme("https")
          .host("api.navitia.io")
          .addPathSegment("v1");
        Request.Builder requestBuilder = new Request.Builder()
          .header("Authorization", token);
        String path = "/coverage/{region}/places".substring(1);

        if (params.has("q") && (!params.getString("q").isEmpty())) {
          urlBuilder.addQueryParameter("q", escapeString(params.getString("q")));
        }

        if (params.has("region") && (!params.getString("region").isEmpty())) {
          path = path.replaceAll("\\{" + "region" + "\\}", escapeString(params.getString("region")));
        }

        if (params.has("type") && (!params.getString("type").isEmpty())) {
          urlBuilder.addQueryParameter("type[]", escapeString(String.valueOf(params.getJSONArray("type"))));
        }

        if (params.has("count") && (!params.getString("count").isEmpty())) {
          urlBuilder.addQueryParameter("count", escapeString(String.valueOf(params.getInt("count"))));
        }

        if (params.has("adminUri") && (!params.getString("adminUri").isEmpty())) {
          urlBuilder.addQueryParameter("admin_uri[]", escapeString(String.valueOf(params.getJSONArray("adminUri"))));
        }

        if (params.has("depth") && (!params.getString("depth").isEmpty())) {
          urlBuilder.addQueryParameter("depth", escapeString(String.valueOf(params.getInt("depth"))));
        }

        if (params.has("disableGeojson") && (!params.getString("disableGeojson").isEmpty())) {
          urlBuilder.addQueryParameter("disable_geojson", escapeString(String.valueOf(params.getBoolean("disableGeojson"))));
        }

        if (params.has("from") && (!params.getString("from").isEmpty())) {
          urlBuilder.addQueryParameter("from", escapeString(params.getString("from")));
        }

        if (params.has("shape") && (!params.getString("shape").isEmpty())) {
          urlBuilder.addQueryParameter("shape", escapeString(params.getString("shape")));
        }

        if (params.has("shapeScope") && (!params.getString("shapeScope").isEmpty())) {
          urlBuilder.addQueryParameter("shape_scope[]", escapeString(String.valueOf(params.getJSONArray("shapeScope"))));
        }

        HttpUrl url = urlBuilder
          .addPathSegments(path)
          .build();
        Request request = requestBuilder.url(url)
          .build();

        client.newCall(request).enqueue(new Callback() {

          @Override
          public void onFailure(@NonNull Call call, @NonNull IOException e) {
            String errorMessage = "Problem during request | " + String.valueOf(e.hashCode()) + ": " + e.getMessage();
            callbackContext.error(errorMessage);
          }

          @Override
          public void onResponse(@NonNull Call call, @NonNull Response response) {
            if (response.isSuccessful()) {
              try {
                JSONObject jsonObject = new JSONObject(Objects.requireNonNull(response.body()).string());
                callbackContext.success(jsonObject);
              } catch (Exception e) {
                String errorMessage = "Problem during response parsing";
                callbackContext.error(errorMessage);
              }
            } else {
              callbackContext.error("Unexpected code " + response.code() + " | message: " + response.message());
            }
          }
        });
      } catch (Exception e) {
        String errorMessage = "Problem during request building | " + e.hashCode() + ": " + e.getMessage();
        callbackContext.error(errorMessage);
      }
    });
  }

  private void places(final JSONObject params, final CallbackContext callbackContext) {
    cordova.getThreadPool().execute(() -> {
      try {
        HttpUrl.Builder urlBuilder = new HttpUrl.Builder()
          .scheme("https")
          .host("api.navitia.io")
          .addPathSegment("v1");
        Request.Builder requestBuilder = new Request.Builder()
          .header("Authorization", token);
        String path = "/places".substring(1);

        if (params.has("q") && (!params.getString("q").isEmpty())) {
          urlBuilder.addQueryParameter("q", escapeString(params.getString("q")));
        }

        if (params.has("type") && (!params.getString("type").isEmpty())) {
          urlBuilder.addQueryParameter("type[]", escapeString(String.valueOf(params.getJSONArray("type"))));
        }

        if (params.has("count") && (!params.getString("count").isEmpty())) {
          urlBuilder.addQueryParameter("count", escapeString(String.valueOf(params.getInt("count"))));
        }

        if (params.has("adminUri") && (!params.getString("adminUri").isEmpty())) {
          urlBuilder.addQueryParameter("admin_uri[]", escapeString(String.valueOf(params.getJSONArray("adminUri"))));
        }

        if (params.has("depth") && (!params.getString("depth").isEmpty())) {
          urlBuilder.addQueryParameter("depth", escapeString(String.valueOf(params.getInt("depth"))));
        }

        if (params.has("disableGeojson") && (!params.getString("disableGeojson").isEmpty())) {
          urlBuilder.addQueryParameter("disable_geojson", escapeString(String.valueOf(params.getBoolean("disableGeojson"))));
        }

        if (params.has("from") && (!params.getString("from").isEmpty())) {
          urlBuilder.addQueryParameter("from", escapeString(params.getString("from")));
        }

        if (params.has("shape") && (!params.getString("shape").isEmpty())) {
          urlBuilder.addQueryParameter("shape", escapeString(params.getString("shape")));
        }

        if (params.has("shapeScope") && (!params.getString("shapeScope").isEmpty())) {
          urlBuilder.addQueryParameter("shape_scope[]", escapeString(String.valueOf(params.getJSONArray("shapeScope"))));
        }

        HttpUrl url = urlBuilder
          .addPathSegments(path)
          .build();
        Request request = requestBuilder.url(url)
          .build();

        client.newCall(request).enqueue(new Callback() {

          @Override
          public void onFailure(@NonNull Call call, @NonNull IOException e) {
            String errorMessage = "Problem during request | " + String.valueOf(e.hashCode()) + ": " + e.getMessage();
            callbackContext.error(errorMessage);
          }

          @Override
          public void onResponse(@NonNull Call call, @NonNull Response response) {
            if (response.isSuccessful()) {
              try {
                JSONObject jsonObject = new JSONObject(Objects.requireNonNull(response.body()).string());
                callbackContext.success(jsonObject);
              } catch (Exception e) {
                String errorMessage = "Problem during response parsing";
                callbackContext.error(errorMessage);
              }
            } else {
              callbackContext.error("Unexpected code " + response.code() + " | message: " + response.message());
            }
          }
        });
      } catch (Exception e) {
        String errorMessage = "Problem during request building | " + e.hashCode() + ": " + e.getMessage();
        callbackContext.error(errorMessage);
      }
    });
  }

  private void coordLonLatPlacesNearby(final JSONObject params, final CallbackContext callbackContext) {
    cordova.getThreadPool().execute(() -> {
      try {
        HttpUrl.Builder urlBuilder = new HttpUrl.Builder()
          .scheme("https")
          .host("api.navitia.io")
          .addPathSegment("v1");
        Request.Builder requestBuilder = new Request.Builder()
          .header("Authorization", token);
        String path = "/coord/{lon};{lat}/places_nearby".substring(1);

        if (params.has("lat") && (!params.getString("lat").isEmpty())) {
          path = path.replaceAll("\\{" + "lat" + "\\}", escapeString(String.valueOf(params.getLong("lat"))));
        }

        if (params.has("lon") && (!params.getString("lon").isEmpty())) {
          path = path.replaceAll("\\{" + "lon" + "\\}", escapeString(String.valueOf(params.getLong("lon"))));
        }

        if (params.has("type") && (!params.getString("type").isEmpty())) {
          urlBuilder.addQueryParameter("type[]", escapeString(String.valueOf(params.getJSONArray("type"))));
        }

        if (params.has("filter") && (!params.getString("filter").isEmpty())) {
          urlBuilder.addQueryParameter("filter", escapeString(params.getString("filter")));
        }

        if (params.has("distance") && (!params.getString("distance").isEmpty())) {
          urlBuilder.addQueryParameter("distance", escapeString(String.valueOf(params.getInt("distance"))));
        }

        if (params.has("count") && (!params.getString("count").isEmpty())) {
          urlBuilder.addQueryParameter("count", escapeString(String.valueOf(params.getInt("count"))));
        }

        if (params.has("depth") && (!params.getString("depth").isEmpty())) {
          urlBuilder.addQueryParameter("depth", escapeString(String.valueOf(params.getInt("depth"))));
        }

        if (params.has("startPage") && (!params.getString("startPage").isEmpty())) {
          urlBuilder.addQueryParameter("start_page", escapeString(String.valueOf(params.getInt("startPage"))));
        }

        if (params.has("bssStands") && (!params.getString("bssStands").isEmpty())) {
          urlBuilder.addQueryParameter("bss_stands", escapeString(String.valueOf(params.getBoolean("bssStands"))));
        }

        if (params.has("addPoiInfos") && (!params.getString("addPoiInfos").isEmpty())) {
          urlBuilder.addQueryParameter("add_poi_infos[]", escapeString(String.valueOf(params.getJSONArray("addPoiInfos"))));
        }

        if (params.has("disableGeojson") && (!params.getString("disableGeojson").isEmpty())) {
          urlBuilder.addQueryParameter("disable_geojson", escapeString(String.valueOf(params.getBoolean("disableGeojson"))));
        }

        if (params.has("disableDisruption") && (!params.getString("disableDisruption").isEmpty())) {
          urlBuilder.addQueryParameter("disable_disruption", escapeString(String.valueOf(params.getBoolean("disableDisruption"))));
        }

        HttpUrl url = urlBuilder
          .addPathSegments(path)
          .build();
        Request request = requestBuilder.url(url)
          .build();

        client.newCall(request).enqueue(new Callback() {

          @Override
          public void onFailure(@NonNull Call call, @NonNull IOException e) {
            String errorMessage = "Problem during request | " + String.valueOf(e.hashCode()) + ": " + e.getMessage();
            callbackContext.error(errorMessage);
          }

          @Override
          public void onResponse(@NonNull Call call, @NonNull Response response) {
            if (response.isSuccessful()) {
              try {
                JSONObject jsonObject = new JSONObject(Objects.requireNonNull(response.body()).string());
                callbackContext.success(jsonObject);
              } catch (Exception e) {
                String errorMessage = "Problem during response parsing";
                callbackContext.error(errorMessage);
              }
            } else {
              callbackContext.error("Unexpected code " + response.code() + " | message: " + response.message());
            }
          }
        });
      } catch (Exception e) {
        String errorMessage = "Problem during request building | " + e.hashCode() + ": " + e.getMessage();
        callbackContext.error(errorMessage);
      }
    });
  }

  private void coordsLonLatPlacesNearby(final JSONObject params, final CallbackContext callbackContext) {
    cordova.getThreadPool().execute(() -> {
      try {
        HttpUrl.Builder urlBuilder = new HttpUrl.Builder()
          .scheme("https")
          .host("api.navitia.io")
          .addPathSegment("v1");
        Request.Builder requestBuilder = new Request.Builder()
          .header("Authorization", token);
        String path = "/coords/{lon};{lat}/places_nearby".substring(1);

        if (params.has("lat") && (!params.getString("lat").isEmpty())) {
          path = path.replaceAll("\\{" + "lat" + "\\}", escapeString(String.valueOf(params.getLong("lat"))));
        }

        if (params.has("lon") && (!params.getString("lon").isEmpty())) {
          path = path.replaceAll("\\{" + "lon" + "\\}", escapeString(String.valueOf(params.getLong("lon"))));
        }

        if (params.has("type") && (!params.getString("type").isEmpty())) {
          urlBuilder.addQueryParameter("type[]", escapeString(String.valueOf(params.getJSONArray("type"))));
        }

        if (params.has("filter") && (!params.getString("filter").isEmpty())) {
          urlBuilder.addQueryParameter("filter", escapeString(params.getString("filter")));
        }

        if (params.has("distance") && (!params.getString("distance").isEmpty())) {
          urlBuilder.addQueryParameter("distance", escapeString(String.valueOf(params.getInt("distance"))));
        }

        if (params.has("count") && (!params.getString("count").isEmpty())) {
          urlBuilder.addQueryParameter("count", escapeString(String.valueOf(params.getInt("count"))));
        }

        if (params.has("depth") && (!params.getString("depth").isEmpty())) {
          urlBuilder.addQueryParameter("depth", escapeString(String.valueOf(params.getInt("depth"))));
        }

        if (params.has("startPage") && (!params.getString("startPage").isEmpty())) {
          urlBuilder.addQueryParameter("start_page", escapeString(String.valueOf(params.getInt("startPage"))));
        }

        if (params.has("bssStands") && (!params.getString("bssStands").isEmpty())) {
          urlBuilder.addQueryParameter("bss_stands", escapeString(String.valueOf(params.getBoolean("bssStands"))));
        }

        if (params.has("addPoiInfos") && (!params.getString("addPoiInfos").isEmpty())) {
          urlBuilder.addQueryParameter("add_poi_infos[]", escapeString(String.valueOf(params.getJSONArray("addPoiInfos"))));
        }

        if (params.has("disableGeojson") && (!params.getString("disableGeojson").isEmpty())) {
          urlBuilder.addQueryParameter("disable_geojson", escapeString(String.valueOf(params.getBoolean("disableGeojson"))));
        }

        if (params.has("disableDisruption") && (!params.getString("disableDisruption").isEmpty())) {
          urlBuilder.addQueryParameter("disable_disruption", escapeString(String.valueOf(params.getBoolean("disableDisruption"))));
        }

        HttpUrl url = urlBuilder
          .addPathSegments(path)
          .build();
        Request request = requestBuilder.url(url)
          .build();

        client.newCall(request).enqueue(new Callback() {

          @Override
          public void onFailure(@NonNull Call call, @NonNull IOException e) {
            String errorMessage = "Problem during request | " + String.valueOf(e.hashCode()) + ": " + e.getMessage();
            callbackContext.error(errorMessage);
          }

          @Override
          public void onResponse(@NonNull Call call, @NonNull Response response) {
            if (response.isSuccessful()) {
              try {
                JSONObject jsonObject = new JSONObject(Objects.requireNonNull(response.body()).string());
                callbackContext.success(jsonObject);
              } catch (Exception e) {
                String errorMessage = "Problem during response parsing";
                callbackContext.error(errorMessage);
              }
            } else {
              callbackContext.error("Unexpected code " + response.code() + " | message: " + response.message());
            }
          }
        });
      } catch (Exception e) {
        String errorMessage = "Problem during request building | " + e.hashCode() + ": " + e.getMessage();
        callbackContext.error(errorMessage);
      }
    });
  }

  private void coverageLonLatPlacesNearby(final JSONObject params, final CallbackContext callbackContext) {
    cordova.getThreadPool().execute(() -> {
      try {
        HttpUrl.Builder urlBuilder = new HttpUrl.Builder()
          .scheme("https")
          .host("api.navitia.io")
          .addPathSegment("v1");
        Request.Builder requestBuilder = new Request.Builder()
          .header("Authorization", token);
        String path = "/coverage/{lon};{lat}/places_nearby".substring(1);

        if (params.has("lat") && (!params.getString("lat").isEmpty())) {
          path = path.replaceAll("\\{" + "lat" + "\\}", escapeString(String.valueOf(params.getLong("lat"))));
        }

        if (params.has("lon") && (!params.getString("lon").isEmpty())) {
          path = path.replaceAll("\\{" + "lon" + "\\}", escapeString(String.valueOf(params.getLong("lon"))));
        }

        if (params.has("type") && (!params.getString("type").isEmpty())) {
          urlBuilder.addQueryParameter("type[]", escapeString(String.valueOf(params.getJSONArray("type"))));
        }

        if (params.has("filter") && (!params.getString("filter").isEmpty())) {
          urlBuilder.addQueryParameter("filter", escapeString(params.getString("filter")));
        }

        if (params.has("distance") && (!params.getString("distance").isEmpty())) {
          urlBuilder.addQueryParameter("distance", escapeString(String.valueOf(params.getInt("distance"))));
        }

        if (params.has("count") && (!params.getString("count").isEmpty())) {
          urlBuilder.addQueryParameter("count", escapeString(String.valueOf(params.getInt("count"))));
        }

        if (params.has("depth") && (!params.getString("depth").isEmpty())) {
          urlBuilder.addQueryParameter("depth", escapeString(String.valueOf(params.getInt("depth"))));
        }

        if (params.has("startPage") && (!params.getString("startPage").isEmpty())) {
          urlBuilder.addQueryParameter("start_page", escapeString(String.valueOf(params.getInt("startPage"))));
        }

        if (params.has("bssStands") && (!params.getString("bssStands").isEmpty())) {
          urlBuilder.addQueryParameter("bss_stands", escapeString(String.valueOf(params.getBoolean("bssStands"))));
        }

        if (params.has("addPoiInfos") && (!params.getString("addPoiInfos").isEmpty())) {
          urlBuilder.addQueryParameter("add_poi_infos[]", escapeString(String.valueOf(params.getJSONArray("addPoiInfos"))));
        }

        if (params.has("disableGeojson") && (!params.getString("disableGeojson").isEmpty())) {
          urlBuilder.addQueryParameter("disable_geojson", escapeString(String.valueOf(params.getBoolean("disableGeojson"))));
        }

        if (params.has("disableDisruption") && (!params.getString("disableDisruption").isEmpty())) {
          urlBuilder.addQueryParameter("disable_disruption", escapeString(String.valueOf(params.getBoolean("disableDisruption"))));
        }

        HttpUrl url = urlBuilder
          .addPathSegments(path)
          .build();
        Request request = requestBuilder.url(url)
          .build();

        client.newCall(request).enqueue(new Callback() {

          @Override
          public void onFailure(@NonNull Call call, @NonNull IOException e) {
            String errorMessage = "Problem during request | " + String.valueOf(e.hashCode()) + ": " + e.getMessage();
            callbackContext.error(errorMessage);
          }

          @Override
          public void onResponse(@NonNull Call call, @NonNull Response response) {
            if (response.isSuccessful()) {
              try {
                JSONObject jsonObject = new JSONObject(Objects.requireNonNull(response.body()).string());
                callbackContext.success(jsonObject);
              } catch (Exception e) {
                String errorMessage = "Problem during response parsing";
                callbackContext.error(errorMessage);
              }
            } else {
              callbackContext.error("Unexpected code " + response.code() + " | message: " + response.message());
            }
          }
        });
      } catch (Exception e) {
        String errorMessage = "Problem during request building | " + e.hashCode() + ": " + e.getMessage();
        callbackContext.error(errorMessage);
      }
    });
  }

  private void coverageLonLatUriPlacesNearby(final JSONObject params, final CallbackContext callbackContext) {
    cordova.getThreadPool().execute(() -> {
      try {
        HttpUrl.Builder urlBuilder = new HttpUrl.Builder()
          .scheme("https")
          .host("api.navitia.io")
          .addPathSegment("v1");
        Request.Builder requestBuilder = new Request.Builder()
          .header("Authorization", token);
        String path = "/coverage/{lon};{lat}/{uri}/places_nearby".substring(1);

        if (params.has("lat") && (!params.getString("lat").isEmpty())) {
          path = path.replaceAll("\\{" + "lat" + "\\}", escapeString(String.valueOf(params.getLong("lat"))));
        }

        if (params.has("lon") && (!params.getString("lon").isEmpty())) {
          path = path.replaceAll("\\{" + "lon" + "\\}", escapeString(String.valueOf(params.getLong("lon"))));
        }

        if (params.has("uri") && (!params.getString("uri").isEmpty())) {
          path = path.replaceAll("\\{" + "uri" + "\\}", escapeString(params.getString("uri")));
        }

        if (params.has("type") && (!params.getString("type").isEmpty())) {
          urlBuilder.addQueryParameter("type[]", escapeString(String.valueOf(params.getJSONArray("type"))));
        }

        if (params.has("filter") && (!params.getString("filter").isEmpty())) {
          urlBuilder.addQueryParameter("filter", escapeString(params.getString("filter")));
        }

        if (params.has("distance") && (!params.getString("distance").isEmpty())) {
          urlBuilder.addQueryParameter("distance", escapeString(String.valueOf(params.getInt("distance"))));
        }

        if (params.has("count") && (!params.getString("count").isEmpty())) {
          urlBuilder.addQueryParameter("count", escapeString(String.valueOf(params.getInt("count"))));
        }

        if (params.has("depth") && (!params.getString("depth").isEmpty())) {
          urlBuilder.addQueryParameter("depth", escapeString(String.valueOf(params.getInt("depth"))));
        }

        if (params.has("startPage") && (!params.getString("startPage").isEmpty())) {
          urlBuilder.addQueryParameter("start_page", escapeString(String.valueOf(params.getInt("startPage"))));
        }

        if (params.has("bssStands") && (!params.getString("bssStands").isEmpty())) {
          urlBuilder.addQueryParameter("bss_stands", escapeString(String.valueOf(params.getBoolean("bssStands"))));
        }

        if (params.has("addPoiInfos") && (!params.getString("addPoiInfos").isEmpty())) {
          urlBuilder.addQueryParameter("add_poi_infos[]", escapeString(String.valueOf(params.getJSONArray("addPoiInfos"))));
        }

        if (params.has("disableGeojson") && (!params.getString("disableGeojson").isEmpty())) {
          urlBuilder.addQueryParameter("disable_geojson", escapeString(String.valueOf(params.getBoolean("disableGeojson"))));
        }

        if (params.has("disableDisruption") && (!params.getString("disableDisruption").isEmpty())) {
          urlBuilder.addQueryParameter("disable_disruption", escapeString(String.valueOf(params.getBoolean("disableDisruption"))));
        }

        HttpUrl url = urlBuilder
          .addPathSegments(path)
          .build();
        Request request = requestBuilder.url(url)
          .build();

        client.newCall(request).enqueue(new Callback() {

          @Override
          public void onFailure(@NonNull Call call, @NonNull IOException e) {
            String errorMessage = "Problem during request | " + String.valueOf(e.hashCode()) + ": " + e.getMessage();
            callbackContext.error(errorMessage);
          }

          @Override
          public void onResponse(@NonNull Call call, @NonNull Response response) {
            if (response.isSuccessful()) {
              try {
                JSONObject jsonObject = new JSONObject(Objects.requireNonNull(response.body()).string());
                callbackContext.success(jsonObject);
              } catch (Exception e) {
                String errorMessage = "Problem during response parsing";
                callbackContext.error(errorMessage);
              }
            } else {
              callbackContext.error("Unexpected code " + response.code() + " | message: " + response.message());
            }
          }
        });
      } catch (Exception e) {
        String errorMessage = "Problem during request building | " + e.hashCode() + ": " + e.getMessage();
        callbackContext.error(errorMessage);
      }
    });
  }

  private void coverageRegionPlacesNearby(final JSONObject params, final CallbackContext callbackContext) {
    cordova.getThreadPool().execute(() -> {
      try {
        HttpUrl.Builder urlBuilder = new HttpUrl.Builder()
          .scheme("https")
          .host("api.navitia.io")
          .addPathSegment("v1");
        Request.Builder requestBuilder = new Request.Builder()
          .header("Authorization", token);
        String path = "/coverage/{region}/places_nearby".substring(1);

        if (params.has("region") && (!params.getString("region").isEmpty())) {
          path = path.replaceAll("\\{" + "region" + "\\}", escapeString(params.getString("region")));
        }

        if (params.has("type") && (!params.getString("type").isEmpty())) {
          urlBuilder.addQueryParameter("type[]", escapeString(String.valueOf(params.getJSONArray("type"))));
        }

        if (params.has("filter") && (!params.getString("filter").isEmpty())) {
          urlBuilder.addQueryParameter("filter", escapeString(params.getString("filter")));
        }

        if (params.has("distance") && (!params.getString("distance").isEmpty())) {
          urlBuilder.addQueryParameter("distance", escapeString(String.valueOf(params.getInt("distance"))));
        }

        if (params.has("count") && (!params.getString("count").isEmpty())) {
          urlBuilder.addQueryParameter("count", escapeString(String.valueOf(params.getInt("count"))));
        }

        if (params.has("depth") && (!params.getString("depth").isEmpty())) {
          urlBuilder.addQueryParameter("depth", escapeString(String.valueOf(params.getInt("depth"))));
        }

        if (params.has("startPage") && (!params.getString("startPage").isEmpty())) {
          urlBuilder.addQueryParameter("start_page", escapeString(String.valueOf(params.getInt("startPage"))));
        }

        if (params.has("bssStands") && (!params.getString("bssStands").isEmpty())) {
          urlBuilder.addQueryParameter("bss_stands", escapeString(String.valueOf(params.getBoolean("bssStands"))));
        }

        if (params.has("addPoiInfos") && (!params.getString("addPoiInfos").isEmpty())) {
          urlBuilder.addQueryParameter("add_poi_infos[]", escapeString(String.valueOf(params.getJSONArray("addPoiInfos"))));
        }

        if (params.has("disableGeojson") && (!params.getString("disableGeojson").isEmpty())) {
          urlBuilder.addQueryParameter("disable_geojson", escapeString(String.valueOf(params.getBoolean("disableGeojson"))));
        }

        if (params.has("disableDisruption") && (!params.getString("disableDisruption").isEmpty())) {
          urlBuilder.addQueryParameter("disable_disruption", escapeString(String.valueOf(params.getBoolean("disableDisruption"))));
        }

        HttpUrl url = urlBuilder
          .addPathSegments(path)
          .build();
        Request request = requestBuilder.url(url)
          .build();

        client.newCall(request).enqueue(new Callback() {

          @Override
          public void onFailure(@NonNull Call call, @NonNull IOException e) {
            String errorMessage = "Problem during request | " + String.valueOf(e.hashCode()) + ": " + e.getMessage();
            callbackContext.error(errorMessage);
          }

          @Override
          public void onResponse(@NonNull Call call, @NonNull Response response) {
            if (response.isSuccessful()) {
              try {
                JSONObject jsonObject = new JSONObject(Objects.requireNonNull(response.body()).string());
                callbackContext.success(jsonObject);
              } catch (Exception e) {
                String errorMessage = "Problem during response parsing";
                callbackContext.error(errorMessage);
              }
            } else {
              callbackContext.error("Unexpected code " + response.code() + " | message: " + response.message());
            }
          }
        });
      } catch (Exception e) {
        String errorMessage = "Problem during request building | " + e.hashCode() + ": " + e.getMessage();
        callbackContext.error(errorMessage);
      }
    });
  }

  private void coverageRegionUriPlacesNearby(final JSONObject params, final CallbackContext callbackContext) {
    cordova.getThreadPool().execute(() -> {
      try {
        HttpUrl.Builder urlBuilder = new HttpUrl.Builder()
          .scheme("https")
          .host("api.navitia.io")
          .addPathSegment("v1");
        Request.Builder requestBuilder = new Request.Builder()
          .header("Authorization", token);
        String path = "/coverage/{region}/{uri}/places_nearby".substring(1);

        if (params.has("region") && (!params.getString("region").isEmpty())) {
          path = path.replaceAll("\\{" + "region" + "\\}", escapeString(params.getString("region")));
        }

        if (params.has("uri") && (!params.getString("uri").isEmpty())) {
          path = path.replaceAll("\\{" + "uri" + "\\}", escapeString(params.getString("uri")));
        }

        if (params.has("type") && (!params.getString("type").isEmpty())) {
          urlBuilder.addQueryParameter("type[]", escapeString(String.valueOf(params.getJSONArray("type"))));
        }

        if (params.has("filter") && (!params.getString("filter").isEmpty())) {
          urlBuilder.addQueryParameter("filter", escapeString(params.getString("filter")));
        }

        if (params.has("distance") && (!params.getString("distance").isEmpty())) {
          urlBuilder.addQueryParameter("distance", escapeString(String.valueOf(params.getInt("distance"))));
        }

        if (params.has("count") && (!params.getString("count").isEmpty())) {
          urlBuilder.addQueryParameter("count", escapeString(String.valueOf(params.getInt("count"))));
        }

        if (params.has("depth") && (!params.getString("depth").isEmpty())) {
          urlBuilder.addQueryParameter("depth", escapeString(String.valueOf(params.getInt("depth"))));
        }

        if (params.has("startPage") && (!params.getString("startPage").isEmpty())) {
          urlBuilder.addQueryParameter("start_page", escapeString(String.valueOf(params.getInt("startPage"))));
        }

        if (params.has("bssStands") && (!params.getString("bssStands").isEmpty())) {
          urlBuilder.addQueryParameter("bss_stands", escapeString(String.valueOf(params.getBoolean("bssStands"))));
        }

        if (params.has("addPoiInfos") && (!params.getString("addPoiInfos").isEmpty())) {
          urlBuilder.addQueryParameter("add_poi_infos[]", escapeString(String.valueOf(params.getJSONArray("addPoiInfos"))));
        }

        if (params.has("disableGeojson") && (!params.getString("disableGeojson").isEmpty())) {
          urlBuilder.addQueryParameter("disable_geojson", escapeString(String.valueOf(params.getBoolean("disableGeojson"))));
        }

        if (params.has("disableDisruption") && (!params.getString("disableDisruption").isEmpty())) {
          urlBuilder.addQueryParameter("disable_disruption", escapeString(String.valueOf(params.getBoolean("disableDisruption"))));
        }

        HttpUrl url = urlBuilder
          .addPathSegments(path)
          .build();
        Request request = requestBuilder.url(url)
          .build();

        client.newCall(request).enqueue(new Callback() {

          @Override
          public void onFailure(@NonNull Call call, @NonNull IOException e) {
            String errorMessage = "Problem during request | " + String.valueOf(e.hashCode()) + ": " + e.getMessage();
            callbackContext.error(errorMessage);
          }

          @Override
          public void onResponse(@NonNull Call call, @NonNull Response response) {
            if (response.isSuccessful()) {
              try {
                JSONObject jsonObject = new JSONObject(Objects.requireNonNull(response.body()).string());
                callbackContext.success(jsonObject);
              } catch (Exception e) {
                String errorMessage = "Problem during response parsing";
                callbackContext.error(errorMessage);
              }
            } else {
              callbackContext.error("Unexpected code " + response.code() + " | message: " + response.message());
            }
          }
        });
      } catch (Exception e) {
        String errorMessage = "Problem during request building | " + e.hashCode() + ": " + e.getMessage();
        callbackContext.error(errorMessage);
      }
    });
  }

  private void coverageLonLatPoiTypes(final JSONObject params, final CallbackContext callbackContext) {
    cordova.getThreadPool().execute(() -> {
      try {
        HttpUrl.Builder urlBuilder = new HttpUrl.Builder()
          .scheme("https")
          .host("api.navitia.io")
          .addPathSegment("v1");
        Request.Builder requestBuilder = new Request.Builder()
          .header("Authorization", token);
        String path = "/coverage/{lon};{lat}/poi_types".substring(1);

        if (params.has("lat") && (!params.getString("lat").isEmpty())) {
          path = path.replaceAll("\\{" + "lat" + "\\}", escapeString(String.valueOf(params.getLong("lat"))));
        }

        if (params.has("lon") && (!params.getString("lon").isEmpty())) {
          path = path.replaceAll("\\{" + "lon" + "\\}", escapeString(String.valueOf(params.getLong("lon"))));
        }

        if (params.has("startPage") && (!params.getString("startPage").isEmpty())) {
          urlBuilder.addQueryParameter("start_page", escapeString(String.valueOf(params.getInt("startPage"))));
        }

        if (params.has("count") && (!params.getString("count").isEmpty())) {
          urlBuilder.addQueryParameter("count", escapeString(String.valueOf(params.getInt("count"))));
        }

        if (params.has("depth") && (!params.getString("depth").isEmpty())) {
          urlBuilder.addQueryParameter("depth", escapeString(String.valueOf(params.getInt("depth"))));
        }

        if (params.has("forbiddenId") && (!params.getString("forbiddenId").isEmpty())) {
          urlBuilder.addQueryParameter("forbidden_id[]", escapeString(String.valueOf(params.getJSONArray("forbiddenId"))));
        }

        if (params.has("forbiddenUris") && (!params.getString("forbiddenUris").isEmpty())) {
          urlBuilder.addQueryParameter("forbidden_uris[]", escapeString(String.valueOf(params.getJSONArray("forbiddenUris"))));
        }

        if (params.has("externalCode") && (!params.getString("externalCode").isEmpty())) {
          urlBuilder.addQueryParameter("external_code", escapeString(params.getString("externalCode")));
        }

        if (params.has("headsign") && (!params.getString("headsign").isEmpty())) {
          urlBuilder.addQueryParameter("headsign", escapeString(params.getString("headsign")));
        }

        if (params.has("showCodes") && (!params.getString("showCodes").isEmpty())) {
          urlBuilder.addQueryParameter("show_codes", escapeString(String.valueOf(params.getBoolean("showCodes"))));
        }

        if (params.has("odtLevel") && (!params.getString("odtLevel").isEmpty())) {
          urlBuilder.addQueryParameter("odt_level", escapeString(params.getString("odtLevel")));
        }

        if (params.has("dataFreshness") && (!params.getString("dataFreshness").isEmpty())) {
          urlBuilder.addQueryParameter("data_freshness", escapeString(params.getString("dataFreshness")));
        }

        if (params.has("distance") && (!params.getString("distance").isEmpty())) {
          urlBuilder.addQueryParameter("distance", escapeString(String.valueOf(params.getInt("distance"))));
        }

        if (params.has("since") && (!params.getString("since").isEmpty())) {
          urlBuilder.addQueryParameter("since", escapeString(String.valueOf(params.getString("since"))));
        }

        if (params.has("until") && (!params.getString("until").isEmpty())) {
          urlBuilder.addQueryParameter("until", escapeString(String.valueOf(params.getString("until"))));
        }

        if (params.has("disableGeojson") && (!params.getString("disableGeojson").isEmpty())) {
          urlBuilder.addQueryParameter("disable_geojson", escapeString(String.valueOf(params.getBoolean("disableGeojson"))));
        }

        if (params.has("disableDisruption") && (!params.getString("disableDisruption").isEmpty())) {
          urlBuilder.addQueryParameter("disable_disruption", escapeString(String.valueOf(params.getBoolean("disableDisruption"))));
        }

        if (params.has("filter") && (!params.getString("filter").isEmpty())) {
          urlBuilder.addQueryParameter("filter", escapeString(params.getString("filter")));
        }

        if (params.has("tags") && (!params.getString("tags").isEmpty())) {
          urlBuilder.addQueryParameter("tags[]", escapeString(String.valueOf(params.getJSONArray("tags"))));
        }

        HttpUrl url = urlBuilder
          .addPathSegments(path)
          .build();
        Request request = requestBuilder.url(url)
          .build();

        client.newCall(request).enqueue(new Callback() {

          @Override
          public void onFailure(@NonNull Call call, @NonNull IOException e) {
            String errorMessage = "Problem during request | " + String.valueOf(e.hashCode()) + ": " + e.getMessage();
            callbackContext.error(errorMessage);
          }

          @Override
          public void onResponse(@NonNull Call call, @NonNull Response response) {
            if (response.isSuccessful()) {
              try {
                JSONObject jsonObject = new JSONObject(Objects.requireNonNull(response.body()).string());
                callbackContext.success(jsonObject);
              } catch (Exception e) {
                String errorMessage = "Problem during response parsing";
                callbackContext.error(errorMessage);
              }
            } else {
              callbackContext.error("Unexpected code " + response.code() + " | message: " + response.message());
            }
          }
        });
      } catch (Exception e) {
        String errorMessage = "Problem during request building | " + e.hashCode() + ": " + e.getMessage();
        callbackContext.error(errorMessage);
      }
    });
  }

  private void coverageLonLatPoiTypesId(final JSONObject params, final CallbackContext callbackContext) {
    cordova.getThreadPool().execute(() -> {
      try {
        HttpUrl.Builder urlBuilder = new HttpUrl.Builder()
          .scheme("https")
          .host("api.navitia.io")
          .addPathSegment("v1");
        Request.Builder requestBuilder = new Request.Builder()
          .header("Authorization", token);
        String path = "/coverage/{lon};{lat}/poi_types/{id}".substring(1);

        if (params.has("lat") && (!params.getString("lat").isEmpty())) {
          path = path.replaceAll("\\{" + "lat" + "\\}", escapeString(String.valueOf(params.getLong("lat"))));
        }

        if (params.has("lon") && (!params.getString("lon").isEmpty())) {
          path = path.replaceAll("\\{" + "lon" + "\\}", escapeString(String.valueOf(params.getLong("lon"))));
        }

        if (params.has("id") && (!params.getString("id").isEmpty())) {
          path = path.replaceAll("\\{" + "id" + "\\}", escapeString(params.getString("id")));
        }

        if (params.has("startPage") && (!params.getString("startPage").isEmpty())) {
          urlBuilder.addQueryParameter("start_page", escapeString(String.valueOf(params.getInt("startPage"))));
        }

        if (params.has("count") && (!params.getString("count").isEmpty())) {
          urlBuilder.addQueryParameter("count", escapeString(String.valueOf(params.getInt("count"))));
        }

        if (params.has("depth") && (!params.getString("depth").isEmpty())) {
          urlBuilder.addQueryParameter("depth", escapeString(String.valueOf(params.getInt("depth"))));
        }

        if (params.has("forbiddenId") && (!params.getString("forbiddenId").isEmpty())) {
          urlBuilder.addQueryParameter("forbidden_id[]", escapeString(String.valueOf(params.getJSONArray("forbiddenId"))));
        }

        if (params.has("forbiddenUris") && (!params.getString("forbiddenUris").isEmpty())) {
          urlBuilder.addQueryParameter("forbidden_uris[]", escapeString(String.valueOf(params.getJSONArray("forbiddenUris"))));
        }

        if (params.has("externalCode") && (!params.getString("externalCode").isEmpty())) {
          urlBuilder.addQueryParameter("external_code", escapeString(params.getString("externalCode")));
        }

        if (params.has("headsign") && (!params.getString("headsign").isEmpty())) {
          urlBuilder.addQueryParameter("headsign", escapeString(params.getString("headsign")));
        }

        if (params.has("showCodes") && (!params.getString("showCodes").isEmpty())) {
          urlBuilder.addQueryParameter("show_codes", escapeString(String.valueOf(params.getBoolean("showCodes"))));
        }

        if (params.has("odtLevel") && (!params.getString("odtLevel").isEmpty())) {
          urlBuilder.addQueryParameter("odt_level", escapeString(params.getString("odtLevel")));
        }

        if (params.has("dataFreshness") && (!params.getString("dataFreshness").isEmpty())) {
          urlBuilder.addQueryParameter("data_freshness", escapeString(params.getString("dataFreshness")));
        }

        if (params.has("distance") && (!params.getString("distance").isEmpty())) {
          urlBuilder.addQueryParameter("distance", escapeString(String.valueOf(params.getInt("distance"))));
        }

        if (params.has("since") && (!params.getString("since").isEmpty())) {
          urlBuilder.addQueryParameter("since", escapeString(String.valueOf(params.getString("since"))));
        }

        if (params.has("until") && (!params.getString("until").isEmpty())) {
          urlBuilder.addQueryParameter("until", escapeString(String.valueOf(params.getString("until"))));
        }

        if (params.has("disableGeojson") && (!params.getString("disableGeojson").isEmpty())) {
          urlBuilder.addQueryParameter("disable_geojson", escapeString(String.valueOf(params.getBoolean("disableGeojson"))));
        }

        if (params.has("disableDisruption") && (!params.getString("disableDisruption").isEmpty())) {
          urlBuilder.addQueryParameter("disable_disruption", escapeString(String.valueOf(params.getBoolean("disableDisruption"))));
        }

        if (params.has("tags") && (!params.getString("tags").isEmpty())) {
          urlBuilder.addQueryParameter("tags[]", escapeString(String.valueOf(params.getJSONArray("tags"))));
        }

        HttpUrl url = urlBuilder
          .addPathSegments(path)
          .build();
        Request request = requestBuilder.url(url)
          .build();

        client.newCall(request).enqueue(new Callback() {

          @Override
          public void onFailure(@NonNull Call call, @NonNull IOException e) {
            String errorMessage = "Problem during request | " + String.valueOf(e.hashCode()) + ": " + e.getMessage();
            callbackContext.error(errorMessage);
          }

          @Override
          public void onResponse(@NonNull Call call, @NonNull Response response) {
            if (response.isSuccessful()) {
              try {
                JSONObject jsonObject = new JSONObject(Objects.requireNonNull(response.body()).string());
                callbackContext.success(jsonObject);
              } catch (Exception e) {
                String errorMessage = "Problem during response parsing";
                callbackContext.error(errorMessage);
              }
            } else {
              callbackContext.error("Unexpected code " + response.code() + " | message: " + response.message());
            }
          }
        });
      } catch (Exception e) {
        String errorMessage = "Problem during request building | " + e.hashCode() + ": " + e.getMessage();
        callbackContext.error(errorMessage);
      }
    });
  }

  private void coverageLonLatUriPoiTypes(final JSONObject params, final CallbackContext callbackContext) {
    cordova.getThreadPool().execute(() -> {
      try {
        HttpUrl.Builder urlBuilder = new HttpUrl.Builder()
          .scheme("https")
          .host("api.navitia.io")
          .addPathSegment("v1");
        Request.Builder requestBuilder = new Request.Builder()
          .header("Authorization", token);
        String path = "/coverage/{lon};{lat}/{uri}/poi_types".substring(1);

        if (params.has("lat") && (!params.getString("lat").isEmpty())) {
          path = path.replaceAll("\\{" + "lat" + "\\}", escapeString(String.valueOf(params.getLong("lat"))));
        }

        if (params.has("lon") && (!params.getString("lon").isEmpty())) {
          path = path.replaceAll("\\{" + "lon" + "\\}", escapeString(String.valueOf(params.getLong("lon"))));
        }

        if (params.has("uri") && (!params.getString("uri").isEmpty())) {
          path = path.replaceAll("\\{" + "uri" + "\\}", escapeString(params.getString("uri")));
        }

        if (params.has("startPage") && (!params.getString("startPage").isEmpty())) {
          urlBuilder.addQueryParameter("start_page", escapeString(String.valueOf(params.getInt("startPage"))));
        }

        if (params.has("count") && (!params.getString("count").isEmpty())) {
          urlBuilder.addQueryParameter("count", escapeString(String.valueOf(params.getInt("count"))));
        }

        if (params.has("depth") && (!params.getString("depth").isEmpty())) {
          urlBuilder.addQueryParameter("depth", escapeString(String.valueOf(params.getInt("depth"))));
        }

        if (params.has("forbiddenId") && (!params.getString("forbiddenId").isEmpty())) {
          urlBuilder.addQueryParameter("forbidden_id[]", escapeString(String.valueOf(params.getJSONArray("forbiddenId"))));
        }

        if (params.has("forbiddenUris") && (!params.getString("forbiddenUris").isEmpty())) {
          urlBuilder.addQueryParameter("forbidden_uris[]", escapeString(String.valueOf(params.getJSONArray("forbiddenUris"))));
        }

        if (params.has("externalCode") && (!params.getString("externalCode").isEmpty())) {
          urlBuilder.addQueryParameter("external_code", escapeString(params.getString("externalCode")));
        }

        if (params.has("headsign") && (!params.getString("headsign").isEmpty())) {
          urlBuilder.addQueryParameter("headsign", escapeString(params.getString("headsign")));
        }

        if (params.has("showCodes") && (!params.getString("showCodes").isEmpty())) {
          urlBuilder.addQueryParameter("show_codes", escapeString(String.valueOf(params.getBoolean("showCodes"))));
        }

        if (params.has("odtLevel") && (!params.getString("odtLevel").isEmpty())) {
          urlBuilder.addQueryParameter("odt_level", escapeString(params.getString("odtLevel")));
        }

        if (params.has("dataFreshness") && (!params.getString("dataFreshness").isEmpty())) {
          urlBuilder.addQueryParameter("data_freshness", escapeString(params.getString("dataFreshness")));
        }

        if (params.has("distance") && (!params.getString("distance").isEmpty())) {
          urlBuilder.addQueryParameter("distance", escapeString(String.valueOf(params.getInt("distance"))));
        }

        if (params.has("since") && (!params.getString("since").isEmpty())) {
          urlBuilder.addQueryParameter("since", escapeString(String.valueOf(params.getString("since"))));
        }

        if (params.has("until") && (!params.getString("until").isEmpty())) {
          urlBuilder.addQueryParameter("until", escapeString(String.valueOf(params.getString("until"))));
        }

        if (params.has("disableGeojson") && (!params.getString("disableGeojson").isEmpty())) {
          urlBuilder.addQueryParameter("disable_geojson", escapeString(String.valueOf(params.getBoolean("disableGeojson"))));
        }

        if (params.has("disableDisruption") && (!params.getString("disableDisruption").isEmpty())) {
          urlBuilder.addQueryParameter("disable_disruption", escapeString(String.valueOf(params.getBoolean("disableDisruption"))));
        }

        if (params.has("filter") && (!params.getString("filter").isEmpty())) {
          urlBuilder.addQueryParameter("filter", escapeString(params.getString("filter")));
        }

        if (params.has("tags") && (!params.getString("tags").isEmpty())) {
          urlBuilder.addQueryParameter("tags[]", escapeString(String.valueOf(params.getJSONArray("tags"))));
        }

        HttpUrl url = urlBuilder
          .addPathSegments(path)
          .build();
        Request request = requestBuilder.url(url)
          .build();

        client.newCall(request).enqueue(new Callback() {

          @Override
          public void onFailure(@NonNull Call call, @NonNull IOException e) {
            String errorMessage = "Problem during request | " + String.valueOf(e.hashCode()) + ": " + e.getMessage();
            callbackContext.error(errorMessage);
          }

          @Override
          public void onResponse(@NonNull Call call, @NonNull Response response) {
            if (response.isSuccessful()) {
              try {
                JSONObject jsonObject = new JSONObject(Objects.requireNonNull(response.body()).string());
                callbackContext.success(jsonObject);
              } catch (Exception e) {
                String errorMessage = "Problem during response parsing";
                callbackContext.error(errorMessage);
              }
            } else {
              callbackContext.error("Unexpected code " + response.code() + " | message: " + response.message());
            }
          }
        });
      } catch (Exception e) {
        String errorMessage = "Problem during request building | " + e.hashCode() + ": " + e.getMessage();
        callbackContext.error(errorMessage);
      }
    });
  }

  private void coverageLonLatUriPoiTypesId(final JSONObject params, final CallbackContext callbackContext) {
    cordova.getThreadPool().execute(() -> {
      try {
        HttpUrl.Builder urlBuilder = new HttpUrl.Builder()
          .scheme("https")
          .host("api.navitia.io")
          .addPathSegment("v1");
        Request.Builder requestBuilder = new Request.Builder()
          .header("Authorization", token);
        String path = "/coverage/{lon};{lat}/{uri}/poi_types/{id}".substring(1);

        if (params.has("lat") && (!params.getString("lat").isEmpty())) {
          path = path.replaceAll("\\{" + "lat" + "\\}", escapeString(String.valueOf(params.getLong("lat"))));
        }

        if (params.has("lon") && (!params.getString("lon").isEmpty())) {
          path = path.replaceAll("\\{" + "lon" + "\\}", escapeString(String.valueOf(params.getLong("lon"))));
        }

        if (params.has("uri") && (!params.getString("uri").isEmpty())) {
          path = path.replaceAll("\\{" + "uri" + "\\}", escapeString(params.getString("uri")));
        }

        if (params.has("id") && (!params.getString("id").isEmpty())) {
          path = path.replaceAll("\\{" + "id" + "\\}", escapeString(params.getString("id")));
        }

        if (params.has("startPage") && (!params.getString("startPage").isEmpty())) {
          urlBuilder.addQueryParameter("start_page", escapeString(String.valueOf(params.getInt("startPage"))));
        }

        if (params.has("count") && (!params.getString("count").isEmpty())) {
          urlBuilder.addQueryParameter("count", escapeString(String.valueOf(params.getInt("count"))));
        }

        if (params.has("depth") && (!params.getString("depth").isEmpty())) {
          urlBuilder.addQueryParameter("depth", escapeString(String.valueOf(params.getInt("depth"))));
        }

        if (params.has("forbiddenId") && (!params.getString("forbiddenId").isEmpty())) {
          urlBuilder.addQueryParameter("forbidden_id[]", escapeString(String.valueOf(params.getJSONArray("forbiddenId"))));
        }

        if (params.has("forbiddenUris") && (!params.getString("forbiddenUris").isEmpty())) {
          urlBuilder.addQueryParameter("forbidden_uris[]", escapeString(String.valueOf(params.getJSONArray("forbiddenUris"))));
        }

        if (params.has("externalCode") && (!params.getString("externalCode").isEmpty())) {
          urlBuilder.addQueryParameter("external_code", escapeString(params.getString("externalCode")));
        }

        if (params.has("headsign") && (!params.getString("headsign").isEmpty())) {
          urlBuilder.addQueryParameter("headsign", escapeString(params.getString("headsign")));
        }

        if (params.has("showCodes") && (!params.getString("showCodes").isEmpty())) {
          urlBuilder.addQueryParameter("show_codes", escapeString(String.valueOf(params.getBoolean("showCodes"))));
        }

        if (params.has("odtLevel") && (!params.getString("odtLevel").isEmpty())) {
          urlBuilder.addQueryParameter("odt_level", escapeString(params.getString("odtLevel")));
        }

        if (params.has("dataFreshness") && (!params.getString("dataFreshness").isEmpty())) {
          urlBuilder.addQueryParameter("data_freshness", escapeString(params.getString("dataFreshness")));
        }

        if (params.has("distance") && (!params.getString("distance").isEmpty())) {
          urlBuilder.addQueryParameter("distance", escapeString(String.valueOf(params.getInt("distance"))));
        }

        if (params.has("since") && (!params.getString("since").isEmpty())) {
          urlBuilder.addQueryParameter("since", escapeString(String.valueOf(params.getString("since"))));
        }

        if (params.has("until") && (!params.getString("until").isEmpty())) {
          urlBuilder.addQueryParameter("until", escapeString(String.valueOf(params.getString("until"))));
        }

        if (params.has("disableGeojson") && (!params.getString("disableGeojson").isEmpty())) {
          urlBuilder.addQueryParameter("disable_geojson", escapeString(String.valueOf(params.getBoolean("disableGeojson"))));
        }

        if (params.has("disableDisruption") && (!params.getString("disableDisruption").isEmpty())) {
          urlBuilder.addQueryParameter("disable_disruption", escapeString(String.valueOf(params.getBoolean("disableDisruption"))));
        }

        if (params.has("tags") && (!params.getString("tags").isEmpty())) {
          urlBuilder.addQueryParameter("tags[]", escapeString(String.valueOf(params.getJSONArray("tags"))));
        }

        HttpUrl url = urlBuilder
          .addPathSegments(path)
          .build();
        Request request = requestBuilder.url(url)
          .build();

        client.newCall(request).enqueue(new Callback() {

          @Override
          public void onFailure(@NonNull Call call, @NonNull IOException e) {
            String errorMessage = "Problem during request | " + String.valueOf(e.hashCode()) + ": " + e.getMessage();
            callbackContext.error(errorMessage);
          }

          @Override
          public void onResponse(@NonNull Call call, @NonNull Response response) {
            if (response.isSuccessful()) {
              try {
                JSONObject jsonObject = new JSONObject(Objects.requireNonNull(response.body()).string());
                callbackContext.success(jsonObject);
              } catch (Exception e) {
                String errorMessage = "Problem during response parsing";
                callbackContext.error(errorMessage);
              }
            } else {
              callbackContext.error("Unexpected code " + response.code() + " | message: " + response.message());
            }
          }
        });
      } catch (Exception e) {
        String errorMessage = "Problem during request building | " + e.hashCode() + ": " + e.getMessage();
        callbackContext.error(errorMessage);
      }
    });
  }

  private void coverageRegionPoiTypes(final JSONObject params, final CallbackContext callbackContext) {
    cordova.getThreadPool().execute(() -> {
      try {
        HttpUrl.Builder urlBuilder = new HttpUrl.Builder()
          .scheme("https")
          .host("api.navitia.io")
          .addPathSegment("v1");
        Request.Builder requestBuilder = new Request.Builder()
          .header("Authorization", token);
        String path = "/coverage/{region}/poi_types".substring(1);

        if (params.has("region") && (!params.getString("region").isEmpty())) {
          path = path.replaceAll("\\{" + "region" + "\\}", escapeString(params.getString("region")));
        }

        if (params.has("startPage") && (!params.getString("startPage").isEmpty())) {
          urlBuilder.addQueryParameter("start_page", escapeString(String.valueOf(params.getInt("startPage"))));
        }

        if (params.has("count") && (!params.getString("count").isEmpty())) {
          urlBuilder.addQueryParameter("count", escapeString(String.valueOf(params.getInt("count"))));
        }

        if (params.has("depth") && (!params.getString("depth").isEmpty())) {
          urlBuilder.addQueryParameter("depth", escapeString(String.valueOf(params.getInt("depth"))));
        }

        if (params.has("forbiddenId") && (!params.getString("forbiddenId").isEmpty())) {
          urlBuilder.addQueryParameter("forbidden_id[]", escapeString(String.valueOf(params.getJSONArray("forbiddenId"))));
        }

        if (params.has("forbiddenUris") && (!params.getString("forbiddenUris").isEmpty())) {
          urlBuilder.addQueryParameter("forbidden_uris[]", escapeString(String.valueOf(params.getJSONArray("forbiddenUris"))));
        }

        if (params.has("externalCode") && (!params.getString("externalCode").isEmpty())) {
          urlBuilder.addQueryParameter("external_code", escapeString(params.getString("externalCode")));
        }

        if (params.has("headsign") && (!params.getString("headsign").isEmpty())) {
          urlBuilder.addQueryParameter("headsign", escapeString(params.getString("headsign")));
        }

        if (params.has("showCodes") && (!params.getString("showCodes").isEmpty())) {
          urlBuilder.addQueryParameter("show_codes", escapeString(String.valueOf(params.getBoolean("showCodes"))));
        }

        if (params.has("odtLevel") && (!params.getString("odtLevel").isEmpty())) {
          urlBuilder.addQueryParameter("odt_level", escapeString(params.getString("odtLevel")));
        }

        if (params.has("dataFreshness") && (!params.getString("dataFreshness").isEmpty())) {
          urlBuilder.addQueryParameter("data_freshness", escapeString(params.getString("dataFreshness")));
        }

        if (params.has("distance") && (!params.getString("distance").isEmpty())) {
          urlBuilder.addQueryParameter("distance", escapeString(String.valueOf(params.getInt("distance"))));
        }

        if (params.has("since") && (!params.getString("since").isEmpty())) {
          urlBuilder.addQueryParameter("since", escapeString(String.valueOf(params.getString("since"))));
        }

        if (params.has("until") && (!params.getString("until").isEmpty())) {
          urlBuilder.addQueryParameter("until", escapeString(String.valueOf(params.getString("until"))));
        }

        if (params.has("disableGeojson") && (!params.getString("disableGeojson").isEmpty())) {
          urlBuilder.addQueryParameter("disable_geojson", escapeString(String.valueOf(params.getBoolean("disableGeojson"))));
        }

        if (params.has("disableDisruption") && (!params.getString("disableDisruption").isEmpty())) {
          urlBuilder.addQueryParameter("disable_disruption", escapeString(String.valueOf(params.getBoolean("disableDisruption"))));
        }

        if (params.has("filter") && (!params.getString("filter").isEmpty())) {
          urlBuilder.addQueryParameter("filter", escapeString(params.getString("filter")));
        }

        if (params.has("tags") && (!params.getString("tags").isEmpty())) {
          urlBuilder.addQueryParameter("tags[]", escapeString(String.valueOf(params.getJSONArray("tags"))));
        }

        HttpUrl url = urlBuilder
          .addPathSegments(path)
          .build();
        Request request = requestBuilder.url(url)
          .build();

        client.newCall(request).enqueue(new Callback() {

          @Override
          public void onFailure(@NonNull Call call, @NonNull IOException e) {
            String errorMessage = "Problem during request | " + String.valueOf(e.hashCode()) + ": " + e.getMessage();
            callbackContext.error(errorMessage);
          }

          @Override
          public void onResponse(@NonNull Call call, @NonNull Response response) {
            if (response.isSuccessful()) {
              try {
                JSONObject jsonObject = new JSONObject(Objects.requireNonNull(response.body()).string());
                callbackContext.success(jsonObject);
              } catch (Exception e) {
                String errorMessage = "Problem during response parsing";
                callbackContext.error(errorMessage);
              }
            } else {
              callbackContext.error("Unexpected code " + response.code() + " | message: " + response.message());
            }
          }
        });
      } catch (Exception e) {
        String errorMessage = "Problem during request building | " + e.hashCode() + ": " + e.getMessage();
        callbackContext.error(errorMessage);
      }
    });
  }

  private void coverageRegionPoiTypesId(final JSONObject params, final CallbackContext callbackContext) {
    cordova.getThreadPool().execute(() -> {
      try {
        HttpUrl.Builder urlBuilder = new HttpUrl.Builder()
          .scheme("https")
          .host("api.navitia.io")
          .addPathSegment("v1");
        Request.Builder requestBuilder = new Request.Builder()
          .header("Authorization", token);
        String path = "/coverage/{region}/poi_types/{id}".substring(1);

        if (params.has("region") && (!params.getString("region").isEmpty())) {
          path = path.replaceAll("\\{" + "region" + "\\}", escapeString(params.getString("region")));
        }

        if (params.has("id") && (!params.getString("id").isEmpty())) {
          path = path.replaceAll("\\{" + "id" + "\\}", escapeString(params.getString("id")));
        }

        if (params.has("startPage") && (!params.getString("startPage").isEmpty())) {
          urlBuilder.addQueryParameter("start_page", escapeString(String.valueOf(params.getInt("startPage"))));
        }

        if (params.has("count") && (!params.getString("count").isEmpty())) {
          urlBuilder.addQueryParameter("count", escapeString(String.valueOf(params.getInt("count"))));
        }

        if (params.has("depth") && (!params.getString("depth").isEmpty())) {
          urlBuilder.addQueryParameter("depth", escapeString(String.valueOf(params.getInt("depth"))));
        }

        if (params.has("forbiddenId") && (!params.getString("forbiddenId").isEmpty())) {
          urlBuilder.addQueryParameter("forbidden_id[]", escapeString(String.valueOf(params.getJSONArray("forbiddenId"))));
        }

        if (params.has("forbiddenUris") && (!params.getString("forbiddenUris").isEmpty())) {
          urlBuilder.addQueryParameter("forbidden_uris[]", escapeString(String.valueOf(params.getJSONArray("forbiddenUris"))));
        }

        if (params.has("externalCode") && (!params.getString("externalCode").isEmpty())) {
          urlBuilder.addQueryParameter("external_code", escapeString(params.getString("externalCode")));
        }

        if (params.has("headsign") && (!params.getString("headsign").isEmpty())) {
          urlBuilder.addQueryParameter("headsign", escapeString(params.getString("headsign")));
        }

        if (params.has("showCodes") && (!params.getString("showCodes").isEmpty())) {
          urlBuilder.addQueryParameter("show_codes", escapeString(String.valueOf(params.getBoolean("showCodes"))));
        }

        if (params.has("odtLevel") && (!params.getString("odtLevel").isEmpty())) {
          urlBuilder.addQueryParameter("odt_level", escapeString(params.getString("odtLevel")));
        }

        if (params.has("dataFreshness") && (!params.getString("dataFreshness").isEmpty())) {
          urlBuilder.addQueryParameter("data_freshness", escapeString(params.getString("dataFreshness")));
        }

        if (params.has("distance") && (!params.getString("distance").isEmpty())) {
          urlBuilder.addQueryParameter("distance", escapeString(String.valueOf(params.getInt("distance"))));
        }

        if (params.has("since") && (!params.getString("since").isEmpty())) {
          urlBuilder.addQueryParameter("since", escapeString(String.valueOf(params.getString("since"))));
        }

        if (params.has("until") && (!params.getString("until").isEmpty())) {
          urlBuilder.addQueryParameter("until", escapeString(String.valueOf(params.getString("until"))));
        }

        if (params.has("disableGeojson") && (!params.getString("disableGeojson").isEmpty())) {
          urlBuilder.addQueryParameter("disable_geojson", escapeString(String.valueOf(params.getBoolean("disableGeojson"))));
        }

        if (params.has("disableDisruption") && (!params.getString("disableDisruption").isEmpty())) {
          urlBuilder.addQueryParameter("disable_disruption", escapeString(String.valueOf(params.getBoolean("disableDisruption"))));
        }

        if (params.has("tags") && (!params.getString("tags").isEmpty())) {
          urlBuilder.addQueryParameter("tags[]", escapeString(String.valueOf(params.getJSONArray("tags"))));
        }

        HttpUrl url = urlBuilder
          .addPathSegments(path)
          .build();
        Request request = requestBuilder.url(url)
          .build();

        client.newCall(request).enqueue(new Callback() {

          @Override
          public void onFailure(@NonNull Call call, @NonNull IOException e) {
            String errorMessage = "Problem during request | " + String.valueOf(e.hashCode()) + ": " + e.getMessage();
            callbackContext.error(errorMessage);
          }

          @Override
          public void onResponse(@NonNull Call call, @NonNull Response response) {
            if (response.isSuccessful()) {
              try {
                JSONObject jsonObject = new JSONObject(Objects.requireNonNull(response.body()).string());
                callbackContext.success(jsonObject);
              } catch (Exception e) {
                String errorMessage = "Problem during response parsing";
                callbackContext.error(errorMessage);
              }
            } else {
              callbackContext.error("Unexpected code " + response.code() + " | message: " + response.message());
            }
          }
        });
      } catch (Exception e) {
        String errorMessage = "Problem during request building | " + e.hashCode() + ": " + e.getMessage();
        callbackContext.error(errorMessage);
      }
    });
  }

  private void coverageRegionUriPoiTypes(final JSONObject params, final CallbackContext callbackContext) {
    cordova.getThreadPool().execute(() -> {
      try {
        HttpUrl.Builder urlBuilder = new HttpUrl.Builder()
          .scheme("https")
          .host("api.navitia.io")
          .addPathSegment("v1");
        Request.Builder requestBuilder = new Request.Builder()
          .header("Authorization", token);
        String path = "/coverage/{region}/{uri}/poi_types".substring(1);

        if (params.has("region") && (!params.getString("region").isEmpty())) {
          path = path.replaceAll("\\{" + "region" + "\\}", escapeString(params.getString("region")));
        }

        if (params.has("uri") && (!params.getString("uri").isEmpty())) {
          path = path.replaceAll("\\{" + "uri" + "\\}", escapeString(params.getString("uri")));
        }

        if (params.has("startPage") && (!params.getString("startPage").isEmpty())) {
          urlBuilder.addQueryParameter("start_page", escapeString(String.valueOf(params.getInt("startPage"))));
        }

        if (params.has("count") && (!params.getString("count").isEmpty())) {
          urlBuilder.addQueryParameter("count", escapeString(String.valueOf(params.getInt("count"))));
        }

        if (params.has("depth") && (!params.getString("depth").isEmpty())) {
          urlBuilder.addQueryParameter("depth", escapeString(String.valueOf(params.getInt("depth"))));
        }

        if (params.has("forbiddenId") && (!params.getString("forbiddenId").isEmpty())) {
          urlBuilder.addQueryParameter("forbidden_id[]", escapeString(String.valueOf(params.getJSONArray("forbiddenId"))));
        }

        if (params.has("forbiddenUris") && (!params.getString("forbiddenUris").isEmpty())) {
          urlBuilder.addQueryParameter("forbidden_uris[]", escapeString(String.valueOf(params.getJSONArray("forbiddenUris"))));
        }

        if (params.has("externalCode") && (!params.getString("externalCode").isEmpty())) {
          urlBuilder.addQueryParameter("external_code", escapeString(params.getString("externalCode")));
        }

        if (params.has("headsign") && (!params.getString("headsign").isEmpty())) {
          urlBuilder.addQueryParameter("headsign", escapeString(params.getString("headsign")));
        }

        if (params.has("showCodes") && (!params.getString("showCodes").isEmpty())) {
          urlBuilder.addQueryParameter("show_codes", escapeString(String.valueOf(params.getBoolean("showCodes"))));
        }

        if (params.has("odtLevel") && (!params.getString("odtLevel").isEmpty())) {
          urlBuilder.addQueryParameter("odt_level", escapeString(params.getString("odtLevel")));
        }

        if (params.has("dataFreshness") && (!params.getString("dataFreshness").isEmpty())) {
          urlBuilder.addQueryParameter("data_freshness", escapeString(params.getString("dataFreshness")));
        }

        if (params.has("distance") && (!params.getString("distance").isEmpty())) {
          urlBuilder.addQueryParameter("distance", escapeString(String.valueOf(params.getInt("distance"))));
        }

        if (params.has("since") && (!params.getString("since").isEmpty())) {
          urlBuilder.addQueryParameter("since", escapeString(String.valueOf(params.getString("since"))));
        }

        if (params.has("until") && (!params.getString("until").isEmpty())) {
          urlBuilder.addQueryParameter("until", escapeString(String.valueOf(params.getString("until"))));
        }

        if (params.has("disableGeojson") && (!params.getString("disableGeojson").isEmpty())) {
          urlBuilder.addQueryParameter("disable_geojson", escapeString(String.valueOf(params.getBoolean("disableGeojson"))));
        }

        if (params.has("disableDisruption") && (!params.getString("disableDisruption").isEmpty())) {
          urlBuilder.addQueryParameter("disable_disruption", escapeString(String.valueOf(params.getBoolean("disableDisruption"))));
        }

        if (params.has("filter") && (!params.getString("filter").isEmpty())) {
          urlBuilder.addQueryParameter("filter", escapeString(params.getString("filter")));
        }

        if (params.has("tags") && (!params.getString("tags").isEmpty())) {
          urlBuilder.addQueryParameter("tags[]", escapeString(String.valueOf(params.getJSONArray("tags"))));
        }

        HttpUrl url = urlBuilder
          .addPathSegments(path)
          .build();
        Request request = requestBuilder.url(url)
          .build();

        client.newCall(request).enqueue(new Callback() {

          @Override
          public void onFailure(@NonNull Call call, @NonNull IOException e) {
            String errorMessage = "Problem during request | " + String.valueOf(e.hashCode()) + ": " + e.getMessage();
            callbackContext.error(errorMessage);
          }

          @Override
          public void onResponse(@NonNull Call call, @NonNull Response response) {
            if (response.isSuccessful()) {
              try {
                JSONObject jsonObject = new JSONObject(Objects.requireNonNull(response.body()).string());
                callbackContext.success(jsonObject);
              } catch (Exception e) {
                String errorMessage = "Problem during response parsing";
                callbackContext.error(errorMessage);
              }
            } else {
              callbackContext.error("Unexpected code " + response.code() + " | message: " + response.message());
            }
          }
        });
      } catch (Exception e) {
        String errorMessage = "Problem during request building | " + e.hashCode() + ": " + e.getMessage();
        callbackContext.error(errorMessage);
      }
    });
  }

  private void coverageRegionUriPoiTypesId(final JSONObject params, final CallbackContext callbackContext) {
    cordova.getThreadPool().execute(() -> {
      try {
        HttpUrl.Builder urlBuilder = new HttpUrl.Builder()
          .scheme("https")
          .host("api.navitia.io")
          .addPathSegment("v1");
        Request.Builder requestBuilder = new Request.Builder()
          .header("Authorization", token);
        String path = "/coverage/{region}/{uri}/poi_types/{id}".substring(1);

        if (params.has("region") && (!params.getString("region").isEmpty())) {
          path = path.replaceAll("\\{" + "region" + "\\}", escapeString(params.getString("region")));
        }

        if (params.has("uri") && (!params.getString("uri").isEmpty())) {
          path = path.replaceAll("\\{" + "uri" + "\\}", escapeString(params.getString("uri")));
        }

        if (params.has("id") && (!params.getString("id").isEmpty())) {
          path = path.replaceAll("\\{" + "id" + "\\}", escapeString(params.getString("id")));
        }

        if (params.has("startPage") && (!params.getString("startPage").isEmpty())) {
          urlBuilder.addQueryParameter("start_page", escapeString(String.valueOf(params.getInt("startPage"))));
        }

        if (params.has("count") && (!params.getString("count").isEmpty())) {
          urlBuilder.addQueryParameter("count", escapeString(String.valueOf(params.getInt("count"))));
        }

        if (params.has("depth") && (!params.getString("depth").isEmpty())) {
          urlBuilder.addQueryParameter("depth", escapeString(String.valueOf(params.getInt("depth"))));
        }

        if (params.has("forbiddenId") && (!params.getString("forbiddenId").isEmpty())) {
          urlBuilder.addQueryParameter("forbidden_id[]", escapeString(String.valueOf(params.getJSONArray("forbiddenId"))));
        }

        if (params.has("forbiddenUris") && (!params.getString("forbiddenUris").isEmpty())) {
          urlBuilder.addQueryParameter("forbidden_uris[]", escapeString(String.valueOf(params.getJSONArray("forbiddenUris"))));
        }

        if (params.has("externalCode") && (!params.getString("externalCode").isEmpty())) {
          urlBuilder.addQueryParameter("external_code", escapeString(params.getString("externalCode")));
        }

        if (params.has("headsign") && (!params.getString("headsign").isEmpty())) {
          urlBuilder.addQueryParameter("headsign", escapeString(params.getString("headsign")));
        }

        if (params.has("showCodes") && (!params.getString("showCodes").isEmpty())) {
          urlBuilder.addQueryParameter("show_codes", escapeString(String.valueOf(params.getBoolean("showCodes"))));
        }

        if (params.has("odtLevel") && (!params.getString("odtLevel").isEmpty())) {
          urlBuilder.addQueryParameter("odt_level", escapeString(params.getString("odtLevel")));
        }

        if (params.has("dataFreshness") && (!params.getString("dataFreshness").isEmpty())) {
          urlBuilder.addQueryParameter("data_freshness", escapeString(params.getString("dataFreshness")));
        }

        if (params.has("distance") && (!params.getString("distance").isEmpty())) {
          urlBuilder.addQueryParameter("distance", escapeString(String.valueOf(params.getInt("distance"))));
        }

        if (params.has("since") && (!params.getString("since").isEmpty())) {
          urlBuilder.addQueryParameter("since", escapeString(String.valueOf(params.getString("since"))));
        }

        if (params.has("until") && (!params.getString("until").isEmpty())) {
          urlBuilder.addQueryParameter("until", escapeString(String.valueOf(params.getString("until"))));
        }

        if (params.has("disableGeojson") && (!params.getString("disableGeojson").isEmpty())) {
          urlBuilder.addQueryParameter("disable_geojson", escapeString(String.valueOf(params.getBoolean("disableGeojson"))));
        }

        if (params.has("disableDisruption") && (!params.getString("disableDisruption").isEmpty())) {
          urlBuilder.addQueryParameter("disable_disruption", escapeString(String.valueOf(params.getBoolean("disableDisruption"))));
        }

        if (params.has("tags") && (!params.getString("tags").isEmpty())) {
          urlBuilder.addQueryParameter("tags[]", escapeString(String.valueOf(params.getJSONArray("tags"))));
        }

        HttpUrl url = urlBuilder
          .addPathSegments(path)
          .build();
        Request request = requestBuilder.url(url)
          .build();

        client.newCall(request).enqueue(new Callback() {

          @Override
          public void onFailure(@NonNull Call call, @NonNull IOException e) {
            String errorMessage = "Problem during request | " + String.valueOf(e.hashCode()) + ": " + e.getMessage();
            callbackContext.error(errorMessage);
          }

          @Override
          public void onResponse(@NonNull Call call, @NonNull Response response) {
            if (response.isSuccessful()) {
              try {
                JSONObject jsonObject = new JSONObject(Objects.requireNonNull(response.body()).string());
                callbackContext.success(jsonObject);
              } catch (Exception e) {
                String errorMessage = "Problem during response parsing";
                callbackContext.error(errorMessage);
              }
            } else {
              callbackContext.error("Unexpected code " + response.code() + " | message: " + response.message());
            }
          }
        });
      } catch (Exception e) {
        String errorMessage = "Problem during request building | " + e.hashCode() + ": " + e.getMessage();
        callbackContext.error(errorMessage);
      }
    });
  }

  private void coverageLonLatPois(final JSONObject params, final CallbackContext callbackContext) {
    cordova.getThreadPool().execute(() -> {
      try {
        HttpUrl.Builder urlBuilder = new HttpUrl.Builder()
          .scheme("https")
          .host("api.navitia.io")
          .addPathSegment("v1");
        Request.Builder requestBuilder = new Request.Builder()
          .header("Authorization", token);
        String path = "/coverage/{lon};{lat}/pois".substring(1);

        if (params.has("lat") && (!params.getString("lat").isEmpty())) {
          path = path.replaceAll("\\{" + "lat" + "\\}", escapeString(String.valueOf(params.getLong("lat"))));
        }

        if (params.has("lon") && (!params.getString("lon").isEmpty())) {
          path = path.replaceAll("\\{" + "lon" + "\\}", escapeString(String.valueOf(params.getLong("lon"))));
        }

        if (params.has("startPage") && (!params.getString("startPage").isEmpty())) {
          urlBuilder.addQueryParameter("start_page", escapeString(String.valueOf(params.getInt("startPage"))));
        }

        if (params.has("count") && (!params.getString("count").isEmpty())) {
          urlBuilder.addQueryParameter("count", escapeString(String.valueOf(params.getInt("count"))));
        }

        if (params.has("depth") && (!params.getString("depth").isEmpty())) {
          urlBuilder.addQueryParameter("depth", escapeString(String.valueOf(params.getInt("depth"))));
        }

        if (params.has("forbiddenId") && (!params.getString("forbiddenId").isEmpty())) {
          urlBuilder.addQueryParameter("forbidden_id[]", escapeString(String.valueOf(params.getJSONArray("forbiddenId"))));
        }

        if (params.has("forbiddenUris") && (!params.getString("forbiddenUris").isEmpty())) {
          urlBuilder.addQueryParameter("forbidden_uris[]", escapeString(String.valueOf(params.getJSONArray("forbiddenUris"))));
        }

        if (params.has("externalCode") && (!params.getString("externalCode").isEmpty())) {
          urlBuilder.addQueryParameter("external_code", escapeString(params.getString("externalCode")));
        }

        if (params.has("headsign") && (!params.getString("headsign").isEmpty())) {
          urlBuilder.addQueryParameter("headsign", escapeString(params.getString("headsign")));
        }

        if (params.has("showCodes") && (!params.getString("showCodes").isEmpty())) {
          urlBuilder.addQueryParameter("show_codes", escapeString(String.valueOf(params.getBoolean("showCodes"))));
        }

        if (params.has("odtLevel") && (!params.getString("odtLevel").isEmpty())) {
          urlBuilder.addQueryParameter("odt_level", escapeString(params.getString("odtLevel")));
        }

        if (params.has("dataFreshness") && (!params.getString("dataFreshness").isEmpty())) {
          urlBuilder.addQueryParameter("data_freshness", escapeString(params.getString("dataFreshness")));
        }

        if (params.has("distance") && (!params.getString("distance").isEmpty())) {
          urlBuilder.addQueryParameter("distance", escapeString(String.valueOf(params.getInt("distance"))));
        }

        if (params.has("since") && (!params.getString("since").isEmpty())) {
          urlBuilder.addQueryParameter("since", escapeString(String.valueOf(params.getString("since"))));
        }

        if (params.has("until") && (!params.getString("until").isEmpty())) {
          urlBuilder.addQueryParameter("until", escapeString(String.valueOf(params.getString("until"))));
        }

        if (params.has("disableGeojson") && (!params.getString("disableGeojson").isEmpty())) {
          urlBuilder.addQueryParameter("disable_geojson", escapeString(String.valueOf(params.getBoolean("disableGeojson"))));
        }

        if (params.has("disableDisruption") && (!params.getString("disableDisruption").isEmpty())) {
          urlBuilder.addQueryParameter("disable_disruption", escapeString(String.valueOf(params.getBoolean("disableDisruption"))));
        }

        if (params.has("filter") && (!params.getString("filter").isEmpty())) {
          urlBuilder.addQueryParameter("filter", escapeString(params.getString("filter")));
        }

        if (params.has("tags") && (!params.getString("tags").isEmpty())) {
          urlBuilder.addQueryParameter("tags[]", escapeString(String.valueOf(params.getJSONArray("tags"))));
        }

        if (params.has("originalId") && (!params.getString("originalId").isEmpty())) {
          urlBuilder.addQueryParameter("original_id", escapeString(params.getString("originalId")));
        }

        if (params.has("bssStands") && (!params.getString("bssStands").isEmpty())) {
          urlBuilder.addQueryParameter("bss_stands", escapeString(String.valueOf(params.getBoolean("bssStands"))));
        }

        if (params.has("addPoiInfos") && (!params.getString("addPoiInfos").isEmpty())) {
          urlBuilder.addQueryParameter("add_poi_infos[]", escapeString(String.valueOf(params.getJSONArray("addPoiInfos"))));
        }

        HttpUrl url = urlBuilder
          .addPathSegments(path)
          .build();
        Request request = requestBuilder.url(url)
          .build();

        client.newCall(request).enqueue(new Callback() {

          @Override
          public void onFailure(@NonNull Call call, @NonNull IOException e) {
            String errorMessage = "Problem during request | " + String.valueOf(e.hashCode()) + ": " + e.getMessage();
            callbackContext.error(errorMessage);
          }

          @Override
          public void onResponse(@NonNull Call call, @NonNull Response response) {
            if (response.isSuccessful()) {
              try {
                JSONObject jsonObject = new JSONObject(Objects.requireNonNull(response.body()).string());
                callbackContext.success(jsonObject);
              } catch (Exception e) {
                String errorMessage = "Problem during response parsing";
                callbackContext.error(errorMessage);
              }
            } else {
              callbackContext.error("Unexpected code " + response.code() + " | message: " + response.message());
            }
          }
        });
      } catch (Exception e) {
        String errorMessage = "Problem during request building | " + e.hashCode() + ": " + e.getMessage();
        callbackContext.error(errorMessage);
      }
    });
  }

  private void coverageLonLatPoisId(final JSONObject params, final CallbackContext callbackContext) {
    cordova.getThreadPool().execute(() -> {
      try {
        HttpUrl.Builder urlBuilder = new HttpUrl.Builder()
          .scheme("https")
          .host("api.navitia.io")
          .addPathSegment("v1");
        Request.Builder requestBuilder = new Request.Builder()
          .header("Authorization", token);
        String path = "/coverage/{lon};{lat}/pois/{id}".substring(1);

        if (params.has("lat") && (!params.getString("lat").isEmpty())) {
          path = path.replaceAll("\\{" + "lat" + "\\}", escapeString(String.valueOf(params.getLong("lat"))));
        }

        if (params.has("lon") && (!params.getString("lon").isEmpty())) {
          path = path.replaceAll("\\{" + "lon" + "\\}", escapeString(String.valueOf(params.getLong("lon"))));
        }

        if (params.has("id") && (!params.getString("id").isEmpty())) {
          path = path.replaceAll("\\{" + "id" + "\\}", escapeString(params.getString("id")));
        }

        if (params.has("startPage") && (!params.getString("startPage").isEmpty())) {
          urlBuilder.addQueryParameter("start_page", escapeString(String.valueOf(params.getInt("startPage"))));
        }

        if (params.has("count") && (!params.getString("count").isEmpty())) {
          urlBuilder.addQueryParameter("count", escapeString(String.valueOf(params.getInt("count"))));
        }

        if (params.has("depth") && (!params.getString("depth").isEmpty())) {
          urlBuilder.addQueryParameter("depth", escapeString(String.valueOf(params.getInt("depth"))));
        }

        if (params.has("forbiddenId") && (!params.getString("forbiddenId").isEmpty())) {
          urlBuilder.addQueryParameter("forbidden_id[]", escapeString(String.valueOf(params.getJSONArray("forbiddenId"))));
        }

        if (params.has("forbiddenUris") && (!params.getString("forbiddenUris").isEmpty())) {
          urlBuilder.addQueryParameter("forbidden_uris[]", escapeString(String.valueOf(params.getJSONArray("forbiddenUris"))));
        }

        if (params.has("externalCode") && (!params.getString("externalCode").isEmpty())) {
          urlBuilder.addQueryParameter("external_code", escapeString(params.getString("externalCode")));
        }

        if (params.has("headsign") && (!params.getString("headsign").isEmpty())) {
          urlBuilder.addQueryParameter("headsign", escapeString(params.getString("headsign")));
        }

        if (params.has("showCodes") && (!params.getString("showCodes").isEmpty())) {
          urlBuilder.addQueryParameter("show_codes", escapeString(String.valueOf(params.getBoolean("showCodes"))));
        }

        if (params.has("odtLevel") && (!params.getString("odtLevel").isEmpty())) {
          urlBuilder.addQueryParameter("odt_level", escapeString(params.getString("odtLevel")));
        }

        if (params.has("dataFreshness") && (!params.getString("dataFreshness").isEmpty())) {
          urlBuilder.addQueryParameter("data_freshness", escapeString(params.getString("dataFreshness")));
        }

        if (params.has("distance") && (!params.getString("distance").isEmpty())) {
          urlBuilder.addQueryParameter("distance", escapeString(String.valueOf(params.getInt("distance"))));
        }

        if (params.has("since") && (!params.getString("since").isEmpty())) {
          urlBuilder.addQueryParameter("since", escapeString(String.valueOf(params.getString("since"))));
        }

        if (params.has("until") && (!params.getString("until").isEmpty())) {
          urlBuilder.addQueryParameter("until", escapeString(String.valueOf(params.getString("until"))));
        }

        if (params.has("disableGeojson") && (!params.getString("disableGeojson").isEmpty())) {
          urlBuilder.addQueryParameter("disable_geojson", escapeString(String.valueOf(params.getBoolean("disableGeojson"))));
        }

        if (params.has("disableDisruption") && (!params.getString("disableDisruption").isEmpty())) {
          urlBuilder.addQueryParameter("disable_disruption", escapeString(String.valueOf(params.getBoolean("disableDisruption"))));
        }

        if (params.has("tags") && (!params.getString("tags").isEmpty())) {
          urlBuilder.addQueryParameter("tags[]", escapeString(String.valueOf(params.getJSONArray("tags"))));
        }

        if (params.has("originalId") && (!params.getString("originalId").isEmpty())) {
          urlBuilder.addQueryParameter("original_id", escapeString(params.getString("originalId")));
        }

        if (params.has("bssStands") && (!params.getString("bssStands").isEmpty())) {
          urlBuilder.addQueryParameter("bss_stands", escapeString(String.valueOf(params.getBoolean("bssStands"))));
        }

        if (params.has("addPoiInfos") && (!params.getString("addPoiInfos").isEmpty())) {
          urlBuilder.addQueryParameter("add_poi_infos[]", escapeString(String.valueOf(params.getJSONArray("addPoiInfos"))));
        }

        HttpUrl url = urlBuilder
          .addPathSegments(path)
          .build();
        Request request = requestBuilder.url(url)
          .build();

        client.newCall(request).enqueue(new Callback() {

          @Override
          public void onFailure(@NonNull Call call, @NonNull IOException e) {
            String errorMessage = "Problem during request | " + String.valueOf(e.hashCode()) + ": " + e.getMessage();
            callbackContext.error(errorMessage);
          }

          @Override
          public void onResponse(@NonNull Call call, @NonNull Response response) {
            if (response.isSuccessful()) {
              try {
                JSONObject jsonObject = new JSONObject(Objects.requireNonNull(response.body()).string());
                callbackContext.success(jsonObject);
              } catch (Exception e) {
                String errorMessage = "Problem during response parsing";
                callbackContext.error(errorMessage);
              }
            } else {
              callbackContext.error("Unexpected code " + response.code() + " | message: " + response.message());
            }
          }
        });
      } catch (Exception e) {
        String errorMessage = "Problem during request building | " + e.hashCode() + ": " + e.getMessage();
        callbackContext.error(errorMessage);
      }
    });
  }

  private void coverageLonLatUriPois(final JSONObject params, final CallbackContext callbackContext) {
    cordova.getThreadPool().execute(() -> {
      try {
        HttpUrl.Builder urlBuilder = new HttpUrl.Builder()
          .scheme("https")
          .host("api.navitia.io")
          .addPathSegment("v1");
        Request.Builder requestBuilder = new Request.Builder()
          .header("Authorization", token);
        String path = "/coverage/{lon};{lat}/{uri}/pois".substring(1);

        if (params.has("lat") && (!params.getString("lat").isEmpty())) {
          path = path.replaceAll("\\{" + "lat" + "\\}", escapeString(String.valueOf(params.getLong("lat"))));
        }

        if (params.has("lon") && (!params.getString("lon").isEmpty())) {
          path = path.replaceAll("\\{" + "lon" + "\\}", escapeString(String.valueOf(params.getLong("lon"))));
        }

        if (params.has("uri") && (!params.getString("uri").isEmpty())) {
          path = path.replaceAll("\\{" + "uri" + "\\}", escapeString(params.getString("uri")));
        }

        if (params.has("startPage") && (!params.getString("startPage").isEmpty())) {
          urlBuilder.addQueryParameter("start_page", escapeString(String.valueOf(params.getInt("startPage"))));
        }

        if (params.has("count") && (!params.getString("count").isEmpty())) {
          urlBuilder.addQueryParameter("count", escapeString(String.valueOf(params.getInt("count"))));
        }

        if (params.has("depth") && (!params.getString("depth").isEmpty())) {
          urlBuilder.addQueryParameter("depth", escapeString(String.valueOf(params.getInt("depth"))));
        }

        if (params.has("forbiddenId") && (!params.getString("forbiddenId").isEmpty())) {
          urlBuilder.addQueryParameter("forbidden_id[]", escapeString(String.valueOf(params.getJSONArray("forbiddenId"))));
        }

        if (params.has("forbiddenUris") && (!params.getString("forbiddenUris").isEmpty())) {
          urlBuilder.addQueryParameter("forbidden_uris[]", escapeString(String.valueOf(params.getJSONArray("forbiddenUris"))));
        }

        if (params.has("externalCode") && (!params.getString("externalCode").isEmpty())) {
          urlBuilder.addQueryParameter("external_code", escapeString(params.getString("externalCode")));
        }

        if (params.has("headsign") && (!params.getString("headsign").isEmpty())) {
          urlBuilder.addQueryParameter("headsign", escapeString(params.getString("headsign")));
        }

        if (params.has("showCodes") && (!params.getString("showCodes").isEmpty())) {
          urlBuilder.addQueryParameter("show_codes", escapeString(String.valueOf(params.getBoolean("showCodes"))));
        }

        if (params.has("odtLevel") && (!params.getString("odtLevel").isEmpty())) {
          urlBuilder.addQueryParameter("odt_level", escapeString(params.getString("odtLevel")));
        }

        if (params.has("dataFreshness") && (!params.getString("dataFreshness").isEmpty())) {
          urlBuilder.addQueryParameter("data_freshness", escapeString(params.getString("dataFreshness")));
        }

        if (params.has("distance") && (!params.getString("distance").isEmpty())) {
          urlBuilder.addQueryParameter("distance", escapeString(String.valueOf(params.getInt("distance"))));
        }

        if (params.has("since") && (!params.getString("since").isEmpty())) {
          urlBuilder.addQueryParameter("since", escapeString(String.valueOf(params.getString("since"))));
        }

        if (params.has("until") && (!params.getString("until").isEmpty())) {
          urlBuilder.addQueryParameter("until", escapeString(String.valueOf(params.getString("until"))));
        }

        if (params.has("disableGeojson") && (!params.getString("disableGeojson").isEmpty())) {
          urlBuilder.addQueryParameter("disable_geojson", escapeString(String.valueOf(params.getBoolean("disableGeojson"))));
        }

        if (params.has("disableDisruption") && (!params.getString("disableDisruption").isEmpty())) {
          urlBuilder.addQueryParameter("disable_disruption", escapeString(String.valueOf(params.getBoolean("disableDisruption"))));
        }

        if (params.has("filter") && (!params.getString("filter").isEmpty())) {
          urlBuilder.addQueryParameter("filter", escapeString(params.getString("filter")));
        }

        if (params.has("tags") && (!params.getString("tags").isEmpty())) {
          urlBuilder.addQueryParameter("tags[]", escapeString(String.valueOf(params.getJSONArray("tags"))));
        }

        if (params.has("originalId") && (!params.getString("originalId").isEmpty())) {
          urlBuilder.addQueryParameter("original_id", escapeString(params.getString("originalId")));
        }

        if (params.has("bssStands") && (!params.getString("bssStands").isEmpty())) {
          urlBuilder.addQueryParameter("bss_stands", escapeString(String.valueOf(params.getBoolean("bssStands"))));
        }

        if (params.has("addPoiInfos") && (!params.getString("addPoiInfos").isEmpty())) {
          urlBuilder.addQueryParameter("add_poi_infos[]", escapeString(String.valueOf(params.getJSONArray("addPoiInfos"))));
        }

        HttpUrl url = urlBuilder
          .addPathSegments(path)
          .build();
        Request request = requestBuilder.url(url)
          .build();

        client.newCall(request).enqueue(new Callback() {

          @Override
          public void onFailure(@NonNull Call call, @NonNull IOException e) {
            String errorMessage = "Problem during request | " + String.valueOf(e.hashCode()) + ": " + e.getMessage();
            callbackContext.error(errorMessage);
          }

          @Override
          public void onResponse(@NonNull Call call, @NonNull Response response) {
            if (response.isSuccessful()) {
              try {
                JSONObject jsonObject = new JSONObject(Objects.requireNonNull(response.body()).string());
                callbackContext.success(jsonObject);
              } catch (Exception e) {
                String errorMessage = "Problem during response parsing";
                callbackContext.error(errorMessage);
              }
            } else {
              callbackContext.error("Unexpected code " + response.code() + " | message: " + response.message());
            }
          }
        });
      } catch (Exception e) {
        String errorMessage = "Problem during request building | " + e.hashCode() + ": " + e.getMessage();
        callbackContext.error(errorMessage);
      }
    });
  }

  private void coverageLonLatUriPoisId(final JSONObject params, final CallbackContext callbackContext) {
    cordova.getThreadPool().execute(() -> {
      try {
        HttpUrl.Builder urlBuilder = new HttpUrl.Builder()
          .scheme("https")
          .host("api.navitia.io")
          .addPathSegment("v1");
        Request.Builder requestBuilder = new Request.Builder()
          .header("Authorization", token);
        String path = "/coverage/{lon};{lat}/{uri}/pois/{id}".substring(1);

        if (params.has("lat") && (!params.getString("lat").isEmpty())) {
          path = path.replaceAll("\\{" + "lat" + "\\}", escapeString(String.valueOf(params.getLong("lat"))));
        }

        if (params.has("lon") && (!params.getString("lon").isEmpty())) {
          path = path.replaceAll("\\{" + "lon" + "\\}", escapeString(String.valueOf(params.getLong("lon"))));
        }

        if (params.has("uri") && (!params.getString("uri").isEmpty())) {
          path = path.replaceAll("\\{" + "uri" + "\\}", escapeString(params.getString("uri")));
        }

        if (params.has("id") && (!params.getString("id").isEmpty())) {
          path = path.replaceAll("\\{" + "id" + "\\}", escapeString(params.getString("id")));
        }

        if (params.has("startPage") && (!params.getString("startPage").isEmpty())) {
          urlBuilder.addQueryParameter("start_page", escapeString(String.valueOf(params.getInt("startPage"))));
        }

        if (params.has("count") && (!params.getString("count").isEmpty())) {
          urlBuilder.addQueryParameter("count", escapeString(String.valueOf(params.getInt("count"))));
        }

        if (params.has("depth") && (!params.getString("depth").isEmpty())) {
          urlBuilder.addQueryParameter("depth", escapeString(String.valueOf(params.getInt("depth"))));
        }

        if (params.has("forbiddenId") && (!params.getString("forbiddenId").isEmpty())) {
          urlBuilder.addQueryParameter("forbidden_id[]", escapeString(String.valueOf(params.getJSONArray("forbiddenId"))));
        }

        if (params.has("forbiddenUris") && (!params.getString("forbiddenUris").isEmpty())) {
          urlBuilder.addQueryParameter("forbidden_uris[]", escapeString(String.valueOf(params.getJSONArray("forbiddenUris"))));
        }

        if (params.has("externalCode") && (!params.getString("externalCode").isEmpty())) {
          urlBuilder.addQueryParameter("external_code", escapeString(params.getString("externalCode")));
        }

        if (params.has("headsign") && (!params.getString("headsign").isEmpty())) {
          urlBuilder.addQueryParameter("headsign", escapeString(params.getString("headsign")));
        }

        if (params.has("showCodes") && (!params.getString("showCodes").isEmpty())) {
          urlBuilder.addQueryParameter("show_codes", escapeString(String.valueOf(params.getBoolean("showCodes"))));
        }

        if (params.has("odtLevel") && (!params.getString("odtLevel").isEmpty())) {
          urlBuilder.addQueryParameter("odt_level", escapeString(params.getString("odtLevel")));
        }

        if (params.has("dataFreshness") && (!params.getString("dataFreshness").isEmpty())) {
          urlBuilder.addQueryParameter("data_freshness", escapeString(params.getString("dataFreshness")));
        }

        if (params.has("distance") && (!params.getString("distance").isEmpty())) {
          urlBuilder.addQueryParameter("distance", escapeString(String.valueOf(params.getInt("distance"))));
        }

        if (params.has("since") && (!params.getString("since").isEmpty())) {
          urlBuilder.addQueryParameter("since", escapeString(String.valueOf(params.getString("since"))));
        }

        if (params.has("until") && (!params.getString("until").isEmpty())) {
          urlBuilder.addQueryParameter("until", escapeString(String.valueOf(params.getString("until"))));
        }

        if (params.has("disableGeojson") && (!params.getString("disableGeojson").isEmpty())) {
          urlBuilder.addQueryParameter("disable_geojson", escapeString(String.valueOf(params.getBoolean("disableGeojson"))));
        }

        if (params.has("disableDisruption") && (!params.getString("disableDisruption").isEmpty())) {
          urlBuilder.addQueryParameter("disable_disruption", escapeString(String.valueOf(params.getBoolean("disableDisruption"))));
        }

        if (params.has("tags") && (!params.getString("tags").isEmpty())) {
          urlBuilder.addQueryParameter("tags[]", escapeString(String.valueOf(params.getJSONArray("tags"))));
        }

        if (params.has("originalId") && (!params.getString("originalId").isEmpty())) {
          urlBuilder.addQueryParameter("original_id", escapeString(params.getString("originalId")));
        }

        if (params.has("bssStands") && (!params.getString("bssStands").isEmpty())) {
          urlBuilder.addQueryParameter("bss_stands", escapeString(String.valueOf(params.getBoolean("bssStands"))));
        }

        if (params.has("addPoiInfos") && (!params.getString("addPoiInfos").isEmpty())) {
          urlBuilder.addQueryParameter("add_poi_infos[]", escapeString(String.valueOf(params.getJSONArray("addPoiInfos"))));
        }

        HttpUrl url = urlBuilder
          .addPathSegments(path)
          .build();
        Request request = requestBuilder.url(url)
          .build();

        client.newCall(request).enqueue(new Callback() {

          @Override
          public void onFailure(@NonNull Call call, @NonNull IOException e) {
            String errorMessage = "Problem during request | " + String.valueOf(e.hashCode()) + ": " + e.getMessage();
            callbackContext.error(errorMessage);
          }

          @Override
          public void onResponse(@NonNull Call call, @NonNull Response response) {
            if (response.isSuccessful()) {
              try {
                JSONObject jsonObject = new JSONObject(Objects.requireNonNull(response.body()).string());
                callbackContext.success(jsonObject);
              } catch (Exception e) {
                String errorMessage = "Problem during response parsing";
                callbackContext.error(errorMessage);
              }
            } else {
              callbackContext.error("Unexpected code " + response.code() + " | message: " + response.message());
            }
          }
        });
      } catch (Exception e) {
        String errorMessage = "Problem during request building | " + e.hashCode() + ": " + e.getMessage();
        callbackContext.error(errorMessage);
      }
    });
  }

  private void coverageRegionPois(final JSONObject params, final CallbackContext callbackContext) {
    cordova.getThreadPool().execute(() -> {
      try {
        HttpUrl.Builder urlBuilder = new HttpUrl.Builder()
          .scheme("https")
          .host("api.navitia.io")
          .addPathSegment("v1");
        Request.Builder requestBuilder = new Request.Builder()
          .header("Authorization", token);
        String path = "/coverage/{region}/pois".substring(1);

        if (params.has("region") && (!params.getString("region").isEmpty())) {
          path = path.replaceAll("\\{" + "region" + "\\}", escapeString(params.getString("region")));
        }

        if (params.has("startPage") && (!params.getString("startPage").isEmpty())) {
          urlBuilder.addQueryParameter("start_page", escapeString(String.valueOf(params.getInt("startPage"))));
        }

        if (params.has("count") && (!params.getString("count").isEmpty())) {
          urlBuilder.addQueryParameter("count", escapeString(String.valueOf(params.getInt("count"))));
        }

        if (params.has("depth") && (!params.getString("depth").isEmpty())) {
          urlBuilder.addQueryParameter("depth", escapeString(String.valueOf(params.getInt("depth"))));
        }

        if (params.has("forbiddenId") && (!params.getString("forbiddenId").isEmpty())) {
          urlBuilder.addQueryParameter("forbidden_id[]", escapeString(String.valueOf(params.getJSONArray("forbiddenId"))));
        }

        if (params.has("forbiddenUris") && (!params.getString("forbiddenUris").isEmpty())) {
          urlBuilder.addQueryParameter("forbidden_uris[]", escapeString(String.valueOf(params.getJSONArray("forbiddenUris"))));
        }

        if (params.has("externalCode") && (!params.getString("externalCode").isEmpty())) {
          urlBuilder.addQueryParameter("external_code", escapeString(params.getString("externalCode")));
        }

        if (params.has("headsign") && (!params.getString("headsign").isEmpty())) {
          urlBuilder.addQueryParameter("headsign", escapeString(params.getString("headsign")));
        }

        if (params.has("showCodes") && (!params.getString("showCodes").isEmpty())) {
          urlBuilder.addQueryParameter("show_codes", escapeString(String.valueOf(params.getBoolean("showCodes"))));
        }

        if (params.has("odtLevel") && (!params.getString("odtLevel").isEmpty())) {
          urlBuilder.addQueryParameter("odt_level", escapeString(params.getString("odtLevel")));
        }

        if (params.has("dataFreshness") && (!params.getString("dataFreshness").isEmpty())) {
          urlBuilder.addQueryParameter("data_freshness", escapeString(params.getString("dataFreshness")));
        }

        if (params.has("distance") && (!params.getString("distance").isEmpty())) {
          urlBuilder.addQueryParameter("distance", escapeString(String.valueOf(params.getInt("distance"))));
        }

        if (params.has("since") && (!params.getString("since").isEmpty())) {
          urlBuilder.addQueryParameter("since", escapeString(String.valueOf(params.getString("since"))));
        }

        if (params.has("until") && (!params.getString("until").isEmpty())) {
          urlBuilder.addQueryParameter("until", escapeString(String.valueOf(params.getString("until"))));
        }

        if (params.has("disableGeojson") && (!params.getString("disableGeojson").isEmpty())) {
          urlBuilder.addQueryParameter("disable_geojson", escapeString(String.valueOf(params.getBoolean("disableGeojson"))));
        }

        if (params.has("disableDisruption") && (!params.getString("disableDisruption").isEmpty())) {
          urlBuilder.addQueryParameter("disable_disruption", escapeString(String.valueOf(params.getBoolean("disableDisruption"))));
        }

        if (params.has("filter") && (!params.getString("filter").isEmpty())) {
          urlBuilder.addQueryParameter("filter", escapeString(params.getString("filter")));
        }

        if (params.has("tags") && (!params.getString("tags").isEmpty())) {
          urlBuilder.addQueryParameter("tags[]", escapeString(String.valueOf(params.getJSONArray("tags"))));
        }

        if (params.has("originalId") && (!params.getString("originalId").isEmpty())) {
          urlBuilder.addQueryParameter("original_id", escapeString(params.getString("originalId")));
        }

        if (params.has("bssStands") && (!params.getString("bssStands").isEmpty())) {
          urlBuilder.addQueryParameter("bss_stands", escapeString(String.valueOf(params.getBoolean("bssStands"))));
        }

        if (params.has("addPoiInfos") && (!params.getString("addPoiInfos").isEmpty())) {
          urlBuilder.addQueryParameter("add_poi_infos[]", escapeString(String.valueOf(params.getJSONArray("addPoiInfos"))));
        }

        HttpUrl url = urlBuilder
          .addPathSegments(path)
          .build();
        Request request = requestBuilder.url(url)
          .build();

        client.newCall(request).enqueue(new Callback() {

          @Override
          public void onFailure(@NonNull Call call, @NonNull IOException e) {
            String errorMessage = "Problem during request | " + String.valueOf(e.hashCode()) + ": " + e.getMessage();
            callbackContext.error(errorMessage);
          }

          @Override
          public void onResponse(@NonNull Call call, @NonNull Response response) {
            if (response.isSuccessful()) {
              try {
                JSONObject jsonObject = new JSONObject(Objects.requireNonNull(response.body()).string());
                callbackContext.success(jsonObject);
              } catch (Exception e) {
                String errorMessage = "Problem during response parsing";
                callbackContext.error(errorMessage);
              }
            } else {
              callbackContext.error("Unexpected code " + response.code() + " | message: " + response.message());
            }
          }
        });
      } catch (Exception e) {
        String errorMessage = "Problem during request building | " + e.hashCode() + ": " + e.getMessage();
        callbackContext.error(errorMessage);
      }
    });
  }

  private void coverageRegionPoisId(final JSONObject params, final CallbackContext callbackContext) {
    cordova.getThreadPool().execute(() -> {
      try {
        HttpUrl.Builder urlBuilder = new HttpUrl.Builder()
          .scheme("https")
          .host("api.navitia.io")
          .addPathSegment("v1");
        Request.Builder requestBuilder = new Request.Builder()
          .header("Authorization", token);
        String path = "/coverage/{region}/pois/{id}".substring(1);

        if (params.has("region") && (!params.getString("region").isEmpty())) {
          path = path.replaceAll("\\{" + "region" + "\\}", escapeString(params.getString("region")));
        }

        if (params.has("id") && (!params.getString("id").isEmpty())) {
          path = path.replaceAll("\\{" + "id" + "\\}", escapeString(params.getString("id")));
        }

        if (params.has("startPage") && (!params.getString("startPage").isEmpty())) {
          urlBuilder.addQueryParameter("start_page", escapeString(String.valueOf(params.getInt("startPage"))));
        }

        if (params.has("count") && (!params.getString("count").isEmpty())) {
          urlBuilder.addQueryParameter("count", escapeString(String.valueOf(params.getInt("count"))));
        }

        if (params.has("depth") && (!params.getString("depth").isEmpty())) {
          urlBuilder.addQueryParameter("depth", escapeString(String.valueOf(params.getInt("depth"))));
        }

        if (params.has("forbiddenId") && (!params.getString("forbiddenId").isEmpty())) {
          urlBuilder.addQueryParameter("forbidden_id[]", escapeString(String.valueOf(params.getJSONArray("forbiddenId"))));
        }

        if (params.has("forbiddenUris") && (!params.getString("forbiddenUris").isEmpty())) {
          urlBuilder.addQueryParameter("forbidden_uris[]", escapeString(String.valueOf(params.getJSONArray("forbiddenUris"))));
        }

        if (params.has("externalCode") && (!params.getString("externalCode").isEmpty())) {
          urlBuilder.addQueryParameter("external_code", escapeString(params.getString("externalCode")));
        }

        if (params.has("headsign") && (!params.getString("headsign").isEmpty())) {
          urlBuilder.addQueryParameter("headsign", escapeString(params.getString("headsign")));
        }

        if (params.has("showCodes") && (!params.getString("showCodes").isEmpty())) {
          urlBuilder.addQueryParameter("show_codes", escapeString(String.valueOf(params.getBoolean("showCodes"))));
        }

        if (params.has("odtLevel") && (!params.getString("odtLevel").isEmpty())) {
          urlBuilder.addQueryParameter("odt_level", escapeString(params.getString("odtLevel")));
        }

        if (params.has("dataFreshness") && (!params.getString("dataFreshness").isEmpty())) {
          urlBuilder.addQueryParameter("data_freshness", escapeString(params.getString("dataFreshness")));
        }

        if (params.has("distance") && (!params.getString("distance").isEmpty())) {
          urlBuilder.addQueryParameter("distance", escapeString(String.valueOf(params.getInt("distance"))));
        }

        if (params.has("since") && (!params.getString("since").isEmpty())) {
          urlBuilder.addQueryParameter("since", escapeString(String.valueOf(params.getString("since"))));
        }

        if (params.has("until") && (!params.getString("until").isEmpty())) {
          urlBuilder.addQueryParameter("until", escapeString(String.valueOf(params.getString("until"))));
        }

        if (params.has("disableGeojson") && (!params.getString("disableGeojson").isEmpty())) {
          urlBuilder.addQueryParameter("disable_geojson", escapeString(String.valueOf(params.getBoolean("disableGeojson"))));
        }

        if (params.has("disableDisruption") && (!params.getString("disableDisruption").isEmpty())) {
          urlBuilder.addQueryParameter("disable_disruption", escapeString(String.valueOf(params.getBoolean("disableDisruption"))));
        }

        if (params.has("tags") && (!params.getString("tags").isEmpty())) {
          urlBuilder.addQueryParameter("tags[]", escapeString(String.valueOf(params.getJSONArray("tags"))));
        }

        if (params.has("originalId") && (!params.getString("originalId").isEmpty())) {
          urlBuilder.addQueryParameter("original_id", escapeString(params.getString("originalId")));
        }

        if (params.has("bssStands") && (!params.getString("bssStands").isEmpty())) {
          urlBuilder.addQueryParameter("bss_stands", escapeString(String.valueOf(params.getBoolean("bssStands"))));
        }

        if (params.has("addPoiInfos") && (!params.getString("addPoiInfos").isEmpty())) {
          urlBuilder.addQueryParameter("add_poi_infos[]", escapeString(String.valueOf(params.getJSONArray("addPoiInfos"))));
        }

        HttpUrl url = urlBuilder
          .addPathSegments(path)
          .build();
        Request request = requestBuilder.url(url)
          .build();

        client.newCall(request).enqueue(new Callback() {

          @Override
          public void onFailure(@NonNull Call call, @NonNull IOException e) {
            String errorMessage = "Problem during request | " + String.valueOf(e.hashCode()) + ": " + e.getMessage();
            callbackContext.error(errorMessage);
          }

          @Override
          public void onResponse(@NonNull Call call, @NonNull Response response) {
            if (response.isSuccessful()) {
              try {
                JSONObject jsonObject = new JSONObject(Objects.requireNonNull(response.body()).string());
                callbackContext.success(jsonObject);
              } catch (Exception e) {
                String errorMessage = "Problem during response parsing";
                callbackContext.error(errorMessage);
              }
            } else {
              callbackContext.error("Unexpected code " + response.code() + " | message: " + response.message());
            }
          }
        });
      } catch (Exception e) {
        String errorMessage = "Problem during request building | " + e.hashCode() + ": " + e.getMessage();
        callbackContext.error(errorMessage);
      }
    });
  }

  private void coverageRegionUriPois(final JSONObject params, final CallbackContext callbackContext) {
    cordova.getThreadPool().execute(() -> {
      try {
        HttpUrl.Builder urlBuilder = new HttpUrl.Builder()
          .scheme("https")
          .host("api.navitia.io")
          .addPathSegment("v1");
        Request.Builder requestBuilder = new Request.Builder()
          .header("Authorization", token);
        String path = "/coverage/{region}/{uri}/pois".substring(1);

        if (params.has("region") && (!params.getString("region").isEmpty())) {
          path = path.replaceAll("\\{" + "region" + "\\}", escapeString(params.getString("region")));
        }

        if (params.has("uri") && (!params.getString("uri").isEmpty())) {
          path = path.replaceAll("\\{" + "uri" + "\\}", escapeString(params.getString("uri")));
        }

        if (params.has("startPage") && (!params.getString("startPage").isEmpty())) {
          urlBuilder.addQueryParameter("start_page", escapeString(String.valueOf(params.getInt("startPage"))));
        }

        if (params.has("count") && (!params.getString("count").isEmpty())) {
          urlBuilder.addQueryParameter("count", escapeString(String.valueOf(params.getInt("count"))));
        }

        if (params.has("depth") && (!params.getString("depth").isEmpty())) {
          urlBuilder.addQueryParameter("depth", escapeString(String.valueOf(params.getInt("depth"))));
        }

        if (params.has("forbiddenId") && (!params.getString("forbiddenId").isEmpty())) {
          urlBuilder.addQueryParameter("forbidden_id[]", escapeString(String.valueOf(params.getJSONArray("forbiddenId"))));
        }

        if (params.has("forbiddenUris") && (!params.getString("forbiddenUris").isEmpty())) {
          urlBuilder.addQueryParameter("forbidden_uris[]", escapeString(String.valueOf(params.getJSONArray("forbiddenUris"))));
        }

        if (params.has("externalCode") && (!params.getString("externalCode").isEmpty())) {
          urlBuilder.addQueryParameter("external_code", escapeString(params.getString("externalCode")));
        }

        if (params.has("headsign") && (!params.getString("headsign").isEmpty())) {
          urlBuilder.addQueryParameter("headsign", escapeString(params.getString("headsign")));
        }

        if (params.has("showCodes") && (!params.getString("showCodes").isEmpty())) {
          urlBuilder.addQueryParameter("show_codes", escapeString(String.valueOf(params.getBoolean("showCodes"))));
        }

        if (params.has("odtLevel") && (!params.getString("odtLevel").isEmpty())) {
          urlBuilder.addQueryParameter("odt_level", escapeString(params.getString("odtLevel")));
        }

        if (params.has("dataFreshness") && (!params.getString("dataFreshness").isEmpty())) {
          urlBuilder.addQueryParameter("data_freshness", escapeString(params.getString("dataFreshness")));
        }

        if (params.has("distance") && (!params.getString("distance").isEmpty())) {
          urlBuilder.addQueryParameter("distance", escapeString(String.valueOf(params.getInt("distance"))));
        }

        if (params.has("since") && (!params.getString("since").isEmpty())) {
          urlBuilder.addQueryParameter("since", escapeString(String.valueOf(params.getString("since"))));
        }

        if (params.has("until") && (!params.getString("until").isEmpty())) {
          urlBuilder.addQueryParameter("until", escapeString(String.valueOf(params.getString("until"))));
        }

        if (params.has("disableGeojson") && (!params.getString("disableGeojson").isEmpty())) {
          urlBuilder.addQueryParameter("disable_geojson", escapeString(String.valueOf(params.getBoolean("disableGeojson"))));
        }

        if (params.has("disableDisruption") && (!params.getString("disableDisruption").isEmpty())) {
          urlBuilder.addQueryParameter("disable_disruption", escapeString(String.valueOf(params.getBoolean("disableDisruption"))));
        }

        if (params.has("filter") && (!params.getString("filter").isEmpty())) {
          urlBuilder.addQueryParameter("filter", escapeString(params.getString("filter")));
        }

        if (params.has("tags") && (!params.getString("tags").isEmpty())) {
          urlBuilder.addQueryParameter("tags[]", escapeString(String.valueOf(params.getJSONArray("tags"))));
        }

        if (params.has("originalId") && (!params.getString("originalId").isEmpty())) {
          urlBuilder.addQueryParameter("original_id", escapeString(params.getString("originalId")));
        }

        if (params.has("bssStands") && (!params.getString("bssStands").isEmpty())) {
          urlBuilder.addQueryParameter("bss_stands", escapeString(String.valueOf(params.getBoolean("bssStands"))));
        }

        if (params.has("addPoiInfos") && (!params.getString("addPoiInfos").isEmpty())) {
          urlBuilder.addQueryParameter("add_poi_infos[]", escapeString(String.valueOf(params.getJSONArray("addPoiInfos"))));
        }

        HttpUrl url = urlBuilder
          .addPathSegments(path)
          .build();
        Request request = requestBuilder.url(url)
          .build();

        client.newCall(request).enqueue(new Callback() {

          @Override
          public void onFailure(@NonNull Call call, @NonNull IOException e) {
            String errorMessage = "Problem during request | " + String.valueOf(e.hashCode()) + ": " + e.getMessage();
            callbackContext.error(errorMessage);
          }

          @Override
          public void onResponse(@NonNull Call call, @NonNull Response response) {
            if (response.isSuccessful()) {
              try {
                JSONObject jsonObject = new JSONObject(Objects.requireNonNull(response.body()).string());
                callbackContext.success(jsonObject);
              } catch (Exception e) {
                String errorMessage = "Problem during response parsing";
                callbackContext.error(errorMessage);
              }
            } else {
              callbackContext.error("Unexpected code " + response.code() + " | message: " + response.message());
            }
          }
        });
      } catch (Exception e) {
        String errorMessage = "Problem during request building | " + e.hashCode() + ": " + e.getMessage();
        callbackContext.error(errorMessage);
      }
    });
  }

  private void coverageRegionUriPoisId(final JSONObject params, final CallbackContext callbackContext) {
    cordova.getThreadPool().execute(() -> {
      try {
        HttpUrl.Builder urlBuilder = new HttpUrl.Builder()
          .scheme("https")
          .host("api.navitia.io")
          .addPathSegment("v1");
        Request.Builder requestBuilder = new Request.Builder()
          .header("Authorization", token);
        String path = "/coverage/{region}/{uri}/pois/{id}".substring(1);

        if (params.has("region") && (!params.getString("region").isEmpty())) {
          path = path.replaceAll("\\{" + "region" + "\\}", escapeString(params.getString("region")));
        }

        if (params.has("uri") && (!params.getString("uri").isEmpty())) {
          path = path.replaceAll("\\{" + "uri" + "\\}", escapeString(params.getString("uri")));
        }

        if (params.has("id") && (!params.getString("id").isEmpty())) {
          path = path.replaceAll("\\{" + "id" + "\\}", escapeString(params.getString("id")));
        }

        if (params.has("startPage") && (!params.getString("startPage").isEmpty())) {
          urlBuilder.addQueryParameter("start_page", escapeString(String.valueOf(params.getInt("startPage"))));
        }

        if (params.has("count") && (!params.getString("count").isEmpty())) {
          urlBuilder.addQueryParameter("count", escapeString(String.valueOf(params.getInt("count"))));
        }

        if (params.has("depth") && (!params.getString("depth").isEmpty())) {
          urlBuilder.addQueryParameter("depth", escapeString(String.valueOf(params.getInt("depth"))));
        }

        if (params.has("forbiddenId") && (!params.getString("forbiddenId").isEmpty())) {
          urlBuilder.addQueryParameter("forbidden_id[]", escapeString(String.valueOf(params.getJSONArray("forbiddenId"))));
        }

        if (params.has("forbiddenUris") && (!params.getString("forbiddenUris").isEmpty())) {
          urlBuilder.addQueryParameter("forbidden_uris[]", escapeString(String.valueOf(params.getJSONArray("forbiddenUris"))));
        }

        if (params.has("externalCode") && (!params.getString("externalCode").isEmpty())) {
          urlBuilder.addQueryParameter("external_code", escapeString(params.getString("externalCode")));
        }

        if (params.has("headsign") && (!params.getString("headsign").isEmpty())) {
          urlBuilder.addQueryParameter("headsign", escapeString(params.getString("headsign")));
        }

        if (params.has("showCodes") && (!params.getString("showCodes").isEmpty())) {
          urlBuilder.addQueryParameter("show_codes", escapeString(String.valueOf(params.getBoolean("showCodes"))));
        }

        if (params.has("odtLevel") && (!params.getString("odtLevel").isEmpty())) {
          urlBuilder.addQueryParameter("odt_level", escapeString(params.getString("odtLevel")));
        }

        if (params.has("dataFreshness") && (!params.getString("dataFreshness").isEmpty())) {
          urlBuilder.addQueryParameter("data_freshness", escapeString(params.getString("dataFreshness")));
        }

        if (params.has("distance") && (!params.getString("distance").isEmpty())) {
          urlBuilder.addQueryParameter("distance", escapeString(String.valueOf(params.getInt("distance"))));
        }

        if (params.has("since") && (!params.getString("since").isEmpty())) {
          urlBuilder.addQueryParameter("since", escapeString(String.valueOf(params.getString("since"))));
        }

        if (params.has("until") && (!params.getString("until").isEmpty())) {
          urlBuilder.addQueryParameter("until", escapeString(String.valueOf(params.getString("until"))));
        }

        if (params.has("disableGeojson") && (!params.getString("disableGeojson").isEmpty())) {
          urlBuilder.addQueryParameter("disable_geojson", escapeString(String.valueOf(params.getBoolean("disableGeojson"))));
        }

        if (params.has("disableDisruption") && (!params.getString("disableDisruption").isEmpty())) {
          urlBuilder.addQueryParameter("disable_disruption", escapeString(String.valueOf(params.getBoolean("disableDisruption"))));
        }

        if (params.has("tags") && (!params.getString("tags").isEmpty())) {
          urlBuilder.addQueryParameter("tags[]", escapeString(String.valueOf(params.getJSONArray("tags"))));
        }

        if (params.has("originalId") && (!params.getString("originalId").isEmpty())) {
          urlBuilder.addQueryParameter("original_id", escapeString(params.getString("originalId")));
        }

        if (params.has("bssStands") && (!params.getString("bssStands").isEmpty())) {
          urlBuilder.addQueryParameter("bss_stands", escapeString(String.valueOf(params.getBoolean("bssStands"))));
        }

        if (params.has("addPoiInfos") && (!params.getString("addPoiInfos").isEmpty())) {
          urlBuilder.addQueryParameter("add_poi_infos[]", escapeString(String.valueOf(params.getJSONArray("addPoiInfos"))));
        }

        HttpUrl url = urlBuilder
          .addPathSegments(path)
          .build();
        Request request = requestBuilder.url(url)
          .build();

        client.newCall(request).enqueue(new Callback() {

          @Override
          public void onFailure(@NonNull Call call, @NonNull IOException e) {
            String errorMessage = "Problem during request | " + String.valueOf(e.hashCode()) + ": " + e.getMessage();
            callbackContext.error(errorMessage);
          }

          @Override
          public void onResponse(@NonNull Call call, @NonNull Response response) {
            if (response.isSuccessful()) {
              try {
                JSONObject jsonObject = new JSONObject(Objects.requireNonNull(response.body()).string());
                callbackContext.success(jsonObject);
              } catch (Exception e) {
                String errorMessage = "Problem during response parsing";
                callbackContext.error(errorMessage);
              }
            } else {
              callbackContext.error("Unexpected code " + response.code() + " | message: " + response.message());
            }
          }
        });
      } catch (Exception e) {
        String errorMessage = "Problem during request building | " + e.hashCode() + ": " + e.getMessage();
        callbackContext.error(errorMessage);
      }
    });
  }

  private void coverageLonLatPtObjects(final JSONObject params, final CallbackContext callbackContext) {
    cordova.getThreadPool().execute(() -> {
      try {
        HttpUrl.Builder urlBuilder = new HttpUrl.Builder()
          .scheme("https")
          .host("api.navitia.io")
          .addPathSegment("v1");
        Request.Builder requestBuilder = new Request.Builder()
          .header("Authorization", token);
        String path = "/coverage/{lon};{lat}/pt_objects".substring(1);

        if (params.has("q") && (!params.getString("q").isEmpty())) {
          urlBuilder.addQueryParameter("q", escapeString(params.getString("q")));
        }

        if (params.has("lat") && (!params.getString("lat").isEmpty())) {
          path = path.replaceAll("\\{" + "lat" + "\\}", escapeString(String.valueOf(params.getLong("lat"))));
        }

        if (params.has("lon") && (!params.getString("lon").isEmpty())) {
          path = path.replaceAll("\\{" + "lon" + "\\}", escapeString(String.valueOf(params.getLong("lon"))));
        }

        if (params.has("type") && (!params.getString("type").isEmpty())) {
          urlBuilder.addQueryParameter("type[]", escapeString(String.valueOf(params.getJSONArray("type"))));
        }

        if (params.has("count") && (!params.getString("count").isEmpty())) {
          urlBuilder.addQueryParameter("count", escapeString(String.valueOf(params.getInt("count"))));
        }

        if (params.has("adminUri") && (!params.getString("adminUri").isEmpty())) {
          urlBuilder.addQueryParameter("admin_uri[]", escapeString(String.valueOf(params.getJSONArray("adminUri"))));
        }

        if (params.has("depth") && (!params.getString("depth").isEmpty())) {
          urlBuilder.addQueryParameter("depth", escapeString(String.valueOf(params.getInt("depth"))));
        }

        if (params.has("disableGeojson") && (!params.getString("disableGeojson").isEmpty())) {
          urlBuilder.addQueryParameter("disable_geojson", escapeString(String.valueOf(params.getBoolean("disableGeojson"))));
        }

        if (params.has("disableDisruption") && (!params.getString("disableDisruption").isEmpty())) {
          urlBuilder.addQueryParameter("disable_disruption", escapeString(String.valueOf(params.getBoolean("disableDisruption"))));
        }

        if (params.has("filter") && (!params.getString("filter").isEmpty())) {
          urlBuilder.addQueryParameter("filter", escapeString(params.getString("filter")));
        }

        HttpUrl url = urlBuilder
          .addPathSegments(path)
          .build();
        Request request = requestBuilder.url(url)
          .build();

        client.newCall(request).enqueue(new Callback() {

          @Override
          public void onFailure(@NonNull Call call, @NonNull IOException e) {
            String errorMessage = "Problem during request | " + String.valueOf(e.hashCode()) + ": " + e.getMessage();
            callbackContext.error(errorMessage);
          }

          @Override
          public void onResponse(@NonNull Call call, @NonNull Response response) {
            if (response.isSuccessful()) {
              try {
                JSONObject jsonObject = new JSONObject(Objects.requireNonNull(response.body()).string());
                callbackContext.success(jsonObject);
              } catch (Exception e) {
                String errorMessage = "Problem during response parsing";
                callbackContext.error(errorMessage);
              }
            } else {
              callbackContext.error("Unexpected code " + response.code() + " | message: " + response.message());
            }
          }
        });
      } catch (Exception e) {
        String errorMessage = "Problem during request building | " + e.hashCode() + ": " + e.getMessage();
        callbackContext.error(errorMessage);
      }
    });
  }

  private void coverageRegionPtObjects(final JSONObject params, final CallbackContext callbackContext) {
    cordova.getThreadPool().execute(() -> {
      try {
        HttpUrl.Builder urlBuilder = new HttpUrl.Builder()
          .scheme("https")
          .host("api.navitia.io")
          .addPathSegment("v1");
        Request.Builder requestBuilder = new Request.Builder()
          .header("Authorization", token);
        String path = "/coverage/{region}/pt_objects".substring(1);

        if (params.has("q") && (!params.getString("q").isEmpty())) {
          urlBuilder.addQueryParameter("q", escapeString(params.getString("q")));
        }

        if (params.has("region") && (!params.getString("region").isEmpty())) {
          path = path.replaceAll("\\{" + "region" + "\\}", escapeString(params.getString("region")));
        }

        if (params.has("type") && (!params.getString("type").isEmpty())) {
          urlBuilder.addQueryParameter("type[]", escapeString(String.valueOf(params.getJSONArray("type"))));
        }

        if (params.has("count") && (!params.getString("count").isEmpty())) {
          urlBuilder.addQueryParameter("count", escapeString(String.valueOf(params.getInt("count"))));
        }

        if (params.has("adminUri") && (!params.getString("adminUri").isEmpty())) {
          urlBuilder.addQueryParameter("admin_uri[]", escapeString(String.valueOf(params.getJSONArray("adminUri"))));
        }

        if (params.has("depth") && (!params.getString("depth").isEmpty())) {
          urlBuilder.addQueryParameter("depth", escapeString(String.valueOf(params.getInt("depth"))));
        }

        if (params.has("disableGeojson") && (!params.getString("disableGeojson").isEmpty())) {
          urlBuilder.addQueryParameter("disable_geojson", escapeString(String.valueOf(params.getBoolean("disableGeojson"))));
        }

        if (params.has("disableDisruption") && (!params.getString("disableDisruption").isEmpty())) {
          urlBuilder.addQueryParameter("disable_disruption", escapeString(String.valueOf(params.getBoolean("disableDisruption"))));
        }

        if (params.has("filter") && (!params.getString("filter").isEmpty())) {
          urlBuilder.addQueryParameter("filter", escapeString(params.getString("filter")));
        }

        HttpUrl url = urlBuilder
          .addPathSegments(path)
          .build();
        Request request = requestBuilder.url(url)
          .build();

        client.newCall(request).enqueue(new Callback() {

          @Override
          public void onFailure(@NonNull Call call, @NonNull IOException e) {
            String errorMessage = "Problem during request | " + String.valueOf(e.hashCode()) + ": " + e.getMessage();
            callbackContext.error(errorMessage);
          }

          @Override
          public void onResponse(@NonNull Call call, @NonNull Response response) {
            if (response.isSuccessful()) {
              try {
                JSONObject jsonObject = new JSONObject(Objects.requireNonNull(response.body()).string());
                callbackContext.success(jsonObject);
              } catch (Exception e) {
                String errorMessage = "Problem during response parsing";
                callbackContext.error(errorMessage);
              }
            } else {
              callbackContext.error("Unexpected code " + response.code() + " | message: " + response.message());
            }
          }
        });
      } catch (Exception e) {
        String errorMessage = "Problem during request building | " + e.hashCode() + ": " + e.getMessage();
        callbackContext.error(errorMessage);
      }
    });
  }

  private void coverageLonLatUriRouteSchedules(final JSONObject params, final CallbackContext callbackContext) {
    cordova.getThreadPool().execute(() -> {
      try {
        HttpUrl.Builder urlBuilder = new HttpUrl.Builder()
          .scheme("https")
          .host("api.navitia.io")
          .addPathSegment("v1");
        Request.Builder requestBuilder = new Request.Builder()
          .header("Authorization", token);
        String path = "/coverage/{lon};{lat}/{uri}/route_schedules".substring(1);

        if (params.has("lat") && (!params.getString("lat").isEmpty())) {
          path = path.replaceAll("\\{" + "lat" + "\\}", escapeString(String.valueOf(params.getLong("lat"))));
        }

        if (params.has("lon") && (!params.getString("lon").isEmpty())) {
          path = path.replaceAll("\\{" + "lon" + "\\}", escapeString(String.valueOf(params.getLong("lon"))));
        }

        if (params.has("uri") && (!params.getString("uri").isEmpty())) {
          path = path.replaceAll("\\{" + "uri" + "\\}", escapeString(params.getString("uri")));
        }

        if (params.has("filter") && (!params.getString("filter").isEmpty())) {
          urlBuilder.addQueryParameter("filter", escapeString(params.getString("filter")));
        }

        if (params.has("fromDatetime") && (!params.getString("fromDatetime").isEmpty())) {
          urlBuilder.addQueryParameter("from_datetime", escapeString(String.valueOf(params.getString("fromDatetime"))));
        }

        if (params.has("untilDatetime") && (!params.getString("untilDatetime").isEmpty())) {
          urlBuilder.addQueryParameter("until_datetime", escapeString(String.valueOf(params.getString("untilDatetime"))));
        }

        if (params.has("duration") && (!params.getString("duration").isEmpty())) {
          urlBuilder.addQueryParameter("duration", escapeString(String.valueOf(params.getInt("duration"))));
        }

        if (params.has("depth") && (!params.getString("depth").isEmpty())) {
          urlBuilder.addQueryParameter("depth", escapeString(String.valueOf(params.getInt("depth"))));
        }

        if (params.has("count") && (!params.getString("count").isEmpty())) {
          urlBuilder.addQueryParameter("count", escapeString(String.valueOf(params.getInt("count"))));
        }

        if (params.has("startPage") && (!params.getString("startPage").isEmpty())) {
          urlBuilder.addQueryParameter("start_page", escapeString(String.valueOf(params.getInt("startPage"))));
        }

        if (params.has("maxDateTimes") && (!params.getString("maxDateTimes").isEmpty())) {
          urlBuilder.addQueryParameter("max_date_times", escapeString(String.valueOf(params.getInt("maxDateTimes"))));
        }

        if (params.has("forbiddenId") && (!params.getString("forbiddenId").isEmpty())) {
          urlBuilder.addQueryParameter("forbidden_id[]", escapeString(String.valueOf(params.getJSONArray("forbiddenId"))));
        }

        if (params.has("forbiddenUris") && (!params.getString("forbiddenUris").isEmpty())) {
          urlBuilder.addQueryParameter("forbidden_uris[]", escapeString(String.valueOf(params.getJSONArray("forbiddenUris"))));
        }

        if (params.has("calendar") && (!params.getString("calendar").isEmpty())) {
          urlBuilder.addQueryParameter("calendar", escapeString(params.getString("calendar")));
        }

        if (params.has("distance") && (!params.getString("distance").isEmpty())) {
          urlBuilder.addQueryParameter("distance", escapeString(String.valueOf(params.getInt("distance"))));
        }

        if (params.has("showCodes") && (!params.getString("showCodes").isEmpty())) {
          urlBuilder.addQueryParameter("show_codes", escapeString(String.valueOf(params.getBoolean("showCodes"))));
        }

        if (params.has("dataFreshness") && (!params.getString("dataFreshness").isEmpty())) {
          urlBuilder.addQueryParameter("data_freshness", escapeString(params.getString("dataFreshness")));
        }

        if (params.has("itemsPerSchedule") && (!params.getString("itemsPerSchedule").isEmpty())) {
          urlBuilder.addQueryParameter("items_per_schedule", escapeString(String.valueOf(params.getInt("itemsPerSchedule"))));
        }

        if (params.has("disableGeojson") && (!params.getString("disableGeojson").isEmpty())) {
          urlBuilder.addQueryParameter("disable_geojson", escapeString(String.valueOf(params.getBoolean("disableGeojson"))));
        }

        if (params.has("directionType") && (!params.getString("directionType").isEmpty())) {
          urlBuilder.addQueryParameter("direction_type", escapeString(params.getString("directionType")));
        }

        HttpUrl url = urlBuilder
          .addPathSegments(path)
          .build();
        Request request = requestBuilder.url(url)
          .build();

        client.newCall(request).enqueue(new Callback() {

          @Override
          public void onFailure(@NonNull Call call, @NonNull IOException e) {
            String errorMessage = "Problem during request | " + String.valueOf(e.hashCode()) + ": " + e.getMessage();
            callbackContext.error(errorMessage);
          }

          @Override
          public void onResponse(@NonNull Call call, @NonNull Response response) {
            if (response.isSuccessful()) {
              try {
                JSONObject jsonObject = new JSONObject(Objects.requireNonNull(response.body()).string());
                callbackContext.success(jsonObject);
              } catch (Exception e) {
                String errorMessage = "Problem during response parsing";
                callbackContext.error(errorMessage);
              }
            } else {
              callbackContext.error("Unexpected code " + response.code() + " | message: " + response.message());
            }
          }
        });
      } catch (Exception e) {
        String errorMessage = "Problem during request building | " + e.hashCode() + ": " + e.getMessage();
        callbackContext.error(errorMessage);
      }
    });
  }

  private void coverageRegionUriRouteSchedules(final JSONObject params, final CallbackContext callbackContext) {
    cordova.getThreadPool().execute(() -> {
      try {
        HttpUrl.Builder urlBuilder = new HttpUrl.Builder()
          .scheme("https")
          .host("api.navitia.io")
          .addPathSegment("v1");
        Request.Builder requestBuilder = new Request.Builder()
          .header("Authorization", token);
        String path = "/coverage/{region}/{uri}/route_schedules".substring(1);

        if (params.has("region") && (!params.getString("region").isEmpty())) {
          path = path.replaceAll("\\{" + "region" + "\\}", escapeString(params.getString("region")));
        }

        if (params.has("uri") && (!params.getString("uri").isEmpty())) {
          path = path.replaceAll("\\{" + "uri" + "\\}", escapeString(params.getString("uri")));
        }

        if (params.has("filter") && (!params.getString("filter").isEmpty())) {
          urlBuilder.addQueryParameter("filter", escapeString(params.getString("filter")));
        }

        if (params.has("fromDatetime") && (!params.getString("fromDatetime").isEmpty())) {
          urlBuilder.addQueryParameter("from_datetime", escapeString(String.valueOf(params.getString("fromDatetime"))));
        }

        if (params.has("untilDatetime") && (!params.getString("untilDatetime").isEmpty())) {
          urlBuilder.addQueryParameter("until_datetime", escapeString(String.valueOf(params.getString("untilDatetime"))));
        }

        if (params.has("duration") && (!params.getString("duration").isEmpty())) {
          urlBuilder.addQueryParameter("duration", escapeString(String.valueOf(params.getInt("duration"))));
        }

        if (params.has("depth") && (!params.getString("depth").isEmpty())) {
          urlBuilder.addQueryParameter("depth", escapeString(String.valueOf(params.getInt("depth"))));
        }

        if (params.has("count") && (!params.getString("count").isEmpty())) {
          urlBuilder.addQueryParameter("count", escapeString(String.valueOf(params.getInt("count"))));
        }

        if (params.has("startPage") && (!params.getString("startPage").isEmpty())) {
          urlBuilder.addQueryParameter("start_page", escapeString(String.valueOf(params.getInt("startPage"))));
        }

        if (params.has("maxDateTimes") && (!params.getString("maxDateTimes").isEmpty())) {
          urlBuilder.addQueryParameter("max_date_times", escapeString(String.valueOf(params.getInt("maxDateTimes"))));
        }

        if (params.has("forbiddenId") && (!params.getString("forbiddenId").isEmpty())) {
          urlBuilder.addQueryParameter("forbidden_id[]", escapeString(String.valueOf(params.getJSONArray("forbiddenId"))));
        }

        if (params.has("forbiddenUris") && (!params.getString("forbiddenUris").isEmpty())) {
          urlBuilder.addQueryParameter("forbidden_uris[]", escapeString(String.valueOf(params.getJSONArray("forbiddenUris"))));
        }

        if (params.has("calendar") && (!params.getString("calendar").isEmpty())) {
          urlBuilder.addQueryParameter("calendar", escapeString(params.getString("calendar")));
        }

        if (params.has("distance") && (!params.getString("distance").isEmpty())) {
          urlBuilder.addQueryParameter("distance", escapeString(String.valueOf(params.getInt("distance"))));
        }

        if (params.has("showCodes") && (!params.getString("showCodes").isEmpty())) {
          urlBuilder.addQueryParameter("show_codes", escapeString(String.valueOf(params.getBoolean("showCodes"))));
        }

        if (params.has("dataFreshness") && (!params.getString("dataFreshness").isEmpty())) {
          urlBuilder.addQueryParameter("data_freshness", escapeString(params.getString("dataFreshness")));
        }

        if (params.has("itemsPerSchedule") && (!params.getString("itemsPerSchedule").isEmpty())) {
          urlBuilder.addQueryParameter("items_per_schedule", escapeString(String.valueOf(params.getInt("itemsPerSchedule"))));
        }

        if (params.has("disableGeojson") && (!params.getString("disableGeojson").isEmpty())) {
          urlBuilder.addQueryParameter("disable_geojson", escapeString(String.valueOf(params.getBoolean("disableGeojson"))));
        }

        if (params.has("directionType") && (!params.getString("directionType").isEmpty())) {
          urlBuilder.addQueryParameter("direction_type", escapeString(params.getString("directionType")));
        }

        HttpUrl url = urlBuilder
          .addPathSegments(path)
          .build();
        Request request = requestBuilder.url(url)
          .build();

        client.newCall(request).enqueue(new Callback() {

          @Override
          public void onFailure(@NonNull Call call, @NonNull IOException e) {
            String errorMessage = "Problem during request | " + String.valueOf(e.hashCode()) + ": " + e.getMessage();
            callbackContext.error(errorMessage);
          }

          @Override
          public void onResponse(@NonNull Call call, @NonNull Response response) {
            if (response.isSuccessful()) {
              try {
                JSONObject jsonObject = new JSONObject(Objects.requireNonNull(response.body()).string());
                callbackContext.success(jsonObject);
              } catch (Exception e) {
                String errorMessage = "Problem during response parsing";
                callbackContext.error(errorMessage);
              }
            } else {
              callbackContext.error("Unexpected code " + response.code() + " | message: " + response.message());
            }
          }
        });
      } catch (Exception e) {
        String errorMessage = "Problem during request building | " + e.hashCode() + ": " + e.getMessage();
        callbackContext.error(errorMessage);
      }
    });
  }

  private void routeSchedules(final JSONObject params, final CallbackContext callbackContext) {
    cordova.getThreadPool().execute(() -> {
      try {
        HttpUrl.Builder urlBuilder = new HttpUrl.Builder()
          .scheme("https")
          .host("api.navitia.io")
          .addPathSegment("v1");
        Request.Builder requestBuilder = new Request.Builder()
          .header("Authorization", token);
        String path = "/route_schedules".substring(1);

        if (params.has("filter") && (!params.getString("filter").isEmpty())) {
          urlBuilder.addQueryParameter("filter", escapeString(params.getString("filter")));
        }

        if (params.has("fromDatetime") && (!params.getString("fromDatetime").isEmpty())) {
          urlBuilder.addQueryParameter("from_datetime", escapeString(String.valueOf(params.getString("fromDatetime"))));
        }

        if (params.has("untilDatetime") && (!params.getString("untilDatetime").isEmpty())) {
          urlBuilder.addQueryParameter("until_datetime", escapeString(String.valueOf(params.getString("untilDatetime"))));
        }

        if (params.has("duration") && (!params.getString("duration").isEmpty())) {
          urlBuilder.addQueryParameter("duration", escapeString(String.valueOf(params.getInt("duration"))));
        }

        if (params.has("depth") && (!params.getString("depth").isEmpty())) {
          urlBuilder.addQueryParameter("depth", escapeString(String.valueOf(params.getInt("depth"))));
        }

        if (params.has("count") && (!params.getString("count").isEmpty())) {
          urlBuilder.addQueryParameter("count", escapeString(String.valueOf(params.getInt("count"))));
        }

        if (params.has("startPage") && (!params.getString("startPage").isEmpty())) {
          urlBuilder.addQueryParameter("start_page", escapeString(String.valueOf(params.getInt("startPage"))));
        }

        if (params.has("maxDateTimes") && (!params.getString("maxDateTimes").isEmpty())) {
          urlBuilder.addQueryParameter("max_date_times", escapeString(String.valueOf(params.getInt("maxDateTimes"))));
        }

        if (params.has("forbiddenId") && (!params.getString("forbiddenId").isEmpty())) {
          urlBuilder.addQueryParameter("forbidden_id[]", escapeString(String.valueOf(params.getJSONArray("forbiddenId"))));
        }

        if (params.has("forbiddenUris") && (!params.getString("forbiddenUris").isEmpty())) {
          urlBuilder.addQueryParameter("forbidden_uris[]", escapeString(String.valueOf(params.getJSONArray("forbiddenUris"))));
        }

        if (params.has("calendar") && (!params.getString("calendar").isEmpty())) {
          urlBuilder.addQueryParameter("calendar", escapeString(params.getString("calendar")));
        }

        if (params.has("distance") && (!params.getString("distance").isEmpty())) {
          urlBuilder.addQueryParameter("distance", escapeString(String.valueOf(params.getInt("distance"))));
        }

        if (params.has("showCodes") && (!params.getString("showCodes").isEmpty())) {
          urlBuilder.addQueryParameter("show_codes", escapeString(String.valueOf(params.getBoolean("showCodes"))));
        }

        if (params.has("dataFreshness") && (!params.getString("dataFreshness").isEmpty())) {
          urlBuilder.addQueryParameter("data_freshness", escapeString(params.getString("dataFreshness")));
        }

        if (params.has("itemsPerSchedule") && (!params.getString("itemsPerSchedule").isEmpty())) {
          urlBuilder.addQueryParameter("items_per_schedule", escapeString(String.valueOf(params.getInt("itemsPerSchedule"))));
        }

        if (params.has("disableGeojson") && (!params.getString("disableGeojson").isEmpty())) {
          urlBuilder.addQueryParameter("disable_geojson", escapeString(String.valueOf(params.getBoolean("disableGeojson"))));
        }

        if (params.has("directionType") && (!params.getString("directionType").isEmpty())) {
          urlBuilder.addQueryParameter("direction_type", escapeString(params.getString("directionType")));
        }

        HttpUrl url = urlBuilder
          .addPathSegments(path)
          .build();
        Request request = requestBuilder.url(url)
          .build();

        client.newCall(request).enqueue(new Callback() {

          @Override
          public void onFailure(@NonNull Call call, @NonNull IOException e) {
            String errorMessage = "Problem during request | " + String.valueOf(e.hashCode()) + ": " + e.getMessage();
            callbackContext.error(errorMessage);
          }

          @Override
          public void onResponse(@NonNull Call call, @NonNull Response response) {
            if (response.isSuccessful()) {
              try {
                JSONObject jsonObject = new JSONObject(Objects.requireNonNull(response.body()).string());
                callbackContext.success(jsonObject);
              } catch (Exception e) {
                String errorMessage = "Problem during response parsing";
                callbackContext.error(errorMessage);
              }
            } else {
              callbackContext.error("Unexpected code " + response.code() + " | message: " + response.message());
            }
          }
        });
      } catch (Exception e) {
        String errorMessage = "Problem during request building | " + e.hashCode() + ": " + e.getMessage();
        callbackContext.error(errorMessage);
      }
    });
  }

  private void coverageLonLatRoutes(final JSONObject params, final CallbackContext callbackContext) {
    cordova.getThreadPool().execute(() -> {
      try {
        HttpUrl.Builder urlBuilder = new HttpUrl.Builder()
          .scheme("https")
          .host("api.navitia.io")
          .addPathSegment("v1");
        Request.Builder requestBuilder = new Request.Builder()
          .header("Authorization", token);
        String path = "/coverage/{lon};{lat}/routes".substring(1);

        if (params.has("lat") && (!params.getString("lat").isEmpty())) {
          path = path.replaceAll("\\{" + "lat" + "\\}", escapeString(String.valueOf(params.getLong("lat"))));
        }

        if (params.has("lon") && (!params.getString("lon").isEmpty())) {
          path = path.replaceAll("\\{" + "lon" + "\\}", escapeString(String.valueOf(params.getLong("lon"))));
        }

        if (params.has("startPage") && (!params.getString("startPage").isEmpty())) {
          urlBuilder.addQueryParameter("start_page", escapeString(String.valueOf(params.getInt("startPage"))));
        }

        if (params.has("count") && (!params.getString("count").isEmpty())) {
          urlBuilder.addQueryParameter("count", escapeString(String.valueOf(params.getInt("count"))));
        }

        if (params.has("depth") && (!params.getString("depth").isEmpty())) {
          urlBuilder.addQueryParameter("depth", escapeString(String.valueOf(params.getInt("depth"))));
        }

        if (params.has("forbiddenId") && (!params.getString("forbiddenId").isEmpty())) {
          urlBuilder.addQueryParameter("forbidden_id[]", escapeString(String.valueOf(params.getJSONArray("forbiddenId"))));
        }

        if (params.has("forbiddenUris") && (!params.getString("forbiddenUris").isEmpty())) {
          urlBuilder.addQueryParameter("forbidden_uris[]", escapeString(String.valueOf(params.getJSONArray("forbiddenUris"))));
        }

        if (params.has("externalCode") && (!params.getString("externalCode").isEmpty())) {
          urlBuilder.addQueryParameter("external_code", escapeString(params.getString("externalCode")));
        }

        if (params.has("headsign") && (!params.getString("headsign").isEmpty())) {
          urlBuilder.addQueryParameter("headsign", escapeString(params.getString("headsign")));
        }

        if (params.has("showCodes") && (!params.getString("showCodes").isEmpty())) {
          urlBuilder.addQueryParameter("show_codes", escapeString(String.valueOf(params.getBoolean("showCodes"))));
        }

        if (params.has("odtLevel") && (!params.getString("odtLevel").isEmpty())) {
          urlBuilder.addQueryParameter("odt_level", escapeString(params.getString("odtLevel")));
        }

        if (params.has("dataFreshness") && (!params.getString("dataFreshness").isEmpty())) {
          urlBuilder.addQueryParameter("data_freshness", escapeString(params.getString("dataFreshness")));
        }

        if (params.has("distance") && (!params.getString("distance").isEmpty())) {
          urlBuilder.addQueryParameter("distance", escapeString(String.valueOf(params.getInt("distance"))));
        }

        if (params.has("since") && (!params.getString("since").isEmpty())) {
          urlBuilder.addQueryParameter("since", escapeString(String.valueOf(params.getString("since"))));
        }

        if (params.has("until") && (!params.getString("until").isEmpty())) {
          urlBuilder.addQueryParameter("until", escapeString(String.valueOf(params.getString("until"))));
        }

        if (params.has("disableGeojson") && (!params.getString("disableGeojson").isEmpty())) {
          urlBuilder.addQueryParameter("disable_geojson", escapeString(String.valueOf(params.getBoolean("disableGeojson"))));
        }

        if (params.has("disableDisruption") && (!params.getString("disableDisruption").isEmpty())) {
          urlBuilder.addQueryParameter("disable_disruption", escapeString(String.valueOf(params.getBoolean("disableDisruption"))));
        }

        if (params.has("filter") && (!params.getString("filter").isEmpty())) {
          urlBuilder.addQueryParameter("filter", escapeString(params.getString("filter")));
        }

        if (params.has("tags") && (!params.getString("tags").isEmpty())) {
          urlBuilder.addQueryParameter("tags[]", escapeString(String.valueOf(params.getJSONArray("tags"))));
        }

        if (params.has("originalId") && (!params.getString("originalId").isEmpty())) {
          urlBuilder.addQueryParameter("original_id", escapeString(params.getString("originalId")));
        }

        HttpUrl url = urlBuilder
          .addPathSegments(path)
          .build();
        Request request = requestBuilder.url(url)
          .build();

        client.newCall(request).enqueue(new Callback() {

          @Override
          public void onFailure(@NonNull Call call, @NonNull IOException e) {
            String errorMessage = "Problem during request | " + String.valueOf(e.hashCode()) + ": " + e.getMessage();
            callbackContext.error(errorMessage);
          }

          @Override
          public void onResponse(@NonNull Call call, @NonNull Response response) {
            if (response.isSuccessful()) {
              try {
                JSONObject jsonObject = new JSONObject(Objects.requireNonNull(response.body()).string());
                callbackContext.success(jsonObject);
              } catch (Exception e) {
                String errorMessage = "Problem during response parsing";
                callbackContext.error(errorMessage);
              }
            } else {
              callbackContext.error("Unexpected code " + response.code() + " | message: " + response.message());
            }
          }
        });
      } catch (Exception e) {
        String errorMessage = "Problem during request building | " + e.hashCode() + ": " + e.getMessage();
        callbackContext.error(errorMessage);
      }
    });
  }

  private void coverageLonLatRoutesId(final JSONObject params, final CallbackContext callbackContext) {
    cordova.getThreadPool().execute(() -> {
      try {
        HttpUrl.Builder urlBuilder = new HttpUrl.Builder()
          .scheme("https")
          .host("api.navitia.io")
          .addPathSegment("v1");
        Request.Builder requestBuilder = new Request.Builder()
          .header("Authorization", token);
        String path = "/coverage/{lon};{lat}/routes/{id}".substring(1);

        if (params.has("lat") && (!params.getString("lat").isEmpty())) {
          path = path.replaceAll("\\{" + "lat" + "\\}", escapeString(String.valueOf(params.getLong("lat"))));
        }

        if (params.has("lon") && (!params.getString("lon").isEmpty())) {
          path = path.replaceAll("\\{" + "lon" + "\\}", escapeString(String.valueOf(params.getLong("lon"))));
        }

        if (params.has("id") && (!params.getString("id").isEmpty())) {
          path = path.replaceAll("\\{" + "id" + "\\}", escapeString(params.getString("id")));
        }

        if (params.has("startPage") && (!params.getString("startPage").isEmpty())) {
          urlBuilder.addQueryParameter("start_page", escapeString(String.valueOf(params.getInt("startPage"))));
        }

        if (params.has("count") && (!params.getString("count").isEmpty())) {
          urlBuilder.addQueryParameter("count", escapeString(String.valueOf(params.getInt("count"))));
        }

        if (params.has("depth") && (!params.getString("depth").isEmpty())) {
          urlBuilder.addQueryParameter("depth", escapeString(String.valueOf(params.getInt("depth"))));
        }

        if (params.has("forbiddenId") && (!params.getString("forbiddenId").isEmpty())) {
          urlBuilder.addQueryParameter("forbidden_id[]", escapeString(String.valueOf(params.getJSONArray("forbiddenId"))));
        }

        if (params.has("forbiddenUris") && (!params.getString("forbiddenUris").isEmpty())) {
          urlBuilder.addQueryParameter("forbidden_uris[]", escapeString(String.valueOf(params.getJSONArray("forbiddenUris"))));
        }

        if (params.has("externalCode") && (!params.getString("externalCode").isEmpty())) {
          urlBuilder.addQueryParameter("external_code", escapeString(params.getString("externalCode")));
        }

        if (params.has("headsign") && (!params.getString("headsign").isEmpty())) {
          urlBuilder.addQueryParameter("headsign", escapeString(params.getString("headsign")));
        }

        if (params.has("showCodes") && (!params.getString("showCodes").isEmpty())) {
          urlBuilder.addQueryParameter("show_codes", escapeString(String.valueOf(params.getBoolean("showCodes"))));
        }

        if (params.has("odtLevel") && (!params.getString("odtLevel").isEmpty())) {
          urlBuilder.addQueryParameter("odt_level", escapeString(params.getString("odtLevel")));
        }

        if (params.has("dataFreshness") && (!params.getString("dataFreshness").isEmpty())) {
          urlBuilder.addQueryParameter("data_freshness", escapeString(params.getString("dataFreshness")));
        }

        if (params.has("distance") && (!params.getString("distance").isEmpty())) {
          urlBuilder.addQueryParameter("distance", escapeString(String.valueOf(params.getInt("distance"))));
        }

        if (params.has("since") && (!params.getString("since").isEmpty())) {
          urlBuilder.addQueryParameter("since", escapeString(String.valueOf(params.getString("since"))));
        }

        if (params.has("until") && (!params.getString("until").isEmpty())) {
          urlBuilder.addQueryParameter("until", escapeString(String.valueOf(params.getString("until"))));
        }

        if (params.has("disableGeojson") && (!params.getString("disableGeojson").isEmpty())) {
          urlBuilder.addQueryParameter("disable_geojson", escapeString(String.valueOf(params.getBoolean("disableGeojson"))));
        }

        if (params.has("disableDisruption") && (!params.getString("disableDisruption").isEmpty())) {
          urlBuilder.addQueryParameter("disable_disruption", escapeString(String.valueOf(params.getBoolean("disableDisruption"))));
        }

        if (params.has("tags") && (!params.getString("tags").isEmpty())) {
          urlBuilder.addQueryParameter("tags[]", escapeString(String.valueOf(params.getJSONArray("tags"))));
        }

        if (params.has("originalId") && (!params.getString("originalId").isEmpty())) {
          urlBuilder.addQueryParameter("original_id", escapeString(params.getString("originalId")));
        }

        HttpUrl url = urlBuilder
          .addPathSegments(path)
          .build();
        Request request = requestBuilder.url(url)
          .build();

        client.newCall(request).enqueue(new Callback() {

          @Override
          public void onFailure(@NonNull Call call, @NonNull IOException e) {
            String errorMessage = "Problem during request | " + String.valueOf(e.hashCode()) + ": " + e.getMessage();
            callbackContext.error(errorMessage);
          }

          @Override
          public void onResponse(@NonNull Call call, @NonNull Response response) {
            if (response.isSuccessful()) {
              try {
                JSONObject jsonObject = new JSONObject(Objects.requireNonNull(response.body()).string());
                callbackContext.success(jsonObject);
              } catch (Exception e) {
                String errorMessage = "Problem during response parsing";
                callbackContext.error(errorMessage);
              }
            } else {
              callbackContext.error("Unexpected code " + response.code() + " | message: " + response.message());
            }
          }
        });
      } catch (Exception e) {
        String errorMessage = "Problem during request building | " + e.hashCode() + ": " + e.getMessage();
        callbackContext.error(errorMessage);
      }
    });
  }

  private void coverageLonLatUriRoutes(final JSONObject params, final CallbackContext callbackContext) {
    cordova.getThreadPool().execute(() -> {
      try {
        HttpUrl.Builder urlBuilder = new HttpUrl.Builder()
          .scheme("https")
          .host("api.navitia.io")
          .addPathSegment("v1");
        Request.Builder requestBuilder = new Request.Builder()
          .header("Authorization", token);
        String path = "/coverage/{lon};{lat}/{uri}/routes".substring(1);

        if (params.has("lat") && (!params.getString("lat").isEmpty())) {
          path = path.replaceAll("\\{" + "lat" + "\\}", escapeString(String.valueOf(params.getLong("lat"))));
        }

        if (params.has("lon") && (!params.getString("lon").isEmpty())) {
          path = path.replaceAll("\\{" + "lon" + "\\}", escapeString(String.valueOf(params.getLong("lon"))));
        }

        if (params.has("uri") && (!params.getString("uri").isEmpty())) {
          path = path.replaceAll("\\{" + "uri" + "\\}", escapeString(params.getString("uri")));
        }

        if (params.has("startPage") && (!params.getString("startPage").isEmpty())) {
          urlBuilder.addQueryParameter("start_page", escapeString(String.valueOf(params.getInt("startPage"))));
        }

        if (params.has("count") && (!params.getString("count").isEmpty())) {
          urlBuilder.addQueryParameter("count", escapeString(String.valueOf(params.getInt("count"))));
        }

        if (params.has("depth") && (!params.getString("depth").isEmpty())) {
          urlBuilder.addQueryParameter("depth", escapeString(String.valueOf(params.getInt("depth"))));
        }

        if (params.has("forbiddenId") && (!params.getString("forbiddenId").isEmpty())) {
          urlBuilder.addQueryParameter("forbidden_id[]", escapeString(String.valueOf(params.getJSONArray("forbiddenId"))));
        }

        if (params.has("forbiddenUris") && (!params.getString("forbiddenUris").isEmpty())) {
          urlBuilder.addQueryParameter("forbidden_uris[]", escapeString(String.valueOf(params.getJSONArray("forbiddenUris"))));
        }

        if (params.has("externalCode") && (!params.getString("externalCode").isEmpty())) {
          urlBuilder.addQueryParameter("external_code", escapeString(params.getString("externalCode")));
        }

        if (params.has("headsign") && (!params.getString("headsign").isEmpty())) {
          urlBuilder.addQueryParameter("headsign", escapeString(params.getString("headsign")));
        }

        if (params.has("showCodes") && (!params.getString("showCodes").isEmpty())) {
          urlBuilder.addQueryParameter("show_codes", escapeString(String.valueOf(params.getBoolean("showCodes"))));
        }

        if (params.has("odtLevel") && (!params.getString("odtLevel").isEmpty())) {
          urlBuilder.addQueryParameter("odt_level", escapeString(params.getString("odtLevel")));
        }

        if (params.has("dataFreshness") && (!params.getString("dataFreshness").isEmpty())) {
          urlBuilder.addQueryParameter("data_freshness", escapeString(params.getString("dataFreshness")));
        }

        if (params.has("distance") && (!params.getString("distance").isEmpty())) {
          urlBuilder.addQueryParameter("distance", escapeString(String.valueOf(params.getInt("distance"))));
        }

        if (params.has("since") && (!params.getString("since").isEmpty())) {
          urlBuilder.addQueryParameter("since", escapeString(String.valueOf(params.getString("since"))));
        }

        if (params.has("until") && (!params.getString("until").isEmpty())) {
          urlBuilder.addQueryParameter("until", escapeString(String.valueOf(params.getString("until"))));
        }

        if (params.has("disableGeojson") && (!params.getString("disableGeojson").isEmpty())) {
          urlBuilder.addQueryParameter("disable_geojson", escapeString(String.valueOf(params.getBoolean("disableGeojson"))));
        }

        if (params.has("disableDisruption") && (!params.getString("disableDisruption").isEmpty())) {
          urlBuilder.addQueryParameter("disable_disruption", escapeString(String.valueOf(params.getBoolean("disableDisruption"))));
        }

        if (params.has("filter") && (!params.getString("filter").isEmpty())) {
          urlBuilder.addQueryParameter("filter", escapeString(params.getString("filter")));
        }

        if (params.has("tags") && (!params.getString("tags").isEmpty())) {
          urlBuilder.addQueryParameter("tags[]", escapeString(String.valueOf(params.getJSONArray("tags"))));
        }

        if (params.has("originalId") && (!params.getString("originalId").isEmpty())) {
          urlBuilder.addQueryParameter("original_id", escapeString(params.getString("originalId")));
        }

        HttpUrl url = urlBuilder
          .addPathSegments(path)
          .build();
        Request request = requestBuilder.url(url)
          .build();

        client.newCall(request).enqueue(new Callback() {

          @Override
          public void onFailure(@NonNull Call call, @NonNull IOException e) {
            String errorMessage = "Problem during request | " + String.valueOf(e.hashCode()) + ": " + e.getMessage();
            callbackContext.error(errorMessage);
          }

          @Override
          public void onResponse(@NonNull Call call, @NonNull Response response) {
            if (response.isSuccessful()) {
              try {
                JSONObject jsonObject = new JSONObject(Objects.requireNonNull(response.body()).string());
                callbackContext.success(jsonObject);
              } catch (Exception e) {
                String errorMessage = "Problem during response parsing";
                callbackContext.error(errorMessage);
              }
            } else {
              callbackContext.error("Unexpected code " + response.code() + " | message: " + response.message());
            }
          }
        });
      } catch (Exception e) {
        String errorMessage = "Problem during request building | " + e.hashCode() + ": " + e.getMessage();
        callbackContext.error(errorMessage);
      }
    });
  }

  private void coverageLonLatUriRoutesId(final JSONObject params, final CallbackContext callbackContext) {
    cordova.getThreadPool().execute(() -> {
      try {
        HttpUrl.Builder urlBuilder = new HttpUrl.Builder()
          .scheme("https")
          .host("api.navitia.io")
          .addPathSegment("v1");
        Request.Builder requestBuilder = new Request.Builder()
          .header("Authorization", token);
        String path = "/coverage/{lon};{lat}/{uri}/routes/{id}".substring(1);

        if (params.has("lat") && (!params.getString("lat").isEmpty())) {
          path = path.replaceAll("\\{" + "lat" + "\\}", escapeString(String.valueOf(params.getLong("lat"))));
        }

        if (params.has("lon") && (!params.getString("lon").isEmpty())) {
          path = path.replaceAll("\\{" + "lon" + "\\}", escapeString(String.valueOf(params.getLong("lon"))));
        }

        if (params.has("uri") && (!params.getString("uri").isEmpty())) {
          path = path.replaceAll("\\{" + "uri" + "\\}", escapeString(params.getString("uri")));
        }

        if (params.has("id") && (!params.getString("id").isEmpty())) {
          path = path.replaceAll("\\{" + "id" + "\\}", escapeString(params.getString("id")));
        }

        if (params.has("startPage") && (!params.getString("startPage").isEmpty())) {
          urlBuilder.addQueryParameter("start_page", escapeString(String.valueOf(params.getInt("startPage"))));
        }

        if (params.has("count") && (!params.getString("count").isEmpty())) {
          urlBuilder.addQueryParameter("count", escapeString(String.valueOf(params.getInt("count"))));
        }

        if (params.has("depth") && (!params.getString("depth").isEmpty())) {
          urlBuilder.addQueryParameter("depth", escapeString(String.valueOf(params.getInt("depth"))));
        }

        if (params.has("forbiddenId") && (!params.getString("forbiddenId").isEmpty())) {
          urlBuilder.addQueryParameter("forbidden_id[]", escapeString(String.valueOf(params.getJSONArray("forbiddenId"))));
        }

        if (params.has("forbiddenUris") && (!params.getString("forbiddenUris").isEmpty())) {
          urlBuilder.addQueryParameter("forbidden_uris[]", escapeString(String.valueOf(params.getJSONArray("forbiddenUris"))));
        }

        if (params.has("externalCode") && (!params.getString("externalCode").isEmpty())) {
          urlBuilder.addQueryParameter("external_code", escapeString(params.getString("externalCode")));
        }

        if (params.has("headsign") && (!params.getString("headsign").isEmpty())) {
          urlBuilder.addQueryParameter("headsign", escapeString(params.getString("headsign")));
        }

        if (params.has("showCodes") && (!params.getString("showCodes").isEmpty())) {
          urlBuilder.addQueryParameter("show_codes", escapeString(String.valueOf(params.getBoolean("showCodes"))));
        }

        if (params.has("odtLevel") && (!params.getString("odtLevel").isEmpty())) {
          urlBuilder.addQueryParameter("odt_level", escapeString(params.getString("odtLevel")));
        }

        if (params.has("dataFreshness") && (!params.getString("dataFreshness").isEmpty())) {
          urlBuilder.addQueryParameter("data_freshness", escapeString(params.getString("dataFreshness")));
        }

        if (params.has("distance") && (!params.getString("distance").isEmpty())) {
          urlBuilder.addQueryParameter("distance", escapeString(String.valueOf(params.getInt("distance"))));
        }

        if (params.has("since") && (!params.getString("since").isEmpty())) {
          urlBuilder.addQueryParameter("since", escapeString(String.valueOf(params.getString("since"))));
        }

        if (params.has("until") && (!params.getString("until").isEmpty())) {
          urlBuilder.addQueryParameter("until", escapeString(String.valueOf(params.getString("until"))));
        }

        if (params.has("disableGeojson") && (!params.getString("disableGeojson").isEmpty())) {
          urlBuilder.addQueryParameter("disable_geojson", escapeString(String.valueOf(params.getBoolean("disableGeojson"))));
        }

        if (params.has("disableDisruption") && (!params.getString("disableDisruption").isEmpty())) {
          urlBuilder.addQueryParameter("disable_disruption", escapeString(String.valueOf(params.getBoolean("disableDisruption"))));
        }

        if (params.has("tags") && (!params.getString("tags").isEmpty())) {
          urlBuilder.addQueryParameter("tags[]", escapeString(String.valueOf(params.getJSONArray("tags"))));
        }

        if (params.has("originalId") && (!params.getString("originalId").isEmpty())) {
          urlBuilder.addQueryParameter("original_id", escapeString(params.getString("originalId")));
        }

        HttpUrl url = urlBuilder
          .addPathSegments(path)
          .build();
        Request request = requestBuilder.url(url)
          .build();

        client.newCall(request).enqueue(new Callback() {

          @Override
          public void onFailure(@NonNull Call call, @NonNull IOException e) {
            String errorMessage = "Problem during request | " + String.valueOf(e.hashCode()) + ": " + e.getMessage();
            callbackContext.error(errorMessage);
          }

          @Override
          public void onResponse(@NonNull Call call, @NonNull Response response) {
            if (response.isSuccessful()) {
              try {
                JSONObject jsonObject = new JSONObject(Objects.requireNonNull(response.body()).string());
                callbackContext.success(jsonObject);
              } catch (Exception e) {
                String errorMessage = "Problem during response parsing";
                callbackContext.error(errorMessage);
              }
            } else {
              callbackContext.error("Unexpected code " + response.code() + " | message: " + response.message());
            }
          }
        });
      } catch (Exception e) {
        String errorMessage = "Problem during request building | " + e.hashCode() + ": " + e.getMessage();
        callbackContext.error(errorMessage);
      }
    });
  }

  private void coverageRegionRoutes(final JSONObject params, final CallbackContext callbackContext) {
    cordova.getThreadPool().execute(() -> {
      try {
        HttpUrl.Builder urlBuilder = new HttpUrl.Builder()
          .scheme("https")
          .host("api.navitia.io")
          .addPathSegment("v1");
        Request.Builder requestBuilder = new Request.Builder()
          .header("Authorization", token);
        String path = "/coverage/{region}/routes".substring(1);

        if (params.has("region") && (!params.getString("region").isEmpty())) {
          path = path.replaceAll("\\{" + "region" + "\\}", escapeString(params.getString("region")));
        }

        if (params.has("startPage") && (!params.getString("startPage").isEmpty())) {
          urlBuilder.addQueryParameter("start_page", escapeString(String.valueOf(params.getInt("startPage"))));
        }

        if (params.has("count") && (!params.getString("count").isEmpty())) {
          urlBuilder.addQueryParameter("count", escapeString(String.valueOf(params.getInt("count"))));
        }

        if (params.has("depth") && (!params.getString("depth").isEmpty())) {
          urlBuilder.addQueryParameter("depth", escapeString(String.valueOf(params.getInt("depth"))));
        }

        if (params.has("forbiddenId") && (!params.getString("forbiddenId").isEmpty())) {
          urlBuilder.addQueryParameter("forbidden_id[]", escapeString(String.valueOf(params.getJSONArray("forbiddenId"))));
        }

        if (params.has("forbiddenUris") && (!params.getString("forbiddenUris").isEmpty())) {
          urlBuilder.addQueryParameter("forbidden_uris[]", escapeString(String.valueOf(params.getJSONArray("forbiddenUris"))));
        }

        if (params.has("externalCode") && (!params.getString("externalCode").isEmpty())) {
          urlBuilder.addQueryParameter("external_code", escapeString(params.getString("externalCode")));
        }

        if (params.has("headsign") && (!params.getString("headsign").isEmpty())) {
          urlBuilder.addQueryParameter("headsign", escapeString(params.getString("headsign")));
        }

        if (params.has("showCodes") && (!params.getString("showCodes").isEmpty())) {
          urlBuilder.addQueryParameter("show_codes", escapeString(String.valueOf(params.getBoolean("showCodes"))));
        }

        if (params.has("odtLevel") && (!params.getString("odtLevel").isEmpty())) {
          urlBuilder.addQueryParameter("odt_level", escapeString(params.getString("odtLevel")));
        }

        if (params.has("dataFreshness") && (!params.getString("dataFreshness").isEmpty())) {
          urlBuilder.addQueryParameter("data_freshness", escapeString(params.getString("dataFreshness")));
        }

        if (params.has("distance") && (!params.getString("distance").isEmpty())) {
          urlBuilder.addQueryParameter("distance", escapeString(String.valueOf(params.getInt("distance"))));
        }

        if (params.has("since") && (!params.getString("since").isEmpty())) {
          urlBuilder.addQueryParameter("since", escapeString(String.valueOf(params.getString("since"))));
        }

        if (params.has("until") && (!params.getString("until").isEmpty())) {
          urlBuilder.addQueryParameter("until", escapeString(String.valueOf(params.getString("until"))));
        }

        if (params.has("disableGeojson") && (!params.getString("disableGeojson").isEmpty())) {
          urlBuilder.addQueryParameter("disable_geojson", escapeString(String.valueOf(params.getBoolean("disableGeojson"))));
        }

        if (params.has("disableDisruption") && (!params.getString("disableDisruption").isEmpty())) {
          urlBuilder.addQueryParameter("disable_disruption", escapeString(String.valueOf(params.getBoolean("disableDisruption"))));
        }

        if (params.has("filter") && (!params.getString("filter").isEmpty())) {
          urlBuilder.addQueryParameter("filter", escapeString(params.getString("filter")));
        }

        if (params.has("tags") && (!params.getString("tags").isEmpty())) {
          urlBuilder.addQueryParameter("tags[]", escapeString(String.valueOf(params.getJSONArray("tags"))));
        }

        if (params.has("originalId") && (!params.getString("originalId").isEmpty())) {
          urlBuilder.addQueryParameter("original_id", escapeString(params.getString("originalId")));
        }

        HttpUrl url = urlBuilder
          .addPathSegments(path)
          .build();
        Request request = requestBuilder.url(url)
          .build();

        client.newCall(request).enqueue(new Callback() {

          @Override
          public void onFailure(@NonNull Call call, @NonNull IOException e) {
            String errorMessage = "Problem during request | " + String.valueOf(e.hashCode()) + ": " + e.getMessage();
            callbackContext.error(errorMessage);
          }

          @Override
          public void onResponse(@NonNull Call call, @NonNull Response response) {
            if (response.isSuccessful()) {
              try {
                JSONObject jsonObject = new JSONObject(Objects.requireNonNull(response.body()).string());
                callbackContext.success(jsonObject);
              } catch (Exception e) {
                String errorMessage = "Problem during response parsing";
                callbackContext.error(errorMessage);
              }
            } else {
              callbackContext.error("Unexpected code " + response.code() + " | message: " + response.message());
            }
          }
        });
      } catch (Exception e) {
        String errorMessage = "Problem during request building | " + e.hashCode() + ": " + e.getMessage();
        callbackContext.error(errorMessage);
      }
    });
  }

  private void coverageRegionRoutesId(final JSONObject params, final CallbackContext callbackContext) {
    cordova.getThreadPool().execute(() -> {
      try {
        HttpUrl.Builder urlBuilder = new HttpUrl.Builder()
          .scheme("https")
          .host("api.navitia.io")
          .addPathSegment("v1");
        Request.Builder requestBuilder = new Request.Builder()
          .header("Authorization", token);
        String path = "/coverage/{region}/routes/{id}".substring(1);

        if (params.has("region") && (!params.getString("region").isEmpty())) {
          path = path.replaceAll("\\{" + "region" + "\\}", escapeString(params.getString("region")));
        }

        if (params.has("id") && (!params.getString("id").isEmpty())) {
          path = path.replaceAll("\\{" + "id" + "\\}", escapeString(params.getString("id")));
        }

        if (params.has("startPage") && (!params.getString("startPage").isEmpty())) {
          urlBuilder.addQueryParameter("start_page", escapeString(String.valueOf(params.getInt("startPage"))));
        }

        if (params.has("count") && (!params.getString("count").isEmpty())) {
          urlBuilder.addQueryParameter("count", escapeString(String.valueOf(params.getInt("count"))));
        }

        if (params.has("depth") && (!params.getString("depth").isEmpty())) {
          urlBuilder.addQueryParameter("depth", escapeString(String.valueOf(params.getInt("depth"))));
        }

        if (params.has("forbiddenId") && (!params.getString("forbiddenId").isEmpty())) {
          urlBuilder.addQueryParameter("forbidden_id[]", escapeString(String.valueOf(params.getJSONArray("forbiddenId"))));
        }

        if (params.has("forbiddenUris") && (!params.getString("forbiddenUris").isEmpty())) {
          urlBuilder.addQueryParameter("forbidden_uris[]", escapeString(String.valueOf(params.getJSONArray("forbiddenUris"))));
        }

        if (params.has("externalCode") && (!params.getString("externalCode").isEmpty())) {
          urlBuilder.addQueryParameter("external_code", escapeString(params.getString("externalCode")));
        }

        if (params.has("headsign") && (!params.getString("headsign").isEmpty())) {
          urlBuilder.addQueryParameter("headsign", escapeString(params.getString("headsign")));
        }

        if (params.has("showCodes") && (!params.getString("showCodes").isEmpty())) {
          urlBuilder.addQueryParameter("show_codes", escapeString(String.valueOf(params.getBoolean("showCodes"))));
        }

        if (params.has("odtLevel") && (!params.getString("odtLevel").isEmpty())) {
          urlBuilder.addQueryParameter("odt_level", escapeString(params.getString("odtLevel")));
        }

        if (params.has("dataFreshness") && (!params.getString("dataFreshness").isEmpty())) {
          urlBuilder.addQueryParameter("data_freshness", escapeString(params.getString("dataFreshness")));
        }

        if (params.has("distance") && (!params.getString("distance").isEmpty())) {
          urlBuilder.addQueryParameter("distance", escapeString(String.valueOf(params.getInt("distance"))));
        }

        if (params.has("since") && (!params.getString("since").isEmpty())) {
          urlBuilder.addQueryParameter("since", escapeString(String.valueOf(params.getString("since"))));
        }

        if (params.has("until") && (!params.getString("until").isEmpty())) {
          urlBuilder.addQueryParameter("until", escapeString(String.valueOf(params.getString("until"))));
        }

        if (params.has("disableGeojson") && (!params.getString("disableGeojson").isEmpty())) {
          urlBuilder.addQueryParameter("disable_geojson", escapeString(String.valueOf(params.getBoolean("disableGeojson"))));
        }

        if (params.has("disableDisruption") && (!params.getString("disableDisruption").isEmpty())) {
          urlBuilder.addQueryParameter("disable_disruption", escapeString(String.valueOf(params.getBoolean("disableDisruption"))));
        }

        if (params.has("tags") && (!params.getString("tags").isEmpty())) {
          urlBuilder.addQueryParameter("tags[]", escapeString(String.valueOf(params.getJSONArray("tags"))));
        }

        if (params.has("originalId") && (!params.getString("originalId").isEmpty())) {
          urlBuilder.addQueryParameter("original_id", escapeString(params.getString("originalId")));
        }

        HttpUrl url = urlBuilder
          .addPathSegments(path)
          .build();
        Request request = requestBuilder.url(url)
          .build();

        client.newCall(request).enqueue(new Callback() {

          @Override
          public void onFailure(@NonNull Call call, @NonNull IOException e) {
            String errorMessage = "Problem during request | " + String.valueOf(e.hashCode()) + ": " + e.getMessage();
            callbackContext.error(errorMessage);
          }

          @Override
          public void onResponse(@NonNull Call call, @NonNull Response response) {
            if (response.isSuccessful()) {
              try {
                JSONObject jsonObject = new JSONObject(Objects.requireNonNull(response.body()).string());
                callbackContext.success(jsonObject);
              } catch (Exception e) {
                String errorMessage = "Problem during response parsing";
                callbackContext.error(errorMessage);
              }
            } else {
              callbackContext.error("Unexpected code " + response.code() + " | message: " + response.message());
            }
          }
        });
      } catch (Exception e) {
        String errorMessage = "Problem during request building | " + e.hashCode() + ": " + e.getMessage();
        callbackContext.error(errorMessage);
      }
    });
  }

  private void coverageRegionUriRoutes(final JSONObject params, final CallbackContext callbackContext) {
    cordova.getThreadPool().execute(() -> {
      try {
        HttpUrl.Builder urlBuilder = new HttpUrl.Builder()
          .scheme("https")
          .host("api.navitia.io")
          .addPathSegment("v1");
        Request.Builder requestBuilder = new Request.Builder()
          .header("Authorization", token);
        String path = "/coverage/{region}/{uri}/routes".substring(1);

        if (params.has("region") && (!params.getString("region").isEmpty())) {
          path = path.replaceAll("\\{" + "region" + "\\}", escapeString(params.getString("region")));
        }

        if (params.has("uri") && (!params.getString("uri").isEmpty())) {
          path = path.replaceAll("\\{" + "uri" + "\\}", escapeString(params.getString("uri")));
        }

        if (params.has("startPage") && (!params.getString("startPage").isEmpty())) {
          urlBuilder.addQueryParameter("start_page", escapeString(String.valueOf(params.getInt("startPage"))));
        }

        if (params.has("count") && (!params.getString("count").isEmpty())) {
          urlBuilder.addQueryParameter("count", escapeString(String.valueOf(params.getInt("count"))));
        }

        if (params.has("depth") && (!params.getString("depth").isEmpty())) {
          urlBuilder.addQueryParameter("depth", escapeString(String.valueOf(params.getInt("depth"))));
        }

        if (params.has("forbiddenId") && (!params.getString("forbiddenId").isEmpty())) {
          urlBuilder.addQueryParameter("forbidden_id[]", escapeString(String.valueOf(params.getJSONArray("forbiddenId"))));
        }

        if (params.has("forbiddenUris") && (!params.getString("forbiddenUris").isEmpty())) {
          urlBuilder.addQueryParameter("forbidden_uris[]", escapeString(String.valueOf(params.getJSONArray("forbiddenUris"))));
        }

        if (params.has("externalCode") && (!params.getString("externalCode").isEmpty())) {
          urlBuilder.addQueryParameter("external_code", escapeString(params.getString("externalCode")));
        }

        if (params.has("headsign") && (!params.getString("headsign").isEmpty())) {
          urlBuilder.addQueryParameter("headsign", escapeString(params.getString("headsign")));
        }

        if (params.has("showCodes") && (!params.getString("showCodes").isEmpty())) {
          urlBuilder.addQueryParameter("show_codes", escapeString(String.valueOf(params.getBoolean("showCodes"))));
        }

        if (params.has("odtLevel") && (!params.getString("odtLevel").isEmpty())) {
          urlBuilder.addQueryParameter("odt_level", escapeString(params.getString("odtLevel")));
        }

        if (params.has("dataFreshness") && (!params.getString("dataFreshness").isEmpty())) {
          urlBuilder.addQueryParameter("data_freshness", escapeString(params.getString("dataFreshness")));
        }

        if (params.has("distance") && (!params.getString("distance").isEmpty())) {
          urlBuilder.addQueryParameter("distance", escapeString(String.valueOf(params.getInt("distance"))));
        }

        if (params.has("since") && (!params.getString("since").isEmpty())) {
          urlBuilder.addQueryParameter("since", escapeString(String.valueOf(params.getString("since"))));
        }

        if (params.has("until") && (!params.getString("until").isEmpty())) {
          urlBuilder.addQueryParameter("until", escapeString(String.valueOf(params.getString("until"))));
        }

        if (params.has("disableGeojson") && (!params.getString("disableGeojson").isEmpty())) {
          urlBuilder.addQueryParameter("disable_geojson", escapeString(String.valueOf(params.getBoolean("disableGeojson"))));
        }

        if (params.has("disableDisruption") && (!params.getString("disableDisruption").isEmpty())) {
          urlBuilder.addQueryParameter("disable_disruption", escapeString(String.valueOf(params.getBoolean("disableDisruption"))));
        }

        if (params.has("filter") && (!params.getString("filter").isEmpty())) {
          urlBuilder.addQueryParameter("filter", escapeString(params.getString("filter")));
        }

        if (params.has("tags") && (!params.getString("tags").isEmpty())) {
          urlBuilder.addQueryParameter("tags[]", escapeString(String.valueOf(params.getJSONArray("tags"))));
        }

        if (params.has("originalId") && (!params.getString("originalId").isEmpty())) {
          urlBuilder.addQueryParameter("original_id", escapeString(params.getString("originalId")));
        }

        HttpUrl url = urlBuilder
          .addPathSegments(path)
          .build();
        Request request = requestBuilder.url(url)
          .build();

        client.newCall(request).enqueue(new Callback() {

          @Override
          public void onFailure(@NonNull Call call, @NonNull IOException e) {
            String errorMessage = "Problem during request | " + String.valueOf(e.hashCode()) + ": " + e.getMessage();
            callbackContext.error(errorMessage);
          }

          @Override
          public void onResponse(@NonNull Call call, @NonNull Response response) {
            if (response.isSuccessful()) {
              try {
                JSONObject jsonObject = new JSONObject(Objects.requireNonNull(response.body()).string());
                callbackContext.success(jsonObject);
              } catch (Exception e) {
                String errorMessage = "Problem during response parsing";
                callbackContext.error(errorMessage);
              }
            } else {
              callbackContext.error("Unexpected code " + response.code() + " | message: " + response.message());
            }
          }
        });
      } catch (Exception e) {
        String errorMessage = "Problem during request building | " + e.hashCode() + ": " + e.getMessage();
        callbackContext.error(errorMessage);
      }
    });
  }

  private void coverageRegionUriRoutesId(final JSONObject params, final CallbackContext callbackContext) {
    cordova.getThreadPool().execute(() -> {
      try {
        HttpUrl.Builder urlBuilder = new HttpUrl.Builder()
          .scheme("https")
          .host("api.navitia.io")
          .addPathSegment("v1");
        Request.Builder requestBuilder = new Request.Builder()
          .header("Authorization", token);
        String path = "/coverage/{region}/{uri}/routes/{id}".substring(1);

        if (params.has("region") && (!params.getString("region").isEmpty())) {
          path = path.replaceAll("\\{" + "region" + "\\}", escapeString(params.getString("region")));
        }

        if (params.has("uri") && (!params.getString("uri").isEmpty())) {
          path = path.replaceAll("\\{" + "uri" + "\\}", escapeString(params.getString("uri")));
        }

        if (params.has("id") && (!params.getString("id").isEmpty())) {
          path = path.replaceAll("\\{" + "id" + "\\}", escapeString(params.getString("id")));
        }

        if (params.has("startPage") && (!params.getString("startPage").isEmpty())) {
          urlBuilder.addQueryParameter("start_page", escapeString(String.valueOf(params.getInt("startPage"))));
        }

        if (params.has("count") && (!params.getString("count").isEmpty())) {
          urlBuilder.addQueryParameter("count", escapeString(String.valueOf(params.getInt("count"))));
        }

        if (params.has("depth") && (!params.getString("depth").isEmpty())) {
          urlBuilder.addQueryParameter("depth", escapeString(String.valueOf(params.getInt("depth"))));
        }

        if (params.has("forbiddenId") && (!params.getString("forbiddenId").isEmpty())) {
          urlBuilder.addQueryParameter("forbidden_id[]", escapeString(String.valueOf(params.getJSONArray("forbiddenId"))));
        }

        if (params.has("forbiddenUris") && (!params.getString("forbiddenUris").isEmpty())) {
          urlBuilder.addQueryParameter("forbidden_uris[]", escapeString(String.valueOf(params.getJSONArray("forbiddenUris"))));
        }

        if (params.has("externalCode") && (!params.getString("externalCode").isEmpty())) {
          urlBuilder.addQueryParameter("external_code", escapeString(params.getString("externalCode")));
        }

        if (params.has("headsign") && (!params.getString("headsign").isEmpty())) {
          urlBuilder.addQueryParameter("headsign", escapeString(params.getString("headsign")));
        }

        if (params.has("showCodes") && (!params.getString("showCodes").isEmpty())) {
          urlBuilder.addQueryParameter("show_codes", escapeString(String.valueOf(params.getBoolean("showCodes"))));
        }

        if (params.has("odtLevel") && (!params.getString("odtLevel").isEmpty())) {
          urlBuilder.addQueryParameter("odt_level", escapeString(params.getString("odtLevel")));
        }

        if (params.has("dataFreshness") && (!params.getString("dataFreshness").isEmpty())) {
          urlBuilder.addQueryParameter("data_freshness", escapeString(params.getString("dataFreshness")));
        }

        if (params.has("distance") && (!params.getString("distance").isEmpty())) {
          urlBuilder.addQueryParameter("distance", escapeString(String.valueOf(params.getInt("distance"))));
        }

        if (params.has("since") && (!params.getString("since").isEmpty())) {
          urlBuilder.addQueryParameter("since", escapeString(String.valueOf(params.getString("since"))));
        }

        if (params.has("until") && (!params.getString("until").isEmpty())) {
          urlBuilder.addQueryParameter("until", escapeString(String.valueOf(params.getString("until"))));
        }

        if (params.has("disableGeojson") && (!params.getString("disableGeojson").isEmpty())) {
          urlBuilder.addQueryParameter("disable_geojson", escapeString(String.valueOf(params.getBoolean("disableGeojson"))));
        }

        if (params.has("disableDisruption") && (!params.getString("disableDisruption").isEmpty())) {
          urlBuilder.addQueryParameter("disable_disruption", escapeString(String.valueOf(params.getBoolean("disableDisruption"))));
        }

        if (params.has("tags") && (!params.getString("tags").isEmpty())) {
          urlBuilder.addQueryParameter("tags[]", escapeString(String.valueOf(params.getJSONArray("tags"))));
        }

        if (params.has("originalId") && (!params.getString("originalId").isEmpty())) {
          urlBuilder.addQueryParameter("original_id", escapeString(params.getString("originalId")));
        }

        HttpUrl url = urlBuilder
          .addPathSegments(path)
          .build();
        Request request = requestBuilder.url(url)
          .build();

        client.newCall(request).enqueue(new Callback() {

          @Override
          public void onFailure(@NonNull Call call, @NonNull IOException e) {
            String errorMessage = "Problem during request | " + String.valueOf(e.hashCode()) + ": " + e.getMessage();
            callbackContext.error(errorMessage);
          }

          @Override
          public void onResponse(@NonNull Call call, @NonNull Response response) {
            if (response.isSuccessful()) {
              try {
                JSONObject jsonObject = new JSONObject(Objects.requireNonNull(response.body()).string());
                callbackContext.success(jsonObject);
              } catch (Exception e) {
                String errorMessage = "Problem during response parsing";
                callbackContext.error(errorMessage);
              }
            } else {
              callbackContext.error("Unexpected code " + response.code() + " | message: " + response.message());
            }
          }
        });
      } catch (Exception e) {
        String errorMessage = "Problem during request building | " + e.hashCode() + ": " + e.getMessage();
        callbackContext.error(errorMessage);
      }
    });
  }

  private void routes(final JSONObject params, final CallbackContext callbackContext) {
    cordova.getThreadPool().execute(() -> {
      try {
        HttpUrl.Builder urlBuilder = new HttpUrl.Builder()
          .scheme("https")
          .host("api.navitia.io")
          .addPathSegment("v1");
        Request.Builder requestBuilder = new Request.Builder()
          .header("Authorization", token);
        String path = "/routes".substring(1);

        if (params.has("externalCode") && (!params.getString("externalCode").isEmpty())) {
          urlBuilder.addQueryParameter("external_code", escapeString(params.getString("externalCode")));
        }

        if (params.has("startPage") && (!params.getString("startPage").isEmpty())) {
          urlBuilder.addQueryParameter("start_page", escapeString(String.valueOf(params.getInt("startPage"))));
        }

        if (params.has("count") && (!params.getString("count").isEmpty())) {
          urlBuilder.addQueryParameter("count", escapeString(String.valueOf(params.getInt("count"))));
        }

        if (params.has("depth") && (!params.getString("depth").isEmpty())) {
          urlBuilder.addQueryParameter("depth", escapeString(String.valueOf(params.getInt("depth"))));
        }

        if (params.has("forbiddenId") && (!params.getString("forbiddenId").isEmpty())) {
          urlBuilder.addQueryParameter("forbidden_id[]", escapeString(String.valueOf(params.getJSONArray("forbiddenId"))));
        }

        if (params.has("forbiddenUris") && (!params.getString("forbiddenUris").isEmpty())) {
          urlBuilder.addQueryParameter("forbidden_uris[]", escapeString(String.valueOf(params.getJSONArray("forbiddenUris"))));
        }

        if (params.has("headsign") && (!params.getString("headsign").isEmpty())) {
          urlBuilder.addQueryParameter("headsign", escapeString(params.getString("headsign")));
        }

        if (params.has("showCodes") && (!params.getString("showCodes").isEmpty())) {
          urlBuilder.addQueryParameter("show_codes", escapeString(String.valueOf(params.getBoolean("showCodes"))));
        }

        if (params.has("odtLevel") && (!params.getString("odtLevel").isEmpty())) {
          urlBuilder.addQueryParameter("odt_level", escapeString(params.getString("odtLevel")));
        }

        if (params.has("dataFreshness") && (!params.getString("dataFreshness").isEmpty())) {
          urlBuilder.addQueryParameter("data_freshness", escapeString(params.getString("dataFreshness")));
        }

        if (params.has("distance") && (!params.getString("distance").isEmpty())) {
          urlBuilder.addQueryParameter("distance", escapeString(String.valueOf(params.getInt("distance"))));
        }

        if (params.has("since") && (!params.getString("since").isEmpty())) {
          urlBuilder.addQueryParameter("since", escapeString(String.valueOf(params.getString("since"))));
        }

        if (params.has("until") && (!params.getString("until").isEmpty())) {
          urlBuilder.addQueryParameter("until", escapeString(String.valueOf(params.getString("until"))));
        }

        if (params.has("disableGeojson") && (!params.getString("disableGeojson").isEmpty())) {
          urlBuilder.addQueryParameter("disable_geojson", escapeString(String.valueOf(params.getBoolean("disableGeojson"))));
        }

        if (params.has("disableDisruption") && (!params.getString("disableDisruption").isEmpty())) {
          urlBuilder.addQueryParameter("disable_disruption", escapeString(String.valueOf(params.getBoolean("disableDisruption"))));
        }

        if (params.has("filter") && (!params.getString("filter").isEmpty())) {
          urlBuilder.addQueryParameter("filter", escapeString(params.getString("filter")));
        }

        if (params.has("tags") && (!params.getString("tags").isEmpty())) {
          urlBuilder.addQueryParameter("tags[]", escapeString(String.valueOf(params.getJSONArray("tags"))));
        }

        if (params.has("originalId") && (!params.getString("originalId").isEmpty())) {
          urlBuilder.addQueryParameter("original_id", escapeString(params.getString("originalId")));
        }

        HttpUrl url = urlBuilder
          .addPathSegments(path)
          .build();
        Request request = requestBuilder.url(url)
          .build();

        client.newCall(request).enqueue(new Callback() {

          @Override
          public void onFailure(@NonNull Call call, @NonNull IOException e) {
            String errorMessage = "Problem during request | " + String.valueOf(e.hashCode()) + ": " + e.getMessage();
            callbackContext.error(errorMessage);
          }

          @Override
          public void onResponse(@NonNull Call call, @NonNull Response response) {
            if (response.isSuccessful()) {
              try {
                JSONObject jsonObject = new JSONObject(Objects.requireNonNull(response.body()).string());
                callbackContext.success(jsonObject);
              } catch (Exception e) {
                String errorMessage = "Problem during response parsing";
                callbackContext.error(errorMessage);
              }
            } else {
              callbackContext.error("Unexpected code " + response.code() + " | message: " + response.message());
            }
          }
        });
      } catch (Exception e) {
        String errorMessage = "Problem during request building | " + e.hashCode() + ": " + e.getMessage();
        callbackContext.error(errorMessage);
      }
    });
  }

  private void coverageLonLatStopAreas(final JSONObject params, final CallbackContext callbackContext) {
    cordova.getThreadPool().execute(() -> {
      try {
        HttpUrl.Builder urlBuilder = new HttpUrl.Builder()
          .scheme("https")
          .host("api.navitia.io")
          .addPathSegment("v1");
        Request.Builder requestBuilder = new Request.Builder()
          .header("Authorization", token);
        String path = "/coverage/{lon};{lat}/stop_areas".substring(1);

        if (params.has("lat") && (!params.getString("lat").isEmpty())) {
          path = path.replaceAll("\\{" + "lat" + "\\}", escapeString(String.valueOf(params.getLong("lat"))));
        }

        if (params.has("lon") && (!params.getString("lon").isEmpty())) {
          path = path.replaceAll("\\{" + "lon" + "\\}", escapeString(String.valueOf(params.getLong("lon"))));
        }

        if (params.has("startPage") && (!params.getString("startPage").isEmpty())) {
          urlBuilder.addQueryParameter("start_page", escapeString(String.valueOf(params.getInt("startPage"))));
        }

        if (params.has("count") && (!params.getString("count").isEmpty())) {
          urlBuilder.addQueryParameter("count", escapeString(String.valueOf(params.getInt("count"))));
        }

        if (params.has("depth") && (!params.getString("depth").isEmpty())) {
          urlBuilder.addQueryParameter("depth", escapeString(String.valueOf(params.getInt("depth"))));
        }

        if (params.has("forbiddenId") && (!params.getString("forbiddenId").isEmpty())) {
          urlBuilder.addQueryParameter("forbidden_id[]", escapeString(String.valueOf(params.getJSONArray("forbiddenId"))));
        }

        if (params.has("forbiddenUris") && (!params.getString("forbiddenUris").isEmpty())) {
          urlBuilder.addQueryParameter("forbidden_uris[]", escapeString(String.valueOf(params.getJSONArray("forbiddenUris"))));
        }

        if (params.has("externalCode") && (!params.getString("externalCode").isEmpty())) {
          urlBuilder.addQueryParameter("external_code", escapeString(params.getString("externalCode")));
        }

        if (params.has("headsign") && (!params.getString("headsign").isEmpty())) {
          urlBuilder.addQueryParameter("headsign", escapeString(params.getString("headsign")));
        }

        if (params.has("showCodes") && (!params.getString("showCodes").isEmpty())) {
          urlBuilder.addQueryParameter("show_codes", escapeString(String.valueOf(params.getBoolean("showCodes"))));
        }

        if (params.has("odtLevel") && (!params.getString("odtLevel").isEmpty())) {
          urlBuilder.addQueryParameter("odt_level", escapeString(params.getString("odtLevel")));
        }

        if (params.has("dataFreshness") && (!params.getString("dataFreshness").isEmpty())) {
          urlBuilder.addQueryParameter("data_freshness", escapeString(params.getString("dataFreshness")));
        }

        if (params.has("distance") && (!params.getString("distance").isEmpty())) {
          urlBuilder.addQueryParameter("distance", escapeString(String.valueOf(params.getInt("distance"))));
        }

        if (params.has("since") && (!params.getString("since").isEmpty())) {
          urlBuilder.addQueryParameter("since", escapeString(String.valueOf(params.getString("since"))));
        }

        if (params.has("until") && (!params.getString("until").isEmpty())) {
          urlBuilder.addQueryParameter("until", escapeString(String.valueOf(params.getString("until"))));
        }

        if (params.has("disableGeojson") && (!params.getString("disableGeojson").isEmpty())) {
          urlBuilder.addQueryParameter("disable_geojson", escapeString(String.valueOf(params.getBoolean("disableGeojson"))));
        }

        if (params.has("disableDisruption") && (!params.getString("disableDisruption").isEmpty())) {
          urlBuilder.addQueryParameter("disable_disruption", escapeString(String.valueOf(params.getBoolean("disableDisruption"))));
        }

        if (params.has("filter") && (!params.getString("filter").isEmpty())) {
          urlBuilder.addQueryParameter("filter", escapeString(params.getString("filter")));
        }

        if (params.has("tags") && (!params.getString("tags").isEmpty())) {
          urlBuilder.addQueryParameter("tags[]", escapeString(String.valueOf(params.getJSONArray("tags"))));
        }

        if (params.has("originalId") && (!params.getString("originalId").isEmpty())) {
          urlBuilder.addQueryParameter("original_id", escapeString(params.getString("originalId")));
        }

        HttpUrl url = urlBuilder
          .addPathSegments(path)
          .build();
        Request request = requestBuilder.url(url)
          .build();

        client.newCall(request).enqueue(new Callback() {

          @Override
          public void onFailure(@NonNull Call call, @NonNull IOException e) {
            String errorMessage = "Problem during request | " + String.valueOf(e.hashCode()) + ": " + e.getMessage();
            callbackContext.error(errorMessage);
          }

          @Override
          public void onResponse(@NonNull Call call, @NonNull Response response) {
            if (response.isSuccessful()) {
              try {
                JSONObject jsonObject = new JSONObject(Objects.requireNonNull(response.body()).string());
                callbackContext.success(jsonObject);
              } catch (Exception e) {
                String errorMessage = "Problem during response parsing";
                callbackContext.error(errorMessage);
              }
            } else {
              callbackContext.error("Unexpected code " + response.code() + " | message: " + response.message());
            }
          }
        });
      } catch (Exception e) {
        String errorMessage = "Problem during request building | " + e.hashCode() + ": " + e.getMessage();
        callbackContext.error(errorMessage);
      }
    });
  }

  private void coverageLonLatStopAreasId(final JSONObject params, final CallbackContext callbackContext) {
    cordova.getThreadPool().execute(() -> {
      try {
        HttpUrl.Builder urlBuilder = new HttpUrl.Builder()
          .scheme("https")
          .host("api.navitia.io")
          .addPathSegment("v1");
        Request.Builder requestBuilder = new Request.Builder()
          .header("Authorization", token);
        String path = "/coverage/{lon};{lat}/stop_areas/{id}".substring(1);

        if (params.has("lat") && (!params.getString("lat").isEmpty())) {
          path = path.replaceAll("\\{" + "lat" + "\\}", escapeString(String.valueOf(params.getLong("lat"))));
        }

        if (params.has("lon") && (!params.getString("lon").isEmpty())) {
          path = path.replaceAll("\\{" + "lon" + "\\}", escapeString(String.valueOf(params.getLong("lon"))));
        }

        if (params.has("id") && (!params.getString("id").isEmpty())) {
          path = path.replaceAll("\\{" + "id" + "\\}", escapeString(params.getString("id")));
        }

        if (params.has("startPage") && (!params.getString("startPage").isEmpty())) {
          urlBuilder.addQueryParameter("start_page", escapeString(String.valueOf(params.getInt("startPage"))));
        }

        if (params.has("count") && (!params.getString("count").isEmpty())) {
          urlBuilder.addQueryParameter("count", escapeString(String.valueOf(params.getInt("count"))));
        }

        if (params.has("depth") && (!params.getString("depth").isEmpty())) {
          urlBuilder.addQueryParameter("depth", escapeString(String.valueOf(params.getInt("depth"))));
        }

        if (params.has("forbiddenId") && (!params.getString("forbiddenId").isEmpty())) {
          urlBuilder.addQueryParameter("forbidden_id[]", escapeString(String.valueOf(params.getJSONArray("forbiddenId"))));
        }

        if (params.has("forbiddenUris") && (!params.getString("forbiddenUris").isEmpty())) {
          urlBuilder.addQueryParameter("forbidden_uris[]", escapeString(String.valueOf(params.getJSONArray("forbiddenUris"))));
        }

        if (params.has("externalCode") && (!params.getString("externalCode").isEmpty())) {
          urlBuilder.addQueryParameter("external_code", escapeString(params.getString("externalCode")));
        }

        if (params.has("headsign") && (!params.getString("headsign").isEmpty())) {
          urlBuilder.addQueryParameter("headsign", escapeString(params.getString("headsign")));
        }

        if (params.has("showCodes") && (!params.getString("showCodes").isEmpty())) {
          urlBuilder.addQueryParameter("show_codes", escapeString(String.valueOf(params.getBoolean("showCodes"))));
        }

        if (params.has("odtLevel") && (!params.getString("odtLevel").isEmpty())) {
          urlBuilder.addQueryParameter("odt_level", escapeString(params.getString("odtLevel")));
        }

        if (params.has("dataFreshness") && (!params.getString("dataFreshness").isEmpty())) {
          urlBuilder.addQueryParameter("data_freshness", escapeString(params.getString("dataFreshness")));
        }

        if (params.has("distance") && (!params.getString("distance").isEmpty())) {
          urlBuilder.addQueryParameter("distance", escapeString(String.valueOf(params.getInt("distance"))));
        }

        if (params.has("since") && (!params.getString("since").isEmpty())) {
          urlBuilder.addQueryParameter("since", escapeString(String.valueOf(params.getString("since"))));
        }

        if (params.has("until") && (!params.getString("until").isEmpty())) {
          urlBuilder.addQueryParameter("until", escapeString(String.valueOf(params.getString("until"))));
        }

        if (params.has("disableGeojson") && (!params.getString("disableGeojson").isEmpty())) {
          urlBuilder.addQueryParameter("disable_geojson", escapeString(String.valueOf(params.getBoolean("disableGeojson"))));
        }

        if (params.has("disableDisruption") && (!params.getString("disableDisruption").isEmpty())) {
          urlBuilder.addQueryParameter("disable_disruption", escapeString(String.valueOf(params.getBoolean("disableDisruption"))));
        }

        if (params.has("tags") && (!params.getString("tags").isEmpty())) {
          urlBuilder.addQueryParameter("tags[]", escapeString(String.valueOf(params.getJSONArray("tags"))));
        }

        if (params.has("originalId") && (!params.getString("originalId").isEmpty())) {
          urlBuilder.addQueryParameter("original_id", escapeString(params.getString("originalId")));
        }

        HttpUrl url = urlBuilder
          .addPathSegments(path)
          .build();
        Request request = requestBuilder.url(url)
          .build();

        client.newCall(request).enqueue(new Callback() {

          @Override
          public void onFailure(@NonNull Call call, @NonNull IOException e) {
            String errorMessage = "Problem during request | " + String.valueOf(e.hashCode()) + ": " + e.getMessage();
            callbackContext.error(errorMessage);
          }

          @Override
          public void onResponse(@NonNull Call call, @NonNull Response response) {
            if (response.isSuccessful()) {
              try {
                JSONObject jsonObject = new JSONObject(Objects.requireNonNull(response.body()).string());
                callbackContext.success(jsonObject);
              } catch (Exception e) {
                String errorMessage = "Problem during response parsing";
                callbackContext.error(errorMessage);
              }
            } else {
              callbackContext.error("Unexpected code " + response.code() + " | message: " + response.message());
            }
          }
        });
      } catch (Exception e) {
        String errorMessage = "Problem during request building | " + e.hashCode() + ": " + e.getMessage();
        callbackContext.error(errorMessage);
      }
    });
  }

  private void coverageLonLatUriStopAreas(final JSONObject params, final CallbackContext callbackContext) {
    cordova.getThreadPool().execute(() -> {
      try {
        HttpUrl.Builder urlBuilder = new HttpUrl.Builder()
          .scheme("https")
          .host("api.navitia.io")
          .addPathSegment("v1");
        Request.Builder requestBuilder = new Request.Builder()
          .header("Authorization", token);
        String path = "/coverage/{lon};{lat}/{uri}/stop_areas".substring(1);

        if (params.has("lat") && (!params.getString("lat").isEmpty())) {
          path = path.replaceAll("\\{" + "lat" + "\\}", escapeString(String.valueOf(params.getLong("lat"))));
        }

        if (params.has("lon") && (!params.getString("lon").isEmpty())) {
          path = path.replaceAll("\\{" + "lon" + "\\}", escapeString(String.valueOf(params.getLong("lon"))));
        }

        if (params.has("uri") && (!params.getString("uri").isEmpty())) {
          path = path.replaceAll("\\{" + "uri" + "\\}", escapeString(params.getString("uri")));
        }

        if (params.has("startPage") && (!params.getString("startPage").isEmpty())) {
          urlBuilder.addQueryParameter("start_page", escapeString(String.valueOf(params.getInt("startPage"))));
        }

        if (params.has("count") && (!params.getString("count").isEmpty())) {
          urlBuilder.addQueryParameter("count", escapeString(String.valueOf(params.getInt("count"))));
        }

        if (params.has("depth") && (!params.getString("depth").isEmpty())) {
          urlBuilder.addQueryParameter("depth", escapeString(String.valueOf(params.getInt("depth"))));
        }

        if (params.has("forbiddenId") && (!params.getString("forbiddenId").isEmpty())) {
          urlBuilder.addQueryParameter("forbidden_id[]", escapeString(String.valueOf(params.getJSONArray("forbiddenId"))));
        }

        if (params.has("forbiddenUris") && (!params.getString("forbiddenUris").isEmpty())) {
          urlBuilder.addQueryParameter("forbidden_uris[]", escapeString(String.valueOf(params.getJSONArray("forbiddenUris"))));
        }

        if (params.has("externalCode") && (!params.getString("externalCode").isEmpty())) {
          urlBuilder.addQueryParameter("external_code", escapeString(params.getString("externalCode")));
        }

        if (params.has("headsign") && (!params.getString("headsign").isEmpty())) {
          urlBuilder.addQueryParameter("headsign", escapeString(params.getString("headsign")));
        }

        if (params.has("showCodes") && (!params.getString("showCodes").isEmpty())) {
          urlBuilder.addQueryParameter("show_codes", escapeString(String.valueOf(params.getBoolean("showCodes"))));
        }

        if (params.has("odtLevel") && (!params.getString("odtLevel").isEmpty())) {
          urlBuilder.addQueryParameter("odt_level", escapeString(params.getString("odtLevel")));
        }

        if (params.has("dataFreshness") && (!params.getString("dataFreshness").isEmpty())) {
          urlBuilder.addQueryParameter("data_freshness", escapeString(params.getString("dataFreshness")));
        }

        if (params.has("distance") && (!params.getString("distance").isEmpty())) {
          urlBuilder.addQueryParameter("distance", escapeString(String.valueOf(params.getInt("distance"))));
        }

        if (params.has("since") && (!params.getString("since").isEmpty())) {
          urlBuilder.addQueryParameter("since", escapeString(String.valueOf(params.getString("since"))));
        }

        if (params.has("until") && (!params.getString("until").isEmpty())) {
          urlBuilder.addQueryParameter("until", escapeString(String.valueOf(params.getString("until"))));
        }

        if (params.has("disableGeojson") && (!params.getString("disableGeojson").isEmpty())) {
          urlBuilder.addQueryParameter("disable_geojson", escapeString(String.valueOf(params.getBoolean("disableGeojson"))));
        }

        if (params.has("disableDisruption") && (!params.getString("disableDisruption").isEmpty())) {
          urlBuilder.addQueryParameter("disable_disruption", escapeString(String.valueOf(params.getBoolean("disableDisruption"))));
        }

        if (params.has("filter") && (!params.getString("filter").isEmpty())) {
          urlBuilder.addQueryParameter("filter", escapeString(params.getString("filter")));
        }

        if (params.has("tags") && (!params.getString("tags").isEmpty())) {
          urlBuilder.addQueryParameter("tags[]", escapeString(String.valueOf(params.getJSONArray("tags"))));
        }

        if (params.has("originalId") && (!params.getString("originalId").isEmpty())) {
          urlBuilder.addQueryParameter("original_id", escapeString(params.getString("originalId")));
        }

        HttpUrl url = urlBuilder
          .addPathSegments(path)
          .build();
        Request request = requestBuilder.url(url)
          .build();

        client.newCall(request).enqueue(new Callback() {

          @Override
          public void onFailure(@NonNull Call call, @NonNull IOException e) {
            String errorMessage = "Problem during request | " + String.valueOf(e.hashCode()) + ": " + e.getMessage();
            callbackContext.error(errorMessage);
          }

          @Override
          public void onResponse(@NonNull Call call, @NonNull Response response) {
            if (response.isSuccessful()) {
              try {
                JSONObject jsonObject = new JSONObject(Objects.requireNonNull(response.body()).string());
                callbackContext.success(jsonObject);
              } catch (Exception e) {
                String errorMessage = "Problem during response parsing";
                callbackContext.error(errorMessage);
              }
            } else {
              callbackContext.error("Unexpected code " + response.code() + " | message: " + response.message());
            }
          }
        });
      } catch (Exception e) {
        String errorMessage = "Problem during request building | " + e.hashCode() + ": " + e.getMessage();
        callbackContext.error(errorMessage);
      }
    });
  }

  private void coverageLonLatUriStopAreasId(final JSONObject params, final CallbackContext callbackContext) {
    cordova.getThreadPool().execute(() -> {
      try {
        HttpUrl.Builder urlBuilder = new HttpUrl.Builder()
          .scheme("https")
          .host("api.navitia.io")
          .addPathSegment("v1");
        Request.Builder requestBuilder = new Request.Builder()
          .header("Authorization", token);
        String path = "/coverage/{lon};{lat}/{uri}/stop_areas/{id}".substring(1);

        if (params.has("lat") && (!params.getString("lat").isEmpty())) {
          path = path.replaceAll("\\{" + "lat" + "\\}", escapeString(String.valueOf(params.getLong("lat"))));
        }

        if (params.has("lon") && (!params.getString("lon").isEmpty())) {
          path = path.replaceAll("\\{" + "lon" + "\\}", escapeString(String.valueOf(params.getLong("lon"))));
        }

        if (params.has("uri") && (!params.getString("uri").isEmpty())) {
          path = path.replaceAll("\\{" + "uri" + "\\}", escapeString(params.getString("uri")));
        }

        if (params.has("id") && (!params.getString("id").isEmpty())) {
          path = path.replaceAll("\\{" + "id" + "\\}", escapeString(params.getString("id")));
        }

        if (params.has("startPage") && (!params.getString("startPage").isEmpty())) {
          urlBuilder.addQueryParameter("start_page", escapeString(String.valueOf(params.getInt("startPage"))));
        }

        if (params.has("count") && (!params.getString("count").isEmpty())) {
          urlBuilder.addQueryParameter("count", escapeString(String.valueOf(params.getInt("count"))));
        }

        if (params.has("depth") && (!params.getString("depth").isEmpty())) {
          urlBuilder.addQueryParameter("depth", escapeString(String.valueOf(params.getInt("depth"))));
        }

        if (params.has("forbiddenId") && (!params.getString("forbiddenId").isEmpty())) {
          urlBuilder.addQueryParameter("forbidden_id[]", escapeString(String.valueOf(params.getJSONArray("forbiddenId"))));
        }

        if (params.has("forbiddenUris") && (!params.getString("forbiddenUris").isEmpty())) {
          urlBuilder.addQueryParameter("forbidden_uris[]", escapeString(String.valueOf(params.getJSONArray("forbiddenUris"))));
        }

        if (params.has("externalCode") && (!params.getString("externalCode").isEmpty())) {
          urlBuilder.addQueryParameter("external_code", escapeString(params.getString("externalCode")));
        }

        if (params.has("headsign") && (!params.getString("headsign").isEmpty())) {
          urlBuilder.addQueryParameter("headsign", escapeString(params.getString("headsign")));
        }

        if (params.has("showCodes") && (!params.getString("showCodes").isEmpty())) {
          urlBuilder.addQueryParameter("show_codes", escapeString(String.valueOf(params.getBoolean("showCodes"))));
        }

        if (params.has("odtLevel") && (!params.getString("odtLevel").isEmpty())) {
          urlBuilder.addQueryParameter("odt_level", escapeString(params.getString("odtLevel")));
        }

        if (params.has("dataFreshness") && (!params.getString("dataFreshness").isEmpty())) {
          urlBuilder.addQueryParameter("data_freshness", escapeString(params.getString("dataFreshness")));
        }

        if (params.has("distance") && (!params.getString("distance").isEmpty())) {
          urlBuilder.addQueryParameter("distance", escapeString(String.valueOf(params.getInt("distance"))));
        }

        if (params.has("since") && (!params.getString("since").isEmpty())) {
          urlBuilder.addQueryParameter("since", escapeString(String.valueOf(params.getString("since"))));
        }

        if (params.has("until") && (!params.getString("until").isEmpty())) {
          urlBuilder.addQueryParameter("until", escapeString(String.valueOf(params.getString("until"))));
        }

        if (params.has("disableGeojson") && (!params.getString("disableGeojson").isEmpty())) {
          urlBuilder.addQueryParameter("disable_geojson", escapeString(String.valueOf(params.getBoolean("disableGeojson"))));
        }

        if (params.has("disableDisruption") && (!params.getString("disableDisruption").isEmpty())) {
          urlBuilder.addQueryParameter("disable_disruption", escapeString(String.valueOf(params.getBoolean("disableDisruption"))));
        }

        if (params.has("tags") && (!params.getString("tags").isEmpty())) {
          urlBuilder.addQueryParameter("tags[]", escapeString(String.valueOf(params.getJSONArray("tags"))));
        }

        if (params.has("originalId") && (!params.getString("originalId").isEmpty())) {
          urlBuilder.addQueryParameter("original_id", escapeString(params.getString("originalId")));
        }

        HttpUrl url = urlBuilder
          .addPathSegments(path)
          .build();
        Request request = requestBuilder.url(url)
          .build();

        client.newCall(request).enqueue(new Callback() {

          @Override
          public void onFailure(@NonNull Call call, @NonNull IOException e) {
            String errorMessage = "Problem during request | " + String.valueOf(e.hashCode()) + ": " + e.getMessage();
            callbackContext.error(errorMessage);
          }

          @Override
          public void onResponse(@NonNull Call call, @NonNull Response response) {
            if (response.isSuccessful()) {
              try {
                JSONObject jsonObject = new JSONObject(Objects.requireNonNull(response.body()).string());
                callbackContext.success(jsonObject);
              } catch (Exception e) {
                String errorMessage = "Problem during response parsing";
                callbackContext.error(errorMessage);
              }
            } else {
              callbackContext.error("Unexpected code " + response.code() + " | message: " + response.message());
            }
          }
        });
      } catch (Exception e) {
        String errorMessage = "Problem during request building | " + e.hashCode() + ": " + e.getMessage();
        callbackContext.error(errorMessage);
      }
    });
  }

  private void coverageRegionStopAreas(final JSONObject params, final CallbackContext callbackContext) {
    cordova.getThreadPool().execute(() -> {
      try {
        HttpUrl.Builder urlBuilder = new HttpUrl.Builder()
          .scheme("https")
          .host("api.navitia.io")
          .addPathSegment("v1");
        Request.Builder requestBuilder = new Request.Builder()
          .header("Authorization", token);
        String path = "/coverage/{region}/stop_areas".substring(1);

        if (params.has("region") && (!params.getString("region").isEmpty())) {
          path = path.replaceAll("\\{" + "region" + "\\}", escapeString(params.getString("region")));
        }

        if (params.has("startPage") && (!params.getString("startPage").isEmpty())) {
          urlBuilder.addQueryParameter("start_page", escapeString(String.valueOf(params.getInt("startPage"))));
        }

        if (params.has("count") && (!params.getString("count").isEmpty())) {
          urlBuilder.addQueryParameter("count", escapeString(String.valueOf(params.getInt("count"))));
        }

        if (params.has("depth") && (!params.getString("depth").isEmpty())) {
          urlBuilder.addQueryParameter("depth", escapeString(String.valueOf(params.getInt("depth"))));
        }

        if (params.has("forbiddenId") && (!params.getString("forbiddenId").isEmpty())) {
          urlBuilder.addQueryParameter("forbidden_id[]", escapeString(String.valueOf(params.getJSONArray("forbiddenId"))));
        }

        if (params.has("forbiddenUris") && (!params.getString("forbiddenUris").isEmpty())) {
          urlBuilder.addQueryParameter("forbidden_uris[]", escapeString(String.valueOf(params.getJSONArray("forbiddenUris"))));
        }

        if (params.has("externalCode") && (!params.getString("externalCode").isEmpty())) {
          urlBuilder.addQueryParameter("external_code", escapeString(params.getString("externalCode")));
        }

        if (params.has("headsign") && (!params.getString("headsign").isEmpty())) {
          urlBuilder.addQueryParameter("headsign", escapeString(params.getString("headsign")));
        }

        if (params.has("showCodes") && (!params.getString("showCodes").isEmpty())) {
          urlBuilder.addQueryParameter("show_codes", escapeString(String.valueOf(params.getBoolean("showCodes"))));
        }

        if (params.has("odtLevel") && (!params.getString("odtLevel").isEmpty())) {
          urlBuilder.addQueryParameter("odt_level", escapeString(params.getString("odtLevel")));
        }

        if (params.has("dataFreshness") && (!params.getString("dataFreshness").isEmpty())) {
          urlBuilder.addQueryParameter("data_freshness", escapeString(params.getString("dataFreshness")));
        }

        if (params.has("distance") && (!params.getString("distance").isEmpty())) {
          urlBuilder.addQueryParameter("distance", escapeString(String.valueOf(params.getInt("distance"))));
        }

        if (params.has("since") && (!params.getString("since").isEmpty())) {
          urlBuilder.addQueryParameter("since", escapeString(String.valueOf(params.getString("since"))));
        }

        if (params.has("until") && (!params.getString("until").isEmpty())) {
          urlBuilder.addQueryParameter("until", escapeString(String.valueOf(params.getString("until"))));
        }

        if (params.has("disableGeojson") && (!params.getString("disableGeojson").isEmpty())) {
          urlBuilder.addQueryParameter("disable_geojson", escapeString(String.valueOf(params.getBoolean("disableGeojson"))));
        }

        if (params.has("disableDisruption") && (!params.getString("disableDisruption").isEmpty())) {
          urlBuilder.addQueryParameter("disable_disruption", escapeString(String.valueOf(params.getBoolean("disableDisruption"))));
        }

        if (params.has("filter") && (!params.getString("filter").isEmpty())) {
          urlBuilder.addQueryParameter("filter", escapeString(params.getString("filter")));
        }

        if (params.has("tags") && (!params.getString("tags").isEmpty())) {
          urlBuilder.addQueryParameter("tags[]", escapeString(String.valueOf(params.getJSONArray("tags"))));
        }

        if (params.has("originalId") && (!params.getString("originalId").isEmpty())) {
          urlBuilder.addQueryParameter("original_id", escapeString(params.getString("originalId")));
        }

        HttpUrl url = urlBuilder
          .addPathSegments(path)
          .build();
        Request request = requestBuilder.url(url)
          .build();

        client.newCall(request).enqueue(new Callback() {

          @Override
          public void onFailure(@NonNull Call call, @NonNull IOException e) {
            String errorMessage = "Problem during request | " + String.valueOf(e.hashCode()) + ": " + e.getMessage();
            callbackContext.error(errorMessage);
          }

          @Override
          public void onResponse(@NonNull Call call, @NonNull Response response) {
            if (response.isSuccessful()) {
              try {
                JSONObject jsonObject = new JSONObject(Objects.requireNonNull(response.body()).string());
                callbackContext.success(jsonObject);
              } catch (Exception e) {
                String errorMessage = "Problem during response parsing";
                callbackContext.error(errorMessage);
              }
            } else {
              callbackContext.error("Unexpected code " + response.code() + " | message: " + response.message());
            }
          }
        });
      } catch (Exception e) {
        String errorMessage = "Problem during request building | " + e.hashCode() + ": " + e.getMessage();
        callbackContext.error(errorMessage);
      }
    });
  }

  private void coverageRegionStopAreasId(final JSONObject params, final CallbackContext callbackContext) {
    cordova.getThreadPool().execute(() -> {
      try {
        HttpUrl.Builder urlBuilder = new HttpUrl.Builder()
          .scheme("https")
          .host("api.navitia.io")
          .addPathSegment("v1");
        Request.Builder requestBuilder = new Request.Builder()
          .header("Authorization", token);
        String path = "/coverage/{region}/stop_areas/{id}".substring(1);

        if (params.has("region") && (!params.getString("region").isEmpty())) {
          path = path.replaceAll("\\{" + "region" + "\\}", escapeString(params.getString("region")));
        }

        if (params.has("id") && (!params.getString("id").isEmpty())) {
          path = path.replaceAll("\\{" + "id" + "\\}", escapeString(params.getString("id")));
        }

        if (params.has("startPage") && (!params.getString("startPage").isEmpty())) {
          urlBuilder.addQueryParameter("start_page", escapeString(String.valueOf(params.getInt("startPage"))));
        }

        if (params.has("count") && (!params.getString("count").isEmpty())) {
          urlBuilder.addQueryParameter("count", escapeString(String.valueOf(params.getInt("count"))));
        }

        if (params.has("depth") && (!params.getString("depth").isEmpty())) {
          urlBuilder.addQueryParameter("depth", escapeString(String.valueOf(params.getInt("depth"))));
        }

        if (params.has("forbiddenId") && (!params.getString("forbiddenId").isEmpty())) {
          urlBuilder.addQueryParameter("forbidden_id[]", escapeString(String.valueOf(params.getJSONArray("forbiddenId"))));
        }

        if (params.has("forbiddenUris") && (!params.getString("forbiddenUris").isEmpty())) {
          urlBuilder.addQueryParameter("forbidden_uris[]", escapeString(String.valueOf(params.getJSONArray("forbiddenUris"))));
        }

        if (params.has("externalCode") && (!params.getString("externalCode").isEmpty())) {
          urlBuilder.addQueryParameter("external_code", escapeString(params.getString("externalCode")));
        }

        if (params.has("headsign") && (!params.getString("headsign").isEmpty())) {
          urlBuilder.addQueryParameter("headsign", escapeString(params.getString("headsign")));
        }

        if (params.has("showCodes") && (!params.getString("showCodes").isEmpty())) {
          urlBuilder.addQueryParameter("show_codes", escapeString(String.valueOf(params.getBoolean("showCodes"))));
        }

        if (params.has("odtLevel") && (!params.getString("odtLevel").isEmpty())) {
          urlBuilder.addQueryParameter("odt_level", escapeString(params.getString("odtLevel")));
        }

        if (params.has("dataFreshness") && (!params.getString("dataFreshness").isEmpty())) {
          urlBuilder.addQueryParameter("data_freshness", escapeString(params.getString("dataFreshness")));
        }

        if (params.has("distance") && (!params.getString("distance").isEmpty())) {
          urlBuilder.addQueryParameter("distance", escapeString(String.valueOf(params.getInt("distance"))));
        }

        if (params.has("since") && (!params.getString("since").isEmpty())) {
          urlBuilder.addQueryParameter("since", escapeString(String.valueOf(params.getString("since"))));
        }

        if (params.has("until") && (!params.getString("until").isEmpty())) {
          urlBuilder.addQueryParameter("until", escapeString(String.valueOf(params.getString("until"))));
        }

        if (params.has("disableGeojson") && (!params.getString("disableGeojson").isEmpty())) {
          urlBuilder.addQueryParameter("disable_geojson", escapeString(String.valueOf(params.getBoolean("disableGeojson"))));
        }

        if (params.has("disableDisruption") && (!params.getString("disableDisruption").isEmpty())) {
          urlBuilder.addQueryParameter("disable_disruption", escapeString(String.valueOf(params.getBoolean("disableDisruption"))));
        }

        if (params.has("tags") && (!params.getString("tags").isEmpty())) {
          urlBuilder.addQueryParameter("tags[]", escapeString(String.valueOf(params.getJSONArray("tags"))));
        }

        if (params.has("originalId") && (!params.getString("originalId").isEmpty())) {
          urlBuilder.addQueryParameter("original_id", escapeString(params.getString("originalId")));
        }

        HttpUrl url = urlBuilder
          .addPathSegments(path)
          .build();
        Request request = requestBuilder.url(url)
          .build();

        client.newCall(request).enqueue(new Callback() {

          @Override
          public void onFailure(@NonNull Call call, @NonNull IOException e) {
            String errorMessage = "Problem during request | " + String.valueOf(e.hashCode()) + ": " + e.getMessage();
            callbackContext.error(errorMessage);
          }

          @Override
          public void onResponse(@NonNull Call call, @NonNull Response response) {
            if (response.isSuccessful()) {
              try {
                JSONObject jsonObject = new JSONObject(Objects.requireNonNull(response.body()).string());
                callbackContext.success(jsonObject);
              } catch (Exception e) {
                String errorMessage = "Problem during response parsing";
                callbackContext.error(errorMessage);
              }
            } else {
              callbackContext.error("Unexpected code " + response.code() + " | message: " + response.message());
            }
          }
        });
      } catch (Exception e) {
        String errorMessage = "Problem during request building | " + e.hashCode() + ": " + e.getMessage();
        callbackContext.error(errorMessage);
      }
    });
  }

  private void coverageRegionUriStopAreas(final JSONObject params, final CallbackContext callbackContext) {
    cordova.getThreadPool().execute(() -> {
      try {
        HttpUrl.Builder urlBuilder = new HttpUrl.Builder()
          .scheme("https")
          .host("api.navitia.io")
          .addPathSegment("v1");
        Request.Builder requestBuilder = new Request.Builder()
          .header("Authorization", token);
        String path = "/coverage/{region}/{uri}/stop_areas".substring(1);

        if (params.has("region") && (!params.getString("region").isEmpty())) {
          path = path.replaceAll("\\{" + "region" + "\\}", escapeString(params.getString("region")));
        }

        if (params.has("uri") && (!params.getString("uri").isEmpty())) {
          path = path.replaceAll("\\{" + "uri" + "\\}", escapeString(params.getString("uri")));
        }

        if (params.has("startPage") && (!params.getString("startPage").isEmpty())) {
          urlBuilder.addQueryParameter("start_page", escapeString(String.valueOf(params.getInt("startPage"))));
        }

        if (params.has("count") && (!params.getString("count").isEmpty())) {
          urlBuilder.addQueryParameter("count", escapeString(String.valueOf(params.getInt("count"))));
        }

        if (params.has("depth") && (!params.getString("depth").isEmpty())) {
          urlBuilder.addQueryParameter("depth", escapeString(String.valueOf(params.getInt("depth"))));
        }

        if (params.has("forbiddenId") && (!params.getString("forbiddenId").isEmpty())) {
          urlBuilder.addQueryParameter("forbidden_id[]", escapeString(String.valueOf(params.getJSONArray("forbiddenId"))));
        }

        if (params.has("forbiddenUris") && (!params.getString("forbiddenUris").isEmpty())) {
          urlBuilder.addQueryParameter("forbidden_uris[]", escapeString(String.valueOf(params.getJSONArray("forbiddenUris"))));
        }

        if (params.has("externalCode") && (!params.getString("externalCode").isEmpty())) {
          urlBuilder.addQueryParameter("external_code", escapeString(params.getString("externalCode")));
        }

        if (params.has("headsign") && (!params.getString("headsign").isEmpty())) {
          urlBuilder.addQueryParameter("headsign", escapeString(params.getString("headsign")));
        }

        if (params.has("showCodes") && (!params.getString("showCodes").isEmpty())) {
          urlBuilder.addQueryParameter("show_codes", escapeString(String.valueOf(params.getBoolean("showCodes"))));
        }

        if (params.has("odtLevel") && (!params.getString("odtLevel").isEmpty())) {
          urlBuilder.addQueryParameter("odt_level", escapeString(params.getString("odtLevel")));
        }

        if (params.has("dataFreshness") && (!params.getString("dataFreshness").isEmpty())) {
          urlBuilder.addQueryParameter("data_freshness", escapeString(params.getString("dataFreshness")));
        }

        if (params.has("distance") && (!params.getString("distance").isEmpty())) {
          urlBuilder.addQueryParameter("distance", escapeString(String.valueOf(params.getInt("distance"))));
        }

        if (params.has("since") && (!params.getString("since").isEmpty())) {
          urlBuilder.addQueryParameter("since", escapeString(String.valueOf(params.getString("since"))));
        }

        if (params.has("until") && (!params.getString("until").isEmpty())) {
          urlBuilder.addQueryParameter("until", escapeString(String.valueOf(params.getString("until"))));
        }

        if (params.has("disableGeojson") && (!params.getString("disableGeojson").isEmpty())) {
          urlBuilder.addQueryParameter("disable_geojson", escapeString(String.valueOf(params.getBoolean("disableGeojson"))));
        }

        if (params.has("disableDisruption") && (!params.getString("disableDisruption").isEmpty())) {
          urlBuilder.addQueryParameter("disable_disruption", escapeString(String.valueOf(params.getBoolean("disableDisruption"))));
        }

        if (params.has("filter") && (!params.getString("filter").isEmpty())) {
          urlBuilder.addQueryParameter("filter", escapeString(params.getString("filter")));
        }

        if (params.has("tags") && (!params.getString("tags").isEmpty())) {
          urlBuilder.addQueryParameter("tags[]", escapeString(String.valueOf(params.getJSONArray("tags"))));
        }

        if (params.has("originalId") && (!params.getString("originalId").isEmpty())) {
          urlBuilder.addQueryParameter("original_id", escapeString(params.getString("originalId")));
        }

        HttpUrl url = urlBuilder
          .addPathSegments(path)
          .build();
        Request request = requestBuilder.url(url)
          .build();

        client.newCall(request).enqueue(new Callback() {

          @Override
          public void onFailure(@NonNull Call call, @NonNull IOException e) {
            String errorMessage = "Problem during request | " + String.valueOf(e.hashCode()) + ": " + e.getMessage();
            callbackContext.error(errorMessage);
          }

          @Override
          public void onResponse(@NonNull Call call, @NonNull Response response) {
            if (response.isSuccessful()) {
              try {
                JSONObject jsonObject = new JSONObject(Objects.requireNonNull(response.body()).string());
                callbackContext.success(jsonObject);
              } catch (Exception e) {
                String errorMessage = "Problem during response parsing";
                callbackContext.error(errorMessage);
              }
            } else {
              callbackContext.error("Unexpected code " + response.code() + " | message: " + response.message());
            }
          }
        });
      } catch (Exception e) {
        String errorMessage = "Problem during request building | " + e.hashCode() + ": " + e.getMessage();
        callbackContext.error(errorMessage);
      }
    });
  }

  private void coverageRegionUriStopAreasId(final JSONObject params, final CallbackContext callbackContext) {
    cordova.getThreadPool().execute(() -> {
      try {
        HttpUrl.Builder urlBuilder = new HttpUrl.Builder()
          .scheme("https")
          .host("api.navitia.io")
          .addPathSegment("v1");
        Request.Builder requestBuilder = new Request.Builder()
          .header("Authorization", token);
        String path = "/coverage/{region}/{uri}/stop_areas/{id}".substring(1);

        if (params.has("region") && (!params.getString("region").isEmpty())) {
          path = path.replaceAll("\\{" + "region" + "\\}", escapeString(params.getString("region")));
        }

        if (params.has("uri") && (!params.getString("uri").isEmpty())) {
          path = path.replaceAll("\\{" + "uri" + "\\}", escapeString(params.getString("uri")));
        }

        if (params.has("id") && (!params.getString("id").isEmpty())) {
          path = path.replaceAll("\\{" + "id" + "\\}", escapeString(params.getString("id")));
        }

        if (params.has("startPage") && (!params.getString("startPage").isEmpty())) {
          urlBuilder.addQueryParameter("start_page", escapeString(String.valueOf(params.getInt("startPage"))));
        }

        if (params.has("count") && (!params.getString("count").isEmpty())) {
          urlBuilder.addQueryParameter("count", escapeString(String.valueOf(params.getInt("count"))));
        }

        if (params.has("depth") && (!params.getString("depth").isEmpty())) {
          urlBuilder.addQueryParameter("depth", escapeString(String.valueOf(params.getInt("depth"))));
        }

        if (params.has("forbiddenId") && (!params.getString("forbiddenId").isEmpty())) {
          urlBuilder.addQueryParameter("forbidden_id[]", escapeString(String.valueOf(params.getJSONArray("forbiddenId"))));
        }

        if (params.has("forbiddenUris") && (!params.getString("forbiddenUris").isEmpty())) {
          urlBuilder.addQueryParameter("forbidden_uris[]", escapeString(String.valueOf(params.getJSONArray("forbiddenUris"))));
        }

        if (params.has("externalCode") && (!params.getString("externalCode").isEmpty())) {
          urlBuilder.addQueryParameter("external_code", escapeString(params.getString("externalCode")));
        }

        if (params.has("headsign") && (!params.getString("headsign").isEmpty())) {
          urlBuilder.addQueryParameter("headsign", escapeString(params.getString("headsign")));
        }

        if (params.has("showCodes") && (!params.getString("showCodes").isEmpty())) {
          urlBuilder.addQueryParameter("show_codes", escapeString(String.valueOf(params.getBoolean("showCodes"))));
        }

        if (params.has("odtLevel") && (!params.getString("odtLevel").isEmpty())) {
          urlBuilder.addQueryParameter("odt_level", escapeString(params.getString("odtLevel")));
        }

        if (params.has("dataFreshness") && (!params.getString("dataFreshness").isEmpty())) {
          urlBuilder.addQueryParameter("data_freshness", escapeString(params.getString("dataFreshness")));
        }

        if (params.has("distance") && (!params.getString("distance").isEmpty())) {
          urlBuilder.addQueryParameter("distance", escapeString(String.valueOf(params.getInt("distance"))));
        }

        if (params.has("since") && (!params.getString("since").isEmpty())) {
          urlBuilder.addQueryParameter("since", escapeString(String.valueOf(params.getString("since"))));
        }

        if (params.has("until") && (!params.getString("until").isEmpty())) {
          urlBuilder.addQueryParameter("until", escapeString(String.valueOf(params.getString("until"))));
        }

        if (params.has("disableGeojson") && (!params.getString("disableGeojson").isEmpty())) {
          urlBuilder.addQueryParameter("disable_geojson", escapeString(String.valueOf(params.getBoolean("disableGeojson"))));
        }

        if (params.has("disableDisruption") && (!params.getString("disableDisruption").isEmpty())) {
          urlBuilder.addQueryParameter("disable_disruption", escapeString(String.valueOf(params.getBoolean("disableDisruption"))));
        }

        if (params.has("tags") && (!params.getString("tags").isEmpty())) {
          urlBuilder.addQueryParameter("tags[]", escapeString(String.valueOf(params.getJSONArray("tags"))));
        }

        if (params.has("originalId") && (!params.getString("originalId").isEmpty())) {
          urlBuilder.addQueryParameter("original_id", escapeString(params.getString("originalId")));
        }

        HttpUrl url = urlBuilder
          .addPathSegments(path)
          .build();
        Request request = requestBuilder.url(url)
          .build();

        client.newCall(request).enqueue(new Callback() {

          @Override
          public void onFailure(@NonNull Call call, @NonNull IOException e) {
            String errorMessage = "Problem during request | " + String.valueOf(e.hashCode()) + ": " + e.getMessage();
            callbackContext.error(errorMessage);
          }

          @Override
          public void onResponse(@NonNull Call call, @NonNull Response response) {
            if (response.isSuccessful()) {
              try {
                JSONObject jsonObject = new JSONObject(Objects.requireNonNull(response.body()).string());
                callbackContext.success(jsonObject);
              } catch (Exception e) {
                String errorMessage = "Problem during response parsing";
                callbackContext.error(errorMessage);
              }
            } else {
              callbackContext.error("Unexpected code " + response.code() + " | message: " + response.message());
            }
          }
        });
      } catch (Exception e) {
        String errorMessage = "Problem during request building | " + e.hashCode() + ": " + e.getMessage();
        callbackContext.error(errorMessage);
      }
    });
  }

  private void stopAreas(final JSONObject params, final CallbackContext callbackContext) {
    cordova.getThreadPool().execute(() -> {
      try {
        HttpUrl.Builder urlBuilder = new HttpUrl.Builder()
          .scheme("https")
          .host("api.navitia.io")
          .addPathSegment("v1");
        Request.Builder requestBuilder = new Request.Builder()
          .header("Authorization", token);
        String path = "/stop_areas".substring(1);

        if (params.has("externalCode") && (!params.getString("externalCode").isEmpty())) {
          urlBuilder.addQueryParameter("external_code", escapeString(params.getString("externalCode")));
        }

        if (params.has("startPage") && (!params.getString("startPage").isEmpty())) {
          urlBuilder.addQueryParameter("start_page", escapeString(String.valueOf(params.getInt("startPage"))));
        }

        if (params.has("count") && (!params.getString("count").isEmpty())) {
          urlBuilder.addQueryParameter("count", escapeString(String.valueOf(params.getInt("count"))));
        }

        if (params.has("depth") && (!params.getString("depth").isEmpty())) {
          urlBuilder.addQueryParameter("depth", escapeString(String.valueOf(params.getInt("depth"))));
        }

        if (params.has("forbiddenId") && (!params.getString("forbiddenId").isEmpty())) {
          urlBuilder.addQueryParameter("forbidden_id[]", escapeString(String.valueOf(params.getJSONArray("forbiddenId"))));
        }

        if (params.has("forbiddenUris") && (!params.getString("forbiddenUris").isEmpty())) {
          urlBuilder.addQueryParameter("forbidden_uris[]", escapeString(String.valueOf(params.getJSONArray("forbiddenUris"))));
        }

        if (params.has("headsign") && (!params.getString("headsign").isEmpty())) {
          urlBuilder.addQueryParameter("headsign", escapeString(params.getString("headsign")));
        }

        if (params.has("showCodes") && (!params.getString("showCodes").isEmpty())) {
          urlBuilder.addQueryParameter("show_codes", escapeString(String.valueOf(params.getBoolean("showCodes"))));
        }

        if (params.has("odtLevel") && (!params.getString("odtLevel").isEmpty())) {
          urlBuilder.addQueryParameter("odt_level", escapeString(params.getString("odtLevel")));
        }

        if (params.has("dataFreshness") && (!params.getString("dataFreshness").isEmpty())) {
          urlBuilder.addQueryParameter("data_freshness", escapeString(params.getString("dataFreshness")));
        }

        if (params.has("distance") && (!params.getString("distance").isEmpty())) {
          urlBuilder.addQueryParameter("distance", escapeString(String.valueOf(params.getInt("distance"))));
        }

        if (params.has("since") && (!params.getString("since").isEmpty())) {
          urlBuilder.addQueryParameter("since", escapeString(String.valueOf(params.getString("since"))));
        }

        if (params.has("until") && (!params.getString("until").isEmpty())) {
          urlBuilder.addQueryParameter("until", escapeString(String.valueOf(params.getString("until"))));
        }

        if (params.has("disableGeojson") && (!params.getString("disableGeojson").isEmpty())) {
          urlBuilder.addQueryParameter("disable_geojson", escapeString(String.valueOf(params.getBoolean("disableGeojson"))));
        }

        if (params.has("disableDisruption") && (!params.getString("disableDisruption").isEmpty())) {
          urlBuilder.addQueryParameter("disable_disruption", escapeString(String.valueOf(params.getBoolean("disableDisruption"))));
        }

        if (params.has("filter") && (!params.getString("filter").isEmpty())) {
          urlBuilder.addQueryParameter("filter", escapeString(params.getString("filter")));
        }

        if (params.has("tags") && (!params.getString("tags").isEmpty())) {
          urlBuilder.addQueryParameter("tags[]", escapeString(String.valueOf(params.getJSONArray("tags"))));
        }

        if (params.has("originalId") && (!params.getString("originalId").isEmpty())) {
          urlBuilder.addQueryParameter("original_id", escapeString(params.getString("originalId")));
        }

        HttpUrl url = urlBuilder
          .addPathSegments(path)
          .build();
        Request request = requestBuilder.url(url)
          .build();

        client.newCall(request).enqueue(new Callback() {

          @Override
          public void onFailure(@NonNull Call call, @NonNull IOException e) {
            String errorMessage = "Problem during request | " + String.valueOf(e.hashCode()) + ": " + e.getMessage();
            callbackContext.error(errorMessage);
          }

          @Override
          public void onResponse(@NonNull Call call, @NonNull Response response) {
            if (response.isSuccessful()) {
              try {
                JSONObject jsonObject = new JSONObject(Objects.requireNonNull(response.body()).string());
                callbackContext.success(jsonObject);
              } catch (Exception e) {
                String errorMessage = "Problem during response parsing";
                callbackContext.error(errorMessage);
              }
            } else {
              callbackContext.error("Unexpected code " + response.code() + " | message: " + response.message());
            }
          }
        });
      } catch (Exception e) {
        String errorMessage = "Problem during request building | " + e.hashCode() + ": " + e.getMessage();
        callbackContext.error(errorMessage);
      }
    });
  }

  private void coverageLonLatStopPoints(final JSONObject params, final CallbackContext callbackContext) {
    cordova.getThreadPool().execute(() -> {
      try {
        HttpUrl.Builder urlBuilder = new HttpUrl.Builder()
          .scheme("https")
          .host("api.navitia.io")
          .addPathSegment("v1");
        Request.Builder requestBuilder = new Request.Builder()
          .header("Authorization", token);
        String path = "/coverage/{lon};{lat}/stop_points".substring(1);

        if (params.has("lat") && (!params.getString("lat").isEmpty())) {
          path = path.replaceAll("\\{" + "lat" + "\\}", escapeString(String.valueOf(params.getLong("lat"))));
        }

        if (params.has("lon") && (!params.getString("lon").isEmpty())) {
          path = path.replaceAll("\\{" + "lon" + "\\}", escapeString(String.valueOf(params.getLong("lon"))));
        }

        if (params.has("startPage") && (!params.getString("startPage").isEmpty())) {
          urlBuilder.addQueryParameter("start_page", escapeString(String.valueOf(params.getInt("startPage"))));
        }

        if (params.has("count") && (!params.getString("count").isEmpty())) {
          urlBuilder.addQueryParameter("count", escapeString(String.valueOf(params.getInt("count"))));
        }

        if (params.has("depth") && (!params.getString("depth").isEmpty())) {
          urlBuilder.addQueryParameter("depth", escapeString(String.valueOf(params.getInt("depth"))));
        }

        if (params.has("forbiddenId") && (!params.getString("forbiddenId").isEmpty())) {
          urlBuilder.addQueryParameter("forbidden_id[]", escapeString(String.valueOf(params.getJSONArray("forbiddenId"))));
        }

        if (params.has("forbiddenUris") && (!params.getString("forbiddenUris").isEmpty())) {
          urlBuilder.addQueryParameter("forbidden_uris[]", escapeString(String.valueOf(params.getJSONArray("forbiddenUris"))));
        }

        if (params.has("externalCode") && (!params.getString("externalCode").isEmpty())) {
          urlBuilder.addQueryParameter("external_code", escapeString(params.getString("externalCode")));
        }

        if (params.has("headsign") && (!params.getString("headsign").isEmpty())) {
          urlBuilder.addQueryParameter("headsign", escapeString(params.getString("headsign")));
        }

        if (params.has("showCodes") && (!params.getString("showCodes").isEmpty())) {
          urlBuilder.addQueryParameter("show_codes", escapeString(String.valueOf(params.getBoolean("showCodes"))));
        }

        if (params.has("odtLevel") && (!params.getString("odtLevel").isEmpty())) {
          urlBuilder.addQueryParameter("odt_level", escapeString(params.getString("odtLevel")));
        }

        if (params.has("dataFreshness") && (!params.getString("dataFreshness").isEmpty())) {
          urlBuilder.addQueryParameter("data_freshness", escapeString(params.getString("dataFreshness")));
        }

        if (params.has("distance") && (!params.getString("distance").isEmpty())) {
          urlBuilder.addQueryParameter("distance", escapeString(String.valueOf(params.getInt("distance"))));
        }

        if (params.has("since") && (!params.getString("since").isEmpty())) {
          urlBuilder.addQueryParameter("since", escapeString(String.valueOf(params.getString("since"))));
        }

        if (params.has("until") && (!params.getString("until").isEmpty())) {
          urlBuilder.addQueryParameter("until", escapeString(String.valueOf(params.getString("until"))));
        }

        if (params.has("disableGeojson") && (!params.getString("disableGeojson").isEmpty())) {
          urlBuilder.addQueryParameter("disable_geojson", escapeString(String.valueOf(params.getBoolean("disableGeojson"))));
        }

        if (params.has("disableDisruption") && (!params.getString("disableDisruption").isEmpty())) {
          urlBuilder.addQueryParameter("disable_disruption", escapeString(String.valueOf(params.getBoolean("disableDisruption"))));
        }

        if (params.has("filter") && (!params.getString("filter").isEmpty())) {
          urlBuilder.addQueryParameter("filter", escapeString(params.getString("filter")));
        }

        if (params.has("tags") && (!params.getString("tags").isEmpty())) {
          urlBuilder.addQueryParameter("tags[]", escapeString(String.valueOf(params.getJSONArray("tags"))));
        }

        if (params.has("originalId") && (!params.getString("originalId").isEmpty())) {
          urlBuilder.addQueryParameter("original_id", escapeString(params.getString("originalId")));
        }

        HttpUrl url = urlBuilder
          .addPathSegments(path)
          .build();
        Request request = requestBuilder.url(url)
          .build();

        client.newCall(request).enqueue(new Callback() {

          @Override
          public void onFailure(@NonNull Call call, @NonNull IOException e) {
            String errorMessage = "Problem during request | " + String.valueOf(e.hashCode()) + ": " + e.getMessage();
            callbackContext.error(errorMessage);
          }

          @Override
          public void onResponse(@NonNull Call call, @NonNull Response response) {
            if (response.isSuccessful()) {
              try {
                JSONObject jsonObject = new JSONObject(Objects.requireNonNull(response.body()).string());
                callbackContext.success(jsonObject);
              } catch (Exception e) {
                String errorMessage = "Problem during response parsing";
                callbackContext.error(errorMessage);
              }
            } else {
              callbackContext.error("Unexpected code " + response.code() + " | message: " + response.message());
            }
          }
        });
      } catch (Exception e) {
        String errorMessage = "Problem during request building | " + e.hashCode() + ": " + e.getMessage();
        callbackContext.error(errorMessage);
      }
    });
  }

  private void coverageLonLatStopPointsId(final JSONObject params, final CallbackContext callbackContext) {
    cordova.getThreadPool().execute(() -> {
      try {
        HttpUrl.Builder urlBuilder = new HttpUrl.Builder()
          .scheme("https")
          .host("api.navitia.io")
          .addPathSegment("v1");
        Request.Builder requestBuilder = new Request.Builder()
          .header("Authorization", token);
        String path = "/coverage/{lon};{lat}/stop_points/{id}".substring(1);

        if (params.has("lat") && (!params.getString("lat").isEmpty())) {
          path = path.replaceAll("\\{" + "lat" + "\\}", escapeString(String.valueOf(params.getLong("lat"))));
        }

        if (params.has("lon") && (!params.getString("lon").isEmpty())) {
          path = path.replaceAll("\\{" + "lon" + "\\}", escapeString(String.valueOf(params.getLong("lon"))));
        }

        if (params.has("id") && (!params.getString("id").isEmpty())) {
          path = path.replaceAll("\\{" + "id" + "\\}", escapeString(params.getString("id")));
        }

        if (params.has("startPage") && (!params.getString("startPage").isEmpty())) {
          urlBuilder.addQueryParameter("start_page", escapeString(String.valueOf(params.getInt("startPage"))));
        }

        if (params.has("count") && (!params.getString("count").isEmpty())) {
          urlBuilder.addQueryParameter("count", escapeString(String.valueOf(params.getInt("count"))));
        }

        if (params.has("depth") && (!params.getString("depth").isEmpty())) {
          urlBuilder.addQueryParameter("depth", escapeString(String.valueOf(params.getInt("depth"))));
        }

        if (params.has("forbiddenId") && (!params.getString("forbiddenId").isEmpty())) {
          urlBuilder.addQueryParameter("forbidden_id[]", escapeString(String.valueOf(params.getJSONArray("forbiddenId"))));
        }

        if (params.has("forbiddenUris") && (!params.getString("forbiddenUris").isEmpty())) {
          urlBuilder.addQueryParameter("forbidden_uris[]", escapeString(String.valueOf(params.getJSONArray("forbiddenUris"))));
        }

        if (params.has("externalCode") && (!params.getString("externalCode").isEmpty())) {
          urlBuilder.addQueryParameter("external_code", escapeString(params.getString("externalCode")));
        }

        if (params.has("headsign") && (!params.getString("headsign").isEmpty())) {
          urlBuilder.addQueryParameter("headsign", escapeString(params.getString("headsign")));
        }

        if (params.has("showCodes") && (!params.getString("showCodes").isEmpty())) {
          urlBuilder.addQueryParameter("show_codes", escapeString(String.valueOf(params.getBoolean("showCodes"))));
        }

        if (params.has("odtLevel") && (!params.getString("odtLevel").isEmpty())) {
          urlBuilder.addQueryParameter("odt_level", escapeString(params.getString("odtLevel")));
        }

        if (params.has("dataFreshness") && (!params.getString("dataFreshness").isEmpty())) {
          urlBuilder.addQueryParameter("data_freshness", escapeString(params.getString("dataFreshness")));
        }

        if (params.has("distance") && (!params.getString("distance").isEmpty())) {
          urlBuilder.addQueryParameter("distance", escapeString(String.valueOf(params.getInt("distance"))));
        }

        if (params.has("since") && (!params.getString("since").isEmpty())) {
          urlBuilder.addQueryParameter("since", escapeString(String.valueOf(params.getString("since"))));
        }

        if (params.has("until") && (!params.getString("until").isEmpty())) {
          urlBuilder.addQueryParameter("until", escapeString(String.valueOf(params.getString("until"))));
        }

        if (params.has("disableGeojson") && (!params.getString("disableGeojson").isEmpty())) {
          urlBuilder.addQueryParameter("disable_geojson", escapeString(String.valueOf(params.getBoolean("disableGeojson"))));
        }

        if (params.has("disableDisruption") && (!params.getString("disableDisruption").isEmpty())) {
          urlBuilder.addQueryParameter("disable_disruption", escapeString(String.valueOf(params.getBoolean("disableDisruption"))));
        }

        if (params.has("tags") && (!params.getString("tags").isEmpty())) {
          urlBuilder.addQueryParameter("tags[]", escapeString(String.valueOf(params.getJSONArray("tags"))));
        }

        if (params.has("originalId") && (!params.getString("originalId").isEmpty())) {
          urlBuilder.addQueryParameter("original_id", escapeString(params.getString("originalId")));
        }

        HttpUrl url = urlBuilder
          .addPathSegments(path)
          .build();
        Request request = requestBuilder.url(url)
          .build();

        client.newCall(request).enqueue(new Callback() {

          @Override
          public void onFailure(@NonNull Call call, @NonNull IOException e) {
            String errorMessage = "Problem during request | " + String.valueOf(e.hashCode()) + ": " + e.getMessage();
            callbackContext.error(errorMessage);
          }

          @Override
          public void onResponse(@NonNull Call call, @NonNull Response response) {
            if (response.isSuccessful()) {
              try {
                JSONObject jsonObject = new JSONObject(Objects.requireNonNull(response.body()).string());
                callbackContext.success(jsonObject);
              } catch (Exception e) {
                String errorMessage = "Problem during response parsing";
                callbackContext.error(errorMessage);
              }
            } else {
              callbackContext.error("Unexpected code " + response.code() + " | message: " + response.message());
            }
          }
        });
      } catch (Exception e) {
        String errorMessage = "Problem during request building | " + e.hashCode() + ": " + e.getMessage();
        callbackContext.error(errorMessage);
      }
    });
  }

  private void coverageLonLatUriStopPoints(final JSONObject params, final CallbackContext callbackContext) {
    cordova.getThreadPool().execute(() -> {
      try {
        HttpUrl.Builder urlBuilder = new HttpUrl.Builder()
          .scheme("https")
          .host("api.navitia.io")
          .addPathSegment("v1");
        Request.Builder requestBuilder = new Request.Builder()
          .header("Authorization", token);
        String path = "/coverage/{lon};{lat}/{uri}/stop_points".substring(1);

        if (params.has("lat") && (!params.getString("lat").isEmpty())) {
          path = path.replaceAll("\\{" + "lat" + "\\}", escapeString(String.valueOf(params.getLong("lat"))));
        }

        if (params.has("lon") && (!params.getString("lon").isEmpty())) {
          path = path.replaceAll("\\{" + "lon" + "\\}", escapeString(String.valueOf(params.getLong("lon"))));
        }

        if (params.has("uri") && (!params.getString("uri").isEmpty())) {
          path = path.replaceAll("\\{" + "uri" + "\\}", escapeString(params.getString("uri")));
        }

        if (params.has("startPage") && (!params.getString("startPage").isEmpty())) {
          urlBuilder.addQueryParameter("start_page", escapeString(String.valueOf(params.getInt("startPage"))));
        }

        if (params.has("count") && (!params.getString("count").isEmpty())) {
          urlBuilder.addQueryParameter("count", escapeString(String.valueOf(params.getInt("count"))));
        }

        if (params.has("depth") && (!params.getString("depth").isEmpty())) {
          urlBuilder.addQueryParameter("depth", escapeString(String.valueOf(params.getInt("depth"))));
        }

        if (params.has("forbiddenId") && (!params.getString("forbiddenId").isEmpty())) {
          urlBuilder.addQueryParameter("forbidden_id[]", escapeString(String.valueOf(params.getJSONArray("forbiddenId"))));
        }

        if (params.has("forbiddenUris") && (!params.getString("forbiddenUris").isEmpty())) {
          urlBuilder.addQueryParameter("forbidden_uris[]", escapeString(String.valueOf(params.getJSONArray("forbiddenUris"))));
        }

        if (params.has("externalCode") && (!params.getString("externalCode").isEmpty())) {
          urlBuilder.addQueryParameter("external_code", escapeString(params.getString("externalCode")));
        }

        if (params.has("headsign") && (!params.getString("headsign").isEmpty())) {
          urlBuilder.addQueryParameter("headsign", escapeString(params.getString("headsign")));
        }

        if (params.has("showCodes") && (!params.getString("showCodes").isEmpty())) {
          urlBuilder.addQueryParameter("show_codes", escapeString(String.valueOf(params.getBoolean("showCodes"))));
        }

        if (params.has("odtLevel") && (!params.getString("odtLevel").isEmpty())) {
          urlBuilder.addQueryParameter("odt_level", escapeString(params.getString("odtLevel")));
        }

        if (params.has("dataFreshness") && (!params.getString("dataFreshness").isEmpty())) {
          urlBuilder.addQueryParameter("data_freshness", escapeString(params.getString("dataFreshness")));
        }

        if (params.has("distance") && (!params.getString("distance").isEmpty())) {
          urlBuilder.addQueryParameter("distance", escapeString(String.valueOf(params.getInt("distance"))));
        }

        if (params.has("since") && (!params.getString("since").isEmpty())) {
          urlBuilder.addQueryParameter("since", escapeString(String.valueOf(params.getString("since"))));
        }

        if (params.has("until") && (!params.getString("until").isEmpty())) {
          urlBuilder.addQueryParameter("until", escapeString(String.valueOf(params.getString("until"))));
        }

        if (params.has("disableGeojson") && (!params.getString("disableGeojson").isEmpty())) {
          urlBuilder.addQueryParameter("disable_geojson", escapeString(String.valueOf(params.getBoolean("disableGeojson"))));
        }

        if (params.has("disableDisruption") && (!params.getString("disableDisruption").isEmpty())) {
          urlBuilder.addQueryParameter("disable_disruption", escapeString(String.valueOf(params.getBoolean("disableDisruption"))));
        }

        if (params.has("filter") && (!params.getString("filter").isEmpty())) {
          urlBuilder.addQueryParameter("filter", escapeString(params.getString("filter")));
        }

        if (params.has("tags") && (!params.getString("tags").isEmpty())) {
          urlBuilder.addQueryParameter("tags[]", escapeString(String.valueOf(params.getJSONArray("tags"))));
        }

        if (params.has("originalId") && (!params.getString("originalId").isEmpty())) {
          urlBuilder.addQueryParameter("original_id", escapeString(params.getString("originalId")));
        }

        HttpUrl url = urlBuilder
          .addPathSegments(path)
          .build();
        Request request = requestBuilder.url(url)
          .build();

        client.newCall(request).enqueue(new Callback() {

          @Override
          public void onFailure(@NonNull Call call, @NonNull IOException e) {
            String errorMessage = "Problem during request | " + String.valueOf(e.hashCode()) + ": " + e.getMessage();
            callbackContext.error(errorMessage);
          }

          @Override
          public void onResponse(@NonNull Call call, @NonNull Response response) {
            if (response.isSuccessful()) {
              try {
                JSONObject jsonObject = new JSONObject(Objects.requireNonNull(response.body()).string());
                callbackContext.success(jsonObject);
              } catch (Exception e) {
                String errorMessage = "Problem during response parsing";
                callbackContext.error(errorMessage);
              }
            } else {
              callbackContext.error("Unexpected code " + response.code() + " | message: " + response.message());
            }
          }
        });
      } catch (Exception e) {
        String errorMessage = "Problem during request building | " + e.hashCode() + ": " + e.getMessage();
        callbackContext.error(errorMessage);
      }
    });
  }

  private void coverageLonLatUriStopPointsId(final JSONObject params, final CallbackContext callbackContext) {
    cordova.getThreadPool().execute(() -> {
      try {
        HttpUrl.Builder urlBuilder = new HttpUrl.Builder()
          .scheme("https")
          .host("api.navitia.io")
          .addPathSegment("v1");
        Request.Builder requestBuilder = new Request.Builder()
          .header("Authorization", token);
        String path = "/coverage/{lon};{lat}/{uri}/stop_points/{id}".substring(1);

        if (params.has("lat") && (!params.getString("lat").isEmpty())) {
          path = path.replaceAll("\\{" + "lat" + "\\}", escapeString(String.valueOf(params.getLong("lat"))));
        }

        if (params.has("lon") && (!params.getString("lon").isEmpty())) {
          path = path.replaceAll("\\{" + "lon" + "\\}", escapeString(String.valueOf(params.getLong("lon"))));
        }

        if (params.has("uri") && (!params.getString("uri").isEmpty())) {
          path = path.replaceAll("\\{" + "uri" + "\\}", escapeString(params.getString("uri")));
        }

        if (params.has("id") && (!params.getString("id").isEmpty())) {
          path = path.replaceAll("\\{" + "id" + "\\}", escapeString(params.getString("id")));
        }

        if (params.has("startPage") && (!params.getString("startPage").isEmpty())) {
          urlBuilder.addQueryParameter("start_page", escapeString(String.valueOf(params.getInt("startPage"))));
        }

        if (params.has("count") && (!params.getString("count").isEmpty())) {
          urlBuilder.addQueryParameter("count", escapeString(String.valueOf(params.getInt("count"))));
        }

        if (params.has("depth") && (!params.getString("depth").isEmpty())) {
          urlBuilder.addQueryParameter("depth", escapeString(String.valueOf(params.getInt("depth"))));
        }

        if (params.has("forbiddenId") && (!params.getString("forbiddenId").isEmpty())) {
          urlBuilder.addQueryParameter("forbidden_id[]", escapeString(String.valueOf(params.getJSONArray("forbiddenId"))));
        }

        if (params.has("forbiddenUris") && (!params.getString("forbiddenUris").isEmpty())) {
          urlBuilder.addQueryParameter("forbidden_uris[]", escapeString(String.valueOf(params.getJSONArray("forbiddenUris"))));
        }

        if (params.has("externalCode") && (!params.getString("externalCode").isEmpty())) {
          urlBuilder.addQueryParameter("external_code", escapeString(params.getString("externalCode")));
        }

        if (params.has("headsign") && (!params.getString("headsign").isEmpty())) {
          urlBuilder.addQueryParameter("headsign", escapeString(params.getString("headsign")));
        }

        if (params.has("showCodes") && (!params.getString("showCodes").isEmpty())) {
          urlBuilder.addQueryParameter("show_codes", escapeString(String.valueOf(params.getBoolean("showCodes"))));
        }

        if (params.has("odtLevel") && (!params.getString("odtLevel").isEmpty())) {
          urlBuilder.addQueryParameter("odt_level", escapeString(params.getString("odtLevel")));
        }

        if (params.has("dataFreshness") && (!params.getString("dataFreshness").isEmpty())) {
          urlBuilder.addQueryParameter("data_freshness", escapeString(params.getString("dataFreshness")));
        }

        if (params.has("distance") && (!params.getString("distance").isEmpty())) {
          urlBuilder.addQueryParameter("distance", escapeString(String.valueOf(params.getInt("distance"))));
        }

        if (params.has("since") && (!params.getString("since").isEmpty())) {
          urlBuilder.addQueryParameter("since", escapeString(String.valueOf(params.getString("since"))));
        }

        if (params.has("until") && (!params.getString("until").isEmpty())) {
          urlBuilder.addQueryParameter("until", escapeString(String.valueOf(params.getString("until"))));
        }

        if (params.has("disableGeojson") && (!params.getString("disableGeojson").isEmpty())) {
          urlBuilder.addQueryParameter("disable_geojson", escapeString(String.valueOf(params.getBoolean("disableGeojson"))));
        }

        if (params.has("disableDisruption") && (!params.getString("disableDisruption").isEmpty())) {
          urlBuilder.addQueryParameter("disable_disruption", escapeString(String.valueOf(params.getBoolean("disableDisruption"))));
        }

        if (params.has("tags") && (!params.getString("tags").isEmpty())) {
          urlBuilder.addQueryParameter("tags[]", escapeString(String.valueOf(params.getJSONArray("tags"))));
        }

        if (params.has("originalId") && (!params.getString("originalId").isEmpty())) {
          urlBuilder.addQueryParameter("original_id", escapeString(params.getString("originalId")));
        }

        HttpUrl url = urlBuilder
          .addPathSegments(path)
          .build();
        Request request = requestBuilder.url(url)
          .build();

        client.newCall(request).enqueue(new Callback() {

          @Override
          public void onFailure(@NonNull Call call, @NonNull IOException e) {
            String errorMessage = "Problem during request | " + String.valueOf(e.hashCode()) + ": " + e.getMessage();
            callbackContext.error(errorMessage);
          }

          @Override
          public void onResponse(@NonNull Call call, @NonNull Response response) {
            if (response.isSuccessful()) {
              try {
                JSONObject jsonObject = new JSONObject(Objects.requireNonNull(response.body()).string());
                callbackContext.success(jsonObject);
              } catch (Exception e) {
                String errorMessage = "Problem during response parsing";
                callbackContext.error(errorMessage);
              }
            } else {
              callbackContext.error("Unexpected code " + response.code() + " | message: " + response.message());
            }
          }
        });
      } catch (Exception e) {
        String errorMessage = "Problem during request building | " + e.hashCode() + ": " + e.getMessage();
        callbackContext.error(errorMessage);
      }
    });
  }

  private void coverageRegionStopPoints(final JSONObject params, final CallbackContext callbackContext) {
    cordova.getThreadPool().execute(() -> {
      try {
        HttpUrl.Builder urlBuilder = new HttpUrl.Builder()
          .scheme("https")
          .host("api.navitia.io")
          .addPathSegment("v1");
        Request.Builder requestBuilder = new Request.Builder()
          .header("Authorization", token);
        String path = "/coverage/{region}/stop_points".substring(1);

        if (params.has("region") && (!params.getString("region").isEmpty())) {
          path = path.replaceAll("\\{" + "region" + "\\}", escapeString(params.getString("region")));
        }

        if (params.has("startPage") && (!params.getString("startPage").isEmpty())) {
          urlBuilder.addQueryParameter("start_page", escapeString(String.valueOf(params.getInt("startPage"))));
        }

        if (params.has("count") && (!params.getString("count").isEmpty())) {
          urlBuilder.addQueryParameter("count", escapeString(String.valueOf(params.getInt("count"))));
        }

        if (params.has("depth") && (!params.getString("depth").isEmpty())) {
          urlBuilder.addQueryParameter("depth", escapeString(String.valueOf(params.getInt("depth"))));
        }

        if (params.has("forbiddenId") && (!params.getString("forbiddenId").isEmpty())) {
          urlBuilder.addQueryParameter("forbidden_id[]", escapeString(String.valueOf(params.getJSONArray("forbiddenId"))));
        }

        if (params.has("forbiddenUris") && (!params.getString("forbiddenUris").isEmpty())) {
          urlBuilder.addQueryParameter("forbidden_uris[]", escapeString(String.valueOf(params.getJSONArray("forbiddenUris"))));
        }

        if (params.has("externalCode") && (!params.getString("externalCode").isEmpty())) {
          urlBuilder.addQueryParameter("external_code", escapeString(params.getString("externalCode")));
        }

        if (params.has("headsign") && (!params.getString("headsign").isEmpty())) {
          urlBuilder.addQueryParameter("headsign", escapeString(params.getString("headsign")));
        }

        if (params.has("showCodes") && (!params.getString("showCodes").isEmpty())) {
          urlBuilder.addQueryParameter("show_codes", escapeString(String.valueOf(params.getBoolean("showCodes"))));
        }

        if (params.has("odtLevel") && (!params.getString("odtLevel").isEmpty())) {
          urlBuilder.addQueryParameter("odt_level", escapeString(params.getString("odtLevel")));
        }

        if (params.has("dataFreshness") && (!params.getString("dataFreshness").isEmpty())) {
          urlBuilder.addQueryParameter("data_freshness", escapeString(params.getString("dataFreshness")));
        }

        if (params.has("distance") && (!params.getString("distance").isEmpty())) {
          urlBuilder.addQueryParameter("distance", escapeString(String.valueOf(params.getInt("distance"))));
        }

        if (params.has("since") && (!params.getString("since").isEmpty())) {
          urlBuilder.addQueryParameter("since", escapeString(String.valueOf(params.getString("since"))));
        }

        if (params.has("until") && (!params.getString("until").isEmpty())) {
          urlBuilder.addQueryParameter("until", escapeString(String.valueOf(params.getString("until"))));
        }

        if (params.has("disableGeojson") && (!params.getString("disableGeojson").isEmpty())) {
          urlBuilder.addQueryParameter("disable_geojson", escapeString(String.valueOf(params.getBoolean("disableGeojson"))));
        }

        if (params.has("disableDisruption") && (!params.getString("disableDisruption").isEmpty())) {
          urlBuilder.addQueryParameter("disable_disruption", escapeString(String.valueOf(params.getBoolean("disableDisruption"))));
        }

        if (params.has("filter") && (!params.getString("filter").isEmpty())) {
          urlBuilder.addQueryParameter("filter", escapeString(params.getString("filter")));
        }

        if (params.has("tags") && (!params.getString("tags").isEmpty())) {
          urlBuilder.addQueryParameter("tags[]", escapeString(String.valueOf(params.getJSONArray("tags"))));
        }

        if (params.has("originalId") && (!params.getString("originalId").isEmpty())) {
          urlBuilder.addQueryParameter("original_id", escapeString(params.getString("originalId")));
        }

        HttpUrl url = urlBuilder
          .addPathSegments(path)
          .build();
        Request request = requestBuilder.url(url)
          .build();

        client.newCall(request).enqueue(new Callback() {

          @Override
          public void onFailure(@NonNull Call call, @NonNull IOException e) {
            String errorMessage = "Problem during request | " + String.valueOf(e.hashCode()) + ": " + e.getMessage();
            callbackContext.error(errorMessage);
          }

          @Override
          public void onResponse(@NonNull Call call, @NonNull Response response) {
            if (response.isSuccessful()) {
              try {
                JSONObject jsonObject = new JSONObject(Objects.requireNonNull(response.body()).string());
                callbackContext.success(jsonObject);
              } catch (Exception e) {
                String errorMessage = "Problem during response parsing";
                callbackContext.error(errorMessage);
              }
            } else {
              callbackContext.error("Unexpected code " + response.code() + " | message: " + response.message());
            }
          }
        });
      } catch (Exception e) {
        String errorMessage = "Problem during request building | " + e.hashCode() + ": " + e.getMessage();
        callbackContext.error(errorMessage);
      }
    });
  }

  private void coverageRegionStopPointsId(final JSONObject params, final CallbackContext callbackContext) {
    cordova.getThreadPool().execute(() -> {
      try {
        HttpUrl.Builder urlBuilder = new HttpUrl.Builder()
          .scheme("https")
          .host("api.navitia.io")
          .addPathSegment("v1");
        Request.Builder requestBuilder = new Request.Builder()
          .header("Authorization", token);
        String path = "/coverage/{region}/stop_points/{id}".substring(1);

        if (params.has("region") && (!params.getString("region").isEmpty())) {
          path = path.replaceAll("\\{" + "region" + "\\}", escapeString(params.getString("region")));
        }

        if (params.has("id") && (!params.getString("id").isEmpty())) {
          path = path.replaceAll("\\{" + "id" + "\\}", escapeString(params.getString("id")));
        }

        if (params.has("startPage") && (!params.getString("startPage").isEmpty())) {
          urlBuilder.addQueryParameter("start_page", escapeString(String.valueOf(params.getInt("startPage"))));
        }

        if (params.has("count") && (!params.getString("count").isEmpty())) {
          urlBuilder.addQueryParameter("count", escapeString(String.valueOf(params.getInt("count"))));
        }

        if (params.has("depth") && (!params.getString("depth").isEmpty())) {
          urlBuilder.addQueryParameter("depth", escapeString(String.valueOf(params.getInt("depth"))));
        }

        if (params.has("forbiddenId") && (!params.getString("forbiddenId").isEmpty())) {
          urlBuilder.addQueryParameter("forbidden_id[]", escapeString(String.valueOf(params.getJSONArray("forbiddenId"))));
        }

        if (params.has("forbiddenUris") && (!params.getString("forbiddenUris").isEmpty())) {
          urlBuilder.addQueryParameter("forbidden_uris[]", escapeString(String.valueOf(params.getJSONArray("forbiddenUris"))));
        }

        if (params.has("externalCode") && (!params.getString("externalCode").isEmpty())) {
          urlBuilder.addQueryParameter("external_code", escapeString(params.getString("externalCode")));
        }

        if (params.has("headsign") && (!params.getString("headsign").isEmpty())) {
          urlBuilder.addQueryParameter("headsign", escapeString(params.getString("headsign")));
        }

        if (params.has("showCodes") && (!params.getString("showCodes").isEmpty())) {
          urlBuilder.addQueryParameter("show_codes", escapeString(String.valueOf(params.getBoolean("showCodes"))));
        }

        if (params.has("odtLevel") && (!params.getString("odtLevel").isEmpty())) {
          urlBuilder.addQueryParameter("odt_level", escapeString(params.getString("odtLevel")));
        }

        if (params.has("dataFreshness") && (!params.getString("dataFreshness").isEmpty())) {
          urlBuilder.addQueryParameter("data_freshness", escapeString(params.getString("dataFreshness")));
        }

        if (params.has("distance") && (!params.getString("distance").isEmpty())) {
          urlBuilder.addQueryParameter("distance", escapeString(String.valueOf(params.getInt("distance"))));
        }

        if (params.has("since") && (!params.getString("since").isEmpty())) {
          urlBuilder.addQueryParameter("since", escapeString(String.valueOf(params.getString("since"))));
        }

        if (params.has("until") && (!params.getString("until").isEmpty())) {
          urlBuilder.addQueryParameter("until", escapeString(String.valueOf(params.getString("until"))));
        }

        if (params.has("disableGeojson") && (!params.getString("disableGeojson").isEmpty())) {
          urlBuilder.addQueryParameter("disable_geojson", escapeString(String.valueOf(params.getBoolean("disableGeojson"))));
        }

        if (params.has("disableDisruption") && (!params.getString("disableDisruption").isEmpty())) {
          urlBuilder.addQueryParameter("disable_disruption", escapeString(String.valueOf(params.getBoolean("disableDisruption"))));
        }

        if (params.has("tags") && (!params.getString("tags").isEmpty())) {
          urlBuilder.addQueryParameter("tags[]", escapeString(String.valueOf(params.getJSONArray("tags"))));
        }

        if (params.has("originalId") && (!params.getString("originalId").isEmpty())) {
          urlBuilder.addQueryParameter("original_id", escapeString(params.getString("originalId")));
        }

        HttpUrl url = urlBuilder
          .addPathSegments(path)
          .build();
        Request request = requestBuilder.url(url)
          .build();

        client.newCall(request).enqueue(new Callback() {

          @Override
          public void onFailure(@NonNull Call call, @NonNull IOException e) {
            String errorMessage = "Problem during request | " + String.valueOf(e.hashCode()) + ": " + e.getMessage();
            callbackContext.error(errorMessage);
          }

          @Override
          public void onResponse(@NonNull Call call, @NonNull Response response) {
            if (response.isSuccessful()) {
              try {
                JSONObject jsonObject = new JSONObject(Objects.requireNonNull(response.body()).string());
                callbackContext.success(jsonObject);
              } catch (Exception e) {
                String errorMessage = "Problem during response parsing";
                callbackContext.error(errorMessage);
              }
            } else {
              callbackContext.error("Unexpected code " + response.code() + " | message: " + response.message());
            }
          }
        });
      } catch (Exception e) {
        String errorMessage = "Problem during request building | " + e.hashCode() + ": " + e.getMessage();
        callbackContext.error(errorMessage);
      }
    });
  }

  private void coverageRegionUriStopPoints(final JSONObject params, final CallbackContext callbackContext) {
    cordova.getThreadPool().execute(() -> {
      try {
        HttpUrl.Builder urlBuilder = new HttpUrl.Builder()
          .scheme("https")
          .host("api.navitia.io")
          .addPathSegment("v1");
        Request.Builder requestBuilder = new Request.Builder()
          .header("Authorization", token);
        String path = "/coverage/{region}/{uri}/stop_points".substring(1);

        if (params.has("region") && (!params.getString("region").isEmpty())) {
          path = path.replaceAll("\\{" + "region" + "\\}", escapeString(params.getString("region")));
        }

        if (params.has("uri") && (!params.getString("uri").isEmpty())) {
          path = path.replaceAll("\\{" + "uri" + "\\}", escapeString(params.getString("uri")));
        }

        if (params.has("startPage") && (!params.getString("startPage").isEmpty())) {
          urlBuilder.addQueryParameter("start_page", escapeString(String.valueOf(params.getInt("startPage"))));
        }

        if (params.has("count") && (!params.getString("count").isEmpty())) {
          urlBuilder.addQueryParameter("count", escapeString(String.valueOf(params.getInt("count"))));
        }

        if (params.has("depth") && (!params.getString("depth").isEmpty())) {
          urlBuilder.addQueryParameter("depth", escapeString(String.valueOf(params.getInt("depth"))));
        }

        if (params.has("forbiddenId") && (!params.getString("forbiddenId").isEmpty())) {
          urlBuilder.addQueryParameter("forbidden_id[]", escapeString(String.valueOf(params.getJSONArray("forbiddenId"))));
        }

        if (params.has("forbiddenUris") && (!params.getString("forbiddenUris").isEmpty())) {
          urlBuilder.addQueryParameter("forbidden_uris[]", escapeString(String.valueOf(params.getJSONArray("forbiddenUris"))));
        }

        if (params.has("externalCode") && (!params.getString("externalCode").isEmpty())) {
          urlBuilder.addQueryParameter("external_code", escapeString(params.getString("externalCode")));
        }

        if (params.has("headsign") && (!params.getString("headsign").isEmpty())) {
          urlBuilder.addQueryParameter("headsign", escapeString(params.getString("headsign")));
        }

        if (params.has("showCodes") && (!params.getString("showCodes").isEmpty())) {
          urlBuilder.addQueryParameter("show_codes", escapeString(String.valueOf(params.getBoolean("showCodes"))));
        }

        if (params.has("odtLevel") && (!params.getString("odtLevel").isEmpty())) {
          urlBuilder.addQueryParameter("odt_level", escapeString(params.getString("odtLevel")));
        }

        if (params.has("dataFreshness") && (!params.getString("dataFreshness").isEmpty())) {
          urlBuilder.addQueryParameter("data_freshness", escapeString(params.getString("dataFreshness")));
        }

        if (params.has("distance") && (!params.getString("distance").isEmpty())) {
          urlBuilder.addQueryParameter("distance", escapeString(String.valueOf(params.getInt("distance"))));
        }

        if (params.has("since") && (!params.getString("since").isEmpty())) {
          urlBuilder.addQueryParameter("since", escapeString(String.valueOf(params.getString("since"))));
        }

        if (params.has("until") && (!params.getString("until").isEmpty())) {
          urlBuilder.addQueryParameter("until", escapeString(String.valueOf(params.getString("until"))));
        }

        if (params.has("disableGeojson") && (!params.getString("disableGeojson").isEmpty())) {
          urlBuilder.addQueryParameter("disable_geojson", escapeString(String.valueOf(params.getBoolean("disableGeojson"))));
        }

        if (params.has("disableDisruption") && (!params.getString("disableDisruption").isEmpty())) {
          urlBuilder.addQueryParameter("disable_disruption", escapeString(String.valueOf(params.getBoolean("disableDisruption"))));
        }

        if (params.has("filter") && (!params.getString("filter").isEmpty())) {
          urlBuilder.addQueryParameter("filter", escapeString(params.getString("filter")));
        }

        if (params.has("tags") && (!params.getString("tags").isEmpty())) {
          urlBuilder.addQueryParameter("tags[]", escapeString(String.valueOf(params.getJSONArray("tags"))));
        }

        if (params.has("originalId") && (!params.getString("originalId").isEmpty())) {
          urlBuilder.addQueryParameter("original_id", escapeString(params.getString("originalId")));
        }

        HttpUrl url = urlBuilder
          .addPathSegments(path)
          .build();
        Request request = requestBuilder.url(url)
          .build();

        client.newCall(request).enqueue(new Callback() {

          @Override
          public void onFailure(@NonNull Call call, @NonNull IOException e) {
            String errorMessage = "Problem during request | " + String.valueOf(e.hashCode()) + ": " + e.getMessage();
            callbackContext.error(errorMessage);
          }

          @Override
          public void onResponse(@NonNull Call call, @NonNull Response response) {
            if (response.isSuccessful()) {
              try {
                JSONObject jsonObject = new JSONObject(Objects.requireNonNull(response.body()).string());
                callbackContext.success(jsonObject);
              } catch (Exception e) {
                String errorMessage = "Problem during response parsing";
                callbackContext.error(errorMessage);
              }
            } else {
              callbackContext.error("Unexpected code " + response.code() + " | message: " + response.message());
            }
          }
        });
      } catch (Exception e) {
        String errorMessage = "Problem during request building | " + e.hashCode() + ": " + e.getMessage();
        callbackContext.error(errorMessage);
      }
    });
  }

  private void coverageRegionUriStopPointsId(final JSONObject params, final CallbackContext callbackContext) {
    cordova.getThreadPool().execute(() -> {
      try {
        HttpUrl.Builder urlBuilder = new HttpUrl.Builder()
          .scheme("https")
          .host("api.navitia.io")
          .addPathSegment("v1");
        Request.Builder requestBuilder = new Request.Builder()
          .header("Authorization", token);
        String path = "/coverage/{region}/{uri}/stop_points/{id}".substring(1);

        if (params.has("region") && (!params.getString("region").isEmpty())) {
          path = path.replaceAll("\\{" + "region" + "\\}", escapeString(params.getString("region")));
        }

        if (params.has("uri") && (!params.getString("uri").isEmpty())) {
          path = path.replaceAll("\\{" + "uri" + "\\}", escapeString(params.getString("uri")));
        }

        if (params.has("id") && (!params.getString("id").isEmpty())) {
          path = path.replaceAll("\\{" + "id" + "\\}", escapeString(params.getString("id")));
        }

        if (params.has("startPage") && (!params.getString("startPage").isEmpty())) {
          urlBuilder.addQueryParameter("start_page", escapeString(String.valueOf(params.getInt("startPage"))));
        }

        if (params.has("count") && (!params.getString("count").isEmpty())) {
          urlBuilder.addQueryParameter("count", escapeString(String.valueOf(params.getInt("count"))));
        }

        if (params.has("depth") && (!params.getString("depth").isEmpty())) {
          urlBuilder.addQueryParameter("depth", escapeString(String.valueOf(params.getInt("depth"))));
        }

        if (params.has("forbiddenId") && (!params.getString("forbiddenId").isEmpty())) {
          urlBuilder.addQueryParameter("forbidden_id[]", escapeString(String.valueOf(params.getJSONArray("forbiddenId"))));
        }

        if (params.has("forbiddenUris") && (!params.getString("forbiddenUris").isEmpty())) {
          urlBuilder.addQueryParameter("forbidden_uris[]", escapeString(String.valueOf(params.getJSONArray("forbiddenUris"))));
        }

        if (params.has("externalCode") && (!params.getString("externalCode").isEmpty())) {
          urlBuilder.addQueryParameter("external_code", escapeString(params.getString("externalCode")));
        }

        if (params.has("headsign") && (!params.getString("headsign").isEmpty())) {
          urlBuilder.addQueryParameter("headsign", escapeString(params.getString("headsign")));
        }

        if (params.has("showCodes") && (!params.getString("showCodes").isEmpty())) {
          urlBuilder.addQueryParameter("show_codes", escapeString(String.valueOf(params.getBoolean("showCodes"))));
        }

        if (params.has("odtLevel") && (!params.getString("odtLevel").isEmpty())) {
          urlBuilder.addQueryParameter("odt_level", escapeString(params.getString("odtLevel")));
        }

        if (params.has("dataFreshness") && (!params.getString("dataFreshness").isEmpty())) {
          urlBuilder.addQueryParameter("data_freshness", escapeString(params.getString("dataFreshness")));
        }

        if (params.has("distance") && (!params.getString("distance").isEmpty())) {
          urlBuilder.addQueryParameter("distance", escapeString(String.valueOf(params.getInt("distance"))));
        }

        if (params.has("since") && (!params.getString("since").isEmpty())) {
          urlBuilder.addQueryParameter("since", escapeString(String.valueOf(params.getString("since"))));
        }

        if (params.has("until") && (!params.getString("until").isEmpty())) {
          urlBuilder.addQueryParameter("until", escapeString(String.valueOf(params.getString("until"))));
        }

        if (params.has("disableGeojson") && (!params.getString("disableGeojson").isEmpty())) {
          urlBuilder.addQueryParameter("disable_geojson", escapeString(String.valueOf(params.getBoolean("disableGeojson"))));
        }

        if (params.has("disableDisruption") && (!params.getString("disableDisruption").isEmpty())) {
          urlBuilder.addQueryParameter("disable_disruption", escapeString(String.valueOf(params.getBoolean("disableDisruption"))));
        }

        if (params.has("tags") && (!params.getString("tags").isEmpty())) {
          urlBuilder.addQueryParameter("tags[]", escapeString(String.valueOf(params.getJSONArray("tags"))));
        }

        if (params.has("originalId") && (!params.getString("originalId").isEmpty())) {
          urlBuilder.addQueryParameter("original_id", escapeString(params.getString("originalId")));
        }

        HttpUrl url = urlBuilder
          .addPathSegments(path)
          .build();
        Request request = requestBuilder.url(url)
          .build();

        client.newCall(request).enqueue(new Callback() {

          @Override
          public void onFailure(@NonNull Call call, @NonNull IOException e) {
            String errorMessage = "Problem during request | " + String.valueOf(e.hashCode()) + ": " + e.getMessage();
            callbackContext.error(errorMessage);
          }

          @Override
          public void onResponse(@NonNull Call call, @NonNull Response response) {
            if (response.isSuccessful()) {
              try {
                JSONObject jsonObject = new JSONObject(Objects.requireNonNull(response.body()).string());
                callbackContext.success(jsonObject);
              } catch (Exception e) {
                String errorMessage = "Problem during response parsing";
                callbackContext.error(errorMessage);
              }
            } else {
              callbackContext.error("Unexpected code " + response.code() + " | message: " + response.message());
            }
          }
        });
      } catch (Exception e) {
        String errorMessage = "Problem during request building | " + e.hashCode() + ": " + e.getMessage();
        callbackContext.error(errorMessage);
      }
    });
  }

  private void stopPoints(final JSONObject params, final CallbackContext callbackContext) {
    cordova.getThreadPool().execute(() -> {
      try {
        HttpUrl.Builder urlBuilder = new HttpUrl.Builder()
          .scheme("https")
          .host("api.navitia.io")
          .addPathSegment("v1");
        Request.Builder requestBuilder = new Request.Builder()
          .header("Authorization", token);
        String path = "/stop_points".substring(1);

        if (params.has("externalCode") && (!params.getString("externalCode").isEmpty())) {
          urlBuilder.addQueryParameter("external_code", escapeString(params.getString("externalCode")));
        }

        if (params.has("startPage") && (!params.getString("startPage").isEmpty())) {
          urlBuilder.addQueryParameter("start_page", escapeString(String.valueOf(params.getInt("startPage"))));
        }

        if (params.has("count") && (!params.getString("count").isEmpty())) {
          urlBuilder.addQueryParameter("count", escapeString(String.valueOf(params.getInt("count"))));
        }

        if (params.has("depth") && (!params.getString("depth").isEmpty())) {
          urlBuilder.addQueryParameter("depth", escapeString(String.valueOf(params.getInt("depth"))));
        }

        if (params.has("forbiddenId") && (!params.getString("forbiddenId").isEmpty())) {
          urlBuilder.addQueryParameter("forbidden_id[]", escapeString(String.valueOf(params.getJSONArray("forbiddenId"))));
        }

        if (params.has("forbiddenUris") && (!params.getString("forbiddenUris").isEmpty())) {
          urlBuilder.addQueryParameter("forbidden_uris[]", escapeString(String.valueOf(params.getJSONArray("forbiddenUris"))));
        }

        if (params.has("headsign") && (!params.getString("headsign").isEmpty())) {
          urlBuilder.addQueryParameter("headsign", escapeString(params.getString("headsign")));
        }

        if (params.has("showCodes") && (!params.getString("showCodes").isEmpty())) {
          urlBuilder.addQueryParameter("show_codes", escapeString(String.valueOf(params.getBoolean("showCodes"))));
        }

        if (params.has("odtLevel") && (!params.getString("odtLevel").isEmpty())) {
          urlBuilder.addQueryParameter("odt_level", escapeString(params.getString("odtLevel")));
        }

        if (params.has("dataFreshness") && (!params.getString("dataFreshness").isEmpty())) {
          urlBuilder.addQueryParameter("data_freshness", escapeString(params.getString("dataFreshness")));
        }

        if (params.has("distance") && (!params.getString("distance").isEmpty())) {
          urlBuilder.addQueryParameter("distance", escapeString(String.valueOf(params.getInt("distance"))));
        }

        if (params.has("since") && (!params.getString("since").isEmpty())) {
          urlBuilder.addQueryParameter("since", escapeString(String.valueOf(params.getString("since"))));
        }

        if (params.has("until") && (!params.getString("until").isEmpty())) {
          urlBuilder.addQueryParameter("until", escapeString(String.valueOf(params.getString("until"))));
        }

        if (params.has("disableGeojson") && (!params.getString("disableGeojson").isEmpty())) {
          urlBuilder.addQueryParameter("disable_geojson", escapeString(String.valueOf(params.getBoolean("disableGeojson"))));
        }

        if (params.has("disableDisruption") && (!params.getString("disableDisruption").isEmpty())) {
          urlBuilder.addQueryParameter("disable_disruption", escapeString(String.valueOf(params.getBoolean("disableDisruption"))));
        }

        if (params.has("filter") && (!params.getString("filter").isEmpty())) {
          urlBuilder.addQueryParameter("filter", escapeString(params.getString("filter")));
        }

        if (params.has("tags") && (!params.getString("tags").isEmpty())) {
          urlBuilder.addQueryParameter("tags[]", escapeString(String.valueOf(params.getJSONArray("tags"))));
        }

        if (params.has("originalId") && (!params.getString("originalId").isEmpty())) {
          urlBuilder.addQueryParameter("original_id", escapeString(params.getString("originalId")));
        }

        HttpUrl url = urlBuilder
          .addPathSegments(path)
          .build();
        Request request = requestBuilder.url(url)
          .build();

        client.newCall(request).enqueue(new Callback() {

          @Override
          public void onFailure(@NonNull Call call, @NonNull IOException e) {
            String errorMessage = "Problem during request | " + String.valueOf(e.hashCode()) + ": " + e.getMessage();
            callbackContext.error(errorMessage);
          }

          @Override
          public void onResponse(@NonNull Call call, @NonNull Response response) {
            if (response.isSuccessful()) {
              try {
                JSONObject jsonObject = new JSONObject(Objects.requireNonNull(response.body()).string());
                callbackContext.success(jsonObject);
              } catch (Exception e) {
                String errorMessage = "Problem during response parsing";
                callbackContext.error(errorMessage);
              }
            } else {
              callbackContext.error("Unexpected code " + response.code() + " | message: " + response.message());
            }
          }
        });
      } catch (Exception e) {
        String errorMessage = "Problem during request building | " + e.hashCode() + ": " + e.getMessage();
        callbackContext.error(errorMessage);
      }
    });
  }

  private void coverageLonLatUriStopSchedules(final JSONObject params, final CallbackContext callbackContext) {
    cordova.getThreadPool().execute(() -> {
      try {
        HttpUrl.Builder urlBuilder = new HttpUrl.Builder()
          .scheme("https")
          .host("api.navitia.io")
          .addPathSegment("v1");
        Request.Builder requestBuilder = new Request.Builder()
          .header("Authorization", token);
        String path = "/coverage/{lon};{lat}/{uri}/stop_schedules".substring(1);

        if (params.has("lat") && (!params.getString("lat").isEmpty())) {
          path = path.replaceAll("\\{" + "lat" + "\\}", escapeString(String.valueOf(params.getLong("lat"))));
        }

        if (params.has("lon") && (!params.getString("lon").isEmpty())) {
          path = path.replaceAll("\\{" + "lon" + "\\}", escapeString(String.valueOf(params.getLong("lon"))));
        }

        if (params.has("uri") && (!params.getString("uri").isEmpty())) {
          path = path.replaceAll("\\{" + "uri" + "\\}", escapeString(params.getString("uri")));
        }

        if (params.has("filter") && (!params.getString("filter").isEmpty())) {
          urlBuilder.addQueryParameter("filter", escapeString(params.getString("filter")));
        }

        if (params.has("fromDatetime") && (!params.getString("fromDatetime").isEmpty())) {
          urlBuilder.addQueryParameter("from_datetime", escapeString(String.valueOf(params.getString("fromDatetime"))));
        }

        if (params.has("untilDatetime") && (!params.getString("untilDatetime").isEmpty())) {
          urlBuilder.addQueryParameter("until_datetime", escapeString(String.valueOf(params.getString("untilDatetime"))));
        }

        if (params.has("duration") && (!params.getString("duration").isEmpty())) {
          urlBuilder.addQueryParameter("duration", escapeString(String.valueOf(params.getInt("duration"))));
        }

        if (params.has("depth") && (!params.getString("depth").isEmpty())) {
          urlBuilder.addQueryParameter("depth", escapeString(String.valueOf(params.getInt("depth"))));
        }

        if (params.has("count") && (!params.getString("count").isEmpty())) {
          urlBuilder.addQueryParameter("count", escapeString(String.valueOf(params.getInt("count"))));
        }

        if (params.has("startPage") && (!params.getString("startPage").isEmpty())) {
          urlBuilder.addQueryParameter("start_page", escapeString(String.valueOf(params.getInt("startPage"))));
        }

        if (params.has("maxDateTimes") && (!params.getString("maxDateTimes").isEmpty())) {
          urlBuilder.addQueryParameter("max_date_times", escapeString(String.valueOf(params.getInt("maxDateTimes"))));
        }

        if (params.has("forbiddenId") && (!params.getString("forbiddenId").isEmpty())) {
          urlBuilder.addQueryParameter("forbidden_id[]", escapeString(String.valueOf(params.getJSONArray("forbiddenId"))));
        }

        if (params.has("forbiddenUris") && (!params.getString("forbiddenUris").isEmpty())) {
          urlBuilder.addQueryParameter("forbidden_uris[]", escapeString(String.valueOf(params.getJSONArray("forbiddenUris"))));
        }

        if (params.has("calendar") && (!params.getString("calendar").isEmpty())) {
          urlBuilder.addQueryParameter("calendar", escapeString(params.getString("calendar")));
        }

        if (params.has("distance") && (!params.getString("distance").isEmpty())) {
          urlBuilder.addQueryParameter("distance", escapeString(String.valueOf(params.getInt("distance"))));
        }

        if (params.has("showCodes") && (!params.getString("showCodes").isEmpty())) {
          urlBuilder.addQueryParameter("show_codes", escapeString(String.valueOf(params.getBoolean("showCodes"))));
        }

        if (params.has("dataFreshness") && (!params.getString("dataFreshness").isEmpty())) {
          urlBuilder.addQueryParameter("data_freshness", escapeString(params.getString("dataFreshness")));
        }

        if (params.has("itemsPerSchedule") && (!params.getString("itemsPerSchedule").isEmpty())) {
          urlBuilder.addQueryParameter("items_per_schedule", escapeString(String.valueOf(params.getInt("itemsPerSchedule"))));
        }

        if (params.has("disableGeojson") && (!params.getString("disableGeojson").isEmpty())) {
          urlBuilder.addQueryParameter("disable_geojson", escapeString(String.valueOf(params.getBoolean("disableGeojson"))));
        }

        if (params.has("directionType") && (!params.getString("directionType").isEmpty())) {
          urlBuilder.addQueryParameter("direction_type", escapeString(params.getString("directionType")));
        }

        HttpUrl url = urlBuilder
          .addPathSegments(path)
          .build();
        Request request = requestBuilder.url(url)
          .build();

        client.newCall(request).enqueue(new Callback() {

          @Override
          public void onFailure(@NonNull Call call, @NonNull IOException e) {
            String errorMessage = "Problem during request | " + String.valueOf(e.hashCode()) + ": " + e.getMessage();
            callbackContext.error(errorMessage);
          }

          @Override
          public void onResponse(@NonNull Call call, @NonNull Response response) {
            if (response.isSuccessful()) {
              try {
                JSONObject jsonObject = new JSONObject(Objects.requireNonNull(response.body()).string());
                callbackContext.success(jsonObject);
              } catch (Exception e) {
                String errorMessage = "Problem during response parsing";
                callbackContext.error(errorMessage);
              }
            } else {
              callbackContext.error("Unexpected code " + response.code() + " | message: " + response.message());
            }
          }
        });
      } catch (Exception e) {
        String errorMessage = "Problem during request building | " + e.hashCode() + ": " + e.getMessage();
        callbackContext.error(errorMessage);
      }
    });
  }

  private void coverageRegionUriStopSchedules(final JSONObject params, final CallbackContext callbackContext) {
    cordova.getThreadPool().execute(() -> {
      try {
        HttpUrl.Builder urlBuilder = new HttpUrl.Builder()
          .scheme("https")
          .host("api.navitia.io")
          .addPathSegment("v1");
        Request.Builder requestBuilder = new Request.Builder()
          .header("Authorization", token);
        String path = "/coverage/{region}/{uri}/stop_schedules".substring(1);

        if (params.has("region") && (!params.getString("region").isEmpty())) {
          path = path.replaceAll("\\{" + "region" + "\\}", escapeString(params.getString("region")));
        }

        if (params.has("uri") && (!params.getString("uri").isEmpty())) {
          path = path.replaceAll("\\{" + "uri" + "\\}", escapeString(params.getString("uri")));
        }

        if (params.has("filter") && (!params.getString("filter").isEmpty())) {
          urlBuilder.addQueryParameter("filter", escapeString(params.getString("filter")));
        }

        if (params.has("fromDatetime") && (!params.getString("fromDatetime").isEmpty())) {
          urlBuilder.addQueryParameter("from_datetime", escapeString(String.valueOf(params.getString("fromDatetime"))));
        }

        if (params.has("untilDatetime") && (!params.getString("untilDatetime").isEmpty())) {
          urlBuilder.addQueryParameter("until_datetime", escapeString(String.valueOf(params.getString("untilDatetime"))));
        }

        if (params.has("duration") && (!params.getString("duration").isEmpty())) {
          urlBuilder.addQueryParameter("duration", escapeString(String.valueOf(params.getInt("duration"))));
        }

        if (params.has("depth") && (!params.getString("depth").isEmpty())) {
          urlBuilder.addQueryParameter("depth", escapeString(String.valueOf(params.getInt("depth"))));
        }

        if (params.has("count") && (!params.getString("count").isEmpty())) {
          urlBuilder.addQueryParameter("count", escapeString(String.valueOf(params.getInt("count"))));
        }

        if (params.has("startPage") && (!params.getString("startPage").isEmpty())) {
          urlBuilder.addQueryParameter("start_page", escapeString(String.valueOf(params.getInt("startPage"))));
        }

        if (params.has("maxDateTimes") && (!params.getString("maxDateTimes").isEmpty())) {
          urlBuilder.addQueryParameter("max_date_times", escapeString(String.valueOf(params.getInt("maxDateTimes"))));
        }

        if (params.has("forbiddenId") && (!params.getString("forbiddenId").isEmpty())) {
          urlBuilder.addQueryParameter("forbidden_id[]", escapeString(String.valueOf(params.getJSONArray("forbiddenId"))));
        }

        if (params.has("forbiddenUris") && (!params.getString("forbiddenUris").isEmpty())) {
          urlBuilder.addQueryParameter("forbidden_uris[]", escapeString(String.valueOf(params.getJSONArray("forbiddenUris"))));
        }

        if (params.has("calendar") && (!params.getString("calendar").isEmpty())) {
          urlBuilder.addQueryParameter("calendar", escapeString(params.getString("calendar")));
        }

        if (params.has("distance") && (!params.getString("distance").isEmpty())) {
          urlBuilder.addQueryParameter("distance", escapeString(String.valueOf(params.getInt("distance"))));
        }

        if (params.has("showCodes") && (!params.getString("showCodes").isEmpty())) {
          urlBuilder.addQueryParameter("show_codes", escapeString(String.valueOf(params.getBoolean("showCodes"))));
        }

        if (params.has("dataFreshness") && (!params.getString("dataFreshness").isEmpty())) {
          urlBuilder.addQueryParameter("data_freshness", escapeString(params.getString("dataFreshness")));
        }

        if (params.has("itemsPerSchedule") && (!params.getString("itemsPerSchedule").isEmpty())) {
          urlBuilder.addQueryParameter("items_per_schedule", escapeString(String.valueOf(params.getInt("itemsPerSchedule"))));
        }

        if (params.has("disableGeojson") && (!params.getString("disableGeojson").isEmpty())) {
          urlBuilder.addQueryParameter("disable_geojson", escapeString(String.valueOf(params.getBoolean("disableGeojson"))));
        }

        if (params.has("directionType") && (!params.getString("directionType").isEmpty())) {
          urlBuilder.addQueryParameter("direction_type", escapeString(params.getString("directionType")));
        }

        HttpUrl url = urlBuilder
          .addPathSegments(path)
          .build();
        Request request = requestBuilder.url(url)
          .build();

        client.newCall(request).enqueue(new Callback() {

          @Override
          public void onFailure(@NonNull Call call, @NonNull IOException e) {
            String errorMessage = "Problem during request | " + String.valueOf(e.hashCode()) + ": " + e.getMessage();
            callbackContext.error(errorMessage);
          }

          @Override
          public void onResponse(@NonNull Call call, @NonNull Response response) {
            if (response.isSuccessful()) {
              try {
                JSONObject jsonObject = new JSONObject(Objects.requireNonNull(response.body()).string());
                callbackContext.success(jsonObject);
              } catch (Exception e) {
                String errorMessage = "Problem during response parsing";
                callbackContext.error(errorMessage);
              }
            } else {
              callbackContext.error("Unexpected code " + response.code() + " | message: " + response.message());
            }
          }
        });
      } catch (Exception e) {
        String errorMessage = "Problem during request building | " + e.hashCode() + ": " + e.getMessage();
        callbackContext.error(errorMessage);
      }
    });
  }

  private void stopSchedules(final JSONObject params, final CallbackContext callbackContext) {
    cordova.getThreadPool().execute(() -> {
      try {
        HttpUrl.Builder urlBuilder = new HttpUrl.Builder()
          .scheme("https")
          .host("api.navitia.io")
          .addPathSegment("v1");
        Request.Builder requestBuilder = new Request.Builder()
          .header("Authorization", token);
        String path = "/stop_schedules".substring(1);

        if (params.has("filter") && (!params.getString("filter").isEmpty())) {
          urlBuilder.addQueryParameter("filter", escapeString(params.getString("filter")));
        }

        if (params.has("fromDatetime") && (!params.getString("fromDatetime").isEmpty())) {
          urlBuilder.addQueryParameter("from_datetime", escapeString(String.valueOf(params.getString("fromDatetime"))));
        }

        if (params.has("untilDatetime") && (!params.getString("untilDatetime").isEmpty())) {
          urlBuilder.addQueryParameter("until_datetime", escapeString(String.valueOf(params.getString("untilDatetime"))));
        }

        if (params.has("duration") && (!params.getString("duration").isEmpty())) {
          urlBuilder.addQueryParameter("duration", escapeString(String.valueOf(params.getInt("duration"))));
        }

        if (params.has("depth") && (!params.getString("depth").isEmpty())) {
          urlBuilder.addQueryParameter("depth", escapeString(String.valueOf(params.getInt("depth"))));
        }

        if (params.has("count") && (!params.getString("count").isEmpty())) {
          urlBuilder.addQueryParameter("count", escapeString(String.valueOf(params.getInt("count"))));
        }

        if (params.has("startPage") && (!params.getString("startPage").isEmpty())) {
          urlBuilder.addQueryParameter("start_page", escapeString(String.valueOf(params.getInt("startPage"))));
        }

        if (params.has("maxDateTimes") && (!params.getString("maxDateTimes").isEmpty())) {
          urlBuilder.addQueryParameter("max_date_times", escapeString(String.valueOf(params.getInt("maxDateTimes"))));
        }

        if (params.has("forbiddenId") && (!params.getString("forbiddenId").isEmpty())) {
          urlBuilder.addQueryParameter("forbidden_id[]", escapeString(String.valueOf(params.getJSONArray("forbiddenId"))));
        }

        if (params.has("forbiddenUris") && (!params.getString("forbiddenUris").isEmpty())) {
          urlBuilder.addQueryParameter("forbidden_uris[]", escapeString(String.valueOf(params.getJSONArray("forbiddenUris"))));
        }

        if (params.has("calendar") && (!params.getString("calendar").isEmpty())) {
          urlBuilder.addQueryParameter("calendar", escapeString(params.getString("calendar")));
        }

        if (params.has("distance") && (!params.getString("distance").isEmpty())) {
          urlBuilder.addQueryParameter("distance", escapeString(String.valueOf(params.getInt("distance"))));
        }

        if (params.has("showCodes") && (!params.getString("showCodes").isEmpty())) {
          urlBuilder.addQueryParameter("show_codes", escapeString(String.valueOf(params.getBoolean("showCodes"))));
        }

        if (params.has("dataFreshness") && (!params.getString("dataFreshness").isEmpty())) {
          urlBuilder.addQueryParameter("data_freshness", escapeString(params.getString("dataFreshness")));
        }

        if (params.has("itemsPerSchedule") && (!params.getString("itemsPerSchedule").isEmpty())) {
          urlBuilder.addQueryParameter("items_per_schedule", escapeString(String.valueOf(params.getInt("itemsPerSchedule"))));
        }

        if (params.has("disableGeojson") && (!params.getString("disableGeojson").isEmpty())) {
          urlBuilder.addQueryParameter("disable_geojson", escapeString(String.valueOf(params.getBoolean("disableGeojson"))));
        }

        if (params.has("directionType") && (!params.getString("directionType").isEmpty())) {
          urlBuilder.addQueryParameter("direction_type", escapeString(params.getString("directionType")));
        }

        HttpUrl url = urlBuilder
          .addPathSegments(path)
          .build();
        Request request = requestBuilder.url(url)
          .build();

        client.newCall(request).enqueue(new Callback() {

          @Override
          public void onFailure(@NonNull Call call, @NonNull IOException e) {
            String errorMessage = "Problem during request | " + String.valueOf(e.hashCode()) + ": " + e.getMessage();
            callbackContext.error(errorMessage);
          }

          @Override
          public void onResponse(@NonNull Call call, @NonNull Response response) {
            if (response.isSuccessful()) {
              try {
                JSONObject jsonObject = new JSONObject(Objects.requireNonNull(response.body()).string());
                callbackContext.success(jsonObject);
              } catch (Exception e) {
                String errorMessage = "Problem during response parsing";
                callbackContext.error(errorMessage);
              }
            } else {
              callbackContext.error("Unexpected code " + response.code() + " | message: " + response.message());
            }
          }
        });
      } catch (Exception e) {
        String errorMessage = "Problem during request building | " + e.hashCode() + ": " + e.getMessage();
        callbackContext.error(errorMessage);
      }
    });
  }

  private void coverageLonLatUriTerminusSchedules(final JSONObject params, final CallbackContext callbackContext) {
    cordova.getThreadPool().execute(() -> {
      try {
        HttpUrl.Builder urlBuilder = new HttpUrl.Builder()
          .scheme("https")
          .host("api.navitia.io")
          .addPathSegment("v1");
        Request.Builder requestBuilder = new Request.Builder()
          .header("Authorization", token);
        String path = "/coverage/{lon};{lat}/{uri}/terminus_schedules".substring(1);

        if (params.has("lat") && (!params.getString("lat").isEmpty())) {
          path = path.replaceAll("\\{" + "lat" + "\\}", escapeString(String.valueOf(params.getLong("lat"))));
        }

        if (params.has("lon") && (!params.getString("lon").isEmpty())) {
          path = path.replaceAll("\\{" + "lon" + "\\}", escapeString(String.valueOf(params.getLong("lon"))));
        }

        if (params.has("uri") && (!params.getString("uri").isEmpty())) {
          path = path.replaceAll("\\{" + "uri" + "\\}", escapeString(params.getString("uri")));
        }

        if (params.has("filter") && (!params.getString("filter").isEmpty())) {
          urlBuilder.addQueryParameter("filter", escapeString(params.getString("filter")));
        }

        if (params.has("fromDatetime") && (!params.getString("fromDatetime").isEmpty())) {
          urlBuilder.addQueryParameter("from_datetime", escapeString(String.valueOf(params.getString("fromDatetime"))));
        }

        if (params.has("untilDatetime") && (!params.getString("untilDatetime").isEmpty())) {
          urlBuilder.addQueryParameter("until_datetime", escapeString(String.valueOf(params.getString("untilDatetime"))));
        }

        if (params.has("duration") && (!params.getString("duration").isEmpty())) {
          urlBuilder.addQueryParameter("duration", escapeString(String.valueOf(params.getInt("duration"))));
        }

        if (params.has("depth") && (!params.getString("depth").isEmpty())) {
          urlBuilder.addQueryParameter("depth", escapeString(String.valueOf(params.getInt("depth"))));
        }

        if (params.has("count") && (!params.getString("count").isEmpty())) {
          urlBuilder.addQueryParameter("count", escapeString(String.valueOf(params.getInt("count"))));
        }

        if (params.has("startPage") && (!params.getString("startPage").isEmpty())) {
          urlBuilder.addQueryParameter("start_page", escapeString(String.valueOf(params.getInt("startPage"))));
        }

        if (params.has("maxDateTimes") && (!params.getString("maxDateTimes").isEmpty())) {
          urlBuilder.addQueryParameter("max_date_times", escapeString(String.valueOf(params.getInt("maxDateTimes"))));
        }

        if (params.has("forbiddenId") && (!params.getString("forbiddenId").isEmpty())) {
          urlBuilder.addQueryParameter("forbidden_id[]", escapeString(String.valueOf(params.getJSONArray("forbiddenId"))));
        }

        if (params.has("forbiddenUris") && (!params.getString("forbiddenUris").isEmpty())) {
          urlBuilder.addQueryParameter("forbidden_uris[]", escapeString(String.valueOf(params.getJSONArray("forbiddenUris"))));
        }

        if (params.has("calendar") && (!params.getString("calendar").isEmpty())) {
          urlBuilder.addQueryParameter("calendar", escapeString(params.getString("calendar")));
        }

        if (params.has("distance") && (!params.getString("distance").isEmpty())) {
          urlBuilder.addQueryParameter("distance", escapeString(String.valueOf(params.getInt("distance"))));
        }

        if (params.has("showCodes") && (!params.getString("showCodes").isEmpty())) {
          urlBuilder.addQueryParameter("show_codes", escapeString(String.valueOf(params.getBoolean("showCodes"))));
        }

        if (params.has("dataFreshness") && (!params.getString("dataFreshness").isEmpty())) {
          urlBuilder.addQueryParameter("data_freshness", escapeString(params.getString("dataFreshness")));
        }

        if (params.has("itemsPerSchedule") && (!params.getString("itemsPerSchedule").isEmpty())) {
          urlBuilder.addQueryParameter("items_per_schedule", escapeString(String.valueOf(params.getInt("itemsPerSchedule"))));
        }

        if (params.has("disableGeojson") && (!params.getString("disableGeojson").isEmpty())) {
          urlBuilder.addQueryParameter("disable_geojson", escapeString(String.valueOf(params.getBoolean("disableGeojson"))));
        }

        if (params.has("directionType") && (!params.getString("directionType").isEmpty())) {
          urlBuilder.addQueryParameter("direction_type", escapeString(params.getString("directionType")));
        }

        HttpUrl url = urlBuilder
          .addPathSegments(path)
          .build();
        Request request = requestBuilder.url(url)
          .build();

        client.newCall(request).enqueue(new Callback() {

          @Override
          public void onFailure(@NonNull Call call, @NonNull IOException e) {
            String errorMessage = "Problem during request | " + String.valueOf(e.hashCode()) + ": " + e.getMessage();
            callbackContext.error(errorMessage);
          }

          @Override
          public void onResponse(@NonNull Call call, @NonNull Response response) {
            if (response.isSuccessful()) {
              try {
                JSONObject jsonObject = new JSONObject(Objects.requireNonNull(response.body()).string());
                callbackContext.success(jsonObject);
              } catch (Exception e) {
                String errorMessage = "Problem during response parsing";
                callbackContext.error(errorMessage);
              }
            } else {
              callbackContext.error("Unexpected code " + response.code() + " | message: " + response.message());
            }
          }
        });
      } catch (Exception e) {
        String errorMessage = "Problem during request building | " + e.hashCode() + ": " + e.getMessage();
        callbackContext.error(errorMessage);
      }
    });
  }

  private void coverageRegionUriTerminusSchedules(final JSONObject params, final CallbackContext callbackContext) {
    cordova.getThreadPool().execute(() -> {
      try {
        HttpUrl.Builder urlBuilder = new HttpUrl.Builder()
          .scheme("https")
          .host("api.navitia.io")
          .addPathSegment("v1");
        Request.Builder requestBuilder = new Request.Builder()
          .header("Authorization", token);
        String path = "/coverage/{region}/{uri}/terminus_schedules".substring(1);

        if (params.has("region") && (!params.getString("region").isEmpty())) {
          path = path.replaceAll("\\{" + "region" + "\\}", escapeString(params.getString("region")));
        }

        if (params.has("uri") && (!params.getString("uri").isEmpty())) {
          path = path.replaceAll("\\{" + "uri" + "\\}", escapeString(params.getString("uri")));
        }

        if (params.has("filter") && (!params.getString("filter").isEmpty())) {
          urlBuilder.addQueryParameter("filter", escapeString(params.getString("filter")));
        }

        if (params.has("fromDatetime") && (!params.getString("fromDatetime").isEmpty())) {
          urlBuilder.addQueryParameter("from_datetime", escapeString(String.valueOf(params.getString("fromDatetime"))));
        }

        if (params.has("untilDatetime") && (!params.getString("untilDatetime").isEmpty())) {
          urlBuilder.addQueryParameter("until_datetime", escapeString(String.valueOf(params.getString("untilDatetime"))));
        }

        if (params.has("duration") && (!params.getString("duration").isEmpty())) {
          urlBuilder.addQueryParameter("duration", escapeString(String.valueOf(params.getInt("duration"))));
        }

        if (params.has("depth") && (!params.getString("depth").isEmpty())) {
          urlBuilder.addQueryParameter("depth", escapeString(String.valueOf(params.getInt("depth"))));
        }

        if (params.has("count") && (!params.getString("count").isEmpty())) {
          urlBuilder.addQueryParameter("count", escapeString(String.valueOf(params.getInt("count"))));
        }

        if (params.has("startPage") && (!params.getString("startPage").isEmpty())) {
          urlBuilder.addQueryParameter("start_page", escapeString(String.valueOf(params.getInt("startPage"))));
        }

        if (params.has("maxDateTimes") && (!params.getString("maxDateTimes").isEmpty())) {
          urlBuilder.addQueryParameter("max_date_times", escapeString(String.valueOf(params.getInt("maxDateTimes"))));
        }

        if (params.has("forbiddenId") && (!params.getString("forbiddenId").isEmpty())) {
          urlBuilder.addQueryParameter("forbidden_id[]", escapeString(String.valueOf(params.getJSONArray("forbiddenId"))));
        }

        if (params.has("forbiddenUris") && (!params.getString("forbiddenUris").isEmpty())) {
          urlBuilder.addQueryParameter("forbidden_uris[]", escapeString(String.valueOf(params.getJSONArray("forbiddenUris"))));
        }

        if (params.has("calendar") && (!params.getString("calendar").isEmpty())) {
          urlBuilder.addQueryParameter("calendar", escapeString(params.getString("calendar")));
        }

        if (params.has("distance") && (!params.getString("distance").isEmpty())) {
          urlBuilder.addQueryParameter("distance", escapeString(String.valueOf(params.getInt("distance"))));
        }

        if (params.has("showCodes") && (!params.getString("showCodes").isEmpty())) {
          urlBuilder.addQueryParameter("show_codes", escapeString(String.valueOf(params.getBoolean("showCodes"))));
        }

        if (params.has("dataFreshness") && (!params.getString("dataFreshness").isEmpty())) {
          urlBuilder.addQueryParameter("data_freshness", escapeString(params.getString("dataFreshness")));
        }

        if (params.has("itemsPerSchedule") && (!params.getString("itemsPerSchedule").isEmpty())) {
          urlBuilder.addQueryParameter("items_per_schedule", escapeString(String.valueOf(params.getInt("itemsPerSchedule"))));
        }

        if (params.has("disableGeojson") && (!params.getString("disableGeojson").isEmpty())) {
          urlBuilder.addQueryParameter("disable_geojson", escapeString(String.valueOf(params.getBoolean("disableGeojson"))));
        }

        if (params.has("directionType") && (!params.getString("directionType").isEmpty())) {
          urlBuilder.addQueryParameter("direction_type", escapeString(params.getString("directionType")));
        }

        HttpUrl url = urlBuilder
          .addPathSegments(path)
          .build();
        Request request = requestBuilder.url(url)
          .build();

        client.newCall(request).enqueue(new Callback() {

          @Override
          public void onFailure(@NonNull Call call, @NonNull IOException e) {
            String errorMessage = "Problem during request | " + String.valueOf(e.hashCode()) + ": " + e.getMessage();
            callbackContext.error(errorMessage);
          }

          @Override
          public void onResponse(@NonNull Call call, @NonNull Response response) {
            if (response.isSuccessful()) {
              try {
                JSONObject jsonObject = new JSONObject(Objects.requireNonNull(response.body()).string());
                callbackContext.success(jsonObject);
              } catch (Exception e) {
                String errorMessage = "Problem during response parsing";
                callbackContext.error(errorMessage);
              }
            } else {
              callbackContext.error("Unexpected code " + response.code() + " | message: " + response.message());
            }
          }
        });
      } catch (Exception e) {
        String errorMessage = "Problem during request building | " + e.hashCode() + ": " + e.getMessage();
        callbackContext.error(errorMessage);
      }
    });
  }

  private void terminusSchedules(final JSONObject params, final CallbackContext callbackContext) {
    cordova.getThreadPool().execute(() -> {
      try {
        HttpUrl.Builder urlBuilder = new HttpUrl.Builder()
          .scheme("https")
          .host("api.navitia.io")
          .addPathSegment("v1");
        Request.Builder requestBuilder = new Request.Builder()
          .header("Authorization", token);
        String path = "/terminus_schedules".substring(1);

        if (params.has("filter") && (!params.getString("filter").isEmpty())) {
          urlBuilder.addQueryParameter("filter", escapeString(params.getString("filter")));
        }

        if (params.has("fromDatetime") && (!params.getString("fromDatetime").isEmpty())) {
          urlBuilder.addQueryParameter("from_datetime", escapeString(String.valueOf(params.getString("fromDatetime"))));
        }

        if (params.has("untilDatetime") && (!params.getString("untilDatetime").isEmpty())) {
          urlBuilder.addQueryParameter("until_datetime", escapeString(String.valueOf(params.getString("untilDatetime"))));
        }

        if (params.has("duration") && (!params.getString("duration").isEmpty())) {
          urlBuilder.addQueryParameter("duration", escapeString(String.valueOf(params.getInt("duration"))));
        }

        if (params.has("depth") && (!params.getString("depth").isEmpty())) {
          urlBuilder.addQueryParameter("depth", escapeString(String.valueOf(params.getInt("depth"))));
        }

        if (params.has("count") && (!params.getString("count").isEmpty())) {
          urlBuilder.addQueryParameter("count", escapeString(String.valueOf(params.getInt("count"))));
        }

        if (params.has("startPage") && (!params.getString("startPage").isEmpty())) {
          urlBuilder.addQueryParameter("start_page", escapeString(String.valueOf(params.getInt("startPage"))));
        }

        if (params.has("maxDateTimes") && (!params.getString("maxDateTimes").isEmpty())) {
          urlBuilder.addQueryParameter("max_date_times", escapeString(String.valueOf(params.getInt("maxDateTimes"))));
        }

        if (params.has("forbiddenId") && (!params.getString("forbiddenId").isEmpty())) {
          urlBuilder.addQueryParameter("forbidden_id[]", escapeString(String.valueOf(params.getJSONArray("forbiddenId"))));
        }

        if (params.has("forbiddenUris") && (!params.getString("forbiddenUris").isEmpty())) {
          urlBuilder.addQueryParameter("forbidden_uris[]", escapeString(String.valueOf(params.getJSONArray("forbiddenUris"))));
        }

        if (params.has("calendar") && (!params.getString("calendar").isEmpty())) {
          urlBuilder.addQueryParameter("calendar", escapeString(params.getString("calendar")));
        }

        if (params.has("distance") && (!params.getString("distance").isEmpty())) {
          urlBuilder.addQueryParameter("distance", escapeString(String.valueOf(params.getInt("distance"))));
        }

        if (params.has("showCodes") && (!params.getString("showCodes").isEmpty())) {
          urlBuilder.addQueryParameter("show_codes", escapeString(String.valueOf(params.getBoolean("showCodes"))));
        }

        if (params.has("dataFreshness") && (!params.getString("dataFreshness").isEmpty())) {
          urlBuilder.addQueryParameter("data_freshness", escapeString(params.getString("dataFreshness")));
        }

        if (params.has("itemsPerSchedule") && (!params.getString("itemsPerSchedule").isEmpty())) {
          urlBuilder.addQueryParameter("items_per_schedule", escapeString(String.valueOf(params.getInt("itemsPerSchedule"))));
        }

        if (params.has("disableGeojson") && (!params.getString("disableGeojson").isEmpty())) {
          urlBuilder.addQueryParameter("disable_geojson", escapeString(String.valueOf(params.getBoolean("disableGeojson"))));
        }

        if (params.has("directionType") && (!params.getString("directionType").isEmpty())) {
          urlBuilder.addQueryParameter("direction_type", escapeString(params.getString("directionType")));
        }

        HttpUrl url = urlBuilder
          .addPathSegments(path)
          .build();
        Request request = requestBuilder.url(url)
          .build();

        client.newCall(request).enqueue(new Callback() {

          @Override
          public void onFailure(@NonNull Call call, @NonNull IOException e) {
            String errorMessage = "Problem during request | " + String.valueOf(e.hashCode()) + ": " + e.getMessage();
            callbackContext.error(errorMessage);
          }

          @Override
          public void onResponse(@NonNull Call call, @NonNull Response response) {
            if (response.isSuccessful()) {
              try {
                JSONObject jsonObject = new JSONObject(Objects.requireNonNull(response.body()).string());
                callbackContext.success(jsonObject);
              } catch (Exception e) {
                String errorMessage = "Problem during response parsing";
                callbackContext.error(errorMessage);
              }
            } else {
              callbackContext.error("Unexpected code " + response.code() + " | message: " + response.message());
            }
          }
        });
      } catch (Exception e) {
        String errorMessage = "Problem during request building | " + e.hashCode() + ": " + e.getMessage();
        callbackContext.error(errorMessage);
      }
    });
  }

  private void coverageLonLatTrafficReports(final JSONObject params, final CallbackContext callbackContext) {
    cordova.getThreadPool().execute(() -> {
      try {
        HttpUrl.Builder urlBuilder = new HttpUrl.Builder()
          .scheme("https")
          .host("api.navitia.io")
          .addPathSegment("v1");
        Request.Builder requestBuilder = new Request.Builder()
          .header("Authorization", token);
        String path = "/coverage/{lon};{lat}/traffic_reports".substring(1);

        if (params.has("lat") && (!params.getString("lat").isEmpty())) {
          path = path.replaceAll("\\{" + "lat" + "\\}", escapeString(String.valueOf(params.getLong("lat"))));
        }

        if (params.has("lon") && (!params.getString("lon").isEmpty())) {
          path = path.replaceAll("\\{" + "lon" + "\\}", escapeString(String.valueOf(params.getLong("lon"))));
        }

        if (params.has("depth") && (!params.getString("depth").isEmpty())) {
          urlBuilder.addQueryParameter("depth", escapeString(String.valueOf(params.getInt("depth"))));
        }

        if (params.has("count") && (!params.getString("count").isEmpty())) {
          urlBuilder.addQueryParameter("count", escapeString(String.valueOf(params.getInt("count"))));
        }

        if (params.has("startPage") && (!params.getString("startPage").isEmpty())) {
          urlBuilder.addQueryParameter("start_page", escapeString(String.valueOf(params.getInt("startPage"))));
        }

        if (params.has("forbiddenId") && (!params.getString("forbiddenId").isEmpty())) {
          urlBuilder.addQueryParameter("forbidden_id[]", escapeString(String.valueOf(params.getJSONArray("forbiddenId"))));
        }

        if (params.has("forbiddenUris") && (!params.getString("forbiddenUris").isEmpty())) {
          urlBuilder.addQueryParameter("forbidden_uris[]", escapeString(String.valueOf(params.getJSONArray("forbiddenUris"))));
        }

        if (params.has("distance") && (!params.getString("distance").isEmpty())) {
          urlBuilder.addQueryParameter("distance", escapeString(String.valueOf(params.getInt("distance"))));
        }

        if (params.has("disableGeojson") && (!params.getString("disableGeojson").isEmpty())) {
          urlBuilder.addQueryParameter("disable_geojson", escapeString(String.valueOf(params.getBoolean("disableGeojson"))));
        }

        if (params.has("since") && (!params.getString("since").isEmpty())) {
          urlBuilder.addQueryParameter("since", escapeString(String.valueOf(params.getString("since"))));
        }

        if (params.has("until") && (!params.getString("until").isEmpty())) {
          urlBuilder.addQueryParameter("until", escapeString(String.valueOf(params.getString("until"))));
        }

        HttpUrl url = urlBuilder
          .addPathSegments(path)
          .build();
        Request request = requestBuilder.url(url)
          .build();

        client.newCall(request).enqueue(new Callback() {

          @Override
          public void onFailure(@NonNull Call call, @NonNull IOException e) {
            String errorMessage = "Problem during request | " + String.valueOf(e.hashCode()) + ": " + e.getMessage();
            callbackContext.error(errorMessage);
          }

          @Override
          public void onResponse(@NonNull Call call, @NonNull Response response) {
            if (response.isSuccessful()) {
              try {
                JSONObject jsonObject = new JSONObject(Objects.requireNonNull(response.body()).string());
                callbackContext.success(jsonObject);
              } catch (Exception e) {
                String errorMessage = "Problem during response parsing";
                callbackContext.error(errorMessage);
              }
            } else {
              callbackContext.error("Unexpected code " + response.code() + " | message: " + response.message());
            }
          }
        });
      } catch (Exception e) {
        String errorMessage = "Problem during request building | " + e.hashCode() + ": " + e.getMessage();
        callbackContext.error(errorMessage);
      }
    });
  }

  private void coverageLonLatUriTrafficReports(final JSONObject params, final CallbackContext callbackContext) {
    cordova.getThreadPool().execute(() -> {
      try {
        HttpUrl.Builder urlBuilder = new HttpUrl.Builder()
          .scheme("https")
          .host("api.navitia.io")
          .addPathSegment("v1");
        Request.Builder requestBuilder = new Request.Builder()
          .header("Authorization", token);
        String path = "/coverage/{lon};{lat}/{uri}/traffic_reports".substring(1);

        if (params.has("lat") && (!params.getString("lat").isEmpty())) {
          path = path.replaceAll("\\{" + "lat" + "\\}", escapeString(String.valueOf(params.getLong("lat"))));
        }

        if (params.has("lon") && (!params.getString("lon").isEmpty())) {
          path = path.replaceAll("\\{" + "lon" + "\\}", escapeString(String.valueOf(params.getLong("lon"))));
        }

        if (params.has("uri") && (!params.getString("uri").isEmpty())) {
          path = path.replaceAll("\\{" + "uri" + "\\}", escapeString(params.getString("uri")));
        }

        if (params.has("depth") && (!params.getString("depth").isEmpty())) {
          urlBuilder.addQueryParameter("depth", escapeString(String.valueOf(params.getInt("depth"))));
        }

        if (params.has("count") && (!params.getString("count").isEmpty())) {
          urlBuilder.addQueryParameter("count", escapeString(String.valueOf(params.getInt("count"))));
        }

        if (params.has("startPage") && (!params.getString("startPage").isEmpty())) {
          urlBuilder.addQueryParameter("start_page", escapeString(String.valueOf(params.getInt("startPage"))));
        }

        if (params.has("forbiddenId") && (!params.getString("forbiddenId").isEmpty())) {
          urlBuilder.addQueryParameter("forbidden_id[]", escapeString(String.valueOf(params.getJSONArray("forbiddenId"))));
        }

        if (params.has("forbiddenUris") && (!params.getString("forbiddenUris").isEmpty())) {
          urlBuilder.addQueryParameter("forbidden_uris[]", escapeString(String.valueOf(params.getJSONArray("forbiddenUris"))));
        }

        if (params.has("distance") && (!params.getString("distance").isEmpty())) {
          urlBuilder.addQueryParameter("distance", escapeString(String.valueOf(params.getInt("distance"))));
        }

        if (params.has("disableGeojson") && (!params.getString("disableGeojson").isEmpty())) {
          urlBuilder.addQueryParameter("disable_geojson", escapeString(String.valueOf(params.getBoolean("disableGeojson"))));
        }

        if (params.has("since") && (!params.getString("since").isEmpty())) {
          urlBuilder.addQueryParameter("since", escapeString(String.valueOf(params.getString("since"))));
        }

        if (params.has("until") && (!params.getString("until").isEmpty())) {
          urlBuilder.addQueryParameter("until", escapeString(String.valueOf(params.getString("until"))));
        }

        HttpUrl url = urlBuilder
          .addPathSegments(path)
          .build();
        Request request = requestBuilder.url(url)
          .build();

        client.newCall(request).enqueue(new Callback() {

          @Override
          public void onFailure(@NonNull Call call, @NonNull IOException e) {
            String errorMessage = "Problem during request | " + String.valueOf(e.hashCode()) + ": " + e.getMessage();
            callbackContext.error(errorMessage);
          }

          @Override
          public void onResponse(@NonNull Call call, @NonNull Response response) {
            if (response.isSuccessful()) {
              try {
                JSONObject jsonObject = new JSONObject(Objects.requireNonNull(response.body()).string());
                callbackContext.success(jsonObject);
              } catch (Exception e) {
                String errorMessage = "Problem during response parsing";
                callbackContext.error(errorMessage);
              }
            } else {
              callbackContext.error("Unexpected code " + response.code() + " | message: " + response.message());
            }
          }
        });
      } catch (Exception e) {
        String errorMessage = "Problem during request building | " + e.hashCode() + ": " + e.getMessage();
        callbackContext.error(errorMessage);
      }
    });
  }

  private void coverageRegionTrafficReports(final JSONObject params, final CallbackContext callbackContext) {
    cordova.getThreadPool().execute(() -> {
      try {
        HttpUrl.Builder urlBuilder = new HttpUrl.Builder()
          .scheme("https")
          .host("api.navitia.io")
          .addPathSegment("v1");
        Request.Builder requestBuilder = new Request.Builder()
          .header("Authorization", token);
        String path = "/coverage/{region}/traffic_reports".substring(1);

        if (params.has("region") && (!params.getString("region").isEmpty())) {
          path = path.replaceAll("\\{" + "region" + "\\}", escapeString(params.getString("region")));
        }

        if (params.has("depth") && (!params.getString("depth").isEmpty())) {
          urlBuilder.addQueryParameter("depth", escapeString(String.valueOf(params.getInt("depth"))));
        }

        if (params.has("count") && (!params.getString("count").isEmpty())) {
          urlBuilder.addQueryParameter("count", escapeString(String.valueOf(params.getInt("count"))));
        }

        if (params.has("startPage") && (!params.getString("startPage").isEmpty())) {
          urlBuilder.addQueryParameter("start_page", escapeString(String.valueOf(params.getInt("startPage"))));
        }

        if (params.has("forbiddenId") && (!params.getString("forbiddenId").isEmpty())) {
          urlBuilder.addQueryParameter("forbidden_id[]", escapeString(String.valueOf(params.getJSONArray("forbiddenId"))));
        }

        if (params.has("forbiddenUris") && (!params.getString("forbiddenUris").isEmpty())) {
          urlBuilder.addQueryParameter("forbidden_uris[]", escapeString(String.valueOf(params.getJSONArray("forbiddenUris"))));
        }

        if (params.has("distance") && (!params.getString("distance").isEmpty())) {
          urlBuilder.addQueryParameter("distance", escapeString(String.valueOf(params.getInt("distance"))));
        }

        if (params.has("disableGeojson") && (!params.getString("disableGeojson").isEmpty())) {
          urlBuilder.addQueryParameter("disable_geojson", escapeString(String.valueOf(params.getBoolean("disableGeojson"))));
        }

        if (params.has("since") && (!params.getString("since").isEmpty())) {
          urlBuilder.addQueryParameter("since", escapeString(String.valueOf(params.getString("since"))));
        }

        if (params.has("until") && (!params.getString("until").isEmpty())) {
          urlBuilder.addQueryParameter("until", escapeString(String.valueOf(params.getString("until"))));
        }

        HttpUrl url = urlBuilder
          .addPathSegments(path)
          .build();
        Request request = requestBuilder.url(url)
          .build();

        client.newCall(request).enqueue(new Callback() {

          @Override
          public void onFailure(@NonNull Call call, @NonNull IOException e) {
            String errorMessage = "Problem during request | " + String.valueOf(e.hashCode()) + ": " + e.getMessage();
            callbackContext.error(errorMessage);
          }

          @Override
          public void onResponse(@NonNull Call call, @NonNull Response response) {
            if (response.isSuccessful()) {
              try {
                JSONObject jsonObject = new JSONObject(Objects.requireNonNull(response.body()).string());
                callbackContext.success(jsonObject);
              } catch (Exception e) {
                String errorMessage = "Problem during response parsing";
                callbackContext.error(errorMessage);
              }
            } else {
              callbackContext.error("Unexpected code " + response.code() + " | message: " + response.message());
            }
          }
        });
      } catch (Exception e) {
        String errorMessage = "Problem during request building | " + e.hashCode() + ": " + e.getMessage();
        callbackContext.error(errorMessage);
      }
    });
  }

  private void coverageRegionUriTrafficReports(final JSONObject params, final CallbackContext callbackContext) {
    cordova.getThreadPool().execute(() -> {
      try {
        HttpUrl.Builder urlBuilder = new HttpUrl.Builder()
          .scheme("https")
          .host("api.navitia.io")
          .addPathSegment("v1");
        Request.Builder requestBuilder = new Request.Builder()
          .header("Authorization", token);
        String path = "/coverage/{region}/{uri}/traffic_reports".substring(1);

        if (params.has("region") && (!params.getString("region").isEmpty())) {
          path = path.replaceAll("\\{" + "region" + "\\}", escapeString(params.getString("region")));
        }

        if (params.has("uri") && (!params.getString("uri").isEmpty())) {
          path = path.replaceAll("\\{" + "uri" + "\\}", escapeString(params.getString("uri")));
        }

        if (params.has("depth") && (!params.getString("depth").isEmpty())) {
          urlBuilder.addQueryParameter("depth", escapeString(String.valueOf(params.getInt("depth"))));
        }

        if (params.has("count") && (!params.getString("count").isEmpty())) {
          urlBuilder.addQueryParameter("count", escapeString(String.valueOf(params.getInt("count"))));
        }

        if (params.has("startPage") && (!params.getString("startPage").isEmpty())) {
          urlBuilder.addQueryParameter("start_page", escapeString(String.valueOf(params.getInt("startPage"))));
        }

        if (params.has("forbiddenId") && (!params.getString("forbiddenId").isEmpty())) {
          urlBuilder.addQueryParameter("forbidden_id[]", escapeString(String.valueOf(params.getJSONArray("forbiddenId"))));
        }

        if (params.has("forbiddenUris") && (!params.getString("forbiddenUris").isEmpty())) {
          urlBuilder.addQueryParameter("forbidden_uris[]", escapeString(String.valueOf(params.getJSONArray("forbiddenUris"))));
        }

        if (params.has("distance") && (!params.getString("distance").isEmpty())) {
          urlBuilder.addQueryParameter("distance", escapeString(String.valueOf(params.getInt("distance"))));
        }

        if (params.has("disableGeojson") && (!params.getString("disableGeojson").isEmpty())) {
          urlBuilder.addQueryParameter("disable_geojson", escapeString(String.valueOf(params.getBoolean("disableGeojson"))));
        }

        if (params.has("since") && (!params.getString("since").isEmpty())) {
          urlBuilder.addQueryParameter("since", escapeString(String.valueOf(params.getString("since"))));
        }

        if (params.has("until") && (!params.getString("until").isEmpty())) {
          urlBuilder.addQueryParameter("until", escapeString(String.valueOf(params.getString("until"))));
        }

        HttpUrl url = urlBuilder
          .addPathSegments(path)
          .build();
        Request request = requestBuilder.url(url)
          .build();

        client.newCall(request).enqueue(new Callback() {

          @Override
          public void onFailure(@NonNull Call call, @NonNull IOException e) {
            String errorMessage = "Problem during request | " + String.valueOf(e.hashCode()) + ": " + e.getMessage();
            callbackContext.error(errorMessage);
          }

          @Override
          public void onResponse(@NonNull Call call, @NonNull Response response) {
            if (response.isSuccessful()) {
              try {
                JSONObject jsonObject = new JSONObject(Objects.requireNonNull(response.body()).string());
                callbackContext.success(jsonObject);
              } catch (Exception e) {
                String errorMessage = "Problem during response parsing";
                callbackContext.error(errorMessage);
              }
            } else {
              callbackContext.error("Unexpected code " + response.code() + " | message: " + response.message());
            }
          }
        });
      } catch (Exception e) {
        String errorMessage = "Problem during request building | " + e.hashCode() + ": " + e.getMessage();
        callbackContext.error(errorMessage);
      }
    });
  }

  private void coverageLonLatTrips(final JSONObject params, final CallbackContext callbackContext) {
    cordova.getThreadPool().execute(() -> {
      try {
        HttpUrl.Builder urlBuilder = new HttpUrl.Builder()
          .scheme("https")
          .host("api.navitia.io")
          .addPathSegment("v1");
        Request.Builder requestBuilder = new Request.Builder()
          .header("Authorization", token);
        String path = "/coverage/{lon};{lat}/trips".substring(1);

        if (params.has("lat") && (!params.getString("lat").isEmpty())) {
          path = path.replaceAll("\\{" + "lat" + "\\}", escapeString(String.valueOf(params.getLong("lat"))));
        }

        if (params.has("lon") && (!params.getString("lon").isEmpty())) {
          path = path.replaceAll("\\{" + "lon" + "\\}", escapeString(String.valueOf(params.getLong("lon"))));
        }

        if (params.has("startPage") && (!params.getString("startPage").isEmpty())) {
          urlBuilder.addQueryParameter("start_page", escapeString(String.valueOf(params.getInt("startPage"))));
        }

        if (params.has("count") && (!params.getString("count").isEmpty())) {
          urlBuilder.addQueryParameter("count", escapeString(String.valueOf(params.getInt("count"))));
        }

        if (params.has("depth") && (!params.getString("depth").isEmpty())) {
          urlBuilder.addQueryParameter("depth", escapeString(String.valueOf(params.getInt("depth"))));
        }

        if (params.has("forbiddenId") && (!params.getString("forbiddenId").isEmpty())) {
          urlBuilder.addQueryParameter("forbidden_id[]", escapeString(String.valueOf(params.getJSONArray("forbiddenId"))));
        }

        if (params.has("forbiddenUris") && (!params.getString("forbiddenUris").isEmpty())) {
          urlBuilder.addQueryParameter("forbidden_uris[]", escapeString(String.valueOf(params.getJSONArray("forbiddenUris"))));
        }

        if (params.has("externalCode") && (!params.getString("externalCode").isEmpty())) {
          urlBuilder.addQueryParameter("external_code", escapeString(params.getString("externalCode")));
        }

        if (params.has("headsign") && (!params.getString("headsign").isEmpty())) {
          urlBuilder.addQueryParameter("headsign", escapeString(params.getString("headsign")));
        }

        if (params.has("showCodes") && (!params.getString("showCodes").isEmpty())) {
          urlBuilder.addQueryParameter("show_codes", escapeString(String.valueOf(params.getBoolean("showCodes"))));
        }

        if (params.has("odtLevel") && (!params.getString("odtLevel").isEmpty())) {
          urlBuilder.addQueryParameter("odt_level", escapeString(params.getString("odtLevel")));
        }

        if (params.has("dataFreshness") && (!params.getString("dataFreshness").isEmpty())) {
          urlBuilder.addQueryParameter("data_freshness", escapeString(params.getString("dataFreshness")));
        }

        if (params.has("distance") && (!params.getString("distance").isEmpty())) {
          urlBuilder.addQueryParameter("distance", escapeString(String.valueOf(params.getInt("distance"))));
        }

        if (params.has("since") && (!params.getString("since").isEmpty())) {
          urlBuilder.addQueryParameter("since", escapeString(String.valueOf(params.getString("since"))));
        }

        if (params.has("until") && (!params.getString("until").isEmpty())) {
          urlBuilder.addQueryParameter("until", escapeString(String.valueOf(params.getString("until"))));
        }

        if (params.has("disableGeojson") && (!params.getString("disableGeojson").isEmpty())) {
          urlBuilder.addQueryParameter("disable_geojson", escapeString(String.valueOf(params.getBoolean("disableGeojson"))));
        }

        if (params.has("disableDisruption") && (!params.getString("disableDisruption").isEmpty())) {
          urlBuilder.addQueryParameter("disable_disruption", escapeString(String.valueOf(params.getBoolean("disableDisruption"))));
        }

        if (params.has("filter") && (!params.getString("filter").isEmpty())) {
          urlBuilder.addQueryParameter("filter", escapeString(params.getString("filter")));
        }

        if (params.has("tags") && (!params.getString("tags").isEmpty())) {
          urlBuilder.addQueryParameter("tags[]", escapeString(String.valueOf(params.getJSONArray("tags"))));
        }

        HttpUrl url = urlBuilder
          .addPathSegments(path)
          .build();
        Request request = requestBuilder.url(url)
          .build();

        client.newCall(request).enqueue(new Callback() {

          @Override
          public void onFailure(@NonNull Call call, @NonNull IOException e) {
            String errorMessage = "Problem during request | " + String.valueOf(e.hashCode()) + ": " + e.getMessage();
            callbackContext.error(errorMessage);
          }

          @Override
          public void onResponse(@NonNull Call call, @NonNull Response response) {
            if (response.isSuccessful()) {
              try {
                JSONObject jsonObject = new JSONObject(Objects.requireNonNull(response.body()).string());
                callbackContext.success(jsonObject);
              } catch (Exception e) {
                String errorMessage = "Problem during response parsing";
                callbackContext.error(errorMessage);
              }
            } else {
              callbackContext.error("Unexpected code " + response.code() + " | message: " + response.message());
            }
          }
        });
      } catch (Exception e) {
        String errorMessage = "Problem during request building | " + e.hashCode() + ": " + e.getMessage();
        callbackContext.error(errorMessage);
      }
    });
  }

  private void coverageLonLatTripsId(final JSONObject params, final CallbackContext callbackContext) {
    cordova.getThreadPool().execute(() -> {
      try {
        HttpUrl.Builder urlBuilder = new HttpUrl.Builder()
          .scheme("https")
          .host("api.navitia.io")
          .addPathSegment("v1");
        Request.Builder requestBuilder = new Request.Builder()
          .header("Authorization", token);
        String path = "/coverage/{lon};{lat}/trips/{id}".substring(1);

        if (params.has("lat") && (!params.getString("lat").isEmpty())) {
          path = path.replaceAll("\\{" + "lat" + "\\}", escapeString(String.valueOf(params.getLong("lat"))));
        }

        if (params.has("lon") && (!params.getString("lon").isEmpty())) {
          path = path.replaceAll("\\{" + "lon" + "\\}", escapeString(String.valueOf(params.getLong("lon"))));
        }

        if (params.has("id") && (!params.getString("id").isEmpty())) {
          path = path.replaceAll("\\{" + "id" + "\\}", escapeString(params.getString("id")));
        }

        if (params.has("startPage") && (!params.getString("startPage").isEmpty())) {
          urlBuilder.addQueryParameter("start_page", escapeString(String.valueOf(params.getInt("startPage"))));
        }

        if (params.has("count") && (!params.getString("count").isEmpty())) {
          urlBuilder.addQueryParameter("count", escapeString(String.valueOf(params.getInt("count"))));
        }

        if (params.has("depth") && (!params.getString("depth").isEmpty())) {
          urlBuilder.addQueryParameter("depth", escapeString(String.valueOf(params.getInt("depth"))));
        }

        if (params.has("forbiddenId") && (!params.getString("forbiddenId").isEmpty())) {
          urlBuilder.addQueryParameter("forbidden_id[]", escapeString(String.valueOf(params.getJSONArray("forbiddenId"))));
        }

        if (params.has("forbiddenUris") && (!params.getString("forbiddenUris").isEmpty())) {
          urlBuilder.addQueryParameter("forbidden_uris[]", escapeString(String.valueOf(params.getJSONArray("forbiddenUris"))));
        }

        if (params.has("externalCode") && (!params.getString("externalCode").isEmpty())) {
          urlBuilder.addQueryParameter("external_code", escapeString(params.getString("externalCode")));
        }

        if (params.has("headsign") && (!params.getString("headsign").isEmpty())) {
          urlBuilder.addQueryParameter("headsign", escapeString(params.getString("headsign")));
        }

        if (params.has("showCodes") && (!params.getString("showCodes").isEmpty())) {
          urlBuilder.addQueryParameter("show_codes", escapeString(String.valueOf(params.getBoolean("showCodes"))));
        }

        if (params.has("odtLevel") && (!params.getString("odtLevel").isEmpty())) {
          urlBuilder.addQueryParameter("odt_level", escapeString(params.getString("odtLevel")));
        }

        if (params.has("dataFreshness") && (!params.getString("dataFreshness").isEmpty())) {
          urlBuilder.addQueryParameter("data_freshness", escapeString(params.getString("dataFreshness")));
        }

        if (params.has("distance") && (!params.getString("distance").isEmpty())) {
          urlBuilder.addQueryParameter("distance", escapeString(String.valueOf(params.getInt("distance"))));
        }

        if (params.has("since") && (!params.getString("since").isEmpty())) {
          urlBuilder.addQueryParameter("since", escapeString(String.valueOf(params.getString("since"))));
        }

        if (params.has("until") && (!params.getString("until").isEmpty())) {
          urlBuilder.addQueryParameter("until", escapeString(String.valueOf(params.getString("until"))));
        }

        if (params.has("disableGeojson") && (!params.getString("disableGeojson").isEmpty())) {
          urlBuilder.addQueryParameter("disable_geojson", escapeString(String.valueOf(params.getBoolean("disableGeojson"))));
        }

        if (params.has("disableDisruption") && (!params.getString("disableDisruption").isEmpty())) {
          urlBuilder.addQueryParameter("disable_disruption", escapeString(String.valueOf(params.getBoolean("disableDisruption"))));
        }

        if (params.has("tags") && (!params.getString("tags").isEmpty())) {
          urlBuilder.addQueryParameter("tags[]", escapeString(String.valueOf(params.getJSONArray("tags"))));
        }

        HttpUrl url = urlBuilder
          .addPathSegments(path)
          .build();
        Request request = requestBuilder.url(url)
          .build();

        client.newCall(request).enqueue(new Callback() {

          @Override
          public void onFailure(@NonNull Call call, @NonNull IOException e) {
            String errorMessage = "Problem during request | " + String.valueOf(e.hashCode()) + ": " + e.getMessage();
            callbackContext.error(errorMessage);
          }

          @Override
          public void onResponse(@NonNull Call call, @NonNull Response response) {
            if (response.isSuccessful()) {
              try {
                JSONObject jsonObject = new JSONObject(Objects.requireNonNull(response.body()).string());
                callbackContext.success(jsonObject);
              } catch (Exception e) {
                String errorMessage = "Problem during response parsing";
                callbackContext.error(errorMessage);
              }
            } else {
              callbackContext.error("Unexpected code " + response.code() + " | message: " + response.message());
            }
          }
        });
      } catch (Exception e) {
        String errorMessage = "Problem during request building | " + e.hashCode() + ": " + e.getMessage();
        callbackContext.error(errorMessage);
      }
    });
  }

  private void coverageLonLatUriTrips(final JSONObject params, final CallbackContext callbackContext) {
    cordova.getThreadPool().execute(() -> {
      try {
        HttpUrl.Builder urlBuilder = new HttpUrl.Builder()
          .scheme("https")
          .host("api.navitia.io")
          .addPathSegment("v1");
        Request.Builder requestBuilder = new Request.Builder()
          .header("Authorization", token);
        String path = "/coverage/{lon};{lat}/{uri}/trips".substring(1);

        if (params.has("lat") && (!params.getString("lat").isEmpty())) {
          path = path.replaceAll("\\{" + "lat" + "\\}", escapeString(String.valueOf(params.getLong("lat"))));
        }

        if (params.has("lon") && (!params.getString("lon").isEmpty())) {
          path = path.replaceAll("\\{" + "lon" + "\\}", escapeString(String.valueOf(params.getLong("lon"))));
        }

        if (params.has("uri") && (!params.getString("uri").isEmpty())) {
          path = path.replaceAll("\\{" + "uri" + "\\}", escapeString(params.getString("uri")));
        }

        if (params.has("startPage") && (!params.getString("startPage").isEmpty())) {
          urlBuilder.addQueryParameter("start_page", escapeString(String.valueOf(params.getInt("startPage"))));
        }

        if (params.has("count") && (!params.getString("count").isEmpty())) {
          urlBuilder.addQueryParameter("count", escapeString(String.valueOf(params.getInt("count"))));
        }

        if (params.has("depth") && (!params.getString("depth").isEmpty())) {
          urlBuilder.addQueryParameter("depth", escapeString(String.valueOf(params.getInt("depth"))));
        }

        if (params.has("forbiddenId") && (!params.getString("forbiddenId").isEmpty())) {
          urlBuilder.addQueryParameter("forbidden_id[]", escapeString(String.valueOf(params.getJSONArray("forbiddenId"))));
        }

        if (params.has("forbiddenUris") && (!params.getString("forbiddenUris").isEmpty())) {
          urlBuilder.addQueryParameter("forbidden_uris[]", escapeString(String.valueOf(params.getJSONArray("forbiddenUris"))));
        }

        if (params.has("externalCode") && (!params.getString("externalCode").isEmpty())) {
          urlBuilder.addQueryParameter("external_code", escapeString(params.getString("externalCode")));
        }

        if (params.has("headsign") && (!params.getString("headsign").isEmpty())) {
          urlBuilder.addQueryParameter("headsign", escapeString(params.getString("headsign")));
        }

        if (params.has("showCodes") && (!params.getString("showCodes").isEmpty())) {
          urlBuilder.addQueryParameter("show_codes", escapeString(String.valueOf(params.getBoolean("showCodes"))));
        }

        if (params.has("odtLevel") && (!params.getString("odtLevel").isEmpty())) {
          urlBuilder.addQueryParameter("odt_level", escapeString(params.getString("odtLevel")));
        }

        if (params.has("dataFreshness") && (!params.getString("dataFreshness").isEmpty())) {
          urlBuilder.addQueryParameter("data_freshness", escapeString(params.getString("dataFreshness")));
        }

        if (params.has("distance") && (!params.getString("distance").isEmpty())) {
          urlBuilder.addQueryParameter("distance", escapeString(String.valueOf(params.getInt("distance"))));
        }

        if (params.has("since") && (!params.getString("since").isEmpty())) {
          urlBuilder.addQueryParameter("since", escapeString(String.valueOf(params.getString("since"))));
        }

        if (params.has("until") && (!params.getString("until").isEmpty())) {
          urlBuilder.addQueryParameter("until", escapeString(String.valueOf(params.getString("until"))));
        }

        if (params.has("disableGeojson") && (!params.getString("disableGeojson").isEmpty())) {
          urlBuilder.addQueryParameter("disable_geojson", escapeString(String.valueOf(params.getBoolean("disableGeojson"))));
        }

        if (params.has("disableDisruption") && (!params.getString("disableDisruption").isEmpty())) {
          urlBuilder.addQueryParameter("disable_disruption", escapeString(String.valueOf(params.getBoolean("disableDisruption"))));
        }

        if (params.has("filter") && (!params.getString("filter").isEmpty())) {
          urlBuilder.addQueryParameter("filter", escapeString(params.getString("filter")));
        }

        if (params.has("tags") && (!params.getString("tags").isEmpty())) {
          urlBuilder.addQueryParameter("tags[]", escapeString(String.valueOf(params.getJSONArray("tags"))));
        }

        HttpUrl url = urlBuilder
          .addPathSegments(path)
          .build();
        Request request = requestBuilder.url(url)
          .build();

        client.newCall(request).enqueue(new Callback() {

          @Override
          public void onFailure(@NonNull Call call, @NonNull IOException e) {
            String errorMessage = "Problem during request | " + String.valueOf(e.hashCode()) + ": " + e.getMessage();
            callbackContext.error(errorMessage);
          }

          @Override
          public void onResponse(@NonNull Call call, @NonNull Response response) {
            if (response.isSuccessful()) {
              try {
                JSONObject jsonObject = new JSONObject(Objects.requireNonNull(response.body()).string());
                callbackContext.success(jsonObject);
              } catch (Exception e) {
                String errorMessage = "Problem during response parsing";
                callbackContext.error(errorMessage);
              }
            } else {
              callbackContext.error("Unexpected code " + response.code() + " | message: " + response.message());
            }
          }
        });
      } catch (Exception e) {
        String errorMessage = "Problem during request building | " + e.hashCode() + ": " + e.getMessage();
        callbackContext.error(errorMessage);
      }
    });
  }

  private void coverageLonLatUriTripsId(final JSONObject params, final CallbackContext callbackContext) {
    cordova.getThreadPool().execute(() -> {
      try {
        HttpUrl.Builder urlBuilder = new HttpUrl.Builder()
          .scheme("https")
          .host("api.navitia.io")
          .addPathSegment("v1");
        Request.Builder requestBuilder = new Request.Builder()
          .header("Authorization", token);
        String path = "/coverage/{lon};{lat}/{uri}/trips/{id}".substring(1);

        if (params.has("lat") && (!params.getString("lat").isEmpty())) {
          path = path.replaceAll("\\{" + "lat" + "\\}", escapeString(String.valueOf(params.getLong("lat"))));
        }

        if (params.has("lon") && (!params.getString("lon").isEmpty())) {
          path = path.replaceAll("\\{" + "lon" + "\\}", escapeString(String.valueOf(params.getLong("lon"))));
        }

        if (params.has("uri") && (!params.getString("uri").isEmpty())) {
          path = path.replaceAll("\\{" + "uri" + "\\}", escapeString(params.getString("uri")));
        }

        if (params.has("id") && (!params.getString("id").isEmpty())) {
          path = path.replaceAll("\\{" + "id" + "\\}", escapeString(params.getString("id")));
        }

        if (params.has("startPage") && (!params.getString("startPage").isEmpty())) {
          urlBuilder.addQueryParameter("start_page", escapeString(String.valueOf(params.getInt("startPage"))));
        }

        if (params.has("count") && (!params.getString("count").isEmpty())) {
          urlBuilder.addQueryParameter("count", escapeString(String.valueOf(params.getInt("count"))));
        }

        if (params.has("depth") && (!params.getString("depth").isEmpty())) {
          urlBuilder.addQueryParameter("depth", escapeString(String.valueOf(params.getInt("depth"))));
        }

        if (params.has("forbiddenId") && (!params.getString("forbiddenId").isEmpty())) {
          urlBuilder.addQueryParameter("forbidden_id[]", escapeString(String.valueOf(params.getJSONArray("forbiddenId"))));
        }

        if (params.has("forbiddenUris") && (!params.getString("forbiddenUris").isEmpty())) {
          urlBuilder.addQueryParameter("forbidden_uris[]", escapeString(String.valueOf(params.getJSONArray("forbiddenUris"))));
        }

        if (params.has("externalCode") && (!params.getString("externalCode").isEmpty())) {
          urlBuilder.addQueryParameter("external_code", escapeString(params.getString("externalCode")));
        }

        if (params.has("headsign") && (!params.getString("headsign").isEmpty())) {
          urlBuilder.addQueryParameter("headsign", escapeString(params.getString("headsign")));
        }

        if (params.has("showCodes") && (!params.getString("showCodes").isEmpty())) {
          urlBuilder.addQueryParameter("show_codes", escapeString(String.valueOf(params.getBoolean("showCodes"))));
        }

        if (params.has("odtLevel") && (!params.getString("odtLevel").isEmpty())) {
          urlBuilder.addQueryParameter("odt_level", escapeString(params.getString("odtLevel")));
        }

        if (params.has("dataFreshness") && (!params.getString("dataFreshness").isEmpty())) {
          urlBuilder.addQueryParameter("data_freshness", escapeString(params.getString("dataFreshness")));
        }

        if (params.has("distance") && (!params.getString("distance").isEmpty())) {
          urlBuilder.addQueryParameter("distance", escapeString(String.valueOf(params.getInt("distance"))));
        }

        if (params.has("since") && (!params.getString("since").isEmpty())) {
          urlBuilder.addQueryParameter("since", escapeString(String.valueOf(params.getString("since"))));
        }

        if (params.has("until") && (!params.getString("until").isEmpty())) {
          urlBuilder.addQueryParameter("until", escapeString(String.valueOf(params.getString("until"))));
        }

        if (params.has("disableGeojson") && (!params.getString("disableGeojson").isEmpty())) {
          urlBuilder.addQueryParameter("disable_geojson", escapeString(String.valueOf(params.getBoolean("disableGeojson"))));
        }

        if (params.has("disableDisruption") && (!params.getString("disableDisruption").isEmpty())) {
          urlBuilder.addQueryParameter("disable_disruption", escapeString(String.valueOf(params.getBoolean("disableDisruption"))));
        }

        if (params.has("tags") && (!params.getString("tags").isEmpty())) {
          urlBuilder.addQueryParameter("tags[]", escapeString(String.valueOf(params.getJSONArray("tags"))));
        }

        HttpUrl url = urlBuilder
          .addPathSegments(path)
          .build();
        Request request = requestBuilder.url(url)
          .build();

        client.newCall(request).enqueue(new Callback() {

          @Override
          public void onFailure(@NonNull Call call, @NonNull IOException e) {
            String errorMessage = "Problem during request | " + String.valueOf(e.hashCode()) + ": " + e.getMessage();
            callbackContext.error(errorMessage);
          }

          @Override
          public void onResponse(@NonNull Call call, @NonNull Response response) {
            if (response.isSuccessful()) {
              try {
                JSONObject jsonObject = new JSONObject(Objects.requireNonNull(response.body()).string());
                callbackContext.success(jsonObject);
              } catch (Exception e) {
                String errorMessage = "Problem during response parsing";
                callbackContext.error(errorMessage);
              }
            } else {
              callbackContext.error("Unexpected code " + response.code() + " | message: " + response.message());
            }
          }
        });
      } catch (Exception e) {
        String errorMessage = "Problem during request building | " + e.hashCode() + ": " + e.getMessage();
        callbackContext.error(errorMessage);
      }
    });
  }

  private void coverageRegionTrips(final JSONObject params, final CallbackContext callbackContext) {
    cordova.getThreadPool().execute(() -> {
      try {
        HttpUrl.Builder urlBuilder = new HttpUrl.Builder()
          .scheme("https")
          .host("api.navitia.io")
          .addPathSegment("v1");
        Request.Builder requestBuilder = new Request.Builder()
          .header("Authorization", token);
        String path = "/coverage/{region}/trips".substring(1);

        if (params.has("region") && (!params.getString("region").isEmpty())) {
          path = path.replaceAll("\\{" + "region" + "\\}", escapeString(params.getString("region")));
        }

        if (params.has("startPage") && (!params.getString("startPage").isEmpty())) {
          urlBuilder.addQueryParameter("start_page", escapeString(String.valueOf(params.getInt("startPage"))));
        }

        if (params.has("count") && (!params.getString("count").isEmpty())) {
          urlBuilder.addQueryParameter("count", escapeString(String.valueOf(params.getInt("count"))));
        }

        if (params.has("depth") && (!params.getString("depth").isEmpty())) {
          urlBuilder.addQueryParameter("depth", escapeString(String.valueOf(params.getInt("depth"))));
        }

        if (params.has("forbiddenId") && (!params.getString("forbiddenId").isEmpty())) {
          urlBuilder.addQueryParameter("forbidden_id[]", escapeString(String.valueOf(params.getJSONArray("forbiddenId"))));
        }

        if (params.has("forbiddenUris") && (!params.getString("forbiddenUris").isEmpty())) {
          urlBuilder.addQueryParameter("forbidden_uris[]", escapeString(String.valueOf(params.getJSONArray("forbiddenUris"))));
        }

        if (params.has("externalCode") && (!params.getString("externalCode").isEmpty())) {
          urlBuilder.addQueryParameter("external_code", escapeString(params.getString("externalCode")));
        }

        if (params.has("headsign") && (!params.getString("headsign").isEmpty())) {
          urlBuilder.addQueryParameter("headsign", escapeString(params.getString("headsign")));
        }

        if (params.has("showCodes") && (!params.getString("showCodes").isEmpty())) {
          urlBuilder.addQueryParameter("show_codes", escapeString(String.valueOf(params.getBoolean("showCodes"))));
        }

        if (params.has("odtLevel") && (!params.getString("odtLevel").isEmpty())) {
          urlBuilder.addQueryParameter("odt_level", escapeString(params.getString("odtLevel")));
        }

        if (params.has("dataFreshness") && (!params.getString("dataFreshness").isEmpty())) {
          urlBuilder.addQueryParameter("data_freshness", escapeString(params.getString("dataFreshness")));
        }

        if (params.has("distance") && (!params.getString("distance").isEmpty())) {
          urlBuilder.addQueryParameter("distance", escapeString(String.valueOf(params.getInt("distance"))));
        }

        if (params.has("since") && (!params.getString("since").isEmpty())) {
          urlBuilder.addQueryParameter("since", escapeString(String.valueOf(params.getString("since"))));
        }

        if (params.has("until") && (!params.getString("until").isEmpty())) {
          urlBuilder.addQueryParameter("until", escapeString(String.valueOf(params.getString("until"))));
        }

        if (params.has("disableGeojson") && (!params.getString("disableGeojson").isEmpty())) {
          urlBuilder.addQueryParameter("disable_geojson", escapeString(String.valueOf(params.getBoolean("disableGeojson"))));
        }

        if (params.has("disableDisruption") && (!params.getString("disableDisruption").isEmpty())) {
          urlBuilder.addQueryParameter("disable_disruption", escapeString(String.valueOf(params.getBoolean("disableDisruption"))));
        }

        if (params.has("filter") && (!params.getString("filter").isEmpty())) {
          urlBuilder.addQueryParameter("filter", escapeString(params.getString("filter")));
        }

        if (params.has("tags") && (!params.getString("tags").isEmpty())) {
          urlBuilder.addQueryParameter("tags[]", escapeString(String.valueOf(params.getJSONArray("tags"))));
        }

        HttpUrl url = urlBuilder
          .addPathSegments(path)
          .build();
        Request request = requestBuilder.url(url)
          .build();

        client.newCall(request).enqueue(new Callback() {

          @Override
          public void onFailure(@NonNull Call call, @NonNull IOException e) {
            String errorMessage = "Problem during request | " + String.valueOf(e.hashCode()) + ": " + e.getMessage();
            callbackContext.error(errorMessage);
          }

          @Override
          public void onResponse(@NonNull Call call, @NonNull Response response) {
            if (response.isSuccessful()) {
              try {
                JSONObject jsonObject = new JSONObject(Objects.requireNonNull(response.body()).string());
                callbackContext.success(jsonObject);
              } catch (Exception e) {
                String errorMessage = "Problem during response parsing";
                callbackContext.error(errorMessage);
              }
            } else {
              callbackContext.error("Unexpected code " + response.code() + " | message: " + response.message());
            }
          }
        });
      } catch (Exception e) {
        String errorMessage = "Problem during request building | " + e.hashCode() + ": " + e.getMessage();
        callbackContext.error(errorMessage);
      }
    });
  }

  private void coverageRegionTripsId(final JSONObject params, final CallbackContext callbackContext) {
    cordova.getThreadPool().execute(() -> {
      try {
        HttpUrl.Builder urlBuilder = new HttpUrl.Builder()
          .scheme("https")
          .host("api.navitia.io")
          .addPathSegment("v1");
        Request.Builder requestBuilder = new Request.Builder()
          .header("Authorization", token);
        String path = "/coverage/{region}/trips/{id}".substring(1);

        if (params.has("region") && (!params.getString("region").isEmpty())) {
          path = path.replaceAll("\\{" + "region" + "\\}", escapeString(params.getString("region")));
        }

        if (params.has("id") && (!params.getString("id").isEmpty())) {
          path = path.replaceAll("\\{" + "id" + "\\}", escapeString(params.getString("id")));
        }

        if (params.has("startPage") && (!params.getString("startPage").isEmpty())) {
          urlBuilder.addQueryParameter("start_page", escapeString(String.valueOf(params.getInt("startPage"))));
        }

        if (params.has("count") && (!params.getString("count").isEmpty())) {
          urlBuilder.addQueryParameter("count", escapeString(String.valueOf(params.getInt("count"))));
        }

        if (params.has("depth") && (!params.getString("depth").isEmpty())) {
          urlBuilder.addQueryParameter("depth", escapeString(String.valueOf(params.getInt("depth"))));
        }

        if (params.has("forbiddenId") && (!params.getString("forbiddenId").isEmpty())) {
          urlBuilder.addQueryParameter("forbidden_id[]", escapeString(String.valueOf(params.getJSONArray("forbiddenId"))));
        }

        if (params.has("forbiddenUris") && (!params.getString("forbiddenUris").isEmpty())) {
          urlBuilder.addQueryParameter("forbidden_uris[]", escapeString(String.valueOf(params.getJSONArray("forbiddenUris"))));
        }

        if (params.has("externalCode") && (!params.getString("externalCode").isEmpty())) {
          urlBuilder.addQueryParameter("external_code", escapeString(params.getString("externalCode")));
        }

        if (params.has("headsign") && (!params.getString("headsign").isEmpty())) {
          urlBuilder.addQueryParameter("headsign", escapeString(params.getString("headsign")));
        }

        if (params.has("showCodes") && (!params.getString("showCodes").isEmpty())) {
          urlBuilder.addQueryParameter("show_codes", escapeString(String.valueOf(params.getBoolean("showCodes"))));
        }

        if (params.has("odtLevel") && (!params.getString("odtLevel").isEmpty())) {
          urlBuilder.addQueryParameter("odt_level", escapeString(params.getString("odtLevel")));
        }

        if (params.has("dataFreshness") && (!params.getString("dataFreshness").isEmpty())) {
          urlBuilder.addQueryParameter("data_freshness", escapeString(params.getString("dataFreshness")));
        }

        if (params.has("distance") && (!params.getString("distance").isEmpty())) {
          urlBuilder.addQueryParameter("distance", escapeString(String.valueOf(params.getInt("distance"))));
        }

        if (params.has("since") && (!params.getString("since").isEmpty())) {
          urlBuilder.addQueryParameter("since", escapeString(String.valueOf(params.getString("since"))));
        }

        if (params.has("until") && (!params.getString("until").isEmpty())) {
          urlBuilder.addQueryParameter("until", escapeString(String.valueOf(params.getString("until"))));
        }

        if (params.has("disableGeojson") && (!params.getString("disableGeojson").isEmpty())) {
          urlBuilder.addQueryParameter("disable_geojson", escapeString(String.valueOf(params.getBoolean("disableGeojson"))));
        }

        if (params.has("disableDisruption") && (!params.getString("disableDisruption").isEmpty())) {
          urlBuilder.addQueryParameter("disable_disruption", escapeString(String.valueOf(params.getBoolean("disableDisruption"))));
        }

        if (params.has("tags") && (!params.getString("tags").isEmpty())) {
          urlBuilder.addQueryParameter("tags[]", escapeString(String.valueOf(params.getJSONArray("tags"))));
        }

        HttpUrl url = urlBuilder
          .addPathSegments(path)
          .build();
        Request request = requestBuilder.url(url)
          .build();

        client.newCall(request).enqueue(new Callback() {

          @Override
          public void onFailure(@NonNull Call call, @NonNull IOException e) {
            String errorMessage = "Problem during request | " + String.valueOf(e.hashCode()) + ": " + e.getMessage();
            callbackContext.error(errorMessage);
          }

          @Override
          public void onResponse(@NonNull Call call, @NonNull Response response) {
            if (response.isSuccessful()) {
              try {
                JSONObject jsonObject = new JSONObject(Objects.requireNonNull(response.body()).string());
                callbackContext.success(jsonObject);
              } catch (Exception e) {
                String errorMessage = "Problem during response parsing";
                callbackContext.error(errorMessage);
              }
            } else {
              callbackContext.error("Unexpected code " + response.code() + " | message: " + response.message());
            }
          }
        });
      } catch (Exception e) {
        String errorMessage = "Problem during request building | " + e.hashCode() + ": " + e.getMessage();
        callbackContext.error(errorMessage);
      }
    });
  }

  private void coverageRegionUriTrips(final JSONObject params, final CallbackContext callbackContext) {
    cordova.getThreadPool().execute(() -> {
      try {
        HttpUrl.Builder urlBuilder = new HttpUrl.Builder()
          .scheme("https")
          .host("api.navitia.io")
          .addPathSegment("v1");
        Request.Builder requestBuilder = new Request.Builder()
          .header("Authorization", token);
        String path = "/coverage/{region}/{uri}/trips".substring(1);

        if (params.has("region") && (!params.getString("region").isEmpty())) {
          path = path.replaceAll("\\{" + "region" + "\\}", escapeString(params.getString("region")));
        }

        if (params.has("uri") && (!params.getString("uri").isEmpty())) {
          path = path.replaceAll("\\{" + "uri" + "\\}", escapeString(params.getString("uri")));
        }

        if (params.has("startPage") && (!params.getString("startPage").isEmpty())) {
          urlBuilder.addQueryParameter("start_page", escapeString(String.valueOf(params.getInt("startPage"))));
        }

        if (params.has("count") && (!params.getString("count").isEmpty())) {
          urlBuilder.addQueryParameter("count", escapeString(String.valueOf(params.getInt("count"))));
        }

        if (params.has("depth") && (!params.getString("depth").isEmpty())) {
          urlBuilder.addQueryParameter("depth", escapeString(String.valueOf(params.getInt("depth"))));
        }

        if (params.has("forbiddenId") && (!params.getString("forbiddenId").isEmpty())) {
          urlBuilder.addQueryParameter("forbidden_id[]", escapeString(String.valueOf(params.getJSONArray("forbiddenId"))));
        }

        if (params.has("forbiddenUris") && (!params.getString("forbiddenUris").isEmpty())) {
          urlBuilder.addQueryParameter("forbidden_uris[]", escapeString(String.valueOf(params.getJSONArray("forbiddenUris"))));
        }

        if (params.has("externalCode") && (!params.getString("externalCode").isEmpty())) {
          urlBuilder.addQueryParameter("external_code", escapeString(params.getString("externalCode")));
        }

        if (params.has("headsign") && (!params.getString("headsign").isEmpty())) {
          urlBuilder.addQueryParameter("headsign", escapeString(params.getString("headsign")));
        }

        if (params.has("showCodes") && (!params.getString("showCodes").isEmpty())) {
          urlBuilder.addQueryParameter("show_codes", escapeString(String.valueOf(params.getBoolean("showCodes"))));
        }

        if (params.has("odtLevel") && (!params.getString("odtLevel").isEmpty())) {
          urlBuilder.addQueryParameter("odt_level", escapeString(params.getString("odtLevel")));
        }

        if (params.has("dataFreshness") && (!params.getString("dataFreshness").isEmpty())) {
          urlBuilder.addQueryParameter("data_freshness", escapeString(params.getString("dataFreshness")));
        }

        if (params.has("distance") && (!params.getString("distance").isEmpty())) {
          urlBuilder.addQueryParameter("distance", escapeString(String.valueOf(params.getInt("distance"))));
        }

        if (params.has("since") && (!params.getString("since").isEmpty())) {
          urlBuilder.addQueryParameter("since", escapeString(String.valueOf(params.getString("since"))));
        }

        if (params.has("until") && (!params.getString("until").isEmpty())) {
          urlBuilder.addQueryParameter("until", escapeString(String.valueOf(params.getString("until"))));
        }

        if (params.has("disableGeojson") && (!params.getString("disableGeojson").isEmpty())) {
          urlBuilder.addQueryParameter("disable_geojson", escapeString(String.valueOf(params.getBoolean("disableGeojson"))));
        }

        if (params.has("disableDisruption") && (!params.getString("disableDisruption").isEmpty())) {
          urlBuilder.addQueryParameter("disable_disruption", escapeString(String.valueOf(params.getBoolean("disableDisruption"))));
        }

        if (params.has("filter") && (!params.getString("filter").isEmpty())) {
          urlBuilder.addQueryParameter("filter", escapeString(params.getString("filter")));
        }

        if (params.has("tags") && (!params.getString("tags").isEmpty())) {
          urlBuilder.addQueryParameter("tags[]", escapeString(String.valueOf(params.getJSONArray("tags"))));
        }

        HttpUrl url = urlBuilder
          .addPathSegments(path)
          .build();
        Request request = requestBuilder.url(url)
          .build();

        client.newCall(request).enqueue(new Callback() {

          @Override
          public void onFailure(@NonNull Call call, @NonNull IOException e) {
            String errorMessage = "Problem during request | " + String.valueOf(e.hashCode()) + ": " + e.getMessage();
            callbackContext.error(errorMessage);
          }

          @Override
          public void onResponse(@NonNull Call call, @NonNull Response response) {
            if (response.isSuccessful()) {
              try {
                JSONObject jsonObject = new JSONObject(Objects.requireNonNull(response.body()).string());
                callbackContext.success(jsonObject);
              } catch (Exception e) {
                String errorMessage = "Problem during response parsing";
                callbackContext.error(errorMessage);
              }
            } else {
              callbackContext.error("Unexpected code " + response.code() + " | message: " + response.message());
            }
          }
        });
      } catch (Exception e) {
        String errorMessage = "Problem during request building | " + e.hashCode() + ": " + e.getMessage();
        callbackContext.error(errorMessage);
      }
    });
  }

  private void coverageRegionUriTripsId(final JSONObject params, final CallbackContext callbackContext) {
    cordova.getThreadPool().execute(() -> {
      try {
        HttpUrl.Builder urlBuilder = new HttpUrl.Builder()
          .scheme("https")
          .host("api.navitia.io")
          .addPathSegment("v1");
        Request.Builder requestBuilder = new Request.Builder()
          .header("Authorization", token);
        String path = "/coverage/{region}/{uri}/trips/{id}".substring(1);

        if (params.has("region") && (!params.getString("region").isEmpty())) {
          path = path.replaceAll("\\{" + "region" + "\\}", escapeString(params.getString("region")));
        }

        if (params.has("uri") && (!params.getString("uri").isEmpty())) {
          path = path.replaceAll("\\{" + "uri" + "\\}", escapeString(params.getString("uri")));
        }

        if (params.has("id") && (!params.getString("id").isEmpty())) {
          path = path.replaceAll("\\{" + "id" + "\\}", escapeString(params.getString("id")));
        }

        if (params.has("startPage") && (!params.getString("startPage").isEmpty())) {
          urlBuilder.addQueryParameter("start_page", escapeString(String.valueOf(params.getInt("startPage"))));
        }

        if (params.has("count") && (!params.getString("count").isEmpty())) {
          urlBuilder.addQueryParameter("count", escapeString(String.valueOf(params.getInt("count"))));
        }

        if (params.has("depth") && (!params.getString("depth").isEmpty())) {
          urlBuilder.addQueryParameter("depth", escapeString(String.valueOf(params.getInt("depth"))));
        }

        if (params.has("forbiddenId") && (!params.getString("forbiddenId").isEmpty())) {
          urlBuilder.addQueryParameter("forbidden_id[]", escapeString(String.valueOf(params.getJSONArray("forbiddenId"))));
        }

        if (params.has("forbiddenUris") && (!params.getString("forbiddenUris").isEmpty())) {
          urlBuilder.addQueryParameter("forbidden_uris[]", escapeString(String.valueOf(params.getJSONArray("forbiddenUris"))));
        }

        if (params.has("externalCode") && (!params.getString("externalCode").isEmpty())) {
          urlBuilder.addQueryParameter("external_code", escapeString(params.getString("externalCode")));
        }

        if (params.has("headsign") && (!params.getString("headsign").isEmpty())) {
          urlBuilder.addQueryParameter("headsign", escapeString(params.getString("headsign")));
        }

        if (params.has("showCodes") && (!params.getString("showCodes").isEmpty())) {
          urlBuilder.addQueryParameter("show_codes", escapeString(String.valueOf(params.getBoolean("showCodes"))));
        }

        if (params.has("odtLevel") && (!params.getString("odtLevel").isEmpty())) {
          urlBuilder.addQueryParameter("odt_level", escapeString(params.getString("odtLevel")));
        }

        if (params.has("dataFreshness") && (!params.getString("dataFreshness").isEmpty())) {
          urlBuilder.addQueryParameter("data_freshness", escapeString(params.getString("dataFreshness")));
        }

        if (params.has("distance") && (!params.getString("distance").isEmpty())) {
          urlBuilder.addQueryParameter("distance", escapeString(String.valueOf(params.getInt("distance"))));
        }

        if (params.has("since") && (!params.getString("since").isEmpty())) {
          urlBuilder.addQueryParameter("since", escapeString(String.valueOf(params.getString("since"))));
        }

        if (params.has("until") && (!params.getString("until").isEmpty())) {
          urlBuilder.addQueryParameter("until", escapeString(String.valueOf(params.getString("until"))));
        }

        if (params.has("disableGeojson") && (!params.getString("disableGeojson").isEmpty())) {
          urlBuilder.addQueryParameter("disable_geojson", escapeString(String.valueOf(params.getBoolean("disableGeojson"))));
        }

        if (params.has("disableDisruption") && (!params.getString("disableDisruption").isEmpty())) {
          urlBuilder.addQueryParameter("disable_disruption", escapeString(String.valueOf(params.getBoolean("disableDisruption"))));
        }

        if (params.has("tags") && (!params.getString("tags").isEmpty())) {
          urlBuilder.addQueryParameter("tags[]", escapeString(String.valueOf(params.getJSONArray("tags"))));
        }

        HttpUrl url = urlBuilder
          .addPathSegments(path)
          .build();
        Request request = requestBuilder.url(url)
          .build();

        client.newCall(request).enqueue(new Callback() {

          @Override
          public void onFailure(@NonNull Call call, @NonNull IOException e) {
            String errorMessage = "Problem during request | " + String.valueOf(e.hashCode()) + ": " + e.getMessage();
            callbackContext.error(errorMessage);
          }

          @Override
          public void onResponse(@NonNull Call call, @NonNull Response response) {
            if (response.isSuccessful()) {
              try {
                JSONObject jsonObject = new JSONObject(Objects.requireNonNull(response.body()).string());
                callbackContext.success(jsonObject);
              } catch (Exception e) {
                String errorMessage = "Problem during response parsing";
                callbackContext.error(errorMessage);
              }
            } else {
              callbackContext.error("Unexpected code " + response.code() + " | message: " + response.message());
            }
          }
        });
      } catch (Exception e) {
        String errorMessage = "Problem during request building | " + e.hashCode() + ": " + e.getMessage();
        callbackContext.error(errorMessage);
      }
    });
  }

  private void coverageLonLatUriVehicleJourneys(final JSONObject params, final CallbackContext callbackContext) {
    cordova.getThreadPool().execute(() -> {
      try {
        HttpUrl.Builder urlBuilder = new HttpUrl.Builder()
          .scheme("https")
          .host("api.navitia.io")
          .addPathSegment("v1");
        Request.Builder requestBuilder = new Request.Builder()
          .header("Authorization", token);
        String path = "/coverage/{lon};{lat}/{uri}/vehicle_journeys".substring(1);

        if (params.has("lat") && (!params.getString("lat").isEmpty())) {
          path = path.replaceAll("\\{" + "lat" + "\\}", escapeString(String.valueOf(params.getLong("lat"))));
        }

        if (params.has("lon") && (!params.getString("lon").isEmpty())) {
          path = path.replaceAll("\\{" + "lon" + "\\}", escapeString(String.valueOf(params.getLong("lon"))));
        }

        if (params.has("uri") && (!params.getString("uri").isEmpty())) {
          path = path.replaceAll("\\{" + "uri" + "\\}", escapeString(params.getString("uri")));
        }

        if (params.has("startPage") && (!params.getString("startPage").isEmpty())) {
          urlBuilder.addQueryParameter("start_page", escapeString(String.valueOf(params.getInt("startPage"))));
        }

        if (params.has("count") && (!params.getString("count").isEmpty())) {
          urlBuilder.addQueryParameter("count", escapeString(String.valueOf(params.getInt("count"))));
        }

        if (params.has("depth") && (!params.getString("depth").isEmpty())) {
          urlBuilder.addQueryParameter("depth", escapeString(String.valueOf(params.getInt("depth"))));
        }

        if (params.has("forbiddenId") && (!params.getString("forbiddenId").isEmpty())) {
          urlBuilder.addQueryParameter("forbidden_id[]", escapeString(String.valueOf(params.getJSONArray("forbiddenId"))));
        }

        if (params.has("forbiddenUris") && (!params.getString("forbiddenUris").isEmpty())) {
          urlBuilder.addQueryParameter("forbidden_uris[]", escapeString(String.valueOf(params.getJSONArray("forbiddenUris"))));
        }

        if (params.has("externalCode") && (!params.getString("externalCode").isEmpty())) {
          urlBuilder.addQueryParameter("external_code", escapeString(params.getString("externalCode")));
        }

        if (params.has("headsign") && (!params.getString("headsign").isEmpty())) {
          urlBuilder.addQueryParameter("headsign", escapeString(params.getString("headsign")));
        }

        if (params.has("showCodes") && (!params.getString("showCodes").isEmpty())) {
          urlBuilder.addQueryParameter("show_codes", escapeString(String.valueOf(params.getBoolean("showCodes"))));
        }

        if (params.has("odtLevel") && (!params.getString("odtLevel").isEmpty())) {
          urlBuilder.addQueryParameter("odt_level", escapeString(params.getString("odtLevel")));
        }

        if (params.has("dataFreshness") && (!params.getString("dataFreshness").isEmpty())) {
          urlBuilder.addQueryParameter("data_freshness", escapeString(params.getString("dataFreshness")));
        }

        if (params.has("distance") && (!params.getString("distance").isEmpty())) {
          urlBuilder.addQueryParameter("distance", escapeString(String.valueOf(params.getInt("distance"))));
        }

        if (params.has("since") && (!params.getString("since").isEmpty())) {
          urlBuilder.addQueryParameter("since", escapeString(String.valueOf(params.getString("since"))));
        }

        if (params.has("until") && (!params.getString("until").isEmpty())) {
          urlBuilder.addQueryParameter("until", escapeString(String.valueOf(params.getString("until"))));
        }

        if (params.has("disableGeojson") && (!params.getString("disableGeojson").isEmpty())) {
          urlBuilder.addQueryParameter("disable_geojson", escapeString(String.valueOf(params.getBoolean("disableGeojson"))));
        }

        if (params.has("disableDisruption") && (!params.getString("disableDisruption").isEmpty())) {
          urlBuilder.addQueryParameter("disable_disruption", escapeString(String.valueOf(params.getBoolean("disableDisruption"))));
        }

        if (params.has("filter") && (!params.getString("filter").isEmpty())) {
          urlBuilder.addQueryParameter("filter", escapeString(params.getString("filter")));
        }

        if (params.has("tags") && (!params.getString("tags").isEmpty())) {
          urlBuilder.addQueryParameter("tags[]", escapeString(String.valueOf(params.getJSONArray("tags"))));
        }

        HttpUrl url = urlBuilder
          .addPathSegments(path)
          .build();
        Request request = requestBuilder.url(url)
          .build();

        client.newCall(request).enqueue(new Callback() {

          @Override
          public void onFailure(@NonNull Call call, @NonNull IOException e) {
            String errorMessage = "Problem during request | " + String.valueOf(e.hashCode()) + ": " + e.getMessage();
            callbackContext.error(errorMessage);
          }

          @Override
          public void onResponse(@NonNull Call call, @NonNull Response response) {
            if (response.isSuccessful()) {
              try {
                JSONObject jsonObject = new JSONObject(Objects.requireNonNull(response.body()).string());
                callbackContext.success(jsonObject);
              } catch (Exception e) {
                String errorMessage = "Problem during response parsing";
                callbackContext.error(errorMessage);
              }
            } else {
              callbackContext.error("Unexpected code " + response.code() + " | message: " + response.message());
            }
          }
        });
      } catch (Exception e) {
        String errorMessage = "Problem during request building | " + e.hashCode() + ": " + e.getMessage();
        callbackContext.error(errorMessage);
      }
    });
  }

  private void coverageLonLatUriVehicleJourneysId(final JSONObject params, final CallbackContext callbackContext) {
    cordova.getThreadPool().execute(() -> {
      try {
        HttpUrl.Builder urlBuilder = new HttpUrl.Builder()
          .scheme("https")
          .host("api.navitia.io")
          .addPathSegment("v1");
        Request.Builder requestBuilder = new Request.Builder()
          .header("Authorization", token);
        String path = "/coverage/{lon};{lat}/{uri}/vehicle_journeys/{id}".substring(1);

        if (params.has("lat") && (!params.getString("lat").isEmpty())) {
          path = path.replaceAll("\\{" + "lat" + "\\}", escapeString(String.valueOf(params.getLong("lat"))));
        }

        if (params.has("lon") && (!params.getString("lon").isEmpty())) {
          path = path.replaceAll("\\{" + "lon" + "\\}", escapeString(String.valueOf(params.getLong("lon"))));
        }

        if (params.has("uri") && (!params.getString("uri").isEmpty())) {
          path = path.replaceAll("\\{" + "uri" + "\\}", escapeString(params.getString("uri")));
        }

        if (params.has("id") && (!params.getString("id").isEmpty())) {
          path = path.replaceAll("\\{" + "id" + "\\}", escapeString(params.getString("id")));
        }

        if (params.has("startPage") && (!params.getString("startPage").isEmpty())) {
          urlBuilder.addQueryParameter("start_page", escapeString(String.valueOf(params.getInt("startPage"))));
        }

        if (params.has("count") && (!params.getString("count").isEmpty())) {
          urlBuilder.addQueryParameter("count", escapeString(String.valueOf(params.getInt("count"))));
        }

        if (params.has("depth") && (!params.getString("depth").isEmpty())) {
          urlBuilder.addQueryParameter("depth", escapeString(String.valueOf(params.getInt("depth"))));
        }

        if (params.has("forbiddenId") && (!params.getString("forbiddenId").isEmpty())) {
          urlBuilder.addQueryParameter("forbidden_id[]", escapeString(String.valueOf(params.getJSONArray("forbiddenId"))));
        }

        if (params.has("forbiddenUris") && (!params.getString("forbiddenUris").isEmpty())) {
          urlBuilder.addQueryParameter("forbidden_uris[]", escapeString(String.valueOf(params.getJSONArray("forbiddenUris"))));
        }

        if (params.has("externalCode") && (!params.getString("externalCode").isEmpty())) {
          urlBuilder.addQueryParameter("external_code", escapeString(params.getString("externalCode")));
        }

        if (params.has("headsign") && (!params.getString("headsign").isEmpty())) {
          urlBuilder.addQueryParameter("headsign", escapeString(params.getString("headsign")));
        }

        if (params.has("showCodes") && (!params.getString("showCodes").isEmpty())) {
          urlBuilder.addQueryParameter("show_codes", escapeString(String.valueOf(params.getBoolean("showCodes"))));
        }

        if (params.has("odtLevel") && (!params.getString("odtLevel").isEmpty())) {
          urlBuilder.addQueryParameter("odt_level", escapeString(params.getString("odtLevel")));
        }

        if (params.has("dataFreshness") && (!params.getString("dataFreshness").isEmpty())) {
          urlBuilder.addQueryParameter("data_freshness", escapeString(params.getString("dataFreshness")));
        }

        if (params.has("distance") && (!params.getString("distance").isEmpty())) {
          urlBuilder.addQueryParameter("distance", escapeString(String.valueOf(params.getInt("distance"))));
        }

        if (params.has("since") && (!params.getString("since").isEmpty())) {
          urlBuilder.addQueryParameter("since", escapeString(String.valueOf(params.getString("since"))));
        }

        if (params.has("until") && (!params.getString("until").isEmpty())) {
          urlBuilder.addQueryParameter("until", escapeString(String.valueOf(params.getString("until"))));
        }

        if (params.has("disableGeojson") && (!params.getString("disableGeojson").isEmpty())) {
          urlBuilder.addQueryParameter("disable_geojson", escapeString(String.valueOf(params.getBoolean("disableGeojson"))));
        }

        if (params.has("disableDisruption") && (!params.getString("disableDisruption").isEmpty())) {
          urlBuilder.addQueryParameter("disable_disruption", escapeString(String.valueOf(params.getBoolean("disableDisruption"))));
        }

        if (params.has("tags") && (!params.getString("tags").isEmpty())) {
          urlBuilder.addQueryParameter("tags[]", escapeString(String.valueOf(params.getJSONArray("tags"))));
        }

        HttpUrl url = urlBuilder
          .addPathSegments(path)
          .build();
        Request request = requestBuilder.url(url)
          .build();

        client.newCall(request).enqueue(new Callback() {

          @Override
          public void onFailure(@NonNull Call call, @NonNull IOException e) {
            String errorMessage = "Problem during request | " + String.valueOf(e.hashCode()) + ": " + e.getMessage();
            callbackContext.error(errorMessage);
          }

          @Override
          public void onResponse(@NonNull Call call, @NonNull Response response) {
            if (response.isSuccessful()) {
              try {
                JSONObject jsonObject = new JSONObject(Objects.requireNonNull(response.body()).string());
                callbackContext.success(jsonObject);
              } catch (Exception e) {
                String errorMessage = "Problem during response parsing";
                callbackContext.error(errorMessage);
              }
            } else {
              callbackContext.error("Unexpected code " + response.code() + " | message: " + response.message());
            }
          }
        });
      } catch (Exception e) {
        String errorMessage = "Problem during request building | " + e.hashCode() + ": " + e.getMessage();
        callbackContext.error(errorMessage);
      }
    });
  }

  private void coverageLonLatVehicleJourneys(final JSONObject params, final CallbackContext callbackContext) {
    cordova.getThreadPool().execute(() -> {
      try {
        HttpUrl.Builder urlBuilder = new HttpUrl.Builder()
          .scheme("https")
          .host("api.navitia.io")
          .addPathSegment("v1");
        Request.Builder requestBuilder = new Request.Builder()
          .header("Authorization", token);
        String path = "/coverage/{lon};{lat}/vehicle_journeys".substring(1);

        if (params.has("lat") && (!params.getString("lat").isEmpty())) {
          path = path.replaceAll("\\{" + "lat" + "\\}", escapeString(String.valueOf(params.getLong("lat"))));
        }

        if (params.has("lon") && (!params.getString("lon").isEmpty())) {
          path = path.replaceAll("\\{" + "lon" + "\\}", escapeString(String.valueOf(params.getLong("lon"))));
        }

        if (params.has("startPage") && (!params.getString("startPage").isEmpty())) {
          urlBuilder.addQueryParameter("start_page", escapeString(String.valueOf(params.getInt("startPage"))));
        }

        if (params.has("count") && (!params.getString("count").isEmpty())) {
          urlBuilder.addQueryParameter("count", escapeString(String.valueOf(params.getInt("count"))));
        }

        if (params.has("depth") && (!params.getString("depth").isEmpty())) {
          urlBuilder.addQueryParameter("depth", escapeString(String.valueOf(params.getInt("depth"))));
        }

        if (params.has("forbiddenId") && (!params.getString("forbiddenId").isEmpty())) {
          urlBuilder.addQueryParameter("forbidden_id[]", escapeString(String.valueOf(params.getJSONArray("forbiddenId"))));
        }

        if (params.has("forbiddenUris") && (!params.getString("forbiddenUris").isEmpty())) {
          urlBuilder.addQueryParameter("forbidden_uris[]", escapeString(String.valueOf(params.getJSONArray("forbiddenUris"))));
        }

        if (params.has("externalCode") && (!params.getString("externalCode").isEmpty())) {
          urlBuilder.addQueryParameter("external_code", escapeString(params.getString("externalCode")));
        }

        if (params.has("headsign") && (!params.getString("headsign").isEmpty())) {
          urlBuilder.addQueryParameter("headsign", escapeString(params.getString("headsign")));
        }

        if (params.has("showCodes") && (!params.getString("showCodes").isEmpty())) {
          urlBuilder.addQueryParameter("show_codes", escapeString(String.valueOf(params.getBoolean("showCodes"))));
        }

        if (params.has("odtLevel") && (!params.getString("odtLevel").isEmpty())) {
          urlBuilder.addQueryParameter("odt_level", escapeString(params.getString("odtLevel")));
        }

        if (params.has("dataFreshness") && (!params.getString("dataFreshness").isEmpty())) {
          urlBuilder.addQueryParameter("data_freshness", escapeString(params.getString("dataFreshness")));
        }

        if (params.has("distance") && (!params.getString("distance").isEmpty())) {
          urlBuilder.addQueryParameter("distance", escapeString(String.valueOf(params.getInt("distance"))));
        }

        if (params.has("since") && (!params.getString("since").isEmpty())) {
          urlBuilder.addQueryParameter("since", escapeString(String.valueOf(params.getString("since"))));
        }

        if (params.has("until") && (!params.getString("until").isEmpty())) {
          urlBuilder.addQueryParameter("until", escapeString(String.valueOf(params.getString("until"))));
        }

        if (params.has("disableGeojson") && (!params.getString("disableGeojson").isEmpty())) {
          urlBuilder.addQueryParameter("disable_geojson", escapeString(String.valueOf(params.getBoolean("disableGeojson"))));
        }

        if (params.has("disableDisruption") && (!params.getString("disableDisruption").isEmpty())) {
          urlBuilder.addQueryParameter("disable_disruption", escapeString(String.valueOf(params.getBoolean("disableDisruption"))));
        }

        if (params.has("filter") && (!params.getString("filter").isEmpty())) {
          urlBuilder.addQueryParameter("filter", escapeString(params.getString("filter")));
        }

        if (params.has("tags") && (!params.getString("tags").isEmpty())) {
          urlBuilder.addQueryParameter("tags[]", escapeString(String.valueOf(params.getJSONArray("tags"))));
        }

        HttpUrl url = urlBuilder
          .addPathSegments(path)
          .build();
        Request request = requestBuilder.url(url)
          .build();

        client.newCall(request).enqueue(new Callback() {

          @Override
          public void onFailure(@NonNull Call call, @NonNull IOException e) {
            String errorMessage = "Problem during request | " + String.valueOf(e.hashCode()) + ": " + e.getMessage();
            callbackContext.error(errorMessage);
          }

          @Override
          public void onResponse(@NonNull Call call, @NonNull Response response) {
            if (response.isSuccessful()) {
              try {
                JSONObject jsonObject = new JSONObject(Objects.requireNonNull(response.body()).string());
                callbackContext.success(jsonObject);
              } catch (Exception e) {
                String errorMessage = "Problem during response parsing";
                callbackContext.error(errorMessage);
              }
            } else {
              callbackContext.error("Unexpected code " + response.code() + " | message: " + response.message());
            }
          }
        });
      } catch (Exception e) {
        String errorMessage = "Problem during request building | " + e.hashCode() + ": " + e.getMessage();
        callbackContext.error(errorMessage);
      }
    });
  }

  private void coverageLonLatVehicleJourneysId(final JSONObject params, final CallbackContext callbackContext) {
    cordova.getThreadPool().execute(() -> {
      try {
        HttpUrl.Builder urlBuilder = new HttpUrl.Builder()
          .scheme("https")
          .host("api.navitia.io")
          .addPathSegment("v1");
        Request.Builder requestBuilder = new Request.Builder()
          .header("Authorization", token);
        String path = "/coverage/{lon};{lat}/vehicle_journeys/{id}".substring(1);

        if (params.has("lat") && (!params.getString("lat").isEmpty())) {
          path = path.replaceAll("\\{" + "lat" + "\\}", escapeString(String.valueOf(params.getLong("lat"))));
        }

        if (params.has("lon") && (!params.getString("lon").isEmpty())) {
          path = path.replaceAll("\\{" + "lon" + "\\}", escapeString(String.valueOf(params.getLong("lon"))));
        }

        if (params.has("id") && (!params.getString("id").isEmpty())) {
          path = path.replaceAll("\\{" + "id" + "\\}", escapeString(params.getString("id")));
        }

        if (params.has("startPage") && (!params.getString("startPage").isEmpty())) {
          urlBuilder.addQueryParameter("start_page", escapeString(String.valueOf(params.getInt("startPage"))));
        }

        if (params.has("count") && (!params.getString("count").isEmpty())) {
          urlBuilder.addQueryParameter("count", escapeString(String.valueOf(params.getInt("count"))));
        }

        if (params.has("depth") && (!params.getString("depth").isEmpty())) {
          urlBuilder.addQueryParameter("depth", escapeString(String.valueOf(params.getInt("depth"))));
        }

        if (params.has("forbiddenId") && (!params.getString("forbiddenId").isEmpty())) {
          urlBuilder.addQueryParameter("forbidden_id[]", escapeString(String.valueOf(params.getJSONArray("forbiddenId"))));
        }

        if (params.has("forbiddenUris") && (!params.getString("forbiddenUris").isEmpty())) {
          urlBuilder.addQueryParameter("forbidden_uris[]", escapeString(String.valueOf(params.getJSONArray("forbiddenUris"))));
        }

        if (params.has("externalCode") && (!params.getString("externalCode").isEmpty())) {
          urlBuilder.addQueryParameter("external_code", escapeString(params.getString("externalCode")));
        }

        if (params.has("headsign") && (!params.getString("headsign").isEmpty())) {
          urlBuilder.addQueryParameter("headsign", escapeString(params.getString("headsign")));
        }

        if (params.has("showCodes") && (!params.getString("showCodes").isEmpty())) {
          urlBuilder.addQueryParameter("show_codes", escapeString(String.valueOf(params.getBoolean("showCodes"))));
        }

        if (params.has("odtLevel") && (!params.getString("odtLevel").isEmpty())) {
          urlBuilder.addQueryParameter("odt_level", escapeString(params.getString("odtLevel")));
        }

        if (params.has("dataFreshness") && (!params.getString("dataFreshness").isEmpty())) {
          urlBuilder.addQueryParameter("data_freshness", escapeString(params.getString("dataFreshness")));
        }

        if (params.has("distance") && (!params.getString("distance").isEmpty())) {
          urlBuilder.addQueryParameter("distance", escapeString(String.valueOf(params.getInt("distance"))));
        }

        if (params.has("since") && (!params.getString("since").isEmpty())) {
          urlBuilder.addQueryParameter("since", escapeString(String.valueOf(params.getString("since"))));
        }

        if (params.has("until") && (!params.getString("until").isEmpty())) {
          urlBuilder.addQueryParameter("until", escapeString(String.valueOf(params.getString("until"))));
        }

        if (params.has("disableGeojson") && (!params.getString("disableGeojson").isEmpty())) {
          urlBuilder.addQueryParameter("disable_geojson", escapeString(String.valueOf(params.getBoolean("disableGeojson"))));
        }

        if (params.has("disableDisruption") && (!params.getString("disableDisruption").isEmpty())) {
          urlBuilder.addQueryParameter("disable_disruption", escapeString(String.valueOf(params.getBoolean("disableDisruption"))));
        }

        if (params.has("tags") && (!params.getString("tags").isEmpty())) {
          urlBuilder.addQueryParameter("tags[]", escapeString(String.valueOf(params.getJSONArray("tags"))));
        }

        HttpUrl url = urlBuilder
          .addPathSegments(path)
          .build();
        Request request = requestBuilder.url(url)
          .build();

        client.newCall(request).enqueue(new Callback() {

          @Override
          public void onFailure(@NonNull Call call, @NonNull IOException e) {
            String errorMessage = "Problem during request | " + String.valueOf(e.hashCode()) + ": " + e.getMessage();
            callbackContext.error(errorMessage);
          }

          @Override
          public void onResponse(@NonNull Call call, @NonNull Response response) {
            if (response.isSuccessful()) {
              try {
                JSONObject jsonObject = new JSONObject(Objects.requireNonNull(response.body()).string());
                callbackContext.success(jsonObject);
              } catch (Exception e) {
                String errorMessage = "Problem during response parsing";
                callbackContext.error(errorMessage);
              }
            } else {
              callbackContext.error("Unexpected code " + response.code() + " | message: " + response.message());
            }
          }
        });
      } catch (Exception e) {
        String errorMessage = "Problem during request building | " + e.hashCode() + ": " + e.getMessage();
        callbackContext.error(errorMessage);
      }
    });
  }

  private void coverageRegionUriVehicleJourneys(final JSONObject params, final CallbackContext callbackContext) {
    cordova.getThreadPool().execute(() -> {
      try {
        HttpUrl.Builder urlBuilder = new HttpUrl.Builder()
          .scheme("https")
          .host("api.navitia.io")
          .addPathSegment("v1");
        Request.Builder requestBuilder = new Request.Builder()
          .header("Authorization", token);
        String path = "/coverage/{region}/{uri}/vehicle_journeys".substring(1);

        if (params.has("region") && (!params.getString("region").isEmpty())) {
          path = path.replaceAll("\\{" + "region" + "\\}", escapeString(params.getString("region")));
        }

        if (params.has("uri") && (!params.getString("uri").isEmpty())) {
          path = path.replaceAll("\\{" + "uri" + "\\}", escapeString(params.getString("uri")));
        }

        if (params.has("startPage") && (!params.getString("startPage").isEmpty())) {
          urlBuilder.addQueryParameter("start_page", escapeString(String.valueOf(params.getInt("startPage"))));
        }

        if (params.has("count") && (!params.getString("count").isEmpty())) {
          urlBuilder.addQueryParameter("count", escapeString(String.valueOf(params.getInt("count"))));
        }

        if (params.has("depth") && (!params.getString("depth").isEmpty())) {
          urlBuilder.addQueryParameter("depth", escapeString(String.valueOf(params.getInt("depth"))));
        }

        if (params.has("forbiddenId") && (!params.getString("forbiddenId").isEmpty())) {
          urlBuilder.addQueryParameter("forbidden_id[]", escapeString(String.valueOf(params.getJSONArray("forbiddenId"))));
        }

        if (params.has("forbiddenUris") && (!params.getString("forbiddenUris").isEmpty())) {
          urlBuilder.addQueryParameter("forbidden_uris[]", escapeString(String.valueOf(params.getJSONArray("forbiddenUris"))));
        }

        if (params.has("externalCode") && (!params.getString("externalCode").isEmpty())) {
          urlBuilder.addQueryParameter("external_code", escapeString(params.getString("externalCode")));
        }

        if (params.has("headsign") && (!params.getString("headsign").isEmpty())) {
          urlBuilder.addQueryParameter("headsign", escapeString(params.getString("headsign")));
        }

        if (params.has("showCodes") && (!params.getString("showCodes").isEmpty())) {
          urlBuilder.addQueryParameter("show_codes", escapeString(String.valueOf(params.getBoolean("showCodes"))));
        }

        if (params.has("odtLevel") && (!params.getString("odtLevel").isEmpty())) {
          urlBuilder.addQueryParameter("odt_level", escapeString(params.getString("odtLevel")));
        }

        if (params.has("dataFreshness") && (!params.getString("dataFreshness").isEmpty())) {
          urlBuilder.addQueryParameter("data_freshness", escapeString(params.getString("dataFreshness")));
        }

        if (params.has("distance") && (!params.getString("distance").isEmpty())) {
          urlBuilder.addQueryParameter("distance", escapeString(String.valueOf(params.getInt("distance"))));
        }

        if (params.has("since") && (!params.getString("since").isEmpty())) {
          urlBuilder.addQueryParameter("since", escapeString(String.valueOf(params.getString("since"))));
        }

        if (params.has("until") && (!params.getString("until").isEmpty())) {
          urlBuilder.addQueryParameter("until", escapeString(String.valueOf(params.getString("until"))));
        }

        if (params.has("disableGeojson") && (!params.getString("disableGeojson").isEmpty())) {
          urlBuilder.addQueryParameter("disable_geojson", escapeString(String.valueOf(params.getBoolean("disableGeojson"))));
        }

        if (params.has("disableDisruption") && (!params.getString("disableDisruption").isEmpty())) {
          urlBuilder.addQueryParameter("disable_disruption", escapeString(String.valueOf(params.getBoolean("disableDisruption"))));
        }

        if (params.has("filter") && (!params.getString("filter").isEmpty())) {
          urlBuilder.addQueryParameter("filter", escapeString(params.getString("filter")));
        }

        if (params.has("tags") && (!params.getString("tags").isEmpty())) {
          urlBuilder.addQueryParameter("tags[]", escapeString(String.valueOf(params.getJSONArray("tags"))));
        }

        HttpUrl url = urlBuilder
          .addPathSegments(path)
          .build();
        Request request = requestBuilder.url(url)
          .build();

        client.newCall(request).enqueue(new Callback() {

          @Override
          public void onFailure(@NonNull Call call, @NonNull IOException e) {
            String errorMessage = "Problem during request | " + String.valueOf(e.hashCode()) + ": " + e.getMessage();
            callbackContext.error(errorMessage);
          }

          @Override
          public void onResponse(@NonNull Call call, @NonNull Response response) {
            if (response.isSuccessful()) {
              try {
                JSONObject jsonObject = new JSONObject(Objects.requireNonNull(response.body()).string());
                callbackContext.success(jsonObject);
              } catch (Exception e) {
                String errorMessage = "Problem during response parsing";
                callbackContext.error(errorMessage);
              }
            } else {
              callbackContext.error("Unexpected code " + response.code() + " | message: " + response.message());
            }
          }
        });
      } catch (Exception e) {
        String errorMessage = "Problem during request building | " + e.hashCode() + ": " + e.getMessage();
        callbackContext.error(errorMessage);
      }
    });
  }

  private void coverageRegionUriVehicleJourneysId(final JSONObject params, final CallbackContext callbackContext) {
    cordova.getThreadPool().execute(() -> {
      try {
        HttpUrl.Builder urlBuilder = new HttpUrl.Builder()
          .scheme("https")
          .host("api.navitia.io")
          .addPathSegment("v1");
        Request.Builder requestBuilder = new Request.Builder()
          .header("Authorization", token);
        String path = "/coverage/{region}/{uri}/vehicle_journeys/{id}".substring(1);

        if (params.has("region") && (!params.getString("region").isEmpty())) {
          path = path.replaceAll("\\{" + "region" + "\\}", escapeString(params.getString("region")));
        }

        if (params.has("uri") && (!params.getString("uri").isEmpty())) {
          path = path.replaceAll("\\{" + "uri" + "\\}", escapeString(params.getString("uri")));
        }

        if (params.has("id") && (!params.getString("id").isEmpty())) {
          path = path.replaceAll("\\{" + "id" + "\\}", escapeString(params.getString("id")));
        }

        if (params.has("startPage") && (!params.getString("startPage").isEmpty())) {
          urlBuilder.addQueryParameter("start_page", escapeString(String.valueOf(params.getInt("startPage"))));
        }

        if (params.has("count") && (!params.getString("count").isEmpty())) {
          urlBuilder.addQueryParameter("count", escapeString(String.valueOf(params.getInt("count"))));
        }

        if (params.has("depth") && (!params.getString("depth").isEmpty())) {
          urlBuilder.addQueryParameter("depth", escapeString(String.valueOf(params.getInt("depth"))));
        }

        if (params.has("forbiddenId") && (!params.getString("forbiddenId").isEmpty())) {
          urlBuilder.addQueryParameter("forbidden_id[]", escapeString(String.valueOf(params.getJSONArray("forbiddenId"))));
        }

        if (params.has("forbiddenUris") && (!params.getString("forbiddenUris").isEmpty())) {
          urlBuilder.addQueryParameter("forbidden_uris[]", escapeString(String.valueOf(params.getJSONArray("forbiddenUris"))));
        }

        if (params.has("externalCode") && (!params.getString("externalCode").isEmpty())) {
          urlBuilder.addQueryParameter("external_code", escapeString(params.getString("externalCode")));
        }

        if (params.has("headsign") && (!params.getString("headsign").isEmpty())) {
          urlBuilder.addQueryParameter("headsign", escapeString(params.getString("headsign")));
        }

        if (params.has("showCodes") && (!params.getString("showCodes").isEmpty())) {
          urlBuilder.addQueryParameter("show_codes", escapeString(String.valueOf(params.getBoolean("showCodes"))));
        }

        if (params.has("odtLevel") && (!params.getString("odtLevel").isEmpty())) {
          urlBuilder.addQueryParameter("odt_level", escapeString(params.getString("odtLevel")));
        }

        if (params.has("dataFreshness") && (!params.getString("dataFreshness").isEmpty())) {
          urlBuilder.addQueryParameter("data_freshness", escapeString(params.getString("dataFreshness")));
        }

        if (params.has("distance") && (!params.getString("distance").isEmpty())) {
          urlBuilder.addQueryParameter("distance", escapeString(String.valueOf(params.getInt("distance"))));
        }

        if (params.has("since") && (!params.getString("since").isEmpty())) {
          urlBuilder.addQueryParameter("since", escapeString(String.valueOf(params.getString("since"))));
        }

        if (params.has("until") && (!params.getString("until").isEmpty())) {
          urlBuilder.addQueryParameter("until", escapeString(String.valueOf(params.getString("until"))));
        }

        if (params.has("disableGeojson") && (!params.getString("disableGeojson").isEmpty())) {
          urlBuilder.addQueryParameter("disable_geojson", escapeString(String.valueOf(params.getBoolean("disableGeojson"))));
        }

        if (params.has("disableDisruption") && (!params.getString("disableDisruption").isEmpty())) {
          urlBuilder.addQueryParameter("disable_disruption", escapeString(String.valueOf(params.getBoolean("disableDisruption"))));
        }

        if (params.has("tags") && (!params.getString("tags").isEmpty())) {
          urlBuilder.addQueryParameter("tags[]", escapeString(String.valueOf(params.getJSONArray("tags"))));
        }

        HttpUrl url = urlBuilder
          .addPathSegments(path)
          .build();
        Request request = requestBuilder.url(url)
          .build();

        client.newCall(request).enqueue(new Callback() {

          @Override
          public void onFailure(@NonNull Call call, @NonNull IOException e) {
            String errorMessage = "Problem during request | " + String.valueOf(e.hashCode()) + ": " + e.getMessage();
            callbackContext.error(errorMessage);
          }

          @Override
          public void onResponse(@NonNull Call call, @NonNull Response response) {
            if (response.isSuccessful()) {
              try {
                JSONObject jsonObject = new JSONObject(Objects.requireNonNull(response.body()).string());
                callbackContext.success(jsonObject);
              } catch (Exception e) {
                String errorMessage = "Problem during response parsing";
                callbackContext.error(errorMessage);
              }
            } else {
              callbackContext.error("Unexpected code " + response.code() + " | message: " + response.message());
            }
          }
        });
      } catch (Exception e) {
        String errorMessage = "Problem during request building | " + e.hashCode() + ": " + e.getMessage();
        callbackContext.error(errorMessage);
      }
    });
  }

  private void coverageRegionVehicleJourneys(final JSONObject params, final CallbackContext callbackContext) {
    cordova.getThreadPool().execute(() -> {
      try {
        HttpUrl.Builder urlBuilder = new HttpUrl.Builder()
          .scheme("https")
          .host("api.navitia.io")
          .addPathSegment("v1");
        Request.Builder requestBuilder = new Request.Builder()
          .header("Authorization", token);
        String path = "/coverage/{region}/vehicle_journeys".substring(1);

        if (params.has("region") && (!params.getString("region").isEmpty())) {
          path = path.replaceAll("\\{" + "region" + "\\}", escapeString(params.getString("region")));
        }

        if (params.has("startPage") && (!params.getString("startPage").isEmpty())) {
          urlBuilder.addQueryParameter("start_page", escapeString(String.valueOf(params.getInt("startPage"))));
        }

        if (params.has("count") && (!params.getString("count").isEmpty())) {
          urlBuilder.addQueryParameter("count", escapeString(String.valueOf(params.getInt("count"))));
        }

        if (params.has("depth") && (!params.getString("depth").isEmpty())) {
          urlBuilder.addQueryParameter("depth", escapeString(String.valueOf(params.getInt("depth"))));
        }

        if (params.has("forbiddenId") && (!params.getString("forbiddenId").isEmpty())) {
          urlBuilder.addQueryParameter("forbidden_id[]", escapeString(String.valueOf(params.getJSONArray("forbiddenId"))));
        }

        if (params.has("forbiddenUris") && (!params.getString("forbiddenUris").isEmpty())) {
          urlBuilder.addQueryParameter("forbidden_uris[]", escapeString(String.valueOf(params.getJSONArray("forbiddenUris"))));
        }

        if (params.has("externalCode") && (!params.getString("externalCode").isEmpty())) {
          urlBuilder.addQueryParameter("external_code", escapeString(params.getString("externalCode")));
        }

        if (params.has("headsign") && (!params.getString("headsign").isEmpty())) {
          urlBuilder.addQueryParameter("headsign", escapeString(params.getString("headsign")));
        }

        if (params.has("showCodes") && (!params.getString("showCodes").isEmpty())) {
          urlBuilder.addQueryParameter("show_codes", escapeString(String.valueOf(params.getBoolean("showCodes"))));
        }

        if (params.has("odtLevel") && (!params.getString("odtLevel").isEmpty())) {
          urlBuilder.addQueryParameter("odt_level", escapeString(params.getString("odtLevel")));
        }

        if (params.has("dataFreshness") && (!params.getString("dataFreshness").isEmpty())) {
          urlBuilder.addQueryParameter("data_freshness", escapeString(params.getString("dataFreshness")));
        }

        if (params.has("distance") && (!params.getString("distance").isEmpty())) {
          urlBuilder.addQueryParameter("distance", escapeString(String.valueOf(params.getInt("distance"))));
        }

        if (params.has("since") && (!params.getString("since").isEmpty())) {
          urlBuilder.addQueryParameter("since", escapeString(String.valueOf(params.getString("since"))));
        }

        if (params.has("until") && (!params.getString("until").isEmpty())) {
          urlBuilder.addQueryParameter("until", escapeString(String.valueOf(params.getString("until"))));
        }

        if (params.has("disableGeojson") && (!params.getString("disableGeojson").isEmpty())) {
          urlBuilder.addQueryParameter("disable_geojson", escapeString(String.valueOf(params.getBoolean("disableGeojson"))));
        }

        if (params.has("disableDisruption") && (!params.getString("disableDisruption").isEmpty())) {
          urlBuilder.addQueryParameter("disable_disruption", escapeString(String.valueOf(params.getBoolean("disableDisruption"))));
        }

        if (params.has("filter") && (!params.getString("filter").isEmpty())) {
          urlBuilder.addQueryParameter("filter", escapeString(params.getString("filter")));
        }

        if (params.has("tags") && (!params.getString("tags").isEmpty())) {
          urlBuilder.addQueryParameter("tags[]", escapeString(String.valueOf(params.getJSONArray("tags"))));
        }

        HttpUrl url = urlBuilder
          .addPathSegments(path)
          .build();
        Request request = requestBuilder.url(url)
          .build();

        client.newCall(request).enqueue(new Callback() {

          @Override
          public void onFailure(@NonNull Call call, @NonNull IOException e) {
            String errorMessage = "Problem during request | " + String.valueOf(e.hashCode()) + ": " + e.getMessage();
            callbackContext.error(errorMessage);
          }

          @Override
          public void onResponse(@NonNull Call call, @NonNull Response response) {
            if (response.isSuccessful()) {
              try {
                JSONObject jsonObject = new JSONObject(Objects.requireNonNull(response.body()).string());
                callbackContext.success(jsonObject);
              } catch (Exception e) {
                String errorMessage = "Problem during response parsing";
                callbackContext.error(errorMessage);
              }
            } else {
              callbackContext.error("Unexpected code " + response.code() + " | message: " + response.message());
            }
          }
        });
      } catch (Exception e) {
        String errorMessage = "Problem during request building | " + e.hashCode() + ": " + e.getMessage();
        callbackContext.error(errorMessage);
      }
    });
  }

  private void coverageRegionVehicleJourneysId(final JSONObject params, final CallbackContext callbackContext) {
    cordova.getThreadPool().execute(() -> {
      try {
        HttpUrl.Builder urlBuilder = new HttpUrl.Builder()
          .scheme("https")
          .host("api.navitia.io")
          .addPathSegment("v1");
        Request.Builder requestBuilder = new Request.Builder()
          .header("Authorization", token);
        String path = "/coverage/{region}/vehicle_journeys/{id}".substring(1);

        if (params.has("region") && (!params.getString("region").isEmpty())) {
          path = path.replaceAll("\\{" + "region" + "\\}", escapeString(params.getString("region")));
        }

        if (params.has("id") && (!params.getString("id").isEmpty())) {
          path = path.replaceAll("\\{" + "id" + "\\}", escapeString(params.getString("id")));
        }

        if (params.has("startPage") && (!params.getString("startPage").isEmpty())) {
          urlBuilder.addQueryParameter("start_page", escapeString(String.valueOf(params.getInt("startPage"))));
        }

        if (params.has("count") && (!params.getString("count").isEmpty())) {
          urlBuilder.addQueryParameter("count", escapeString(String.valueOf(params.getInt("count"))));
        }

        if (params.has("depth") && (!params.getString("depth").isEmpty())) {
          urlBuilder.addQueryParameter("depth", escapeString(String.valueOf(params.getInt("depth"))));
        }

        if (params.has("forbiddenId") && (!params.getString("forbiddenId").isEmpty())) {
          urlBuilder.addQueryParameter("forbidden_id[]", escapeString(String.valueOf(params.getJSONArray("forbiddenId"))));
        }

        if (params.has("forbiddenUris") && (!params.getString("forbiddenUris").isEmpty())) {
          urlBuilder.addQueryParameter("forbidden_uris[]", escapeString(String.valueOf(params.getJSONArray("forbiddenUris"))));
        }

        if (params.has("externalCode") && (!params.getString("externalCode").isEmpty())) {
          urlBuilder.addQueryParameter("external_code", escapeString(params.getString("externalCode")));
        }

        if (params.has("headsign") && (!params.getString("headsign").isEmpty())) {
          urlBuilder.addQueryParameter("headsign", escapeString(params.getString("headsign")));
        }

        if (params.has("showCodes") && (!params.getString("showCodes").isEmpty())) {
          urlBuilder.addQueryParameter("show_codes", escapeString(String.valueOf(params.getBoolean("showCodes"))));
        }

        if (params.has("odtLevel") && (!params.getString("odtLevel").isEmpty())) {
          urlBuilder.addQueryParameter("odt_level", escapeString(params.getString("odtLevel")));
        }

        if (params.has("dataFreshness") && (!params.getString("dataFreshness").isEmpty())) {
          urlBuilder.addQueryParameter("data_freshness", escapeString(params.getString("dataFreshness")));
        }

        if (params.has("distance") && (!params.getString("distance").isEmpty())) {
          urlBuilder.addQueryParameter("distance", escapeString(String.valueOf(params.getInt("distance"))));
        }

        if (params.has("since") && (!params.getString("since").isEmpty())) {
          urlBuilder.addQueryParameter("since", escapeString(String.valueOf(params.getString("since"))));
        }

        if (params.has("until") && (!params.getString("until").isEmpty())) {
          urlBuilder.addQueryParameter("until", escapeString(String.valueOf(params.getString("until"))));
        }

        if (params.has("disableGeojson") && (!params.getString("disableGeojson").isEmpty())) {
          urlBuilder.addQueryParameter("disable_geojson", escapeString(String.valueOf(params.getBoolean("disableGeojson"))));
        }

        if (params.has("disableDisruption") && (!params.getString("disableDisruption").isEmpty())) {
          urlBuilder.addQueryParameter("disable_disruption", escapeString(String.valueOf(params.getBoolean("disableDisruption"))));
        }

        if (params.has("tags") && (!params.getString("tags").isEmpty())) {
          urlBuilder.addQueryParameter("tags[]", escapeString(String.valueOf(params.getJSONArray("tags"))));
        }

        HttpUrl url = urlBuilder
          .addPathSegments(path)
          .build();
        Request request = requestBuilder.url(url)
          .build();

        client.newCall(request).enqueue(new Callback() {

          @Override
          public void onFailure(@NonNull Call call, @NonNull IOException e) {
            String errorMessage = "Problem during request | " + String.valueOf(e.hashCode()) + ": " + e.getMessage();
            callbackContext.error(errorMessage);
          }

          @Override
          public void onResponse(@NonNull Call call, @NonNull Response response) {
            if (response.isSuccessful()) {
              try {
                JSONObject jsonObject = new JSONObject(Objects.requireNonNull(response.body()).string());
                callbackContext.success(jsonObject);
              } catch (Exception e) {
                String errorMessage = "Problem during response parsing";
                callbackContext.error(errorMessage);
              }
            } else {
              callbackContext.error("Unexpected code " + response.code() + " | message: " + response.message());
            }
          }
        });
      } catch (Exception e) {
        String errorMessage = "Problem during request building | " + e.hashCode() + ": " + e.getMessage();
        callbackContext.error(errorMessage);
      }
    });
  }

  private void vehicleJourneys(final JSONObject params, final CallbackContext callbackContext) {
    cordova.getThreadPool().execute(() -> {
      try {
        HttpUrl.Builder urlBuilder = new HttpUrl.Builder()
          .scheme("https")
          .host("api.navitia.io")
          .addPathSegment("v1");
        Request.Builder requestBuilder = new Request.Builder()
          .header("Authorization", token);
        String path = "/vehicle_journeys".substring(1);

        if (params.has("externalCode") && (!params.getString("externalCode").isEmpty())) {
          urlBuilder.addQueryParameter("external_code", escapeString(params.getString("externalCode")));
        }

        if (params.has("startPage") && (!params.getString("startPage").isEmpty())) {
          urlBuilder.addQueryParameter("start_page", escapeString(String.valueOf(params.getInt("startPage"))));
        }

        if (params.has("count") && (!params.getString("count").isEmpty())) {
          urlBuilder.addQueryParameter("count", escapeString(String.valueOf(params.getInt("count"))));
        }

        if (params.has("depth") && (!params.getString("depth").isEmpty())) {
          urlBuilder.addQueryParameter("depth", escapeString(String.valueOf(params.getInt("depth"))));
        }

        if (params.has("forbiddenId") && (!params.getString("forbiddenId").isEmpty())) {
          urlBuilder.addQueryParameter("forbidden_id[]", escapeString(String.valueOf(params.getJSONArray("forbiddenId"))));
        }

        if (params.has("forbiddenUris") && (!params.getString("forbiddenUris").isEmpty())) {
          urlBuilder.addQueryParameter("forbidden_uris[]", escapeString(String.valueOf(params.getJSONArray("forbiddenUris"))));
        }

        if (params.has("headsign") && (!params.getString("headsign").isEmpty())) {
          urlBuilder.addQueryParameter("headsign", escapeString(params.getString("headsign")));
        }

        if (params.has("showCodes") && (!params.getString("showCodes").isEmpty())) {
          urlBuilder.addQueryParameter("show_codes", escapeString(String.valueOf(params.getBoolean("showCodes"))));
        }

        if (params.has("odtLevel") && (!params.getString("odtLevel").isEmpty())) {
          urlBuilder.addQueryParameter("odt_level", escapeString(params.getString("odtLevel")));
        }

        if (params.has("dataFreshness") && (!params.getString("dataFreshness").isEmpty())) {
          urlBuilder.addQueryParameter("data_freshness", escapeString(params.getString("dataFreshness")));
        }

        if (params.has("distance") && (!params.getString("distance").isEmpty())) {
          urlBuilder.addQueryParameter("distance", escapeString(String.valueOf(params.getInt("distance"))));
        }

        if (params.has("since") && (!params.getString("since").isEmpty())) {
          urlBuilder.addQueryParameter("since", escapeString(String.valueOf(params.getString("since"))));
        }

        if (params.has("until") && (!params.getString("until").isEmpty())) {
          urlBuilder.addQueryParameter("until", escapeString(String.valueOf(params.getString("until"))));
        }

        if (params.has("disableGeojson") && (!params.getString("disableGeojson").isEmpty())) {
          urlBuilder.addQueryParameter("disable_geojson", escapeString(String.valueOf(params.getBoolean("disableGeojson"))));
        }

        if (params.has("disableDisruption") && (!params.getString("disableDisruption").isEmpty())) {
          urlBuilder.addQueryParameter("disable_disruption", escapeString(String.valueOf(params.getBoolean("disableDisruption"))));
        }

        if (params.has("filter") && (!params.getString("filter").isEmpty())) {
          urlBuilder.addQueryParameter("filter", escapeString(params.getString("filter")));
        }

        if (params.has("tags") && (!params.getString("tags").isEmpty())) {
          urlBuilder.addQueryParameter("tags[]", escapeString(String.valueOf(params.getJSONArray("tags"))));
        }

        HttpUrl url = urlBuilder
          .addPathSegments(path)
          .build();
        Request request = requestBuilder.url(url)
          .build();

        client.newCall(request).enqueue(new Callback() {

          @Override
          public void onFailure(@NonNull Call call, @NonNull IOException e) {
            String errorMessage = "Problem during request | " + String.valueOf(e.hashCode()) + ": " + e.getMessage();
            callbackContext.error(errorMessage);
          }

          @Override
          public void onResponse(@NonNull Call call, @NonNull Response response) {
            if (response.isSuccessful()) {
              try {
                JSONObject jsonObject = new JSONObject(Objects.requireNonNull(response.body()).string());
                callbackContext.success(jsonObject);
              } catch (Exception e) {
                String errorMessage = "Problem during response parsing";
                callbackContext.error(errorMessage);
              }
            } else {
              callbackContext.error("Unexpected code " + response.code() + " | message: " + response.message());
            }
          }
        });
      } catch (Exception e) {
        String errorMessage = "Problem during request building | " + e.hashCode() + ": " + e.getMessage();
        callbackContext.error(errorMessage);
      }
    });
  }

}
